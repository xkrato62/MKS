
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e134  08019ecc  08019ecc  00029ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028000  08028000  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08028000  08028000  00038000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028008  08028008  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028008  08028008  00038008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802800c  0802800c  0003800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08028010  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000113f0  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011480  20011480  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000344a7  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000083dc  00000000  00000000  000745aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002518  00000000  00000000  0007c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d5d  00000000  00000000  0007eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037469  00000000  00000000  00080bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003cc6f  00000000  00000000  000b8066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001020d3  00000000  00000000  000f4cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a378  00000000  00000000  001f6da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00201120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019eb4 	.word	0x08019eb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08019eb4 	.word	0x08019eb4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ffe9 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81d 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8af 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f883 	bl	800070c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x40>)
 8000608:	1d3c      	adds	r4, r7, #4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fce9 	bl	8004ff4 <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <main+0x44>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f004 fccd 	bl	8004fc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x3c>
 800062e:	bf00      	nop
 8000630:	08019ed8 	.word	0x08019ed8
 8000634:	20000390 	.word	0x20000390

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f018 fb0f 	bl	8018c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fcfb 	bl	80030b8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f93a 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 ff5c 	bl	80035a8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f923 	bl	8000940 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f003 fc30 	bl	8003fa8 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f8f7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000034c 	.word	0x2000034c
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a5a      	ldr	r2, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a53      	ldr	r2, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x188>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4c      	ldr	r2, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x188>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <MX_GPIO_Init+0x18c>)
 8000826:	f002 fc2d 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000830:	f002 fc28 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x194>)
 800084c:	f002 fa56 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x18c>)
 800086a:	f002 fa47 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000886:	f002 fa39 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x190>)
 800089e:	f002 fa2d 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b4:	230a      	movs	r3, #10
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008c0:	f002 fa1c 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008da:	f002 fa0f 	bl	8002cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000904:	f003 fe12 	bl	800452c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 8000908:	f000 fa76 	bl	8000df8 <tcpecho_init>
  /* Initialize HTTP server */
  httpd_init();
 800090c:	f00a fdb6 	bl	800b47c <httpd_init>
  telnet_init();
 8000910:	f000 fcbe 	bl	8001290 <telnet_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f004 fbb9 	bl	800508c <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartDefaultTask+0x18>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fe6f 	bl	8001610 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40002000 	.word	0x40002000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 ff39 	bl	8001808 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1c:	f002 f96e 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 ffbc 	bl	80039e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7a:	f002 ff8d 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a80:	e004      	b.n	8000a8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a82:	f002 ff89 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8000a86:	4603      	mov	r3, r0
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_InitTick+0xe8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9b      	lsrs	r3, r3, #18
 8000a96:	3b01      	subs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_InitTick+0xec>)
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_InitTick+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xec>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_InitTick+0xec>)
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_InitTick+0xec>)
 8000ac2:	f002 ffc3 	bl	8003a4c <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11b      	bne.n	8000b0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_InitTick+0xec>)
 8000ad6:	f003 f813 	bl	8003b00 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d111      	bne.n	8000b0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae8:	202d      	movs	r0, #45	; 0x2d
 8000aea:	f000 fea9 	bl	8001840 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d808      	bhi.n	8000b06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	202d      	movs	r0, #45	; 0x2d
 8000afa:	f000 fe85 	bl	8001808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0xf4>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e002      	b.n	8000b0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	20000394 	.word	0x20000394
 8000b24:	40002000 	.word	0x40002000
 8000b28:	20000004 	.word	0x20000004

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b5e:	f003 f83f 	bl	8003be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000394 	.word	0x20000394

08000b6c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <ETH_IRQHandler+0x10>)
 8000b72:	f001 f9ed 	bl	8001f50 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20005340 	.word	0x20005340

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_kill>:

int _kill(int pid, int sig)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <_kill+0x20>)
 8000b9c:	2216      	movs	r2, #22
 8000b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20011470 	.word	0x20011470

08000bb4 <_exit>:

void _exit (int status)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffe5 	bl	8000b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc6:	e7fe      	b.n	8000bc6 <_exit+0x12>

08000bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d205      	bcs.n	8000ce0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <_sbrk+0x6c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20030000 	.word	0x20030000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200003dc 	.word	0x200003dc
 8000d0c:	20011480 	.word	0x20011480
 8000d10:	20011470 	.word	0x20011470

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2010      	movs	r0, #16
 8000d46:	f007 f927 	bl	8007f98 <netconn_new_with_proto_and_callback>
 8000d4a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d04e      	beq.n	8000df0 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d52:	2207      	movs	r2, #7
 8000d54:	2100      	movs	r1, #0
 8000d56:	69f8      	ldr	r0, [r7, #28]
 8000d58:	f007 f9d8 	bl	800810c <netconn_bind>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d13f      	bne.n	8000de8 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d68:	21ff      	movs	r1, #255	; 0xff
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f007 fa3e 	bl	80081ec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	69f8      	ldr	r0, [r7, #28]
 8000d78:	f007 fa64 	bl	8008244 <netconn_accept>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f3      	bne.n	8000d70 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d88:	e01b      	b.n	8000dc2 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	f107 020a 	add.w	r2, r7, #10
 8000d90:	f107 010c 	add.w	r1, r7, #12
 8000d94:	4618      	mov	r0, r3
 8000d96:	f009 fb45 	bl	800a424 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	68f9      	ldr	r1, [r7, #12]
 8000d9e:	897b      	ldrh	r3, [r7, #10]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	f007 fcce 	bl	8008748 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f009 fb82 	bl	800a4b8 <netbuf_next>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dae7      	bge.n	8000d8a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f009 fb11 	bl	800a3e4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f007 fc42 	bl	8008654 <netconn_recv>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0d9      	beq.n	8000d8a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 fdb7 	bl	800894c <netconn_close>
          netconn_delete(newconn);
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 f977 	bl	80080d4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000de6:	e7c3      	b.n	8000d70 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f972 	bl	80080d4 <netconn_delete>
    }
  }
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000dfe:	2304      	movs	r3, #4
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	2200      	movs	r2, #0
 8000e08:	4903      	ldr	r1, [pc, #12]	; (8000e18 <tcpecho_init+0x20>)
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <tcpecho_init+0x24>)
 8000e0c:	f017 fd5c 	bl	80188c8 <sys_thread_new>
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08000d39 	.word	0x08000d39
 8000e1c:	08019ef4 	.word	0x08019ef4

08000e20 <http_client>:
#define telnet_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 64


static void http_client(char *s, uint16_t size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 struct netconn *client;
 struct netbuf *buf;
 ip_addr_t ip;
 uint16_t len = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	83fb      	strh	r3, [r7, #30]
 IP_ADDR4(&ip, 147,229,144,124);
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <http_client+0xbc>)
 8000e32:	60fb      	str	r3, [r7, #12]
 const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <http_client+0xc0>)
 8000e36:	61bb      	str	r3, [r7, #24]
 "Host: www.urel.feec.vutbr.cz\r\n"
 "Connection: close\r\n"
 "\r\n\r\n";
 client = netconn_new(NETCONN_TCP);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f007 f8ab 	bl	8007f98 <netconn_new_with_proto_and_callback>
 8000e42:	6178      	str	r0, [r7, #20]
 if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2250      	movs	r2, #80	; 0x50
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f007 f995 	bl	800817c <netconn_connect>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d136      	bne.n	8000ec6 <http_client+0xa6>
 netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000e58:	69b8      	ldr	r0, [r7, #24]
 8000e5a:	f7ff f9d3 	bl	8000204 <strlen>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	2300      	movs	r3, #0
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f007 fc6d 	bl	8008748 <netconn_write_partly>
 // Receive the HTTP response
 s[0] = 0;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000e74:	e019      	b.n	8000eaa <http_client+0x8a>
 len += netbuf_copy(buf, &s[len], size-len);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	8bfb      	ldrh	r3, [r7, #30]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	18d1      	adds	r1, r2, r3
 8000e80:	887a      	ldrh	r2, [r7, #2]
 8000e82:	8bfb      	ldrh	r3, [r7, #30]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f00c f951 	bl	800d130 <pbuf_copy_partial>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	8bfb      	ldrh	r3, [r7, #30]
 8000e94:	4413      	add	r3, r2
 8000e96:	83fb      	strh	r3, [r7, #30]
 s[len] = 0;
 8000e98:	8bfb      	ldrh	r3, [r7, #30]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
 netbuf_delete(buf);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 fa9d 	bl	800a3e4 <netbuf_delete>
 while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000eaa:	8bfa      	ldrh	r2, [r7, #30]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d20d      	bcs.n	8000ece <http_client+0xae>
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f007 fbcb 	bl	8008654 <netconn_recv>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0d8      	beq.n	8000e76 <http_client+0x56>
 8000ec4:	e003      	b.n	8000ece <http_client+0xae>
 }
 } else {
 sprintf(s, "Chyba pripojeni\n");
 8000ec6:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <http_client+0xc4>)
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f017 fe41 	bl	8018b50 <siprintf>
 }
 netconn_delete(client);
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f007 f900 	bl	80080d4 <netconn_delete>
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	7c90e593 	.word	0x7c90e593
 8000ee0:	08019f04 	.word	0x08019f04
 8000ee4:	08019f50 	.word	0x08019f50

08000ee8 <telnet_process_command>:




static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	char* token;
	static char text [1024];
		token = strtok(cmd, " ");
 8000ef2:	4988      	ldr	r1, [pc, #544]	; (8001114 <telnet_process_command+0x22c>)
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f017 fefb 	bl	8018cf0 <strtok>
 8000efa:	60f8      	str	r0, [r7, #12]

		if (strcasecmp(token, "CLIENT") == 0) {
 8000efc:	4986      	ldr	r1, [pc, #536]	; (8001118 <telnet_process_command+0x230>)
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f017 febc 	bl	8018c7c <strcasecmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <telnet_process_command+0x42>

				http_client(text,sizeof(text));
 8000f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0e:	4883      	ldr	r0, [pc, #524]	; (800111c <telnet_process_command+0x234>)
 8000f10:	f7ff ff86 	bl	8000e20 <http_client>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 8000f14:	4881      	ldr	r0, [pc, #516]	; (800111c <telnet_process_command+0x234>)
 8000f16:	f7ff f975 	bl	8000204 <strlen>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	497e      	ldr	r1, [pc, #504]	; (800111c <telnet_process_command+0x234>)
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f007 fc0f 	bl	8008748 <netconn_write_partly>
			}


		if (strcasecmp(token, "LED1") == 0) {
 8000f2a:	497d      	ldr	r1, [pc, #500]	; (8001120 <telnet_process_command+0x238>)
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f017 fea5 	bl	8018c7c <strcasecmp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11f      	bne.n	8000f78 <telnet_process_command+0x90>
			token = strtok(NULL, " ");
 8000f38:	4976      	ldr	r1, [pc, #472]	; (8001114 <telnet_process_command+0x22c>)
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f017 fed8 	bl	8018cf0 <strtok>
 8000f40:	60f8      	str	r0, [r7, #12]
			if (strcasecmp(token, "ON") == 0)
 8000f42:	4978      	ldr	r1, [pc, #480]	; (8001124 <telnet_process_command+0x23c>)
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f017 fe99 	bl	8018c7c <strcasecmp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <telnet_process_command+0x74>
			{
				HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2101      	movs	r1, #1
 8000f54:	4874      	ldr	r0, [pc, #464]	; (8001128 <telnet_process_command+0x240>)
 8000f56:	f002 f895 	bl	8003084 <HAL_GPIO_WritePin>
				sprintf(text,"LED3 OFF\r\n");
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
			}

		}
}
 8000f5a:	e0d7      	b.n	800110c <telnet_process_command+0x224>
			else if (strcasecmp(token, "OFF")==0)
 8000f5c:	4973      	ldr	r1, [pc, #460]	; (800112c <telnet_process_command+0x244>)
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f017 fe8c 	bl	8018c7c <strcasecmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 80d0 	bne.w	800110c <telnet_process_command+0x224>
				HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	486d      	ldr	r0, [pc, #436]	; (8001128 <telnet_process_command+0x240>)
 8000f72:	f002 f887 	bl	8003084 <HAL_GPIO_WritePin>
}
 8000f76:	e0c9      	b.n	800110c <telnet_process_command+0x224>
		else if (strcasecmp(token, "LED2") == 0) {
 8000f78:	496d      	ldr	r1, [pc, #436]	; (8001130 <telnet_process_command+0x248>)
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f017 fe7e 	bl	8018c7c <strcasecmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d11f      	bne.n	8000fc6 <telnet_process_command+0xde>
			token = strtok(NULL, " ");
 8000f86:	4963      	ldr	r1, [pc, #396]	; (8001114 <telnet_process_command+0x22c>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f017 feb1 	bl	8018cf0 <strtok>
 8000f8e:	60f8      	str	r0, [r7, #12]
			if (strcasecmp(token, "ON") == 0)
 8000f90:	4964      	ldr	r1, [pc, #400]	; (8001124 <telnet_process_command+0x23c>)
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f017 fe72 	bl	8018c7c <strcasecmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <telnet_process_command+0xc2>
				HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	4861      	ldr	r0, [pc, #388]	; (8001128 <telnet_process_command+0x240>)
 8000fa4:	f002 f86e 	bl	8003084 <HAL_GPIO_WritePin>
}
 8000fa8:	e0b0      	b.n	800110c <telnet_process_command+0x224>
			else if (strcasecmp(token, "OFF")==0)
 8000faa:	4960      	ldr	r1, [pc, #384]	; (800112c <telnet_process_command+0x244>)
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f017 fe65 	bl	8018c7c <strcasecmp>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 80a9 	bne.w	800110c <telnet_process_command+0x224>
				HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	485a      	ldr	r0, [pc, #360]	; (8001128 <telnet_process_command+0x240>)
 8000fc0:	f002 f860 	bl	8003084 <HAL_GPIO_WritePin>
}
 8000fc4:	e0a2      	b.n	800110c <telnet_process_command+0x224>
		else if (strcasecmp(token, "LED3") == 0) {
 8000fc6:	495b      	ldr	r1, [pc, #364]	; (8001134 <telnet_process_command+0x24c>)
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f017 fe57 	bl	8018c7c <strcasecmp>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d121      	bne.n	8001018 <telnet_process_command+0x130>
					token = strtok(NULL, " ");
 8000fd4:	494f      	ldr	r1, [pc, #316]	; (8001114 <telnet_process_command+0x22c>)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f017 fe8a 	bl	8018cf0 <strtok>
 8000fdc:	60f8      	str	r0, [r7, #12]
					if (strcasecmp(token, "ON") == 0)
 8000fde:	4951      	ldr	r1, [pc, #324]	; (8001124 <telnet_process_command+0x23c>)
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f017 fe4b 	bl	8018c7c <strcasecmp>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d106      	bne.n	8000ffa <telnet_process_command+0x112>
						HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff2:	484d      	ldr	r0, [pc, #308]	; (8001128 <telnet_process_command+0x240>)
 8000ff4:	f002 f846 	bl	8003084 <HAL_GPIO_WritePin>
}
 8000ff8:	e088      	b.n	800110c <telnet_process_command+0x224>
					else if (strcasecmp(token, "OFF")==0)
 8000ffa:	494c      	ldr	r1, [pc, #304]	; (800112c <telnet_process_command+0x244>)
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f017 fe3d 	bl	8018c7c <strcasecmp>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 8081 	bne.w	800110c <telnet_process_command+0x224>
						HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001010:	4845      	ldr	r0, [pc, #276]	; (8001128 <telnet_process_command+0x240>)
 8001012:	f002 f837 	bl	8003084 <HAL_GPIO_WritePin>
}
 8001016:	e079      	b.n	800110c <telnet_process_command+0x224>
		else if (strcasecmp(token, "STATUS") == 0) {
 8001018:	4947      	ldr	r1, [pc, #284]	; (8001138 <telnet_process_command+0x250>)
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f017 fe2e 	bl	8018c7c <strcasecmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d172      	bne.n	800110c <telnet_process_command+0x224>
			if (HAL_GPIO_ReadPin(LD1_GPIO_Port,LD1_Pin))
 8001026:	2101      	movs	r1, #1
 8001028:	483f      	ldr	r0, [pc, #252]	; (8001128 <telnet_process_command+0x240>)
 800102a:	f002 f813 	bl	8003054 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00f      	beq.n	8001054 <telnet_process_command+0x16c>
				sprintf(text,"LED1 ON\n");
 8001034:	4941      	ldr	r1, [pc, #260]	; (800113c <telnet_process_command+0x254>)
 8001036:	4839      	ldr	r0, [pc, #228]	; (800111c <telnet_process_command+0x234>)
 8001038:	f017 fd8a 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <telnet_process_command+0x234>)
 800103e:	f7ff f8e1 	bl	8000204 <strlen>
 8001042:	4602      	mov	r2, r0
 8001044:	2300      	movs	r3, #0
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	4934      	ldr	r1, [pc, #208]	; (800111c <telnet_process_command+0x234>)
 800104c:	6838      	ldr	r0, [r7, #0]
 800104e:	f007 fb7b 	bl	8008748 <netconn_write_partly>
 8001052:	e00e      	b.n	8001072 <telnet_process_command+0x18a>
				sprintf(text,"LED1 OFF\n");
 8001054:	493a      	ldr	r1, [pc, #232]	; (8001140 <telnet_process_command+0x258>)
 8001056:	4831      	ldr	r0, [pc, #196]	; (800111c <telnet_process_command+0x234>)
 8001058:	f017 fd7a 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 800105c:	482f      	ldr	r0, [pc, #188]	; (800111c <telnet_process_command+0x234>)
 800105e:	f7ff f8d1 	bl	8000204 <strlen>
 8001062:	4602      	mov	r2, r0
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	492c      	ldr	r1, [pc, #176]	; (800111c <telnet_process_command+0x234>)
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f007 fb6b 	bl	8008748 <netconn_write_partly>
			if (HAL_GPIO_ReadPin(LD2_GPIO_Port,LD2_Pin))
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	482c      	ldr	r0, [pc, #176]	; (8001128 <telnet_process_command+0x240>)
 8001076:	f001 ffed 	bl	8003054 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00f      	beq.n	80010a0 <telnet_process_command+0x1b8>
				sprintf(text,"LED2 ON\r\n");
 8001080:	4930      	ldr	r1, [pc, #192]	; (8001144 <telnet_process_command+0x25c>)
 8001082:	4826      	ldr	r0, [pc, #152]	; (800111c <telnet_process_command+0x234>)
 8001084:	f017 fd64 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 8001088:	4824      	ldr	r0, [pc, #144]	; (800111c <telnet_process_command+0x234>)
 800108a:	f7ff f8bb 	bl	8000204 <strlen>
 800108e:	4602      	mov	r2, r0
 8001090:	2300      	movs	r3, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4921      	ldr	r1, [pc, #132]	; (800111c <telnet_process_command+0x234>)
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f007 fb55 	bl	8008748 <netconn_write_partly>
 800109e:	e00e      	b.n	80010be <telnet_process_command+0x1d6>
				sprintf(text,"LED2 OFF\r\n");
 80010a0:	4929      	ldr	r1, [pc, #164]	; (8001148 <telnet_process_command+0x260>)
 80010a2:	481e      	ldr	r0, [pc, #120]	; (800111c <telnet_process_command+0x234>)
 80010a4:	f017 fd54 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <telnet_process_command+0x234>)
 80010aa:	f7ff f8ab 	bl	8000204 <strlen>
 80010ae:	4602      	mov	r2, r0
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	4919      	ldr	r1, [pc, #100]	; (800111c <telnet_process_command+0x234>)
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f007 fb45 	bl	8008748 <netconn_write_partly>
			if (HAL_GPIO_ReadPin(LD3_GPIO_Port,LD3_Pin))
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <telnet_process_command+0x240>)
 80010c4:	f001 ffc6 	bl	8003054 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00f      	beq.n	80010ee <telnet_process_command+0x206>
				sprintf(text,"LED3 ON\r\n");
 80010ce:	491f      	ldr	r1, [pc, #124]	; (800114c <telnet_process_command+0x264>)
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <telnet_process_command+0x234>)
 80010d2:	f017 fd3d 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <telnet_process_command+0x234>)
 80010d8:	f7ff f894 	bl	8000204 <strlen>
 80010dc:	4602      	mov	r2, r0
 80010de:	2300      	movs	r3, #0
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <telnet_process_command+0x234>)
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f007 fb2e 	bl	8008748 <netconn_write_partly>
}
 80010ec:	e00e      	b.n	800110c <telnet_process_command+0x224>
				sprintf(text,"LED3 OFF\r\n");
 80010ee:	4918      	ldr	r1, [pc, #96]	; (8001150 <telnet_process_command+0x268>)
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <telnet_process_command+0x234>)
 80010f2:	f017 fd2d 	bl	8018b50 <siprintf>
				netconn_write(conn, text, strlen(text), NETCONN_COPY);
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <telnet_process_command+0x234>)
 80010f8:	f7ff f884 	bl	8000204 <strlen>
 80010fc:	4602      	mov	r2, r0
 80010fe:	2300      	movs	r3, #0
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	4905      	ldr	r1, [pc, #20]	; (800111c <telnet_process_command+0x234>)
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f007 fb1e 	bl	8008748 <netconn_write_partly>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	08019f64 	.word	0x08019f64
 8001118:	08019f68 	.word	0x08019f68
 800111c:	200003e0 	.word	0x200003e0
 8001120:	08019f70 	.word	0x08019f70
 8001124:	08019f78 	.word	0x08019f78
 8001128:	40020400 	.word	0x40020400
 800112c:	08019f7c 	.word	0x08019f7c
 8001130:	08019f80 	.word	0x08019f80
 8001134:	08019f88 	.word	0x08019f88
 8001138:	08019f90 	.word	0x08019f90
 800113c:	08019f98 	.word	0x08019f98
 8001140:	08019fa4 	.word	0x08019fa4
 8001144:	08019fb0 	.word	0x08019fb0
 8001148:	08019fbc 	.word	0x08019fbc
 800114c:	08019fc8 	.word	0x08019fc8
 8001150:	08019fd4 	.word	0x08019fd4

08001154 <telnet_byte_available>:


static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];
 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <telnet_byte_available+0x64>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	2b3f      	cmp	r3, #63	; 0x3f
 8001166:	d810      	bhi.n	800118a <telnet_byte_available+0x36>
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b1f      	cmp	r3, #31
 800116c:	d90d      	bls.n	800118a <telnet_byte_available+0x36>
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db09      	blt.n	800118a <telnet_byte_available+0x36>
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <telnet_byte_available+0x64>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	b291      	uxth	r1, r2
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <telnet_byte_available+0x64>)
 8001180:	8011      	strh	r1, [r2, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <telnet_byte_available+0x68>)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	5453      	strb	r3, [r2, r1]
 if (c == '\n' || c == '\r') {
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b0a      	cmp	r3, #10
 800118e:	d002      	beq.n	8001196 <telnet_byte_available+0x42>
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b0d      	cmp	r3, #13
 8001194:	d10c      	bne.n	80011b0 <telnet_byte_available+0x5c>
 data[cnt] = '\0';
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <telnet_byte_available+0x64>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <telnet_byte_available+0x68>)
 800119e:	2100      	movs	r1, #0
 80011a0:	5499      	strb	r1, [r3, r2]
 telnet_process_command(data, conn);
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <telnet_byte_available+0x68>)
 80011a6:	f7ff fe9f 	bl	8000ee8 <telnet_process_command>
 cnt = 0;
 80011aa:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <telnet_byte_available+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	801a      	strh	r2, [r3, #0]
 }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200007e0 	.word	0x200007e0
 80011bc:	200007e4 	.word	0x200007e4

080011c0 <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2010      	movs	r0, #16
 80011ce:	f006 fee3 	bl	8007f98 <netconn_new_with_proto_and_callback>
 80011d2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d055      	beq.n	8001286 <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 80011da:	2217      	movs	r2, #23
 80011dc:	2100      	movs	r1, #0
 80011de:	69f8      	ldr	r0, [r7, #28]
 80011e0:	f006 ff94 	bl	800810c <netconn_bind>
 80011e4:	4603      	mov	r3, r0
 80011e6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 80011e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d146      	bne.n	800127e <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80011f0:	21ff      	movs	r1, #255	; 0xff
 80011f2:	69f8      	ldr	r0, [r7, #28]
 80011f4:	f006 fffa 	bl	80081ec <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	69f8      	ldr	r0, [r7, #28]
 8001200:	f007 f820 	bl	8008244 <netconn_accept>
 8001204:	4603      	mov	r3, r0
 8001206:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001208:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f3      	bne.n	80011f8 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001210:	e022      	b.n	8001258 <telnet_thread+0x98>
        	  do
        	  {
        		  /*  netbuf_data(buf, &data, &len);
              netconn_write(newconn, data, len, NETCONN_COPY);
        		   */
        		  netbuf_data(buf, (void**)&data, &len);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f107 020a 	add.w	r2, r7, #10
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	4618      	mov	r0, r3
 800121e:	f009 f901 	bl	800a424 <netbuf_data>
        		  while (len--) telnet_byte_available(*data++, newconn);
 8001222:	e008      	b.n	8001236 <telnet_thread+0x76>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60fa      	str	r2, [r7, #12]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff8f 	bl	8001154 <telnet_byte_available>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	b292      	uxth	r2, r2
 800123c:	817a      	strh	r2, [r7, #10]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <telnet_thread+0x64>
        	  }
        	  while (netbuf_next(buf) >= 0);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4618      	mov	r0, r3
 8001246:	f009 f937 	bl	800a4b8 <netbuf_next>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	dae0      	bge.n	8001212 <telnet_thread+0x52>

        	  netbuf_delete(buf);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4618      	mov	r0, r3
 8001254:	f009 f8c6 	bl	800a3e4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f107 0210 	add.w	r2, r7, #16
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f007 f9f7 	bl	8008654 <netconn_recv>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0d2      	beq.n	8001212 <telnet_thread+0x52>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4618      	mov	r0, r3
 8001270:	f007 fb6c 	bl	800894c <netconn_close>
          netconn_delete(newconn);
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4618      	mov	r0, r3
 8001278:	f006 ff2c 	bl	80080d4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 800127c:	e7bc      	b.n	80011f8 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4618      	mov	r0, r3
 8001282:	f006 ff27 	bl	80080d4 <netconn_delete>
    }
  }
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, telnet_THREAD_PRIO);
 8001296:	2304      	movs	r3, #4
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	2200      	movs	r2, #0
 80012a0:	4903      	ldr	r1, [pc, #12]	; (80012b0 <telnet_init+0x20>)
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <telnet_init+0x24>)
 80012a4:	f017 fb10 	bl	80188c8 <sys_thread_new>
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	080011c1 	.word	0x080011c1
 80012b4:	08019fe0 	.word	0x08019fe0

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e2:	f7ff fd17 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f017 fdfb 	bl	8018ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff f981 	bl	80005f0 <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012fc:	08028010 	.word	0x08028010
  ldr r2, =_sbss
 8001300:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001304:	20011480 	.word	0x20011480

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>

0800130a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <LAN8742_RegisterBusIO+0x28>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e014      	b.n	8001362 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d17c      	bne.n	8001488 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e01c      	b.n	80013e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f107 0208 	add.w	r2, r7, #8
 80013b0:	2112      	movs	r1, #18
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	4798      	blx	r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da03      	bge.n	80013c4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80013bc:	f06f 0304 	mvn.w	r3, #4
 80013c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80013c2:	e00b      	b.n	80013dc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d105      	bne.n	80013dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
         break;
 80013da:	e005      	b.n	80013e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d9df      	bls.n	80013a8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b1f      	cmp	r3, #31
 80013ee:	d902      	bls.n	80013f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013f0:	f06f 0302 	mvn.w	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d145      	bne.n	8001488 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001408:	2100      	movs	r1, #0
 800140a:	4798      	blx	r3
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	db37      	blt.n	8001482 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6810      	ldr	r0, [r2, #0]
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	2100      	movs	r1, #0
 8001420:	4798      	blx	r3
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	db28      	blt.n	800147a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001432:	e01c      	b.n	800146e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001446:	d80e      	bhi.n	8001466 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	2100      	movs	r1, #0
 8001456:	4798      	blx	r3
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	da07      	bge.n	800146e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800145e:	f06f 0304 	mvn.w	r3, #4
 8001462:	613b      	str	r3, [r7, #16]
                 break;
 8001464:	e010      	b.n	8001488 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001466:	f06f 0301 	mvn.w	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
               break;
 800146c:	e00c      	b.n	8001488 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1dd      	bne.n	8001434 <LAN8742_Init+0xc6>
 8001478:	e006      	b.n	8001488 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800147a:	f06f 0304 	mvn.w	r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e002      	b.n	8001488 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001482:	f06f 0303 	mvn.w	r3, #3
 8001486:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d112      	bne.n	80014b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4798      	blx	r3
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001498:	bf00      	nop
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4798      	blx	r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014ac:	d9f5      	bls.n	800149a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80014b4:	693b      	ldr	r3, [r7, #16]
 }
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6810      	ldr	r0, [r2, #0]
 80014d2:	f107 020c 	add.w	r2, r7, #12
 80014d6:	2101      	movs	r1, #1
 80014d8:	4798      	blx	r3
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da02      	bge.n	80014e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014e0:	f06f 0304 	mvn.w	r3, #4
 80014e4:	e06e      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6810      	ldr	r0, [r2, #0]
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	2101      	movs	r1, #1
 80014f4:	4798      	blx	r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da02      	bge.n	8001502 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014fc:	f06f 0304 	mvn.w	r3, #4
 8001500:	e060      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800150c:	2301      	movs	r3, #1
 800150e:	e059      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6810      	ldr	r0, [r2, #0]
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	2100      	movs	r1, #0
 800151e:	4798      	blx	r3
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	da02      	bge.n	800152c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001526:	f06f 0304 	mvn.w	r3, #4
 800152a:	e04b      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d11b      	bne.n	800156e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <LAN8742_GetLinkState+0x90>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800154a:	2302      	movs	r3, #2
 800154c:	e03a      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001558:	2303      	movs	r3, #3
 800155a:	e033      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001566:	2304      	movs	r3, #4
 8001568:	e02c      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800156a:	2305      	movs	r3, #5
 800156c:	e02a      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6810      	ldr	r0, [r2, #0]
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	211f      	movs	r1, #31
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001584:	f06f 0304 	mvn.w	r3, #4
 8001588:	e01c      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001594:	2306      	movs	r3, #6
 8001596:	e015      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 031c 	and.w	r3, r3, #28
 800159e:	2b18      	cmp	r3, #24
 80015a0:	d101      	bne.n	80015a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015a2:	2302      	movs	r3, #2
 80015a4:	e00e      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d101      	bne.n	80015b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e007      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 031c 	and.w	r3, r3, #28
 80015ba:	2b14      	cmp	r3, #20
 80015bc:	d101      	bne.n	80015c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015be:	2304      	movs	r3, #4
 80015c0:	e000      	b.n	80015c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015c2:	2305      	movs	r3, #5
    }				
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f8fc 	bl	80017f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f7ff fa1a 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff f9a4 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008
 8001634:	20000824 	.word	0x20000824

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000824 	.word	0x20000824

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ff4c 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181a:	f7ff ff61 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800181e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	6978      	ldr	r0, [r7, #20]
 8001826:	f7ff ffb1 	bl	800178c <NVIC_EncodePriority>
 800182a:	4602      	mov	r2, r0
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff80 	bl	8001738 <__NVIC_SetPriority>
}
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff54 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06c      	b.n	8001948 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2223      	movs	r2, #35	; 0x23
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f003 f951 	bl	8004b28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_ETH_Init+0xf4>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_ETH_Init+0xf4>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_ETH_Init+0xf4>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_ETH_Init+0xf8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_ETH_Init+0xf8>)
 80018a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_ETH_Init+0xf8>)
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <HAL_ETH_Init+0xf8>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_ETH_Init+0xf8>)
 80018be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d8:	f7ff feae 	bl	8001638 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018de:	e011      	b.n	8001904 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018e0:	f7ff feaa 	bl	8001638 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018ee:	d909      	bls.n	8001904 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2204      	movs	r2, #4
 80018f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	22e0      	movs	r2, #224	; 0xe0
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e021      	b.n	8001948 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e4      	bne.n	80018e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 ff4a 	bl	80027b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fff1 	bl	8002904 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f001 f847 	bl	80029b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 ffaf 	bl	8002894 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2210      	movs	r2, #16
 8001942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40013800 	.word	0x40013800

08001958 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001966:	2b10      	cmp	r3, #16
 8001968:	d17f      	bne.n	8001a6a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2223      	movs	r2, #35	; 0x23
 800196e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800199c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80019b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2204      	movs	r2, #4
 80019b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f9f8 	bl	8001db0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0208 	orr.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fe39 	bl	8001650 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0204 	orr.w	r2, r2, #4
 80019f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff fe26 	bl	8001650 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fd70 	bl	80024f2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a28:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a40:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001a54:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001a58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a5c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2223      	movs	r2, #35	; 0x23
 8001a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
  }
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a82:	2b23      	cmp	r3, #35	; 0x23
 8001a84:	d170      	bne.n	8001b68 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2223      	movs	r2, #35	; 0x23
 8001a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001aa0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001abc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f023 0302 	bic.w	r3, r3, #2
 8001ad4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ad8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fdac 	bl	8001650 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fcf6 	bl	80024f2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0208 	bic.w	r2, r2, #8
 8001b14:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fd96 	bl	8001650 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e00e      	b.n	8001b50 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	3212      	adds	r2, #18
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d9ed      	bls.n	8001b32 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2210      	movs	r2, #16
 8001b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e000      	b.n	8001b6a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
  }
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e045      	b.n	8001c22 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b9c:	2b23      	cmp	r3, #35	; 0x23
 8001b9e:	d13f      	bne.n	8001c20 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ff6f 	bl	8002a90 <ETH_Prepare_Tx_Descriptors>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	f043 0202 	orr.w	r2, r3, #2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e02a      	b.n	8001c22 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d904      	bls.n	8001bee <HAL_ETH_Transmit_IT+0x7c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	1f1a      	subs	r2, r3, #4
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	461a      	mov	r2, r3
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b088      	sub	sp, #32
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0a8      	b.n	8001da8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c5c:	2b23      	cmp	r3, #35	; 0x23
 8001c5e:	d001      	beq.n	8001c64 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0a1      	b.n	8001da8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	3212      	adds	r2, #18
 8001c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c7a:	f1c3 0304 	rsb	r3, r3, #4
 8001c7e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c80:	e06a      	b.n	8001d58 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_ETH_ReadData+0x88>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d040      	beq.n	8001d34 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00c      	beq.n	8001cf6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d0e:	461a      	mov	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f003 f8e2 	bl	8004edc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	441a      	add	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d902      	bls.n	8001d46 <HAL_ETH_ReadData+0x11c>
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3b04      	subs	r3, #4
 8001d44:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db06      	blt.n	8001d6e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d202      	bcs.n	8001d6e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d089      	beq.n	8001c82 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f814 	bl	8001db0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	3212      	adds	r2, #18
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dd6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001dd8:	e040      	b.n	8001e5c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d112      	bne.n	8001e08 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f848 	bl	8004e7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	74fb      	strb	r3, [r7, #19]
 8001df6:	e007      	b.n	8001e08 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d026      	beq.n	8001e5c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <ETH_UpdateDescriptor+0xe4>)
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	e003      	b.n	8001e26 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001e24:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e26:	f3bf 8f5f 	dmb	sy
}
 8001e2a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d902      	bls.n	8001e4a <ETH_UpdateDescriptor+0x9a>
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3b04      	subs	r3, #4
 8001e48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	3212      	adds	r2, #18
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <ETH_UpdateDescriptor+0xb8>
 8001e62:	7cfb      	ldrb	r3, [r7, #19]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1b8      	bne.n	8001dda <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d00c      	beq.n	8001e8c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	80004600 	.word	0x80004600

08001e98 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001eb6:	e03f      	b.n	8001f38 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d028      	beq.n	8001f38 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68d9      	ldr	r1, [r3, #12]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db1b      	blt.n	8001f34 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	3304      	adds	r3, #4
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f827 	bl	8004f5c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	3304      	adds	r3, #4
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f32:	e001      	b.n	8001f38 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_ETH_ReleaseTxPacket+0xac>
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1b9      	bne.n	8001eb8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d112      	bne.n	8001f90 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d109      	bne.n	8001f90 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_ETH_IRQHandler+0x178>)
 8001f88:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f002 fb30 	bl	80045f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d113      	bne.n	8001fca <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d10a      	bne.n	8001fca <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001fc2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 fb23 	bl	8004610 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fdc:	d14c      	bne.n	8002078 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff0:	d142      	bne.n	8002078 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	f043 0208 	orr.w	r2, r3, #8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002014:	d11a      	bne.n	800204c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_ETH_IRQHandler+0x17c>)
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800203c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002040:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	22e0      	movs	r2, #224	; 0xe0
 8002046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800204a:	e012      	b.n	8002072 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	f248 6380 	movw	r3, #34432	; 0x8680
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	461a      	mov	r2, r3
 800206c:	f248 6380 	movw	r3, #34432	; 0x8680
 8002070:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fadc 	bl	8004630 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b08      	cmp	r3, #8
 8002084:	d10e      	bne.n	80020a4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f81c 	bl	80020d4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_ETH_IRQHandler+0x180>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_ETH_IRQHandler+0x180>)
 80020b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020b6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f815 	bl	80020e8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	00010040 	.word	0x00010040
 80020cc:	007e2000 	.word	0x007e2000
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 031c 	and.w	r3, r3, #28
 8002118:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	02db      	lsls	r3, r3, #11
 800211e:	b29b      	uxth	r3, r3
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	019b      	lsls	r3, r3, #6
 800212a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0302 	bic.w	r3, r3, #2
 800213a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800214c:	f7ff fa74 	bl	8001638 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002152:	e00d      	b.n	8002170 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002154:	f7ff fa70 	bl	8001638 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002162:	d301      	bcc.n	8002168 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e010      	b.n	800218a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ec      	bne.n	8002154 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 031c 	and.w	r3, r3, #28
 80021ae:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	02db      	lsls	r3, r3, #11
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	019b      	lsls	r3, r3, #6
 80021c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fa24 	bl	8001638 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f2:	e00d      	b.n	8002210 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80021f4:	f7ff fa20 	bl	8001638 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002202:	d301      	bcc.n	8002208 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e009      	b.n	800221c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ec      	bne.n	80021f4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0d9      	b.n	80023ec <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	0c1b      	lsrs	r3, r3, #16
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e00b      	b.n	8002424 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	2b10      	cmp	r3, #16
 8002414:	d105      	bne.n	8002422 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f88f 	bl	800253c <ETH_SetMACConfig>

    return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 031c 	bic.w	r3, r3, #28
 8002442:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002444:	f001 fa9c 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 8002448:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d908      	bls.n	8002464 <HAL_ETH_SetMDIOClockRange+0x38>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d804      	bhi.n	8002464 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e027      	b.n	80024b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d908      	bls.n	800247e <HAL_ETH_SetMDIOClockRange+0x52>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d204      	bcs.n	800247e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 030c 	orr.w	r3, r3, #12
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e01a      	b.n	80024b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d303      	bcc.n	800248e <HAL_ETH_SetMDIOClockRange+0x62>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d911      	bls.n	80024b2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d908      	bls.n	80024a8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d804      	bhi.n	80024a8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e005      	b.n	80024b4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e000      	b.n	80024b4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80024b2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	611a      	str	r2, [r3, #16]
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	01312cff 	.word	0x01312cff
 80024c8:	02160ebf 	.word	0x02160ebf
 80024cc:	03938700 	.word	0x03938700
 80024d0:	05f5e0ff 	.word	0x05f5e0ff
 80024d4:	08f0d17f 	.word	0x08f0d17f

080024d8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002510:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002514:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff f894 	bl	8001650 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002532:	6193      	str	r3, [r2, #24]
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4b51      	ldr	r3, [pc, #324]	; (8002698 <ETH_SetMACConfig+0x15c>)
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7c1b      	ldrb	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <ETH_SetMACConfig+0x28>
 800255e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002562:	e000      	b.n	8002566 <ETH_SetMACConfig+0x2a>
 8002564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	7c5b      	ldrb	r3, [r3, #17]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <ETH_SetMACConfig+0x38>
 800256e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002572:	e000      	b.n	8002576 <ETH_SetMACConfig+0x3a>
 8002574:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002576:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800257c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7fdb      	ldrb	r3, [r3, #31]
 8002582:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002584:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800258a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	7f92      	ldrb	r2, [r2, #30]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x5e>
 8002594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x60>
 800259a:	2200      	movs	r2, #0
                        macconf->Speed |
 800259c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d102      	bne.n	80025c4 <ETH_SetMACConfig+0x88>
 80025be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c2:	e000      	b.n	80025c6 <ETH_SetMACConfig+0x8a>
 80025c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	7bdb      	ldrb	r3, [r3, #15]
 80025cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025de:	4313      	orrs	r3, r2
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7ff f82a 	bl	8001650 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002622:	2a00      	cmp	r2, #0
 8002624:	d101      	bne.n	800262a <ETH_SetMACConfig+0xee>
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	e000      	b.n	800262c <ETH_SetMACConfig+0xf0>
 800262a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800262c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002632:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800263a:	2a01      	cmp	r2, #1
 800263c:	d101      	bne.n	8002642 <ETH_SetMACConfig+0x106>
 800263e:	2208      	movs	r2, #8
 8002640:	e000      	b.n	8002644 <ETH_SetMACConfig+0x108>
 8002642:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002644:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800264c:	2a01      	cmp	r2, #1
 800264e:	d101      	bne.n	8002654 <ETH_SetMACConfig+0x118>
 8002650:	2204      	movs	r2, #4
 8002652:	e000      	b.n	8002656 <ETH_SetMACConfig+0x11a>
 8002654:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002656:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800265e:	2a01      	cmp	r2, #1
 8002660:	d101      	bne.n	8002666 <ETH_SetMACConfig+0x12a>
 8002662:	2202      	movs	r2, #2
 8002664:	e000      	b.n	8002668 <ETH_SetMACConfig+0x12c>
 8002666:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002668:	4313      	orrs	r3, r2
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002680:	2001      	movs	r0, #1
 8002682:	f7fe ffe5 	bl	8001650 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	619a      	str	r2, [r3, #24]
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	ff20810f 	.word	0xff20810f

0800269c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <ETH_SetDMAConfig+0x110>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7b1b      	ldrb	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <ETH_SetDMAConfig+0x2c>
 80026c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026c6:	e000      	b.n	80026ca <ETH_SetDMAConfig+0x2e>
 80026c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	7b5b      	ldrb	r3, [r3, #13]
 80026ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	7f52      	ldrb	r2, [r2, #29]
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	d102      	bne.n	80026e0 <ETH_SetDMAConfig+0x44>
 80026da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026de:	e000      	b.n	80026e2 <ETH_SetDMAConfig+0x46>
 80026e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7b9b      	ldrb	r3, [r3, #14]
 80026e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	7f1b      	ldrb	r3, [r3, #28]
 80026f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	7f9b      	ldrb	r3, [r3, #30]
 80026fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002700:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002706:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800270e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002710:	4313      	orrs	r3, r2
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002732:	2001      	movs	r0, #1
 8002734:	f7fe ff8c 	bl	8001650 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002750:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002756:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800275c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002764:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002766:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800276e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002774:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800277e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002782:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002790:	2001      	movs	r0, #1
 8002792:	f7fe ff5d 	bl	8001650 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	f8de3f23 	.word	0xf8de3f23

080027b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0a6      	sub	sp, #152	; 0x98
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027ec:	2300      	movs	r3, #0
 80027ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002824:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fe86 	bl	800253c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002830:	2301      	movs	r3, #1
 8002832:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002834:	2301      	movs	r3, #1
 8002836:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800283e:	2301      	movs	r3, #1
 8002840:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002852:	2300      	movs	r3, #0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800285c:	2301      	movs	r3, #1
 800285e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002864:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800286a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800286c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002870:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff08 	bl	800269c <ETH_SetDMAConfig>
}
 800288c:	bf00      	nop
 800288e:	3798      	adds	r7, #152	; 0x98
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3305      	adds	r3, #5
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	3204      	adds	r2, #4
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <ETH_MACAddressConfig+0x68>)
 80028b6:	4413      	add	r3, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3303      	adds	r3, #3
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	061a      	lsls	r2, r3, #24
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3302      	adds	r3, #2
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3301      	adds	r3, #1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	4313      	orrs	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <ETH_MACAddressConfig+0x6c>)
 80028e6:	4413      	add	r3, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	6013      	str	r3, [r2, #0]
}
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40028040 	.word	0x40028040
 8002900:	40028044 	.word	0x40028044

08002904 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e03e      	b.n	8002990 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2200      	movs	r2, #0
 800292e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	3206      	adds	r2, #6
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d80c      	bhi.n	8002974 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e004      	b.n	800297e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d9bd      	bls.n	8002912 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e046      	b.n	8002a52 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002a08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	3212      	adds	r2, #18
 8002a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d80c      	bhi.n	8002a42 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6919      	ldr	r1, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	e004      	b.n	8002a4c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d9b5      	bls.n	80029c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b08d      	sub	sp, #52	; 0x34
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad2:	d007      	beq.n	8002ae4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	3304      	adds	r3, #4
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e103      	b.n	8002cf0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	3301      	adds	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002b00:	f023 031f 	bic.w	r3, r3, #31
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	6852      	ldr	r2, [r2, #4]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b6e:	f3bf 8f5f 	dmb	sy
}
 8002b72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b80:	e084      	b.n	8002c8c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e005      	b.n	8002bae <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d902      	bls.n	8002bc0 <ETH_Prepare_Tx_Descriptors+0x130>
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	3b04      	subs	r3, #4
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be2:	d007      	beq.n	8002bf4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	3304      	adds	r3, #4
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d029      	beq.n	8002c48 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	e019      	b.n	8002c3c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c08:	f3bf 8f5f 	dmb	sy
}
 8002c0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d902      	bls.n	8002c2c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	3b04      	subs	r3, #4
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	3301      	adds	r3, #1
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d3e1      	bcc.n	8002c08 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c44:	2302      	movs	r3, #2
 8002c46:	e053      	b.n	8002cf0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c66:	f023 031f 	bic.w	r3, r3, #31
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	6852      	ldr	r2, [r2, #4]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c7a:	f3bf 8f5f 	dmb	sy
}
 8002c7e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af76 	bne.w	8002b82 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e005      	b.n	8002cb6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	3304      	adds	r3, #4
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd8:	b672      	cpsid	i
}
 8002cda:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002cea:	b662      	cpsie	i
}
 8002cec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3734      	adds	r7, #52	; 0x34
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e177      	b.n	8003008 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8166 	bne.w	8003002 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80c0 	beq.w	8003002 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a61      	ldr	r2, [pc, #388]	; (8003024 <HAL_GPIO_Init+0x328>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_GPIO_Init+0x32c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d037      	beq.n	8002f3a <HAL_GPIO_Init+0x23e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a57      	ldr	r2, [pc, #348]	; (800302c <HAL_GPIO_Init+0x330>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d031      	beq.n	8002f36 <HAL_GPIO_Init+0x23a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x334>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02b      	beq.n	8002f32 <HAL_GPIO_Init+0x236>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a55      	ldr	r2, [pc, #340]	; (8003034 <HAL_GPIO_Init+0x338>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d025      	beq.n	8002f2e <HAL_GPIO_Init+0x232>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_GPIO_Init+0x33c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <HAL_GPIO_Init+0x22e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a53      	ldr	r2, [pc, #332]	; (800303c <HAL_GPIO_Init+0x340>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_Init+0x22a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_GPIO_Init+0x344>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0x226>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a51      	ldr	r2, [pc, #324]	; (8003044 <HAL_GPIO_Init+0x348>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_Init+0x222>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a50      	ldr	r2, [pc, #320]	; (8003048 <HAL_GPIO_Init+0x34c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x21e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4f      	ldr	r2, [pc, #316]	; (800304c <HAL_GPIO_Init+0x350>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002f12:	2309      	movs	r3, #9
 8002f14:	e012      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f16:	230a      	movs	r3, #10
 8002f18:	e010      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	e00e      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e00c      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00a      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e008      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e004      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x240>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f002 0203 	and.w	r2, r2, #3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4093      	lsls	r3, r2
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4c:	4935      	ldr	r1, [pc, #212]	; (8003024 <HAL_GPIO_Init+0x328>)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5a:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7e:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <HAL_GPIO_Init+0x354>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f67f ae84 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40013800 	.word	0x40013800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00
 8003038:	40021000 	.word	0x40021000
 800303c:	40021400 	.word	0x40021400
 8003040:	40021800 	.word	0x40021800
 8003044:	40021c00 	.word	0x40021c00
 8003048:	40022000 	.word	0x40022000
 800304c:	40022400 	.word	0x40022400
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e001      	b.n	8003076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e267      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d075      	beq.n	80031c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00c      	beq.n	80030fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d112      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b82      	ldr	r3, [pc, #520]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fa:	d10b      	bne.n	8003114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	4b7e      	ldr	r3, [pc, #504]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d05b      	beq.n	80031c0 <HAL_RCC_OscConfig+0x108>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d157      	bne.n	80031c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e242      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x74>
 800311e:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a75      	ldr	r2, [pc, #468]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x98>
 8003136:	4b70      	ldr	r3, [pc, #448]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6f      	ldr	r2, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6d      	ldr	r3, [pc, #436]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6c      	ldr	r2, [pc, #432]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xb0>
 8003150:	4b69      	ldr	r3, [pc, #420]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a68      	ldr	r2, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fa62 	bl	8001638 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7fe fa5e 	bl	8001638 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e207      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xc0>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fa4e 	bl	8001638 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fe fa4a 	bl	8001638 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1f3      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0xe8>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d063      	beq.n	8003296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e1c7      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4937      	ldr	r1, [pc, #220]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	e03a      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x244>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe fa03 	bl	8001638 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003236:	f7fe f9ff 	bl	8001638 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e1a8      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4925      	ldr	r1, [pc, #148]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x244>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe f9e2 	bl	8001638 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003278:	f7fe f9de 	bl	8001638 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e187      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d036      	beq.n	8003310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCC_OscConfig+0x248>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe f9c2 	bl	8001638 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fe f9be 	bl	8001638 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e167      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x200>
 80032d6:	e01b      	b.n	8003310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_OscConfig+0x248>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe f9ab 	bl	8001638 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	e00e      	b.n	8003304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e6:	f7fe f9a7 	bl	8001638 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d907      	bls.n	8003304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e150      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	42470000 	.word	0x42470000
 8003300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	4b88      	ldr	r3, [pc, #544]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ea      	bne.n	80032e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8097 	beq.w	800344c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b81      	ldr	r3, [pc, #516]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	4b7d      	ldr	r3, [pc, #500]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a7c      	ldr	r2, [pc, #496]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b7a      	ldr	r3, [pc, #488]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334e:	4b77      	ldr	r3, [pc, #476]	; (800352c <HAL_RCC_OscConfig+0x474>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4b74      	ldr	r3, [pc, #464]	; (800352c <HAL_RCC_OscConfig+0x474>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a73      	ldr	r2, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x474>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003366:	f7fe f967 	bl	8001638 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336e:	f7fe f963 	bl	8001638 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e10c      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x474>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2ea>
 8003394:	4b64      	ldr	r3, [pc, #400]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a63      	ldr	r2, [pc, #396]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	e01c      	b.n	80033dc <HAL_RCC_OscConfig+0x324>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x30c>
 80033aa:	4b5f      	ldr	r3, [pc, #380]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a5e      	ldr	r2, [pc, #376]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	4b5c      	ldr	r3, [pc, #368]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0x324>
 80033c4:	4b58      	ldr	r3, [pc, #352]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a54      	ldr	r2, [pc, #336]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe f928 	bl	8001638 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe f924 	bl	8001638 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0cb      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ee      	beq.n	80033ec <HAL_RCC_OscConfig+0x334>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fe f912 	bl	8001638 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe f90e 	bl	8001638 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0b5      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342e:	4b3e      	ldr	r3, [pc, #248]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ee      	bne.n	8003418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b39      	ldr	r3, [pc, #228]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4a38      	ldr	r2, [pc, #224]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a1 	beq.w	8003598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d05c      	beq.n	800351c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d141      	bne.n	80034ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCC_OscConfig+0x478>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe f8e2 	bl	8001638 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe f8de 	bl	8001638 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e087      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	3b01      	subs	r3, #1
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	491b      	ldr	r1, [pc, #108]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <HAL_RCC_OscConfig+0x478>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fe f8b7 	bl	8001638 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe f8b3 	bl	8001638 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e05c      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x416>
 80034ec:	e054      	b.n	8003598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe f8a0 	bl	8001638 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe f89c 	bl	8001638 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e045      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x444>
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e038      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4ec>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d028      	beq.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d121      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11a      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800356a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7fd ffce 	bl	8001638 <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7fd ffca 	bl	8001638 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd f970 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	0801db24 	.word	0x0801db24
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003778:	b094      	sub	sp, #80	; 0x50
 800377a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
 8003780:	2300      	movs	r3, #0
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	2300      	movs	r3, #0
 8003786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800378c:	4b79      	ldr	r3, [pc, #484]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d00d      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003798:	2b08      	cmp	r3, #8
 800379a:	f200 80e1 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x34>
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x3a>
 80037a6:	e0db      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_GetSysClockFreq+0x204>)
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037ac:	e0db      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ae:	4b73      	ldr	r3, [pc, #460]	; (800397c <HAL_RCC_GetSysClockFreq+0x208>)
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037b2:	e0d8      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037be:	4b6d      	ldr	r3, [pc, #436]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d063      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	2200      	movs	r2, #0
 80037d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
 80037e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037e6:	4622      	mov	r2, r4
 80037e8:	462b      	mov	r3, r5
 80037ea:	f04f 0000 	mov.w	r0, #0
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	0159      	lsls	r1, r3, #5
 80037f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f8:	0150      	lsls	r0, r2, #5
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4621      	mov	r1, r4
 8003800:	1a51      	subs	r1, r2, r1
 8003802:	6139      	str	r1, [r7, #16]
 8003804:	4629      	mov	r1, r5
 8003806:	eb63 0301 	sbc.w	r3, r3, r1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003818:	4659      	mov	r1, fp
 800381a:	018b      	lsls	r3, r1, #6
 800381c:	4651      	mov	r1, sl
 800381e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003822:	4651      	mov	r1, sl
 8003824:	018a      	lsls	r2, r1, #6
 8003826:	4651      	mov	r1, sl
 8003828:	ebb2 0801 	subs.w	r8, r2, r1
 800382c:	4659      	mov	r1, fp
 800382e:	eb63 0901 	sbc.w	r9, r3, r1
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003846:	4690      	mov	r8, r2
 8003848:	4699      	mov	r9, r3
 800384a:	4623      	mov	r3, r4
 800384c:	eb18 0303 	adds.w	r3, r8, r3
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	462b      	mov	r3, r5
 8003854:	eb49 0303 	adc.w	r3, r9, r3
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003866:	4629      	mov	r1, r5
 8003868:	024b      	lsls	r3, r1, #9
 800386a:	4621      	mov	r1, r4
 800386c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003870:	4621      	mov	r1, r4
 8003872:	024a      	lsls	r2, r1, #9
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387a:	2200      	movs	r2, #0
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
 800387e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003884:	f7fc fd1c 	bl	80002c0 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	e058      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	2200      	movs	r2, #0
 800389a:	4618      	mov	r0, r3
 800389c:	4611      	mov	r1, r2
 800389e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	f04f 0000 	mov.w	r0, #0
 80038b4:	f04f 0100 	mov.w	r1, #0
 80038b8:	0159      	lsls	r1, r3, #5
 80038ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038be:	0150      	lsls	r0, r2, #5
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4641      	mov	r1, r8
 80038c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ca:	4649      	mov	r1, r9
 80038cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e4:	ebb2 040a 	subs.w	r4, r2, sl
 80038e8:	eb63 050b 	sbc.w	r5, r3, fp
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	00eb      	lsls	r3, r5, #3
 80038f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fa:	00e2      	lsls	r2, r4, #3
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	4643      	mov	r3, r8
 8003902:	18e3      	adds	r3, r4, r3
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	464b      	mov	r3, r9
 8003908:	eb45 0303 	adc.w	r3, r5, r3
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391a:	4629      	mov	r1, r5
 800391c:	028b      	lsls	r3, r1, #10
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003924:	4621      	mov	r1, r4
 8003926:	028a      	lsls	r2, r1, #10
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392e:	2200      	movs	r2, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	61fa      	str	r2, [r7, #28]
 8003934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003938:	f7fc fcc2 	bl	80002c0 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_GetSysClockFreq+0x200>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetSysClockFreq+0x204>)
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003968:	4618      	mov	r0, r3
 800396a:	3750      	adds	r7, #80	; 0x50
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	007a1200 	.word	0x007a1200

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_RCC_GetHCLKFreq+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000000 	.word	0x20000000

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff0 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0a9b      	lsrs	r3, r3, #10
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	0801db34 	.word	0x0801db34

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c4:	f7ff ffdc 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0b5b      	lsrs	r3, r3, #13
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	0801db34 	.word	0x0801db34

080039e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	220f      	movs	r2, #15
 80039f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCC_GetClockConfig+0x60>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40023c00 	.word	0x40023c00

08003a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e041      	b.n	8003ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f839 	bl	8003aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f000 f9d8 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d001      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e04e      	b.n	8003bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d01d      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0x80>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d111      	bne.n	8003ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d010      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba2:	e007      	b.n	8003bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40001800 	.word	0x40001800

08003be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0202 	mvn.w	r2, #2
 8003c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8ee 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8e0 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8f1 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d122      	bne.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0204 	mvn.w	r2, #4
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8c4 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8b6 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8c7 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0208 	mvn.w	r2, #8
 8003cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f89a 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f88c 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f89d 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f870 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f862 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f873 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0201 	mvn.w	r2, #1
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fc fddc 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	2b80      	cmp	r3, #128	; 0x80
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f902 	bl	8003f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f838 	bl	8003e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0220 	mvn.w	r2, #32
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8cc 	bl	8003f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2f      	ldr	r2, [pc, #188]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d027      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <TIM_Base_SetConfig+0x118>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d023      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <TIM_Base_SetConfig+0x11c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x128>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x130>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0x134>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <TIM_Base_SetConfig+0x138>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <TIM_Base_SetConfig+0x13c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	40014800 	.word	0x40014800
 8003f74:	40001800 	.word	0x40001800
 8003f78:	40001c00 	.word	0x40001c00
 8003f7c:	40002000 	.word	0x40002000

08003f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03f      	b.n	800403a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc fce8 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f829 	bl	8004044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0c0      	sub	sp, #256	; 0x100
 800404a:	af00      	add	r7, sp, #0
 800404c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	ea40 0301 	orr.w	r3, r0, r1
 800406c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800409c:	f021 010c 	bic.w	r1, r1, #12
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040aa:	430b      	orrs	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	ea40 0301 	orr.w	r3, r0, r1
 80040ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <UART_SetConfig+0x2cc>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0xa0>
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <UART_SetConfig+0x2d0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d104      	bne.n	80040ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff fc6c 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040ec:	e003      	b.n	80040f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff fc53 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 80040f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	f040 810c 	bne.w	800431c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800410e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	65b9      	str	r1, [r7, #88]	; 0x58
 800411e:	415b      	adcs	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004126:	4621      	mov	r1, r4
 8004128:	eb12 0801 	adds.w	r8, r2, r1
 800412c:	4629      	mov	r1, r5
 800412e:	eb43 0901 	adc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004154:	462b      	mov	r3, r5
 8004156:	eb49 0303 	adc.w	r3, r9, r3
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800416a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800416e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
 8004180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004188:	f7fc f89a 	bl	80002c0 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b61      	ldr	r3, [pc, #388]	; (8004318 <UART_SetConfig+0x2d4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80041b4:	415b      	adcs	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041bc:	4641      	mov	r1, r8
 80041be:	eb12 0a01 	adds.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0b01 	adc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	4692      	mov	sl, r2
 80041de:	469b      	mov	fp, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	eb1a 0303 	adds.w	r3, sl, r3
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb4b 0303 	adc.w	r3, fp, r3
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800421a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800421e:	f7fc f84f 	bl	80002c0 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4611      	mov	r1, r2
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2301 	umull	r2, r3, r3, r1
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2264      	movs	r2, #100	; 0x64
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <UART_SetConfig+0x2d4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800425c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	63b9      	str	r1, [r7, #56]	; 0x38
 8004268:	415b      	adcs	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6339      	str	r1, [r7, #48]	; 0x30
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042da:	f7fb fff1 	bl	80002c0 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <UART_SetConfig+0x2d4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <UART_SetConfig+0x2d4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430c:	e106      	b.n	800451c <UART_SetConfig+0x4d8>
 800430e:	bf00      	nop
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800432a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	6239      	str	r1, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	4641      	mov	r1, r8
 8004340:	1854      	adds	r4, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0501 	adc.w	r5, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004364:	464b      	mov	r3, r9
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800437a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800438a:	4629      	mov	r1, r5
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4621      	mov	r1, r4
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800439c:	f7fb ff90 	bl	80002c0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b60      	ldr	r3, [pc, #384]	; (8004528 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	61b9      	str	r1, [r7, #24]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6139      	str	r1, [r7, #16]
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	67bb      	str	r3, [r7, #120]	; 0x78
 800441a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800443a:	f7fb ff41 	bl	80002c0 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4611      	mov	r1, r2
 8004444:	4b38      	ldr	r3, [pc, #224]	; (8004528 <UART_SetConfig+0x4e4>)
 8004446:	fba3 2301 	umull	r2, r3, r3, r1
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2264      	movs	r2, #100	; 0x64
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	1acb      	subs	r3, r1, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	; 0x32
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <UART_SetConfig+0x4e4>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004464:	441c      	add	r4, r3
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	673b      	str	r3, [r7, #112]	; 0x70
 800446e:	677a      	str	r2, [r7, #116]	; 0x74
 8004470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	415b      	adcs	r3, r3
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b6:	464b      	mov	r3, r9
 80044b8:	460a      	mov	r2, r1
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ca:	667a      	str	r2, [r7, #100]	; 0x64
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044d8:	4649      	mov	r1, r9
 80044da:	008b      	lsls	r3, r1, #2
 80044dc:	4641      	mov	r1, r8
 80044de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e2:	4641      	mov	r1, r8
 80044e4:	008a      	lsls	r2, r1, #2
 80044e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ea:	f7fb fee9 	bl	80002c0 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <UART_SetConfig+0x4e4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	; 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	3332      	adds	r3, #50	; 0x32
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <UART_SetConfig+0x4e4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
}
 800451c:	bf00      	nop
 800451e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004522:	46bd      	mov	sp, r7
 8004524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800452c:	b5b0      	push	{r4, r5, r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004532:	2100      	movs	r1, #0
 8004534:	2000      	movs	r0, #0
 8004536:	f006 f95d 	bl	800a7f4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <MX_LWIP_Init+0x90>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004540:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <MX_LWIP_Init+0x94>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004546:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <MX_LWIP_Init+0x98>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <MX_LWIP_Init+0x9c>)
 800454e:	9302      	str	r3, [sp, #8]
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <MX_LWIP_Init+0xa0>)
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <MX_LWIP_Init+0x98>)
 800455a:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <MX_LWIP_Init+0x94>)
 800455c:	4917      	ldr	r1, [pc, #92]	; (80045bc <MX_LWIP_Init+0x90>)
 800455e:	481c      	ldr	r0, [pc, #112]	; (80045d0 <MX_LWIP_Init+0xa4>)
 8004560:	f007 fd62 	bl	800c028 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004564:	481a      	ldr	r0, [pc, #104]	; (80045d0 <MX_LWIP_Init+0xa4>)
 8004566:	f007 ff19 	bl	800c39c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <MX_LWIP_Init+0xa4>)
 800456c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004570:	089b      	lsrs	r3, r3, #2
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800457c:	4814      	ldr	r0, [pc, #80]	; (80045d0 <MX_LWIP_Init+0xa4>)
 800457e:	f007 ff1d 	bl	800c3bc <netif_set_up>
 8004582:	e002      	b.n	800458a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004584:	4812      	ldr	r0, [pc, #72]	; (80045d0 <MX_LWIP_Init+0xa4>)
 8004586:	f007 ff85 	bl	800c494 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800458a:	4912      	ldr	r1, [pc, #72]	; (80045d4 <MX_LWIP_Init+0xa8>)
 800458c:	4810      	ldr	r0, [pc, #64]	; (80045d0 <MX_LWIP_Init+0xa4>)
 800458e:	f008 f81b 	bl	800c5c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <MX_LWIP_Init+0xac>)
 8004594:	1d3c      	adds	r4, r7, #4
 8004596:	461d      	mov	r5, r3
 8004598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800459a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800459c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	490a      	ldr	r1, [pc, #40]	; (80045d0 <MX_LWIP_Init+0xa4>)
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fd23 	bl	8004ff4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80045ae:	4808      	ldr	r0, [pc, #32]	; (80045d0 <MX_LWIP_Init+0xa4>)
 80045b0:	f010 f9ee 	bl	8014990 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bdb0      	pop	{r4, r5, r7, pc}
 80045bc:	20000860 	.word	0x20000860
 80045c0:	20000864 	.word	0x20000864
 80045c4:	20000868 	.word	0x20000868
 80045c8:	0800a705 	.word	0x0800a705
 80045cc:	08004a7d 	.word	0x08004a7d
 80045d0:	20000828 	.word	0x20000828
 80045d4:	080045dd 	.word	0x080045dd
 80045d8:	08019ff8 	.word	0x08019ff8

080045dc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_ETH_RxCpltCallback+0x1c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fe75 	bl	80052ec <osSemaphoreRelease>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20005338 	.word	0x20005338

08004610 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_ETH_TxCpltCallback+0x1c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fe65 	bl	80052ec <osSemaphoreRelease>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2000533c 	.word	0x2000533c

08004630 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd ff4d 	bl	80024d8 <HAL_ETH_GetDMAError>
 800463e:	4603      	mov	r3, r0
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d104      	bne.n	8004652 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <HAL_ETH_ErrorCallback+0x2c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe4d 	bl	80052ec <osSemaphoreRelease>
  }
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20005338 	.word	0x20005338

08004660 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	b0a8      	sub	sp, #160	; 0xa0
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800467a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800467e:	2264      	movs	r2, #100	; 0x64
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f014 faf1 	bl	8018c6a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004688:	4b85      	ldr	r3, [pc, #532]	; (80048a0 <low_level_init+0x240>)
 800468a:	4a86      	ldr	r2, [pc, #536]	; (80048a4 <low_level_init+0x244>)
 800468c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800469a:	23e1      	movs	r3, #225	; 0xe1
 800469c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 80046a0:	23fe      	movs	r3, #254	; 0xfe
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 80046a6:	23ec      	movs	r3, #236	; 0xec
 80046a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x81;
 80046ac:	2381      	movs	r3, #129	; 0x81
 80046ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80046b2:	4a7b      	ldr	r2, [pc, #492]	; (80048a0 <low_level_init+0x240>)
 80046b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80046ba:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <low_level_init+0x240>)
 80046bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80046c0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80046c2:	4b77      	ldr	r3, [pc, #476]	; (80048a0 <low_level_init+0x240>)
 80046c4:	4a78      	ldr	r2, [pc, #480]	; (80048a8 <low_level_init+0x248>)
 80046c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80046c8:	4b75      	ldr	r3, [pc, #468]	; (80048a0 <low_level_init+0x240>)
 80046ca:	4a78      	ldr	r2, [pc, #480]	; (80048ac <low_level_init+0x24c>)
 80046cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80046ce:	4b74      	ldr	r3, [pc, #464]	; (80048a0 <low_level_init+0x240>)
 80046d0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046d6:	4872      	ldr	r0, [pc, #456]	; (80048a0 <low_level_init+0x240>)
 80046d8:	f7fd f8c0 	bl	800185c <HAL_ETH_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80046e2:	2238      	movs	r2, #56	; 0x38
 80046e4:	2100      	movs	r1, #0
 80046e6:	4872      	ldr	r0, [pc, #456]	; (80048b0 <low_level_init+0x250>)
 80046e8:	f014 fabf 	bl	8018c6a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046ec:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <low_level_init+0x250>)
 80046ee:	2221      	movs	r2, #33	; 0x21
 80046f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046f2:	4b6f      	ldr	r3, [pc, #444]	; (80048b0 <low_level_init+0x250>)
 80046f4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80046f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <low_level_init+0x250>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004700:	486c      	ldr	r0, [pc, #432]	; (80048b4 <low_level_init+0x254>)
 8004702:	f007 fb4b 	bl	800bd9c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2206      	movs	r2, #6
 800470a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800470e:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <low_level_init+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800471a:	4b61      	ldr	r3, [pc, #388]	; (80048a0 <low_level_init+0x240>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	785a      	ldrb	r2, [r3, #1]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004726:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <low_level_init+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	789a      	ldrb	r2, [r3, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004732:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <low_level_init+0x240>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	78da      	ldrb	r2, [r3, #3]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800473e:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <low_level_init+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	791a      	ldrb	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800474a:	4b55      	ldr	r3, [pc, #340]	; (80048a0 <low_level_init+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	795a      	ldrb	r2, [r3, #5]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004764:	f043 030a 	orr.w	r3, r3, #10
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004770:	2203      	movs	r2, #3
 8004772:	2100      	movs	r1, #0
 8004774:	2001      	movs	r0, #1
 8004776:	f001 f89d 	bl	80058b4 <xQueueGenericCreate>
 800477a:	4603      	mov	r3, r0
 800477c:	4a4e      	ldr	r2, [pc, #312]	; (80048b8 <low_level_init+0x258>)
 800477e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004780:	2203      	movs	r2, #3
 8004782:	2100      	movs	r1, #0
 8004784:	2001      	movs	r0, #1
 8004786:	f001 f895 	bl	80058b4 <xQueueGenericCreate>
 800478a:	4603      	mov	r3, r0
 800478c:	4a4b      	ldr	r2, [pc, #300]	; (80048bc <low_level_init+0x25c>)
 800478e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004790:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <low_level_init+0x260>)
 8004792:	f107 0408 	add.w	r4, r7, #8
 8004796:	461d      	mov	r5, r3
 8004798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800479a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800479c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc22 	bl	8004ff4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80047b0:	4944      	ldr	r1, [pc, #272]	; (80048c4 <low_level_init+0x264>)
 80047b2:	4845      	ldr	r0, [pc, #276]	; (80048c8 <low_level_init+0x268>)
 80047b4:	f7fc fda9 	bl	800130a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80047b8:	4843      	ldr	r0, [pc, #268]	; (80048c8 <low_level_init+0x268>)
 80047ba:	f7fc fdd8 	bl	800136e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80047be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d165      	bne.n	8004892 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80047c6:	4840      	ldr	r0, [pc, #256]	; (80048c8 <low_level_init+0x268>)
 80047c8:	f7fc fe79 	bl	80014be <LAN8742_GetLinkState>
 80047cc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80047d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	dc06      	bgt.n	80047e6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f007 fec5 	bl	800c568 <netif_set_link_down>
      netif_set_down(netif);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f007 fe58 	bl	800c494 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80047e4:	e057      	b.n	8004896 <low_level_init+0x236>
      switch (PHYLinkState)
 80047e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ea:	3b02      	subs	r3, #2
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d82b      	bhi.n	8004848 <low_level_init+0x1e8>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <low_level_init+0x198>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004809 	.word	0x08004809
 80047fc:	0800481b 	.word	0x0800481b
 8004800:	0800482b 	.word	0x0800482b
 8004804:	0800483b 	.word	0x0800483b
        duplex = ETH_FULLDUPLEX_MODE;
 8004808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004810:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004818:	e01f      	b.n	800485a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004828:	e017      	b.n	800485a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800482a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004838:	e00f      	b.n	800485a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004846:	e008      	b.n	800485a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004848:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800484c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004858:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800485a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800485e:	4619      	mov	r1, r3
 8004860:	480f      	ldr	r0, [pc, #60]	; (80048a0 <low_level_init+0x240>)
 8004862:	f7fd fcdf 	bl	8002224 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800486c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004876:	4619      	mov	r1, r3
 8004878:	4809      	ldr	r0, [pc, #36]	; (80048a0 <low_level_init+0x240>)
 800487a:	f7fd fdbd 	bl	80023f8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800487e:	4808      	ldr	r0, [pc, #32]	; (80048a0 <low_level_init+0x240>)
 8004880:	f7fd f86a 	bl	8001958 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f007 fd99 	bl	800c3bc <netif_set_up>
    netif_set_link_up(netif);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f007 fe34 	bl	800c4f8 <netif_set_link_up>
}
 8004890:	e001      	b.n	8004896 <low_level_init+0x236>
    Error_Handler();
 8004892:	f7fc f855 	bl	8000940 <Error_Handler>
}
 8004896:	bf00      	nop
 8004898:	37a0      	adds	r7, #160	; 0xa0
 800489a:	46bd      	mov	sp, r7
 800489c:	bdb0      	pop	{r4, r5, r7, pc}
 800489e:	bf00      	nop
 80048a0:	20005340 	.word	0x20005340
 80048a4:	40028000 	.word	0x40028000
 80048a8:	20005298 	.word	0x20005298
 80048ac:	200051f8 	.word	0x200051f8
 80048b0:	200053f0 	.word	0x200053f0
 80048b4:	0801db3c 	.word	0x0801db3c
 80048b8:	20005338 	.word	0x20005338
 80048bc:	2000533c 	.word	0x2000533c
 80048c0:	0801a01c 	.word	0x0801a01c
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	20005428 	.word	0x20005428

080048cc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b092      	sub	sp, #72	; 0x48
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	2230      	movs	r2, #48	; 0x30
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f014 f9bc 	bl	8018c6a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	2230      	movs	r2, #48	; 0x30
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f014 f9b5 	bl	8018c6a <memset>

  for(q = p; q != NULL; q = q->next)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
 8004904:	e045      	b.n	8004992 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004908:	2b03      	cmp	r3, #3
 800490a:	d902      	bls.n	8004912 <low_level_output+0x46>
      return ERR_IF;
 800490c:	f06f 030b 	mvn.w	r3, #11
 8004910:	e065      	b.n	80049de <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004918:	4613      	mov	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	3348      	adds	r3, #72	; 0x48
 8004922:	443b      	add	r3, r7
 8004924:	3b3c      	subs	r3, #60	; 0x3c
 8004926:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492a:	895b      	ldrh	r3, [r3, #10]
 800492c:	4619      	mov	r1, r3
 800492e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	3348      	adds	r3, #72	; 0x48
 800493a:	443b      	add	r3, r7
 800493c:	3b38      	subs	r3, #56	; 0x38
 800493e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	f107 000c 	add.w	r0, r7, #12
 800494e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004950:	460b      	mov	r3, r1
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	440b      	add	r3, r1
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	18c1      	adds	r1, r0, r3
 800495a:	4613      	mov	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	3348      	adds	r3, #72	; 0x48
 8004964:	443b      	add	r3, r7
 8004966:	3b34      	subs	r3, #52	; 0x34
 8004968:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800496a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	3348      	adds	r3, #72	; 0x48
 800497e:	443b      	add	r3, r7
 8004980:	3b34      	subs	r3, #52	; 0x34
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	3301      	adds	r3, #1
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800498c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
 8004992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1b6      	bne.n	8004906 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	891b      	ldrh	r3, [r3, #8]
 800499c:	461a      	mov	r2, r3
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <low_level_output+0x11c>)
 80049a0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <low_level_output+0x11c>)
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80049aa:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <low_level_output+0x11c>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80049b0:	6838      	ldr	r0, [r7, #0]
 80049b2:	f008 fa5d 	bl	800ce70 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80049b6:	490c      	ldr	r1, [pc, #48]	; (80049e8 <low_level_output+0x11c>)
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <low_level_output+0x120>)
 80049ba:	f7fd f8da 	bl	8001b72 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80049be:	bf00      	nop
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <low_level_output+0x124>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f04f 31ff 	mov.w	r1, #4294967295
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fc41 	bl	8005250 <osSemaphoreWait>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f5      	bne.n	80049c0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80049d4:	4805      	ldr	r0, [pc, #20]	; (80049ec <low_level_output+0x120>)
 80049d6:	f7fd fa5f 	bl	8001e98 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80049da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3748      	adds	r7, #72	; 0x48
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200053f0 	.word	0x200053f0
 80049ec:	20005340 	.word	0x20005340
 80049f0:	2000533c 	.word	0x2000533c

080049f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <low_level_input+0x2c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4805      	ldr	r0, [pc, #20]	; (8004a24 <low_level_input+0x30>)
 8004a10:	f7fd f90b 	bl	8001c2a <HAL_ETH_ReadData>
  }

  return p;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200051f4 	.word	0x200051f4
 8004a24:	20005340 	.word	0x20005340

08004a28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <ethernetif_input+0x50>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fc05 	bl	8005250 <osSemaphoreWait>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f5      	bne.n	8004a38 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f7ff ffd1 	bl	80049f4 <low_level_input>
 8004a52:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	4798      	blx	r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f008 f95a 	bl	800cd24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1ea      	bne.n	8004a4c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a76:	e7df      	b.n	8004a38 <ethernetif_input+0x10>
 8004a78:	20005338 	.word	0x20005338

08004a7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <ethernetif_init+0x1c>
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <ethernetif_init+0x48>)
 8004a8c:	f240 12df 	movw	r2, #479	; 0x1df
 8004a90:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <ethernetif_init+0x4c>)
 8004a92:	480e      	ldr	r0, [pc, #56]	; (8004acc <ethernetif_init+0x50>)
 8004a94:	f014 f84a 	bl	8018b2c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2273      	movs	r2, #115	; 0x73
 8004a9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2274      	movs	r2, #116	; 0x74
 8004aa4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <ethernetif_init+0x54>)
 8004aac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a08      	ldr	r2, [pc, #32]	; (8004ad4 <ethernetif_init+0x58>)
 8004ab2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fdd3 	bl	8004660 <low_level_init>

  return ERR_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	0801a038 	.word	0x0801a038
 8004ac8:	0801a054 	.word	0x0801a054
 8004acc:	0801a064 	.word	0x0801a064
 8004ad0:	0801685d 	.word	0x0801685d
 8004ad4:	080048cd 	.word	0x080048cd

08004ad8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	4809      	ldr	r0, [pc, #36]	; (8004b0c <pbuf_free_custom+0x34>)
 8004ae8:	f007 fa48 	bl	800bf7c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <pbuf_free_custom+0x38>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <pbuf_free_custom+0x38>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <pbuf_free_custom+0x3c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fbf4 	bl	80052ec <osSemaphoreRelease>
  }
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	0801db3c 	.word	0x0801db3c
 8004b10:	200051f4 	.word	0x200051f4
 8004b14:	20005338 	.word	0x20005338

08004b18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b1c:	f7fc fd8c 	bl	8001638 <HAL_GetTick>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a59      	ldr	r2, [pc, #356]	; (8004cac <HAL_ETH_MspInit+0x184>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f040 80ac 	bne.w	8004ca4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	4b57      	ldr	r3, [pc, #348]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	4a56      	ldr	r2, [pc, #344]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5c:	4b54      	ldr	r3, [pc, #336]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	4a4f      	ldr	r2, [pc, #316]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b76:	6313      	str	r3, [r2, #48]	; 0x30
 8004b78:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4a48      	ldr	r2, [pc, #288]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b92:	6313      	str	r3, [r2, #48]	; 0x30
 8004b94:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	4a41      	ldr	r2, [pc, #260]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb0:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6313      	str	r3, [r2, #48]	; 0x30
 8004bcc:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004be2:	f043 0302 	orr.w	r3, r3, #2
 8004be6:	6313      	str	r3, [r2, #48]	; 0x30
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c02:	6313      	str	r3, [r2, #48]	; 0x30
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_ETH_MspInit+0x188>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c10:	2332      	movs	r3, #50	; 0x32
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	2302      	movs	r3, #2
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c20:	230b      	movs	r3, #11
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4822      	ldr	r0, [pc, #136]	; (8004cb4 <HAL_ETH_MspInit+0x18c>)
 8004c2c:	f7fe f866 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c30:	2386      	movs	r3, #134	; 0x86
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c40:	230b      	movs	r3, #11
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c48:	4619      	mov	r1, r3
 8004c4a:	481b      	ldr	r0, [pc, #108]	; (8004cb8 <HAL_ETH_MspInit+0x190>)
 8004c4c:	f7fe f856 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c56:	2302      	movs	r3, #2
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c62:	230b      	movs	r3, #11
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4813      	ldr	r0, [pc, #76]	; (8004cbc <HAL_ETH_MspInit+0x194>)
 8004c6e:	f7fe f845 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c80:	2303      	movs	r3, #3
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c84:	230b      	movs	r3, #11
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <HAL_ETH_MspInit+0x198>)
 8004c90:	f7fe f834 	bl	8002cfc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004c94:	2200      	movs	r2, #0
 8004c96:	2105      	movs	r1, #5
 8004c98:	203d      	movs	r0, #61	; 0x3d
 8004c9a:	f7fc fdb5 	bl	8001808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004c9e:	203d      	movs	r0, #61	; 0x3d
 8004ca0:	f7fc fdce 	bl	8001840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3738      	adds	r7, #56	; 0x38
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40028000 	.word	0x40028000
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020000 	.word	0x40020000
 8004cbc:	40020400 	.word	0x40020400
 8004cc0:	40021800 	.word	0x40021800

08004cc4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004cc8:	4802      	ldr	r0, [pc, #8]	; (8004cd4 <ETH_PHY_IO_Init+0x10>)
 8004cca:	f7fd fbaf 	bl	800242c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20005340 	.word	0x20005340

08004cd8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return 0;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	4807      	ldr	r0, [pc, #28]	; (8004d18 <ETH_PHY_IO_ReadReg+0x30>)
 8004cfc:	f7fd f9fe 	bl	80020fc <HAL_ETH_ReadPHYRegister>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e000      	b.n	8004d0e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20005340 	.word	0x20005340

08004d1c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	4807      	ldr	r0, [pc, #28]	; (8004d4c <ETH_PHY_IO_WriteReg+0x30>)
 8004d30:	f7fd fa2f 	bl	8002192 <HAL_ETH_WritePHYRegister>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3e:	e000      	b.n	8004d42 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20005340 	.word	0x20005340

08004d50 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d54:	f7fc fc70 	bl	8001638 <HAL_GetTick>
 8004d58:	4603      	mov	r3, r0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b0a0      	sub	sp, #128	; 0x80
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	2264      	movs	r2, #100	; 0x64
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f013 ff7a 	bl	8018c6a <memset>
  int32_t PHYLinkState = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d7e:	2300      	movs	r3, #0
 8004d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d82:	2300      	movs	r3, #0
 8004d84:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d8a:	483a      	ldr	r0, [pc, #232]	; (8004e74 <ethernet_link_thread+0x114>)
 8004d8c:	f7fc fb97 	bl	80014be <LAN8742_GetLinkState>
 8004d90:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <ethernet_link_thread+0x5e>
 8004da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	dc09      	bgt.n	8004dbe <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004daa:	4833      	ldr	r0, [pc, #204]	; (8004e78 <ethernet_link_thread+0x118>)
 8004dac:	f7fc fe62 	bl	8001a74 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004db0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004db2:	f007 fb6f 	bl	800c494 <netif_set_down>
    netif_set_link_down(netif);
 8004db6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004db8:	f007 fbd6 	bl	800c568 <netif_set_link_down>
 8004dbc:	e055      	b.n	8004e6a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d14e      	bne.n	8004e6a <ethernet_link_thread+0x10a>
 8004dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	dd4b      	ble.n	8004e6a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dd4:	3b02      	subs	r3, #2
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d82a      	bhi.n	8004e30 <ethernet_link_thread+0xd0>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <ethernet_link_thread+0x80>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e03 	.word	0x08004e03
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e23 	.word	0x08004e23
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004df0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004df4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dfa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e00:	e017      	b.n	8004e32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e10:	e00f      	b.n	8004e32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e16:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e20:	e007      	b.n	8004e32 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004e26:	2300      	movs	r3, #0
 8004e28:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e2e:	e000      	b.n	8004e32 <ethernet_link_thread+0xd2>
    default:
      break;
 8004e30:	bf00      	nop
    }

    if(linkchanged)
 8004e32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d018      	beq.n	8004e6a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004e38:	f107 0308 	add.w	r3, r7, #8
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	480e      	ldr	r0, [pc, #56]	; (8004e78 <ethernet_link_thread+0x118>)
 8004e40:	f7fd f9f0 	bl	8002224 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e46:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4619      	mov	r1, r3
 8004e52:	4809      	ldr	r0, [pc, #36]	; (8004e78 <ethernet_link_thread+0x118>)
 8004e54:	f7fd fad0 	bl	80023f8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004e58:	4807      	ldr	r0, [pc, #28]	; (8004e78 <ethernet_link_thread+0x118>)
 8004e5a:	f7fc fd7d 	bl	8001958 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004e5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e60:	f007 faac 	bl	800c3bc <netif_set_up>
      netif_set_link_up(netif);
 8004e64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e66:	f007 fb47 	bl	800c4f8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004e6a:	2064      	movs	r0, #100	; 0x64
 8004e6c:	f000 f90e 	bl	800508c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e70:	e78b      	b.n	8004d8a <ethernet_link_thread+0x2a>
 8004e72:	bf00      	nop
 8004e74:	20005428 	.word	0x20005428
 8004e78:	20005340 	.word	0x20005340

08004e7c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004e84:	4812      	ldr	r0, [pc, #72]	; (8004ed0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004e86:	f007 f805 	bl	800be94 <memp_malloc_pool>
 8004e8a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d014      	beq.n	8004ebc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f103 0220 	add.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004ea0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004eaa:	9201      	str	r2, [sp, #4]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f007 fd7b 	bl	800c9b0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004eba:	e005      	b.n	8004ec8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	0801db3c 	.word	0x0801db3c
 8004ed4:	08004ad9 	.word	0x08004ad9
 8004ed8:	200051f4 	.word	0x200051f4

08004edc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	; 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3b20      	subs	r3, #32
 8004efa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2200      	movs	r2, #0
 8004f06:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e003      	b.n	8004f26 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e009      	b.n	8004f48 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	891a      	ldrh	r2, [r3, #8]
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f2      	bne.n	8004f34 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	3724      	adds	r7, #36	; 0x24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f007 fedd 	bl	800cd24 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f84:	2b84      	cmp	r3, #132	; 0x84
 8004f86:	d005      	beq.n	8004f94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3303      	adds	r3, #3
 8004f92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa8:	f3ef 8305 	mrs	r3, IPSR
 8004fac:	607b      	str	r3, [r7, #4]
  return(result);
 8004fae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fca:	f001 fd3b 	bl	8006a44 <vTaskStartScheduler>
  
  return osOK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004fd8:	f7ff ffe3 	bl	8004fa2 <inHandlerMode>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004fe2:	f001 fe53 	bl	8006c8c <xTaskGetTickCountFromISR>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	e002      	b.n	8004ff0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004fea:	f001 fe3f 	bl	8006c6c <xTaskGetTickCount>
 8004fee:	4603      	mov	r3, r0
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff6:	b089      	sub	sp, #36	; 0x24
 8004ff8:	af04      	add	r7, sp, #16
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <osThreadCreate+0x54>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01c      	beq.n	8005048 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685c      	ldr	r4, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691e      	ldr	r6, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ffa6 	bl	8004f72 <makeFreeRtosPriority>
 8005026:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005030:	9202      	str	r2, [sp, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	9100      	str	r1, [sp, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	4632      	mov	r2, r6
 800503a:	4629      	mov	r1, r5
 800503c:	4620      	mov	r0, r4
 800503e:	f001 fb23 	bl	8006688 <xTaskCreateStatic>
 8005042:	4603      	mov	r3, r0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e01c      	b.n	8005082 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685c      	ldr	r4, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005054:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff88 	bl	8004f72 <makeFreeRtosPriority>
 8005062:	4602      	mov	r2, r0
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	9200      	str	r2, [sp, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4632      	mov	r2, r6
 8005070:	4629      	mov	r1, r5
 8005072:	4620      	mov	r0, r4
 8005074:	f001 fb65 	bl	8006742 <xTaskCreate>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	e000      	b.n	8005084 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005082:	68fb      	ldr	r3, [r7, #12]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800508c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <osDelay+0x16>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	e000      	b.n	80050a4 <osDelay+0x18>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 fc99 	bl	80069dc <vTaskDelay>
  
  return osOK;
 80050aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4619      	mov	r1, r3
 80050ca:	2001      	movs	r0, #1
 80050cc:	f000 fc7d 	bl	80059ca <xQueueCreateMutexStatic>
 80050d0:	4603      	mov	r3, r0
 80050d2:	e003      	b.n	80050dc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80050d4:	2001      	movs	r0, #1
 80050d6:	f000 fc60 	bl	800599a <xQueueCreateMutex>
 80050da:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <osMutexWait+0x18>
    return osErrorParameter;
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	e03a      	b.n	8005172 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d103      	bne.n	8005110 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005108:	f04f 33ff 	mov.w	r3, #4294967295
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e009      	b.n	8005124 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <osMutexWait+0x40>
      ticks = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005124:	f7ff ff3d 	bl	8004fa2 <inHandlerMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	461a      	mov	r2, r3
 8005134:	2100      	movs	r1, #0
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 f874 	bl	8006224 <xQueueReceiveFromISR>
 800513c:	4603      	mov	r3, r0
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <osMutexWait+0x62>
      return osErrorOS;
 8005142:	23ff      	movs	r3, #255	; 0xff
 8005144:	e015      	b.n	8005172 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d011      	beq.n	8005170 <osMutexWait+0x8c>
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <osMutexWait+0x98>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	e008      	b.n	8005170 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 ff53 	bl	800600c <xQueueSemaphoreTake>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <osMutexWait+0x8c>
    return osErrorOS;
 800516c:	23ff      	movs	r3, #255	; 0xff
 800516e:	e000      	b.n	8005172 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005190:	f7ff ff07 	bl	8004fa2 <inHandlerMode>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fdc6 	bl	8005d32 <xQueueGiveFromISR>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <osMutexRelease+0x30>
      return osErrorOS;
 80051ac:	23ff      	movs	r3, #255	; 0xff
 80051ae:	e017      	b.n	80051e0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d013      	beq.n	80051de <osMutexRelease+0x5e>
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <osMutexRelease+0x68>)
 80051b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	e00a      	b.n	80051de <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80051c8:	2300      	movs	r3, #0
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fc16 	bl	8005a00 <xQueueGenericSend>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80051da:	23ff      	movs	r3, #255	; 0xff
 80051dc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00f      	beq.n	800521e <osSemaphoreCreate+0x32>
    if (count == 1) {
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10a      	bne.n	800521a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2203      	movs	r2, #3
 800520a:	9200      	str	r2, [sp, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	2100      	movs	r1, #0
 8005210:	2001      	movs	r0, #1
 8005212:	f000 fad7 	bl	80057c4 <xQueueGenericCreateStatic>
 8005216:	4603      	mov	r3, r0
 8005218:	e016      	b.n	8005248 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	e014      	b.n	8005248 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d110      	bne.n	8005246 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005224:	2203      	movs	r2, #3
 8005226:	2100      	movs	r1, #0
 8005228:	2001      	movs	r0, #1
 800522a:	f000 fb43 	bl	80058b4 <xQueueGenericCreate>
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <osSemaphoreCreate+0x56>
 8005236:	2300      	movs	r3, #0
 8005238:	2200      	movs	r2, #0
 800523a:	2100      	movs	r1, #0
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fbdf 	bl	8005a00 <xQueueGenericSend>
      return sema;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e000      	b.n	8005248 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005246:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	e03a      	b.n	80052de <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d103      	bne.n	800527c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e009      	b.n	8005290 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <osSemaphoreWait+0x40>
      ticks = 1;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005290:	f7ff fe87 	bl	8004fa2 <inHandlerMode>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d017      	beq.n	80052ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	461a      	mov	r2, r3
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 ffbe 	bl	8006224 <xQueueReceiveFromISR>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80052ae:	23ff      	movs	r3, #255	; 0xff
 80052b0:	e015      	b.n	80052de <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d011      	beq.n	80052dc <osSemaphoreWait+0x8c>
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <osSemaphoreWait+0x98>)
 80052ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	e008      	b.n	80052dc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fe9d 	bl	800600c <xQueueSemaphoreTake>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80052d8:	23ff      	movs	r3, #255	; 0xff
 80052da:	e000      	b.n	80052de <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80052fc:	f7ff fe51 	bl	8004fa2 <inHandlerMode>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fd10 	bl	8005d32 <xQueueGiveFromISR>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005318:	23ff      	movs	r3, #255	; 0xff
 800531a:	e017      	b.n	800534c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d013      	beq.n	800534a <osSemaphoreRelease+0x5e>
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <osSemaphoreRelease+0x68>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	e00a      	b.n	800534a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005334:	2300      	movs	r3, #0
 8005336:	2200      	movs	r2, #0
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb60 	bl	8005a00 <xQueueGenericSend>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d001      	beq.n	800534a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005346:	23ff      	movs	r3, #255	; 0xff
 8005348:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005360:	f7ff fe1f 	bl	8004fa2 <inHandlerMode>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800536a:	2382      	movs	r3, #130	; 0x82
 800536c:	e003      	b.n	8005376 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 f814 	bl	800639c <vQueueDelete>

  return osOK; 
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800537e:	b590      	push	{r4, r7, lr}
 8005380:	b085      	sub	sp, #20
 8005382:	af02      	add	r7, sp, #8
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d011      	beq.n	80053b4 <osMessageCreate+0x36>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00d      	beq.n	80053b4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2400      	movs	r4, #0
 80053aa:	9400      	str	r4, [sp, #0]
 80053ac:	f000 fa0a 	bl	80057c4 <xQueueGenericCreateStatic>
 80053b0:	4603      	mov	r3, r0
 80053b2:	e008      	b.n	80053c6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	4619      	mov	r1, r3
 80053c0:	f000 fa78 	bl	80058b4 <xQueueGenericCreate>
 80053c4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}
	...

080053d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <osMessagePut+0x1e>
    ticks = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80053ee:	f7ff fdd8 	bl	8004fa2 <inHandlerMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d018      	beq.n	800542a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80053f8:	f107 0210 	add.w	r2, r7, #16
 80053fc:	f107 0108 	add.w	r1, r7, #8
 8005400:	2300      	movs	r3, #0
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fbfa 	bl	8005bfc <xQueueGenericSendFromISR>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <osMessagePut+0x42>
      return osErrorOS;
 800540e:	23ff      	movs	r3, #255	; 0xff
 8005410:	e018      	b.n	8005444 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d014      	beq.n	8005442 <osMessagePut+0x72>
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <osMessagePut+0x7c>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e00b      	b.n	8005442 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800542a:	f107 0108 	add.w	r1, r7, #8
 800542e:	2300      	movs	r3, #0
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fae4 	bl	8005a00 <xQueueGenericSend>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <osMessagePut+0x72>
      return osErrorOS;
 800543e:	23ff      	movs	r3, #255	; 0xff
 8005440:	e000      	b.n	8005444 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b08b      	sub	sp, #44	; 0x2c
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	617b      	str	r3, [r7, #20]
    return event;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	461c      	mov	r4, r3
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800547a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800547e:	e054      	b.n	800552a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d103      	bne.n	8005498 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
 8005496:	e009      	b.n	80054ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d006      	beq.n	80054ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <osMessageGet+0x5c>
      ticks = 1;
 80054a8:	2301      	movs	r3, #1
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80054ac:	f7ff fd79 	bl	8004fa2 <inHandlerMode>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01c      	beq.n	80054f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80054b6:	f107 0220 	add.w	r2, r7, #32
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	68b8      	ldr	r0, [r7, #8]
 80054c4:	f000 feae 	bl	8006224 <xQueueReceiveFromISR>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d102      	bne.n	80054d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80054ce:	2310      	movs	r3, #16
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e001      	b.n	80054d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01d      	beq.n	800551a <osMessageGet+0xca>
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <osMessageGet+0xe4>)
 80054e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	e014      	b.n	800551a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	3304      	adds	r3, #4
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	4619      	mov	r1, r3
 80054fa:	68b8      	ldr	r0, [r7, #8]
 80054fc:	f000 fca6 	bl	8005e4c <xQueueReceive>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005506:	2310      	movs	r3, #16
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e006      	b.n	800551a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <osMessageGet+0xc6>
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <osMessageGet+0xc8>
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	461c      	mov	r4, r3
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	372c      	adds	r7, #44	; 0x2c
 800552e:	46bd      	mov	sp, r7
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	bf00      	nop
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005540:	f7ff fd2f 	bl	8004fa2 <inHandlerMode>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d004      	beq.n	8005554 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 ff08 	bl	8006360 <uxQueueMessagesWaitingFromISR>
 8005550:	4603      	mov	r3, r0
 8005552:	e003      	b.n	800555c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fee5 	bl	8006324 <uxQueueMessagesWaiting>
 800555a:	4603      	mov	r3, r0
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800556c:	f7ff fd19 	bl	8004fa2 <inHandlerMode>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <osMessageDelete+0x16>
    return osErrorISR;
 8005576:	2382      	movs	r3, #130	; 0x82
 8005578:	e003      	b.n	8005582 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 ff0e 	bl	800639c <vQueueDelete>

  return osOK; 
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f103 0208 	add.w	r2, r3, #8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f103 0208 	add.w	r2, r3, #8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d103      	bne.n	800564c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e00c      	b.n	8005666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3308      	adds	r3, #8
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <vListInsert+0x2e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d2f6      	bcs.n	8005654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6892      	ldr	r2, [r2, #8]
 80056b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6852      	ldr	r2, [r2, #4]
 80056be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d103      	bne.n	80056d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800571e:	f002 f911 	bl	8007944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	441a      	add	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	3b01      	subs	r3, #1
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	441a      	add	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d114      	bne.n	800579e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01a      	beq.n	80057b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3310      	adds	r3, #16
 8005780:	4618      	mov	r0, r3
 8005782:	f001 fbd3 	bl	8006f2c <xTaskRemoveFromEventList>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d012      	beq.n	80057b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <xQueueGenericReset+0xcc>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	e009      	b.n	80057b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3310      	adds	r3, #16
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fef1 	bl	800558a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff feec 	bl	800558a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057b2:	f002 f8f7 	bl	80079a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057b6:	2301      	movs	r3, #1
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <xQueueGenericCreateStatic+0x52>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <xQueueGenericCreateStatic+0x56>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueGenericCreateStatic+0x58>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <xQueueGenericCreateStatic+0x7e>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <xQueueGenericCreateStatic+0x82>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <xQueueGenericCreateStatic+0x84>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	61fb      	str	r3, [r7, #28]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005862:	2348      	movs	r3, #72	; 0x48
 8005864:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b48      	cmp	r3, #72	; 0x48
 800586a:	d00a      	beq.n	8005882 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61bb      	str	r3, [r7, #24]
}
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005882:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005896:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f83f 	bl	8005928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	; 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueGenericCreate+0x2a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	613b      	str	r3, [r7, #16]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3348      	adds	r3, #72	; 0x48
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 f94b 	bl	8007b88 <pvPortMalloc>
 80058f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	3348      	adds	r3, #72	; 0x48
 8005902:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800590c:	79fa      	ldrb	r2, [r7, #7]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f805 	bl	8005928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800591e:	69bb      	ldr	r3, [r7, #24]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e002      	b.n	800594a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005956:	2101      	movs	r1, #1
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff fecb 	bl	80056f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f837 	bl	8005a00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff7e 	bl	80058b4 <xQueueGenericCreate>
 80059b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ffd3 	bl	8005966 <prvInitialiseMutex>

		return xNewQueue;
 80059c0:	68fb      	ldr	r3, [r7, #12]
	}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b088      	sub	sp, #32
 80059ce:	af02      	add	r7, sp, #8
 80059d0:	4603      	mov	r3, r0
 80059d2:	6039      	str	r1, [r7, #0]
 80059d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	2300      	movs	r3, #0
 80059dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	6978      	ldr	r0, [r7, #20]
 80059ea:	f7ff feeb 	bl	80057c4 <xQueueGenericCreateStatic>
 80059ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff ffb8 	bl	8005966 <prvInitialiseMutex>

		return xNewQueue;
 80059f6:	68fb      	ldr	r3, [r7, #12]
	}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueGenericSend+0x32>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d103      	bne.n	8005a40 <xQueueGenericSend+0x40>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <xQueueGenericSend+0x44>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <xQueueGenericSend+0x46>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <xQueueGenericSend+0x60>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d103      	bne.n	8005a6e <xQueueGenericSend+0x6e>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <xQueueGenericSend+0x72>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <xQueueGenericSend+0x74>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	623b      	str	r3, [r7, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8e:	f001 fc0d 	bl	80072ac <xTaskGetSchedulerState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xQueueGenericSend+0x9e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <xQueueGenericSend+0xa2>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <xQueueGenericSend+0xa4>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xQueueGenericSend+0xbe>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61fb      	str	r3, [r7, #28]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005abe:	f001 ff41 	bl	8007944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <xQueueGenericSend+0xd4>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d129      	bne.n	8005b28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ada:	f000 fc9a 	bl	8006412 <prvCopyDataToQueue>
 8005ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	3324      	adds	r3, #36	; 0x24
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fa1d 	bl	8006f2c <xTaskRemoveFromEventList>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d013      	beq.n	8005b20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005af8:	4b3f      	ldr	r3, [pc, #252]	; (8005bf8 <xQueueGenericSend+0x1f8>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	e00a      	b.n	8005b20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b10:	4b39      	ldr	r3, [pc, #228]	; (8005bf8 <xQueueGenericSend+0x1f8>)
 8005b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b20:	f001 ff40 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e063      	b.n	8005bf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b2e:	f001 ff39 	bl	80079a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e05c      	b.n	8005bf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b3c:	f107 0314 	add.w	r3, r7, #20
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fa55 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4a:	f001 ff2b 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b4e:	f000 ffe3 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b52:	f001 fef7 	bl	8007944 <vPortEnterCritical>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d103      	bne.n	8005b6c <xQueueGenericSend+0x16c>
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d103      	bne.n	8005b82 <xQueueGenericSend+0x182>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b82:	f001 ff0f 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b86:	1d3a      	adds	r2, r7, #4
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fa44 	bl	800701c <xTaskCheckForTimeOut>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d124      	bne.n	8005be4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9c:	f000 fd31 	bl	8006602 <prvIsQueueFull>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	3310      	adds	r3, #16
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 f998 	bl	8006ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb6:	f000 fcbc 	bl	8006532 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bba:	f000 ffbb 	bl	8006b34 <xTaskResumeAll>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f af7c 	bne.w	8005abe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <xQueueGenericSend+0x1f8>)
 8005bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	e772      	b.n	8005abe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bda:	f000 fcaa 	bl	8006532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bde:	f000 ffa9 	bl	8006b34 <xTaskResumeAll>
 8005be2:	e76c      	b.n	8005abe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005be6:	f000 fca4 	bl	8006532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bea:	f000 ffa3 	bl	8006b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3738      	adds	r7, #56	; 0x38
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b090      	sub	sp, #64	; 0x40
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <xQueueGenericSendFromISR+0x3c>
 8005c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <xQueueGenericSendFromISR+0x40>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <xQueueGenericSendFromISR+0x42>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d103      	bne.n	8005c66 <xQueueGenericSendFromISR+0x6a>
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <xQueueGenericSendFromISR+0x6e>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <xQueueGenericSendFromISR+0x70>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	623b      	str	r3, [r7, #32]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c86:	f001 ff3f 	bl	8007b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61fa      	str	r2, [r7, #28]
 8005ca0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <xQueueGenericSendFromISR+0xbc>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d12f      	bne.n	8005d18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cce:	f000 fba0 	bl	8006412 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d112      	bne.n	8005d02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	3324      	adds	r3, #36	; 0x24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 f91f 	bl	8006f2c <xTaskRemoveFromEventList>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00e      	beq.n	8005d12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e007      	b.n	8005d12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	b25a      	sxtb	r2, r3
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d12:	2301      	movs	r3, #1
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d16:	e001      	b.n	8005d1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3740      	adds	r7, #64	; 0x40
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b08e      	sub	sp, #56	; 0x38
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	623b      	str	r3, [r7, #32]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61fb      	str	r3, [r7, #28]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <xQueueGiveFromISR+0x58>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <xQueueGiveFromISR+0x5c>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <xQueueGiveFromISR+0x5e>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61bb      	str	r3, [r7, #24]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005daa:	f001 fead 	bl	8007b08 <vPortValidateInterruptPriority>
	__asm volatile
 8005dae:	f3ef 8211 	mrs	r2, BASEPRI
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	617a      	str	r2, [r7, #20]
 8005dc4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005dc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d22b      	bcs.n	8005e32 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d112      	bne.n	8005e1c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	3324      	adds	r3, #36	; 0x24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f892 	bl	8006f2c <xTaskRemoveFromEventList>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2201      	movs	r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e007      	b.n	8005e2c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e20:	3301      	adds	r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	b25a      	sxtb	r2, r3
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e30:	e001      	b.n	8005e36 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f383 8811 	msr	BASEPRI, r3
}
 8005e40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3738      	adds	r7, #56	; 0x38
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <xQueueReceive+0x30>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	623b      	str	r3, [r7, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <xQueueReceive+0x3e>
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <xQueueReceive+0x42>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <xQueueReceive+0x44>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueReceive+0x5e>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	61fb      	str	r3, [r7, #28]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eaa:	f001 f9ff 	bl	80072ac <xTaskGetSchedulerState>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <xQueueReceive+0x6e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <xQueueReceive+0x72>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueReceive+0x74>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueReceive+0x8e>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61bb      	str	r3, [r7, #24]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eda:	f001 fd33 	bl	8007944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01f      	beq.n	8005f2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eee:	f000 fafa 	bl	80064e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	3310      	adds	r3, #16
 8005f06:	4618      	mov	r0, r3
 8005f08:	f001 f810 	bl	8006f2c <xTaskRemoveFromEventList>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f12:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <xQueueReceive+0x1bc>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f22:	f001 fd3f 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e069      	b.n	8005ffe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f30:	f001 fd38 	bl	80079a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e062      	b.n	8005ffe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f3e:	f107 0310 	add.w	r3, r7, #16
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 f854 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f4c:	f001 fd2a 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f50:	f000 fde2 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f54:	f001 fcf6 	bl	8007944 <vPortEnterCritical>
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d103      	bne.n	8005f6e <xQueueReceive+0x122>
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d103      	bne.n	8005f84 <xQueueReceive+0x138>
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f84:	f001 fd0e 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f88:	1d3a      	adds	r2, r7, #4
 8005f8a:	f107 0310 	add.w	r3, r7, #16
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f843 	bl	800701c <xTaskCheckForTimeOut>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d123      	bne.n	8005fe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9e:	f000 fb1a 	bl	80065d6 <prvIsQueueEmpty>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d017      	beq.n	8005fd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	3324      	adds	r3, #36	; 0x24
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 ff97 	bl	8006ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	f000 fabb 	bl	8006532 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fbc:	f000 fdba 	bl	8006b34 <xTaskResumeAll>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d189      	bne.n	8005eda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <xQueueReceive+0x1bc>)
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	e780      	b.n	8005eda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fda:	f000 faaa 	bl	8006532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fde:	f000 fda9 	bl	8006b34 <xTaskResumeAll>
 8005fe2:	e77a      	b.n	8005eda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe6:	f000 faa4 	bl	8006532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fea:	f000 fda3 	bl	8006b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff0:	f000 faf1 	bl	80065d6 <prvIsQueueEmpty>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f43f af6f 	beq.w	8005eda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3730      	adds	r7, #48	; 0x30
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	; 0x38
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	623b      	str	r3, [r7, #32]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	61fb      	str	r3, [r7, #28]
}
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800605c:	f001 f926 	bl	80072ac <xTaskGetSchedulerState>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <xQueueSemaphoreTake+0x60>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <xQueueSemaphoreTake+0x64>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <xQueueSemaphoreTake+0x66>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61bb      	str	r3, [r7, #24]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800608c:	f001 fc5a 	bl	8007944 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	2b00      	cmp	r3, #0
 800609a:	d024      	beq.n	80060e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	1e5a      	subs	r2, r3, #1
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060ac:	f001 faa6 	bl	80075fc <pvTaskIncrementMutexHeldCount>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00f      	beq.n	80060de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	3310      	adds	r3, #16
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 ff32 	bl	8006f2c <xTaskRemoveFromEventList>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060ce:	4b54      	ldr	r3, [pc, #336]	; (8006220 <xQueueSemaphoreTake+0x214>)
 80060d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060de:	f001 fc61 	bl	80079a4 <vPortExitCritical>
				return pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e097      	b.n	8006216 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d111      	bne.n	8006110 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	617b      	str	r3, [r7, #20]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006108:	f001 fc4c 	bl	80079a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
 800610e:	e082      	b.n	8006216 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006116:	f107 030c 	add.w	r3, r7, #12
 800611a:	4618      	mov	r0, r3
 800611c:	f000 ff68 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006124:	f001 fc3e 	bl	80079a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006128:	f000 fcf6 	bl	8006b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612c:	f001 fc0a 	bl	8007944 <vPortEnterCritical>
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006136:	b25b      	sxtb	r3, r3
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d103      	bne.n	8006146 <xQueueSemaphoreTake+0x13a>
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800614c:	b25b      	sxtb	r3, r3
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d103      	bne.n	800615c <xQueueSemaphoreTake+0x150>
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800615c:	f001 fc22 	bl	80079a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006160:	463a      	mov	r2, r7
 8006162:	f107 030c 	add.w	r3, r7, #12
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f000 ff57 	bl	800701c <xTaskCheckForTimeOut>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d132      	bne.n	80061da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006176:	f000 fa2e 	bl	80065d6 <prvIsQueueEmpty>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d026      	beq.n	80061ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006188:	f001 fbdc 	bl	8007944 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f8a9 	bl	80072e8 <xTaskPriorityInherit>
 8006196:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006198:	f001 fc04 	bl	80079a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fe9d 	bl	8006ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ac:	f000 f9c1 	bl	8006532 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061b0:	f000 fcc0 	bl	8006b34 <xTaskResumeAll>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af68 	bne.w	800608c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80061bc:	4b18      	ldr	r3, [pc, #96]	; (8006220 <xQueueSemaphoreTake+0x214>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	e75e      	b.n	800608c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80061ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d0:	f000 f9af 	bl	8006532 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061d4:	f000 fcae 	bl	8006b34 <xTaskResumeAll>
 80061d8:	e758      	b.n	800608c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061dc:	f000 f9a9 	bl	8006532 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061e0:	f000 fca8 	bl	8006b34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e6:	f000 f9f6 	bl	80065d6 <prvIsQueueEmpty>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f43f af4d 	beq.w	800608c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80061f8:	f001 fba4 	bl	8007944 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061fe:	f000 f8f0 	bl	80063e2 <prvGetDisinheritPriorityAfterTimeout>
 8006202:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f968 	bl	80074e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006210:	f001 fbc8 	bl	80079a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006216:	4618      	mov	r0, r3
 8006218:	3738      	adds	r7, #56	; 0x38
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	; 0x38
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	623b      	str	r3, [r7, #32]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <xQueueReceiveFromISR+0x3a>
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <xQueueReceiveFromISR+0x3e>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueReceiveFromISR+0x40>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800627e:	f001 fc43 	bl	8007b08 <vPortValidateInterruptPriority>
	__asm volatile
 8006282:	f3ef 8211 	mrs	r2, BASEPRI
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	61ba      	str	r2, [r7, #24]
 8006298:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800629a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d02f      	beq.n	800630a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b8:	f000 f915 	bl	80064e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d112      	bne.n	80062f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d016      	beq.n	8006304 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	3310      	adds	r3, #16
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fe26 	bl	8006f2c <xTaskRemoveFromEventList>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e007      	b.n	8006304 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f8:	3301      	adds	r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	b25a      	sxtb	r2, r3
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
 8006308:	e001      	b.n	800630e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f383 8811 	msr	BASEPRI, r3
}
 8006318:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800631c:	4618      	mov	r0, r3
 800631e:	3738      	adds	r7, #56	; 0x38
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60bb      	str	r3, [r7, #8]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006348:	f001 fafc 	bl	8007944 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006352:	f001 fb27 	bl	80079a4 <vPortExitCritical>

	return uxReturn;
 8006356:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60fb      	str	r3, [r7, #12]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800638e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006390:	4618      	mov	r0, r3
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <vQueueDelete+0x28>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f935 	bl	8006634 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f001 fca3 	bl	8007d20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d006      	beq.n	8006400 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f1c3 0307 	rsb	r3, r3, #7
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e001      	b.n	8006404 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006404:	68fb      	ldr	r3, [r7, #12]
	}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10d      	bne.n	800644c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d14d      	bne.n	80064d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 ffc9 	bl	80073d4 <xTaskPriorityDisinherit>
 8006442:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	e043      	b.n	80064d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d119      	bne.n	8006486 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6858      	ldr	r0, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	461a      	mov	r2, r3
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	f012 fd65 	bl	8018f2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d32b      	bcc.n	80064d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	e026      	b.n	80064d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68d8      	ldr	r0, [r3, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	461a      	mov	r2, r3
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	f012 fd4b 	bl	8018f2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	425b      	negs	r3, r3
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d207      	bcs.n	80064c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	425b      	negs	r3, r3
 80064bc:	441a      	add	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d105      	bne.n	80064d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064dc:	697b      	ldr	r3, [r7, #20]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d018      	beq.n	800652a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	441a      	add	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d303      	bcc.n	800651a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68d9      	ldr	r1, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	461a      	mov	r2, r3
 8006524:	6838      	ldr	r0, [r7, #0]
 8006526:	f012 fd01 	bl	8018f2c <memcpy>
	}
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800653a:	f001 fa03 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006544:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006546:	e011      	b.n	800656c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d012      	beq.n	8006576 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fce9 	bl	8006f2c <xTaskRemoveFromEventList>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006560:	f000 fdbe 	bl	80070e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	3b01      	subs	r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800656c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006570:	2b00      	cmp	r3, #0
 8006572:	dce9      	bgt.n	8006548 <prvUnlockQueue+0x16>
 8006574:	e000      	b.n	8006578 <prvUnlockQueue+0x46>
					break;
 8006576:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006580:	f001 fa10 	bl	80079a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006584:	f001 f9de 	bl	8007944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800658e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006590:	e011      	b.n	80065b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d012      	beq.n	80065c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3310      	adds	r3, #16
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fcc4 	bl	8006f2c <xTaskRemoveFromEventList>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065aa:	f000 fd99 	bl	80070e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dce9      	bgt.n	8006592 <prvUnlockQueue+0x60>
 80065be:	e000      	b.n	80065c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065ca:	f001 f9eb 	bl	80079a4 <vPortExitCritical>
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065de:	f001 f9b1 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e001      	b.n	80065f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f4:	f001 f9d6 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800660a:	f001 f99b 	bl	8007944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	429a      	cmp	r2, r3
 8006618:	d102      	bne.n	8006620 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e001      	b.n	8006624 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f001 f9be 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e016      	b.n	8006670 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006642:	4a10      	ldr	r2, [pc, #64]	; (8006684 <vQueueUnregisterQueue+0x50>)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4413      	add	r3, r2
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d10b      	bne.n	800666a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006652:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <vQueueUnregisterQueue+0x50>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2100      	movs	r1, #0
 8006658:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <vQueueUnregisterQueue+0x50>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	4413      	add	r3, r2
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]
				break;
 8006668:	e006      	b.n	8006678 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b07      	cmp	r3, #7
 8006674:	d9e5      	bls.n	8006642 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20005448 	.word	0x20005448

08006688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08e      	sub	sp, #56	; 0x38
 800668c:	af04      	add	r7, sp, #16
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xTaskCreateStatic+0x46>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61fb      	str	r3, [r7, #28]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ce:	23a0      	movs	r3, #160	; 0xa0
 80066d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2ba0      	cmp	r3, #160	; 0xa0
 80066d6:	d00a      	beq.n	80066ee <xTaskCreateStatic+0x66>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61bb      	str	r3, [r7, #24]
}
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01e      	beq.n	8006734 <xTaskCreateStatic+0xac>
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01b      	beq.n	8006734 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006704:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2202      	movs	r2, #2
 800670a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800670e:	2300      	movs	r3, #0
 8006710:	9303      	str	r3, [sp, #12]
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	9302      	str	r3, [sp, #8]
 8006716:	f107 0314 	add.w	r3, r7, #20
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f850 	bl	80067cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800672c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800672e:	f000 f8eb 	bl	8006908 <prvAddNewTaskToReadyList>
 8006732:	e001      	b.n	8006738 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006738:	697b      	ldr	r3, [r7, #20]
	}
 800673a:	4618      	mov	r0, r3
 800673c:	3728      	adds	r7, #40	; 0x28
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006742:	b580      	push	{r7, lr}
 8006744:	b08c      	sub	sp, #48	; 0x30
 8006746:	af04      	add	r7, sp, #16
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fa16 	bl	8007b88 <pvPortMalloc>
 800675c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006764:	20a0      	movs	r0, #160	; 0xa0
 8006766:	f001 fa0f 	bl	8007b88 <pvPortMalloc>
 800676a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
 8006778:	e005      	b.n	8006786 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800677a:	6978      	ldr	r0, [r7, #20]
 800677c:	f001 fad0 	bl	8007d20 <vPortFree>
 8006780:	e001      	b.n	8006786 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	2300      	movs	r3, #0
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f80e 	bl	80067cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b0:	69f8      	ldr	r0, [r7, #28]
 80067b2:	f000 f8a9 	bl	8006908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067b6:	2301      	movs	r3, #1
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e002      	b.n	80067c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
 80067c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067c2:	69bb      	ldr	r3, [r7, #24]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067e4:	3b01      	subs	r3, #1
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f023 0307 	bic.w	r3, r3, #7
 80067f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <prvInitialiseNewTask+0x48>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	617b      	str	r3, [r7, #20]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01f      	beq.n	800685a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	e012      	b.n	8006846 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	7819      	ldrb	r1, [r3, #0]
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	3334      	adds	r3, #52	; 0x34
 8006830:	460a      	mov	r2, r1
 8006832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	3301      	adds	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	2b0f      	cmp	r3, #15
 800684a:	d9e9      	bls.n	8006820 <prvInitialiseNewTask+0x54>
 800684c:	e000      	b.n	8006850 <prvInitialiseNewTask+0x84>
			{
				break;
 800684e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006858:	e003      	b.n	8006862 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b06      	cmp	r3, #6
 8006866:	d901      	bls.n	800686c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006868:	2306      	movs	r3, #6
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	3304      	adds	r3, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fea1 	bl	80055ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	3318      	adds	r3, #24
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe fe9c 	bl	80055ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	f1c3 0207 	rsb	r2, r3, #7
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	334c      	adds	r3, #76	; 0x4c
 80068bc:	224c      	movs	r2, #76	; 0x4c
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f012 f9d2 	bl	8018c6a <memset>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	4a0c      	ldr	r2, [pc, #48]	; (80068fc <prvInitialiseNewTask+0x130>)
 80068ca:	651a      	str	r2, [r3, #80]	; 0x50
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <prvInitialiseNewTask+0x134>)
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <prvInitialiseNewTask+0x138>)
 80068d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	69b8      	ldr	r0, [r7, #24]
 80068de:	f000 ff07 	bl	80076f0 <pxPortInitialiseStack>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f4:	bf00      	nop
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20011334 	.word	0x20011334
 8006900:	2001139c 	.word	0x2001139c
 8006904:	20011404 	.word	0x20011404

08006908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006910:	f001 f818 	bl	8007944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006914:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <prvAddNewTaskToReadyList+0xb8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <prvAddNewTaskToReadyList+0xb8>)
 800691c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800691e:	4b29      	ldr	r3, [pc, #164]	; (80069c4 <prvAddNewTaskToReadyList+0xbc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006926:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <prvAddNewTaskToReadyList+0xbc>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800692c:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <prvAddNewTaskToReadyList+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d110      	bne.n	8006956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006934:	f000 fbf8 	bl	8007128 <prvInitialiseTaskLists>
 8006938:	e00d      	b.n	8006956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800693a:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <prvAddNewTaskToReadyList+0xc0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <prvAddNewTaskToReadyList+0xbc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	429a      	cmp	r2, r3
 800694e:	d802      	bhi.n	8006956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <prvAddNewTaskToReadyList+0xbc>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <prvAddNewTaskToReadyList+0xc4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3301      	adds	r3, #1
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <prvAddNewTaskToReadyList+0xc4>)
 800695e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2201      	movs	r2, #1
 8006966:	409a      	lsls	r2, r3
 8006968:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4313      	orrs	r3, r2
 800696e:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <prvAddNewTaskToReadyList+0xc8>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <prvAddNewTaskToReadyList+0xcc>)
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe fe2b 	bl	80055e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800698e:	f001 f809 	bl	80079a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006992:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <prvAddNewTaskToReadyList+0xc0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvAddNewTaskToReadyList+0xbc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d207      	bcs.n	80069b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <prvAddNewTaskToReadyList+0xd0>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20005588 	.word	0x20005588
 80069c4:	20005488 	.word	0x20005488
 80069c8:	20005594 	.word	0x20005594
 80069cc:	200055a4 	.word	0x200055a4
 80069d0:	20005590 	.word	0x20005590
 80069d4:	2000548c 	.word	0x2000548c
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d017      	beq.n	8006a1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <vTaskDelay+0x60>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <vTaskDelay+0x30>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a0c:	f000 f884 	bl	8006b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a10:	2100      	movs	r1, #0
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fe06 	bl	8007624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a18:	f000 f88c 	bl	8006b34 <xTaskResumeAll>
 8006a1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d107      	bne.n	8006a34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <vTaskDelay+0x64>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	200055b0 	.word	0x200055b0
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a52:	463a      	mov	r2, r7
 8006a54:	1d39      	adds	r1, r7, #4
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7f9 fdae 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	9202      	str	r2, [sp, #8]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	460a      	mov	r2, r1
 8006a72:	4921      	ldr	r1, [pc, #132]	; (8006af8 <vTaskStartScheduler+0xb4>)
 8006a74:	4821      	ldr	r0, [pc, #132]	; (8006afc <vTaskStartScheduler+0xb8>)
 8006a76:	f7ff fe07 	bl	8006688 <xTaskCreateStatic>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4a20      	ldr	r2, [pc, #128]	; (8006b00 <vTaskStartScheduler+0xbc>)
 8006a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a80:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <vTaskStartScheduler+0xbc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e001      	b.n	8006a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d11b      	bne.n	8006ad0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	613b      	str	r3, [r7, #16]
}
 8006aaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <vTaskStartScheduler+0xc0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	334c      	adds	r3, #76	; 0x4c
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <vTaskStartScheduler+0xc4>)
 8006ab4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab6:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <vTaskStartScheduler+0xc8>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006abe:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <vTaskStartScheduler+0xcc>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <vTaskStartScheduler+0xd0>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aca:	f000 fe99 	bl	8007800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ace:	e00e      	b.n	8006aee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d10a      	bne.n	8006aee <vTaskStartScheduler+0xaa>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	60fb      	str	r3, [r7, #12]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <vTaskStartScheduler+0xa8>
}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	0801a08c 	.word	0x0801a08c
 8006afc:	080070f9 	.word	0x080070f9
 8006b00:	200055ac 	.word	0x200055ac
 8006b04:	20005488 	.word	0x20005488
 8006b08:	2000008c 	.word	0x2000008c
 8006b0c:	200055a8 	.word	0x200055a8
 8006b10:	20005594 	.word	0x20005594
 8006b14:	2000558c 	.word	0x2000558c

08006b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <vTaskSuspendAll+0x18>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a03      	ldr	r2, [pc, #12]	; (8006b30 <vTaskSuspendAll+0x18>)
 8006b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	200055b0 	.word	0x200055b0

08006b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b42:	4b41      	ldr	r3, [pc, #260]	; (8006c48 <xTaskResumeAll+0x114>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	603b      	str	r3, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b60:	f000 fef0 	bl	8007944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b64:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <xTaskResumeAll+0x114>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	4a37      	ldr	r2, [pc, #220]	; (8006c48 <xTaskResumeAll+0x114>)
 8006b6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6e:	4b36      	ldr	r3, [pc, #216]	; (8006c48 <xTaskResumeAll+0x114>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d161      	bne.n	8006c3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b76:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <xTaskResumeAll+0x118>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d05d      	beq.n	8006c3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b7e:	e02e      	b.n	8006bde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b80:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <xTaskResumeAll+0x11c>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3318      	adds	r3, #24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fd86 	bl	800569e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fd81 	bl	800569e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <xTaskResumeAll+0x120>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <xTaskResumeAll+0x120>)
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <xTaskResumeAll+0x124>)
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fe fd0d 	bl	80055e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <xTaskResumeAll+0x128>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d302      	bcc.n	8006bde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006bd8:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <xTaskResumeAll+0x12c>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bde:	4b1c      	ldr	r3, [pc, #112]	; (8006c50 <xTaskResumeAll+0x11c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1cc      	bne.n	8006b80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bec:	f000 fb3e 	bl	800726c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <xTaskResumeAll+0x130>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bfc:	f000 f858 	bl	8006cb0 <xTaskIncrementTick>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <xTaskResumeAll+0x12c>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f1      	bne.n	8006bfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <xTaskResumeAll+0x130>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTaskResumeAll+0x12c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <xTaskResumeAll+0x134>)
 8006c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c3a:	f000 feb3 	bl	80079a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	200055b0 	.word	0x200055b0
 8006c4c:	20005588 	.word	0x20005588
 8006c50:	20005548 	.word	0x20005548
 8006c54:	20005590 	.word	0x20005590
 8006c58:	2000548c 	.word	0x2000548c
 8006c5c:	20005488 	.word	0x20005488
 8006c60:	2000559c 	.word	0x2000559c
 8006c64:	20005598 	.word	0x20005598
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <xTaskGetTickCount+0x1c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c78:	687b      	ldr	r3, [r7, #4]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	2000558c 	.word	0x2000558c

08006c8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c92:	f000 ff39 	bl	8007b08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c96:	2300      	movs	r3, #0
 8006c98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <xTaskGetTickCountFromISR+0x20>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ca0:	683b      	ldr	r3, [r7, #0]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000558c 	.word	0x2000558c

08006cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cba:	4b4e      	ldr	r3, [pc, #312]	; (8006df4 <xTaskIncrementTick+0x144>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f040 808e 	bne.w	8006de0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cc4:	4b4c      	ldr	r3, [pc, #304]	; (8006df8 <xTaskIncrementTick+0x148>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ccc:	4a4a      	ldr	r2, [pc, #296]	; (8006df8 <xTaskIncrementTick+0x148>)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d120      	bne.n	8006d1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cd8:	4b48      	ldr	r3, [pc, #288]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskIncrementTick+0x46>
 8006cf8:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b40      	ldr	r3, [pc, #256]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3e      	ldr	r2, [pc, #248]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4a3e      	ldr	r2, [pc, #248]	; (8006e00 <xTaskIncrementTick+0x150>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a3c      	ldr	r2, [pc, #240]	; (8006e04 <xTaskIncrementTick+0x154>)
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	f000 faa9 	bl	800726c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d1a:	4b3b      	ldr	r3, [pc, #236]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d348      	bcc.n	8006db6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d24:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	601a      	str	r2, [r3, #0]
					break;
 8006d36:	e03e      	b.n	8006db6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <xTaskIncrementTick+0x14c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d203      	bcs.n	8006d58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d50:	4a2d      	ldr	r2, [pc, #180]	; (8006e08 <xTaskIncrementTick+0x158>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d56:	e02e      	b.n	8006db6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fc9e 	bl	800569e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fc95 	bl	800569e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	2201      	movs	r2, #1
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	4b23      	ldr	r3, [pc, #140]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <xTaskIncrementTick+0x15c>)
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006d94:	441a      	add	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fe fc21 	bl	80055e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3b9      	bcc.n	8006d24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006db4:	e7b6      	b.n	8006d24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <xTaskIncrementTick+0x164>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbc:	4914      	ldr	r1, [pc, #80]	; (8006e10 <xTaskIncrementTick+0x160>)
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d901      	bls.n	8006dd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dd2:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <xTaskIncrementTick+0x168>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e004      	b.n	8006dea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006de0:	4b0e      	ldr	r3, [pc, #56]	; (8006e1c <xTaskIncrementTick+0x16c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <xTaskIncrementTick+0x16c>)
 8006de8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	200055b0 	.word	0x200055b0
 8006df8:	2000558c 	.word	0x2000558c
 8006dfc:	20005540 	.word	0x20005540
 8006e00:	20005544 	.word	0x20005544
 8006e04:	200055a0 	.word	0x200055a0
 8006e08:	200055a8 	.word	0x200055a8
 8006e0c:	20005590 	.word	0x20005590
 8006e10:	2000548c 	.word	0x2000548c
 8006e14:	20005488 	.word	0x20005488
 8006e18:	2000559c 	.word	0x2000559c
 8006e1c:	20005598 	.word	0x20005598

08006e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <vTaskSwitchContext+0xac>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e2e:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <vTaskSwitchContext+0xb0>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e34:	e044      	b.n	8006ec0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e36:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <vTaskSwitchContext+0xb0>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3c:	4b25      	ldr	r3, [pc, #148]	; (8006ed4 <vTaskSwitchContext+0xb4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	f1c3 031f 	rsb	r3, r3, #31
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	4921      	ldr	r1, [pc, #132]	; (8006ed8 <vTaskSwitchContext+0xb8>)
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	607b      	str	r3, [r7, #4]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vTaskSwitchContext+0x5a>
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <vTaskSwitchContext+0xb8>)
 8006e88:	4413      	add	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d104      	bne.n	8006eac <vTaskSwitchContext+0x8c>
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <vTaskSwitchContext+0xbc>)
 8006eb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <vTaskSwitchContext+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	334c      	adds	r3, #76	; 0x4c
 8006ebc:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <vTaskSwitchContext+0xc0>)
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200055b0 	.word	0x200055b0
 8006ed0:	2000559c 	.word	0x2000559c
 8006ed4:	20005590 	.word	0x20005590
 8006ed8:	2000548c 	.word	0x2000548c
 8006edc:	20005488 	.word	0x20005488
 8006ee0:	2000008c 	.word	0x2000008c

08006ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0a:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <vTaskPlaceOnEventList+0x44>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fe fb8a 	bl	800562c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f18:	2101      	movs	r1, #1
 8006f1a:	6838      	ldr	r0, [r7, #0]
 8006f1c:	f000 fb82 	bl	8007624 <prvAddCurrentTaskToDelayedList>
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20005488 	.word	0x20005488

08006f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60fb      	str	r3, [r7, #12]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fb9e 	bl	800569e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <xTaskRemoveFromEventList+0xac>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11c      	bne.n	8006fa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fb95 	bl	800569e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	2201      	movs	r2, #1
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <xTaskRemoveFromEventList+0xb0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <xTaskRemoveFromEventList+0xb0>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <xTaskRemoveFromEventList+0xb4>)
 8006f94:	441a      	add	r2, r3
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fe fb21 	bl	80055e4 <vListInsertEnd>
 8006fa2:	e005      	b.n	8006fb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	3318      	adds	r3, #24
 8006fa8:	4619      	mov	r1, r3
 8006faa:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <xTaskRemoveFromEventList+0xb8>)
 8006fac:	f7fe fb1a 	bl	80055e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <xTaskRemoveFromEventList+0xbc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d905      	bls.n	8006fca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <xTaskRemoveFromEventList+0xc0>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	e001      	b.n	8006fce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fce:	697b      	ldr	r3, [r7, #20]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	200055b0 	.word	0x200055b0
 8006fdc:	20005590 	.word	0x20005590
 8006fe0:	2000548c 	.word	0x2000548c
 8006fe4:	20005548 	.word	0x20005548
 8006fe8:	20005488 	.word	0x20005488
 8006fec:	2000559c 	.word	0x2000559c

08006ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <vTaskInternalSetTimeOutState+0x24>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <vTaskInternalSetTimeOutState+0x28>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	200055a0 	.word	0x200055a0
 8007018:	2000558c 	.word	0x2000558c

0800701c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	613b      	str	r3, [r7, #16]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	60fb      	str	r3, [r7, #12]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800705e:	f000 fc71 	bl	8007944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTaskCheckForTimeOut+0xbc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d102      	bne.n	8007082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e023      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <xTaskCheckForTimeOut+0xc0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d007      	beq.n	800709e <xTaskCheckForTimeOut+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e015      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d20b      	bcs.n	80070c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff9b 	bl	8006ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e004      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ca:	f000 fc6b 	bl	80079a4 <vPortExitCritical>

	return xReturn;
 80070ce:	69fb      	ldr	r3, [r7, #28]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	2000558c 	.word	0x2000558c
 80070dc:	200055a0 	.word	0x200055a0

080070e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <vTaskMissedYield+0x14>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	2000559c 	.word	0x2000559c

080070f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007100:	f000 f852 	bl	80071a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <prvIdleTask+0x28>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d9f9      	bls.n	8007100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <prvIdleTask+0x2c>)
 800710e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800711c:	e7f0      	b.n	8007100 <prvIdleTask+0x8>
 800711e:	bf00      	nop
 8007120:	2000548c 	.word	0x2000548c
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712e:	2300      	movs	r3, #0
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	e00c      	b.n	800714e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <prvInitialiseTaskLists+0x60>)
 8007140:	4413      	add	r3, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fa21 	bl	800558a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b06      	cmp	r3, #6
 8007152:	d9ef      	bls.n	8007134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007154:	480d      	ldr	r0, [pc, #52]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007156:	f7fe fa18 	bl	800558a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800715c:	f7fe fa15 	bl	800558a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007160:	480c      	ldr	r0, [pc, #48]	; (8007194 <prvInitialiseTaskLists+0x6c>)
 8007162:	f7fe fa12 	bl	800558a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007166:	480c      	ldr	r0, [pc, #48]	; (8007198 <prvInitialiseTaskLists+0x70>)
 8007168:	f7fe fa0f 	bl	800558a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <prvInitialiseTaskLists+0x74>)
 800716e:	f7fe fa0c 	bl	800558a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <prvInitialiseTaskLists+0x78>)
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <prvInitialiseTaskLists+0x7c>)
 800717a:	4a05      	ldr	r2, [pc, #20]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000548c 	.word	0x2000548c
 800718c:	20005518 	.word	0x20005518
 8007190:	2000552c 	.word	0x2000552c
 8007194:	20005548 	.word	0x20005548
 8007198:	2000555c 	.word	0x2000555c
 800719c:	20005574 	.word	0x20005574
 80071a0:	20005540 	.word	0x20005540
 80071a4:	20005544 	.word	0x20005544

080071a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ae:	e019      	b.n	80071e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b0:	f000 fbc8 	bl	8007944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <prvCheckTasksWaitingTermination+0x50>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fa6c 	bl	800569e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071da:	f000 fbe3 	bl	80079a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f810 	bl	8007204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e1      	bne.n	80071b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000555c 	.word	0x2000555c
 80071fc:	20005588 	.word	0x20005588
 8007200:	20005570 	.word	0x20005570

08007204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	334c      	adds	r3, #76	; 0x4c
 8007210:	4618      	mov	r0, r3
 8007212:	f011 fdd9 	bl	8018dc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800721c:	2b00      	cmp	r3, #0
 800721e:	d108      	bne.n	8007232 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fd7b 	bl	8007d20 <vPortFree>
				vPortFree( pxTCB );
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fd78 	bl	8007d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007230:	e018      	b.n	8007264 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007238:	2b01      	cmp	r3, #1
 800723a:	d103      	bne.n	8007244 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fd6f 	bl	8007d20 <vPortFree>
	}
 8007242:	e00f      	b.n	8007264 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800724a:	2b02      	cmp	r3, #2
 800724c:	d00a      	beq.n	8007264 <prvDeleteTCB+0x60>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	60fb      	str	r3, [r7, #12]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <prvDeleteTCB+0x5e>
	}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <prvResetNextTaskUnblockTime+0x38>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <prvResetNextTaskUnblockTime+0x3c>)
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007284:	e008      	b.n	8007298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <prvResetNextTaskUnblockTime+0x38>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <prvResetNextTaskUnblockTime+0x3c>)
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	20005540 	.word	0x20005540
 80072a8:	200055a8 	.word	0x200055a8

080072ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <xTaskGetSchedulerState+0x34>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072ba:	2301      	movs	r3, #1
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	e008      	b.n	80072d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072c0:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <xTaskGetSchedulerState+0x38>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c8:	2302      	movs	r3, #2
 80072ca:	607b      	str	r3, [r7, #4]
 80072cc:	e001      	b.n	80072d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072d2:	687b      	ldr	r3, [r7, #4]
	}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20005594 	.word	0x20005594
 80072e4:	200055b0 	.word	0x200055b0

080072e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d05e      	beq.n	80073bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007302:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <xTaskPriorityInherit+0xe0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	429a      	cmp	r2, r3
 800730a:	d24e      	bcs.n	80073aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	db06      	blt.n	8007322 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007314:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <xTaskPriorityInherit+0xe0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f1c3 0207 	rsb	r2, r3, #7
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6959      	ldr	r1, [r3, #20]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4a26      	ldr	r2, [pc, #152]	; (80073cc <xTaskPriorityInherit+0xe4>)
 8007334:	4413      	add	r3, r2
 8007336:	4299      	cmp	r1, r3
 8007338:	d12f      	bne.n	800739a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	3304      	adds	r3, #4
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f9ad 	bl	800569e <uxListRemove>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	2201      	movs	r2, #1
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43da      	mvns	r2, r3
 8007356:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <xTaskPriorityInherit+0xe8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4013      	ands	r3, r2
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <xTaskPriorityInherit+0xe8>)
 800735e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007360:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <xTaskPriorityInherit+0xe0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	2201      	movs	r2, #1
 8007370:	409a      	lsls	r2, r3
 8007372:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <xTaskPriorityInherit+0xe8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <xTaskPriorityInherit+0xe8>)
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4a10      	ldr	r2, [pc, #64]	; (80073cc <xTaskPriorityInherit+0xe4>)
 800738a:	441a      	add	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3304      	adds	r3, #4
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7fe f926 	bl	80055e4 <vListInsertEnd>
 8007398:	e004      	b.n	80073a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <xTaskPriorityInherit+0xe0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e008      	b.n	80073bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <xTaskPriorityInherit+0xe0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d201      	bcs.n	80073bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073b8:	2301      	movs	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073bc:	68fb      	ldr	r3, [r7, #12]
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20005488 	.word	0x20005488
 80073cc:	2000548c 	.word	0x2000548c
 80073d0:	20005590 	.word	0x20005590

080073d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d06e      	beq.n	80074c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ea:	4b3a      	ldr	r3, [pc, #232]	; (80074d4 <xTaskPriorityDisinherit+0x100>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d00a      	beq.n	800740a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	60fb      	str	r3, [r7, #12]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60bb      	str	r3, [r7, #8]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743a:	429a      	cmp	r2, r3
 800743c:	d044      	beq.n	80074c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007442:	2b00      	cmp	r3, #0
 8007444:	d140      	bne.n	80074c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3304      	adds	r3, #4
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe f927 	bl	800569e <uxListRemove>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d115      	bne.n	8007482 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	491f      	ldr	r1, [pc, #124]	; (80074d8 <xTaskPriorityDisinherit+0x104>)
 800745c:	4613      	mov	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <xTaskPriorityDisinherit+0xae>
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	2201      	movs	r2, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43da      	mvns	r2, r3
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <xTaskPriorityDisinherit+0x108>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4013      	ands	r3, r2
 800747e:	4a17      	ldr	r2, [pc, #92]	; (80074dc <xTaskPriorityDisinherit+0x108>)
 8007480:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f1c3 0207 	rsb	r2, r3, #7
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	2201      	movs	r2, #1
 800749c:	409a      	lsls	r2, r3
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <xTaskPriorityDisinherit+0x108>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	4a0d      	ldr	r2, [pc, #52]	; (80074dc <xTaskPriorityDisinherit+0x108>)
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <xTaskPriorityDisinherit+0x104>)
 80074b6:	441a      	add	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fe f890 	bl	80055e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074c8:	697b      	ldr	r3, [r7, #20]
	}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20005488 	.word	0x20005488
 80074d8:	2000548c 	.word	0x2000548c
 80074dc:	20005590 	.word	0x20005590

080074e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d077      	beq.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d902      	bls.n	8007526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e002      	b.n	800752c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d058      	beq.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	429a      	cmp	r2, r3
 800753e:	d153      	bne.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007540:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	429a      	cmp	r2, r3
 8007548:	d10a      	bne.n	8007560 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db04      	blt.n	800757e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f1c3 0207 	rsb	r2, r3, #7
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	6959      	ldr	r1, [r3, #20]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800758e:	4413      	add	r3, r2
 8007590:	4299      	cmp	r1, r3
 8007592:	d129      	bne.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f880 	bl	800569e <uxListRemove>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	2201      	movs	r2, #1
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	43da      	mvns	r2, r3
 80075b0:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4013      	ands	r3, r2
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	2201      	movs	r2, #1
 80075c0:	409a      	lsls	r2, r3
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	4a0b      	ldr	r2, [pc, #44]	; (80075f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4a06      	ldr	r2, [pc, #24]	; (80075f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80075da:	441a      	add	r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fd fffe 	bl	80055e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075e8:	bf00      	nop
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20005488 	.word	0x20005488
 80075f4:	2000548c 	.word	0x2000548c
 80075f8:	20005590 	.word	0x20005590

080075fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <pvTaskIncrementMutexHeldCount+0x24>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <pvTaskIncrementMutexHeldCount+0x24>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760e:	3201      	adds	r2, #1
 8007610:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007612:	4b03      	ldr	r3, [pc, #12]	; (8007620 <pvTaskIncrementMutexHeldCount+0x24>)
 8007614:	681b      	ldr	r3, [r3, #0]
	}
 8007616:	4618      	mov	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20005488 	.word	0x20005488

08007624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800762e:	4b29      	ldr	r3, [pc, #164]	; (80076d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f82f 	bl	800569e <uxListRemove>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10b      	bne.n	800765e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	2201      	movs	r2, #1
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43da      	mvns	r2, r3
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4013      	ands	r3, r2
 800765a:	4a20      	ldr	r2, [pc, #128]	; (80076dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800765c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d10a      	bne.n	800767c <prvAddCurrentTaskToDelayedList+0x58>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	481a      	ldr	r0, [pc, #104]	; (80076e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007676:	f7fd ffb5 	bl	80055e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800767a:	e026      	b.n	80076ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007684:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	429a      	cmp	r2, r3
 8007692:	d209      	bcs.n	80076a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3304      	adds	r3, #4
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f7fd ffc3 	bl	800562c <vListInsert>
}
 80076a6:	e010      	b.n	80076ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7fd ffb9 	bl	800562c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d202      	bcs.n	80076ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076c4:	4a09      	ldr	r2, [pc, #36]	; (80076ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6013      	str	r3, [r2, #0]
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	2000558c 	.word	0x2000558c
 80076d8:	20005488 	.word	0x20005488
 80076dc:	20005590 	.word	0x20005590
 80076e0:	20005574 	.word	0x20005574
 80076e4:	20005544 	.word	0x20005544
 80076e8:	20005540 	.word	0x20005540
 80076ec:	200055a8 	.word	0x200055a8

080076f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3b04      	subs	r3, #4
 8007700:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3b04      	subs	r3, #4
 800771e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007720:	4a0c      	ldr	r2, [pc, #48]	; (8007754 <pxPortInitialiseStack+0x64>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b14      	subs	r3, #20
 800772a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b04      	subs	r3, #4
 8007736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f06f 0202 	mvn.w	r2, #2
 800773e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3b20      	subs	r3, #32
 8007744:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	08007759 	.word	0x08007759

08007758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007762:	4b12      	ldr	r3, [pc, #72]	; (80077ac <prvTaskExitError+0x54>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d00a      	beq.n	8007782 <prvTaskExitError+0x2a>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <prvTaskExitError+0x28>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60bb      	str	r3, [r7, #8]
}
 8007794:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007796:	bf00      	nop
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0fc      	beq.n	8007798 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000020 	.word	0x20000020

080077b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <pxCurrentTCBConst2>)
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	6808      	ldr	r0, [r1, #0]
 80077b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	f380 8809 	msr	PSP, r0
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8811 	msr	BASEPRI, r0
 80077ca:	4770      	bx	lr
 80077cc:	f3af 8000 	nop.w

080077d0 <pxCurrentTCBConst2>:
 80077d0:	20005488 	.word	0x20005488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop

080077d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077d8:	4808      	ldr	r0, [pc, #32]	; (80077fc <prvPortStartFirstTask+0x24>)
 80077da:	6800      	ldr	r0, [r0, #0]
 80077dc:	6800      	ldr	r0, [r0, #0]
 80077de:	f380 8808 	msr	MSP, r0
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8814 	msr	CONTROL, r0
 80077ea:	b662      	cpsie	i
 80077ec:	b661      	cpsie	f
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	df00      	svc	0
 80077f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077fa:	bf00      	nop
 80077fc:	e000ed08 	.word	0xe000ed08

08007800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007806:	4b46      	ldr	r3, [pc, #280]	; (8007920 <xPortStartScheduler+0x120>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a46      	ldr	r2, [pc, #280]	; (8007924 <xPortStartScheduler+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d10a      	bne.n	8007826 <xPortStartScheduler+0x26>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	613b      	str	r3, [r7, #16]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007826:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	; (8007928 <xPortStartScheduler+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007846:	4b39      	ldr	r3, [pc, #228]	; (800792c <xPortStartScheduler+0x12c>)
 8007848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	b2db      	uxtb	r3, r3
 8007850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	22ff      	movs	r2, #255	; 0xff
 8007856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007868:	b2da      	uxtb	r2, r3
 800786a:	4b31      	ldr	r3, [pc, #196]	; (8007930 <xPortStartScheduler+0x130>)
 800786c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <xPortStartScheduler+0x134>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007874:	e009      	b.n	800788a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <xPortStartScheduler+0x134>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <xPortStartScheduler+0x134>)
 800787e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d0ef      	beq.n	8007876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1c3 0307 	rsb	r3, r3, #7
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d00a      	beq.n	80078b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <xPortStartScheduler+0x134>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <xPortStartScheduler+0x134>)
 80078c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078c2:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <xPortStartScheduler+0x134>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <xPortStartScheduler+0x134>)
 80078cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078d6:	4b18      	ldr	r3, [pc, #96]	; (8007938 <xPortStartScheduler+0x138>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <xPortStartScheduler+0x138>)
 80078dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <xPortStartScheduler+0x138>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <xPortStartScheduler+0x138>)
 80078e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078ee:	f000 f8dd 	bl	8007aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <xPortStartScheduler+0x13c>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078f8:	f000 f8fc 	bl	8007af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <xPortStartScheduler+0x140>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <xPortStartScheduler+0x140>)
 8007902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007908:	f7ff ff66 	bl	80077d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800790c:	f7ff fa88 	bl	8006e20 <vTaskSwitchContext>
	prvTaskExitError();
 8007910:	f7ff ff22 	bl	8007758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	e000ed00 	.word	0xe000ed00
 8007924:	410fc271 	.word	0x410fc271
 8007928:	410fc270 	.word	0x410fc270
 800792c:	e000e400 	.word	0xe000e400
 8007930:	200055b4 	.word	0x200055b4
 8007934:	200055b8 	.word	0x200055b8
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	20000020 	.word	0x20000020
 8007940:	e000ef34 	.word	0xe000ef34

08007944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	607b      	str	r3, [r7, #4]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <vPortEnterCritical+0x58>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <vPortEnterCritical+0x58>)
 8007966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <vPortEnterCritical+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d10f      	bne.n	8007990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortEnterCritical+0x5c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <vPortEnterCritical+0x4c>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <vPortEnterCritical+0x4a>
	}
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	20000020 	.word	0x20000020
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079aa:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <vPortExitCritical+0x50>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <vPortExitCritical+0x24>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	607b      	str	r3, [r7, #4]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vPortExitCritical+0x50>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <vPortExitCritical+0x50>)
 80079d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <vPortExitCritical+0x50>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <vPortExitCritical+0x42>
 80079da:	2300      	movs	r3, #0
 80079dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f383 8811 	msr	BASEPRI, r3
}
 80079e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000020 	.word	0x20000020
	...

08007a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a00:	f3ef 8009 	mrs	r0, PSP
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	4b15      	ldr	r3, [pc, #84]	; (8007a60 <pxCurrentTCBConst>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f01e 0f10 	tst.w	lr, #16
 8007a10:	bf08      	it	eq
 8007a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	6010      	str	r0, [r2, #0]
 8007a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a24:	f380 8811 	msr	BASEPRI, r0
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f7ff f9f6 	bl	8006e20 <vTaskSwitchContext>
 8007a34:	f04f 0000 	mov.w	r0, #0
 8007a38:	f380 8811 	msr	BASEPRI, r0
 8007a3c:	bc09      	pop	{r0, r3}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a46:	f01e 0f10 	tst.w	lr, #16
 8007a4a:	bf08      	it	eq
 8007a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a50:	f380 8809 	msr	PSP, r0
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst>:
 8007a60:	20005488 	.word	0x20005488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a82:	f7ff f915 	bl	8006cb0 <xTaskIncrementTick>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <SysTick_Handler+0x40>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007aa0:	bf00      	nop
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortSetupTimerInterrupt+0x38>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <vPortSetupTimerInterrupt+0x3c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <vPortSetupTimerInterrupt+0x40>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <vPortSetupTimerInterrupt+0x44>)
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <vPortSetupTimerInterrupt+0x34>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	e000e010 	.word	0xe000e010
 8007ae4:	e000e018 	.word	0xe000e018
 8007ae8:	20000000 	.word	0x20000000
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	e000e014 	.word	0xe000e014

08007af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b04 <vPortEnableVFP+0x10>
 8007af8:	6801      	ldr	r1, [r0, #0]
 8007afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007afe:	6001      	str	r1, [r0, #0]
 8007b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b02:	bf00      	nop
 8007b04:	e000ed88 	.word	0xe000ed88

08007b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b0f      	cmp	r3, #15
 8007b18:	d914      	bls.n	8007b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <vPortValidateInterruptPriority+0x70>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <vPortValidateInterruptPriority+0x74>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	7afa      	ldrb	r2, [r7, #11]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d20a      	bcs.n	8007b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b44:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <vPortValidateInterruptPriority+0x78>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <vPortValidateInterruptPriority+0x7c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90a      	bls.n	8007b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	603b      	str	r3, [r7, #0]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortValidateInterruptPriority+0x60>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	e000e3f0 	.word	0xe000e3f0
 8007b7c:	200055b4 	.word	0x200055b4
 8007b80:	e000ed0c 	.word	0xe000ed0c
 8007b84:	200055b8 	.word	0x200055b8

08007b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b94:	f7fe ffc0 	bl	8006b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b98:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <pvPortMalloc+0x180>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ba0:	f000 f920 	bl	8007de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ba4:	4b59      	ldr	r3, [pc, #356]	; (8007d0c <pvPortMalloc+0x184>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f040 8093 	bne.w	8007cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01d      	beq.n	8007bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bb8:	2208      	movs	r2, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f023 0307 	bic.w	r3, r3, #7
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	617b      	str	r3, [r7, #20]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d06e      	beq.n	8007cd8 <pvPortMalloc+0x150>
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <pvPortMalloc+0x188>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d869      	bhi.n	8007cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c04:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <pvPortMalloc+0x18c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c0e:	e004      	b.n	8007c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <pvPortMalloc+0xa4>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f1      	bne.n	8007c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <pvPortMalloc+0x180>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d050      	beq.n	8007cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	2308      	movs	r3, #8
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d91f      	bls.n	8007c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <pvPortMalloc+0xf8>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	613b      	str	r3, [r7, #16]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c92:	69b8      	ldr	r0, [r7, #24]
 8007c94:	f000 f908 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <pvPortMalloc+0x188>)
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <pvPortMalloc+0x188>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <pvPortMalloc+0x190>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d203      	bcs.n	8007cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cb2:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <pvPortMalloc+0x188>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <pvPortMalloc+0x190>)
 8007cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <pvPortMalloc+0x184>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	4a11      	ldr	r2, [pc, #68]	; (8007d1c <pvPortMalloc+0x194>)
 8007cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cd8:	f7fe ff2c 	bl	8006b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <pvPortMalloc+0x174>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60fb      	str	r3, [r7, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <pvPortMalloc+0x172>
	return pvReturn;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	2000d5c4 	.word	0x2000d5c4
 8007d0c:	2000d5d8 	.word	0x2000d5d8
 8007d10:	2000d5c8 	.word	0x2000d5c8
 8007d14:	2000d5bc 	.word	0x2000d5bc
 8007d18:	2000d5cc 	.word	0x2000d5cc
 8007d1c:	2000d5d0 	.word	0x2000d5d0

08007d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d04d      	beq.n	8007dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d32:	2308      	movs	r3, #8
 8007d34:	425b      	negs	r3, r3
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vPortFree+0xb8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vPortFree+0x44>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60fb      	str	r3, [r7, #12]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <vPortFree+0x62>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60bb      	str	r3, [r7, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <vPortFree+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01e      	beq.n	8007dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11a      	bne.n	8007dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe feb6 	bl	8006b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <vPortFree+0xbc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <vPortFree+0xbc>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f874 	bl	8007ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vPortFree+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a06      	ldr	r2, [pc, #24]	; (8007de0 <vPortFree+0xc0>)
 8007dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dca:	f7fe feb3 	bl	8006b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	2000d5d8 	.word	0x2000d5d8
 8007ddc:	2000d5c8 	.word	0x2000d5c8
 8007de0:	2000d5d4 	.word	0x2000d5d4

08007de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <prvHeapInit+0xac>)
 8007df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00c      	beq.n	8007e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <prvHeapInit+0xac>)
 8007e14:	4413      	add	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	; (8007e94 <prvHeapInit+0xb0>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e22:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <prvHeapInit+0xb0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e30:	2208      	movs	r2, #8
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0307 	bic.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <prvHeapInit+0xb4>)
 8007e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <prvHeapInit+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e4e:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <prvHeapInit+0xb4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <prvHeapInit+0xb4>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <prvHeapInit+0xb8>)
 8007e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <prvHeapInit+0xbc>)
 8007e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <prvHeapInit+0xc0>)
 8007e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	200055bc 	.word	0x200055bc
 8007e94:	2000d5bc 	.word	0x2000d5bc
 8007e98:	2000d5c4 	.word	0x2000d5c4
 8007e9c:	2000d5cc 	.word	0x2000d5cc
 8007ea0:	2000d5c8 	.word	0x2000d5c8
 8007ea4:	2000d5d8 	.word	0x2000d5d8

08007ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <prvInsertBlockIntoFreeList+0xac>)
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e002      	b.n	8007ebc <prvInsertBlockIntoFreeList+0x14>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8f7      	bhi.n	8007eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d108      	bne.n	8007eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d118      	bne.n	8007f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d00d      	beq.n	8007f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	441a      	add	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e008      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <prvInsertBlockIntoFreeList+0xb0>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d002      	beq.n	8007f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	2000d5bc 	.word	0x2000d5bc
 8007f58:	2000d5c4 	.word	0x2000d5c4

08007f5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f002 fc29 	bl	800a7c8 <tcpip_send_msg_wait_sem>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007f88:	e001      	b.n	8007f8e <netconn_apimsg+0x32>
  }
  return err;
 8007f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	; 0x30
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	603a      	str	r2, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 f95b 	bl	8009268 <netconn_alloc>
 8007fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d054      	beq.n	8008064 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007fba:	79bb      	ldrb	r3, [r7, #6]
 8007fbc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4829      	ldr	r0, [pc, #164]	; (8008070 <netconn_new_with_proto_and_callback+0xd8>)
 8007fca:	f7ff ffc7 	bl	8007f5c <netconn_apimsg>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007fd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d043      	beq.n	8008064 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <netconn_new_with_proto_and_callback+0x58>
 8007fe4:	4b23      	ldr	r3, [pc, #140]	; (8008074 <netconn_new_with_proto_and_callback+0xdc>)
 8007fe6:	22a3      	movs	r2, #163	; 0xa3
 8007fe8:	4923      	ldr	r1, [pc, #140]	; (8008078 <netconn_new_with_proto_and_callback+0xe0>)
 8007fea:	4824      	ldr	r0, [pc, #144]	; (800807c <netconn_new_with_proto_and_callback+0xe4>)
 8007fec:	f010 fd9e 	bl	8018b2c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	3310      	adds	r3, #16
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f010 fb72 	bl	80186de <sys_mbox_valid>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <netconn_new_with_proto_and_callback+0x74>
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <netconn_new_with_proto_and_callback+0xdc>)
 8008002:	22a4      	movs	r2, #164	; 0xa4
 8008004:	491e      	ldr	r1, [pc, #120]	; (8008080 <netconn_new_with_proto_and_callback+0xe8>)
 8008006:	481d      	ldr	r0, [pc, #116]	; (800807c <netconn_new_with_proto_and_callback+0xe4>)
 8008008:	f010 fd90 	bl	8018b2c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	3314      	adds	r3, #20
 8008010:	4618      	mov	r0, r3
 8008012:	f010 fb64 	bl	80186de <sys_mbox_valid>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <netconn_new_with_proto_and_callback+0x90>
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <netconn_new_with_proto_and_callback+0xdc>)
 800801e:	22a6      	movs	r2, #166	; 0xa6
 8008020:	4918      	ldr	r1, [pc, #96]	; (8008084 <netconn_new_with_proto_and_callback+0xec>)
 8008022:	4816      	ldr	r0, [pc, #88]	; (800807c <netconn_new_with_proto_and_callback+0xe4>)
 8008024:	f010 fd82 	bl	8018b2c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	330c      	adds	r3, #12
 800802c:	4618      	mov	r0, r3
 800802e:	f010 fbe7 	bl	8018800 <sys_sem_valid>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <netconn_new_with_proto_and_callback+0xac>
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <netconn_new_with_proto_and_callback+0xdc>)
 800803a:	22a9      	movs	r2, #169	; 0xa9
 800803c:	4912      	ldr	r1, [pc, #72]	; (8008088 <netconn_new_with_proto_and_callback+0xf0>)
 800803e:	480f      	ldr	r0, [pc, #60]	; (800807c <netconn_new_with_proto_and_callback+0xe4>)
 8008040:	f010 fd74 	bl	8018b2c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	330c      	adds	r3, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f010 fbcc 	bl	80187e6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008050:	3310      	adds	r3, #16
 8008052:	4618      	mov	r0, r3
 8008054:	f010 fabc 	bl	80185d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800805a:	2007      	movs	r0, #7
 800805c:	f003 ffb2 	bl	800bfc4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	e000      	b.n	8008066 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	; 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	0800923d 	.word	0x0800923d
 8008074:	0801a094 	.word	0x0801a094
 8008078:	0801a0c8 	.word	0x0801a0c8
 800807c:	0801a0ec 	.word	0x0801a0ec
 8008080:	0801a114 	.word	0x0801a114
 8008084:	0801a12c 	.word	0x0801a12c
 8008088:	0801a150 	.word	0x0801a150

0800808c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08c      	sub	sp, #48	; 0x30
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e014      	b.n	80080c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80080a2:	2329      	movs	r3, #41	; 0x29
 80080a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80080a6:	f107 030c 	add.w	r3, r7, #12
 80080aa:	4619      	mov	r1, r3
 80080ac:	4808      	ldr	r0, [pc, #32]	; (80080d0 <netconn_prepare_delete+0x44>)
 80080ae:	f7ff ff55 	bl	8007f5c <netconn_apimsg>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80080b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <netconn_prepare_delete+0x3a>
    return err;
 80080c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080c4:	e000      	b.n	80080c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3730      	adds	r7, #48	; 0x30
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	080097a9 	.word	0x080097a9

080080d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <netconn_delete+0x12>
    return ERR_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e00d      	b.n	8008102 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff ffd0 	bl	800808c <netconn_prepare_delete>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80080f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <netconn_delete+0x2a>
    netconn_free(conn);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 f923 	bl	8009344 <netconn_free>
  }
  return err;
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08e      	sub	sp, #56	; 0x38
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <netconn_bind+0x28>
 8008120:	4b11      	ldr	r3, [pc, #68]	; (8008168 <netconn_bind+0x5c>)
 8008122:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008126:	4911      	ldr	r1, [pc, #68]	; (800816c <netconn_bind+0x60>)
 8008128:	4811      	ldr	r0, [pc, #68]	; (8008170 <netconn_bind+0x64>)
 800812a:	f010 fcff 	bl	8018b2c <iprintf>
 800812e:	f06f 030f 	mvn.w	r3, #15
 8008132:	e015      	b.n	8008160 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800813a:	4b0e      	ldr	r3, [pc, #56]	; (8008174 <netconn_bind+0x68>)
 800813c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800814a:	f107 0314 	add.w	r3, r7, #20
 800814e:	4619      	mov	r1, r3
 8008150:	4809      	ldr	r0, [pc, #36]	; (8008178 <netconn_bind+0x6c>)
 8008152:	f7ff ff03 	bl	8007f5c <netconn_apimsg>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800815c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008160:	4618      	mov	r0, r3
 8008162:	3738      	adds	r7, #56	; 0x38
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	0801a094 	.word	0x0801a094
 800816c:	0801a1cc 	.word	0x0801a1cc
 8008170:	0801a0ec 	.word	0x0801a0ec
 8008174:	08027da4 	.word	0x08027da4
 8008178:	08009971 	.word	0x08009971

0800817c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	; 0x38
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <netconn_connect+0x28>
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <netconn_connect+0x5c>)
 8008192:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008196:	4911      	ldr	r1, [pc, #68]	; (80081dc <netconn_connect+0x60>)
 8008198:	4811      	ldr	r0, [pc, #68]	; (80081e0 <netconn_connect+0x64>)
 800819a:	f010 fcc7 	bl	8018b2c <iprintf>
 800819e:	f06f 030f 	mvn.w	r3, #15
 80081a2:	e015      	b.n	80081d0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <netconn_connect+0x68>)
 80081ac:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80081ba:	f107 0314 	add.w	r3, r7, #20
 80081be:	4619      	mov	r1, r3
 80081c0:	4809      	ldr	r0, [pc, #36]	; (80081e8 <netconn_connect+0x6c>)
 80081c2:	f7ff fecb 	bl	8007f5c <netconn_apimsg>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80081cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3738      	adds	r7, #56	; 0x38
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	0801a094 	.word	0x0801a094
 80081dc:	0801a208 	.word	0x0801a208
 80081e0:	0801a0ec 	.word	0x0801a0ec
 80081e4:	08027da4 	.word	0x08027da4
 80081e8:	08009b05 	.word	0x08009b05

080081ec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08c      	sub	sp, #48	; 0x30
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <netconn_listen_with_backlog+0x26>
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <netconn_listen_with_backlog+0x48>)
 8008200:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008204:	490c      	ldr	r1, [pc, #48]	; (8008238 <netconn_listen_with_backlog+0x4c>)
 8008206:	480d      	ldr	r0, [pc, #52]	; (800823c <netconn_listen_with_backlog+0x50>)
 8008208:	f010 fc90 	bl	8018b2c <iprintf>
 800820c:	f06f 030f 	mvn.w	r3, #15
 8008210:	e00c      	b.n	800822c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008216:	f107 030c 	add.w	r3, r7, #12
 800821a:	4619      	mov	r1, r3
 800821c:	4808      	ldr	r0, [pc, #32]	; (8008240 <netconn_listen_with_backlog+0x54>)
 800821e:	f7ff fe9d 	bl	8007f5c <netconn_apimsg>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008228:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800822c:	4618      	mov	r0, r3
 800822e:	3730      	adds	r7, #48	; 0x30
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	0801a094 	.word	0x0801a094
 8008238:	0801a24c 	.word	0x0801a24c
 800823c:	0801a0ec 	.word	0x0801a0ec
 8008240:	08009c81 	.word	0x08009c81

08008244 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d109      	bne.n	8008268 <netconn_accept+0x24>
 8008254:	4b3d      	ldr	r3, [pc, #244]	; (800834c <netconn_accept+0x108>)
 8008256:	f240 12e1 	movw	r2, #481	; 0x1e1
 800825a:	493d      	ldr	r1, [pc, #244]	; (8008350 <netconn_accept+0x10c>)
 800825c:	483d      	ldr	r0, [pc, #244]	; (8008354 <netconn_accept+0x110>)
 800825e:	f010 fc65 	bl	8018b2c <iprintf>
 8008262:	f06f 030f 	mvn.w	r3, #15
 8008266:	e06c      	b.n	8008342 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <netconn_accept+0x44>
 8008274:	4b35      	ldr	r3, [pc, #212]	; (800834c <netconn_accept+0x108>)
 8008276:	f240 12e3 	movw	r2, #483	; 0x1e3
 800827a:	4937      	ldr	r1, [pc, #220]	; (8008358 <netconn_accept+0x114>)
 800827c:	4835      	ldr	r0, [pc, #212]	; (8008354 <netconn_accept+0x110>)
 800827e:	f010 fc55 	bl	8018b2c <iprintf>
 8008282:	f06f 030f 	mvn.w	r3, #15
 8008286:	e05c      	b.n	8008342 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fb6c 	bl	8008966 <netconn_err>
 800828e:	4603      	mov	r3, r0
 8008290:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800829a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800829e:	e050      	b.n	8008342 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3314      	adds	r3, #20
 80082a4:	4618      	mov	r0, r3
 80082a6:	f010 fa1a 	bl	80186de <sys_mbox_valid>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <netconn_accept+0x78>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7f1b      	ldrb	r3, [r3, #28]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80082bc:	f06f 030e 	mvn.w	r3, #14
 80082c0:	e03f      	b.n	8008342 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7f1b      	ldrb	r3, [r3, #28]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00e      	beq.n	80082ec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3314      	adds	r3, #20
 80082d2:	f107 020c 	add.w	r2, r7, #12
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f010 f9e4 	bl	80186a6 <sys_arch_mbox_tryfetch>
 80082de:	4603      	mov	r3, r0
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d10a      	bne.n	80082fc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80082e6:	f06f 0306 	mvn.w	r3, #6
 80082ea:	e02a      	b.n	8008342 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3314      	adds	r3, #20
 80082f0:	f107 010c 	add.w	r1, r7, #12
 80082f4:	2200      	movs	r2, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f010 f996 	bl	8018628 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <netconn_accept+0xcc>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2200      	movs	r2, #0
 800830a:	2101      	movs	r1, #1
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f107 0213 	add.w	r2, r7, #19
 8008316:	4611      	mov	r1, r2
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fb75 	bl	8008a08 <lwip_netconn_is_err_msg>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008328:	e00b      	b.n	8008342 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008330:	f06f 030e 	mvn.w	r3, #14
 8008334:	e005      	b.n	8008342 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008340:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	0801a094 	.word	0x0801a094
 8008350:	0801a26c 	.word	0x0801a26c
 8008354:	0801a0ec 	.word	0x0801a0ec
 8008358:	0801a28c 	.word	0x0801a28c

0800835c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <netconn_recv_data+0x2c>
 8008374:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <netconn_recv_data+0x17c>)
 8008376:	f44f 7212 	mov.w	r2, #584	; 0x248
 800837a:	4958      	ldr	r1, [pc, #352]	; (80084dc <netconn_recv_data+0x180>)
 800837c:	4858      	ldr	r0, [pc, #352]	; (80084e0 <netconn_recv_data+0x184>)
 800837e:	f010 fbd5 	bl	8018b2c <iprintf>
 8008382:	f06f 030f 	mvn.w	r3, #15
 8008386:	e0a2      	b.n	80084ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <netconn_recv_data+0x4c>
 8008394:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <netconn_recv_data+0x17c>)
 8008396:	f240 224a 	movw	r2, #586	; 0x24a
 800839a:	4952      	ldr	r1, [pc, #328]	; (80084e4 <netconn_recv_data+0x188>)
 800839c:	4850      	ldr	r0, [pc, #320]	; (80084e0 <netconn_recv_data+0x184>)
 800839e:	f010 fbc5 	bl	8018b2c <iprintf>
 80083a2:	f06f 030f 	mvn.w	r3, #15
 80083a6:	e092      	b.n	80084ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3310      	adds	r3, #16
 80083ac:	4618      	mov	r0, r3
 80083ae:	f010 f996 	bl	80186de <sys_mbox_valid>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10e      	bne.n	80083d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fad4 	bl	8008966 <netconn_err>
 80083be:	4603      	mov	r3, r0
 80083c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80083c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80083ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80083ce:	e07e      	b.n	80084ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80083d0:	f06f 030a 	mvn.w	r3, #10
 80083d4:	e07b      	b.n	80084ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	7f1b      	ldrb	r3, [r3, #28]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10f      	bne.n	8008402 <netconn_recv_data+0xa6>
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	7f1b      	ldrb	r3, [r3, #28]
 80083f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d023      	beq.n	800844a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3310      	adds	r3, #16
 8008406:	f107 0218 	add.w	r2, r7, #24
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f010 f94a 	bl	80186a6 <sys_arch_mbox_tryfetch>
 8008412:	4603      	mov	r3, r0
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d11f      	bne.n	800845a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 faa3 	bl	8008966 <netconn_err>
 8008420:	4603      	mov	r3, r0
 8008422:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008424:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800842c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008430:	e04d      	b.n	80084ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	7f1b      	ldrb	r3, [r3, #28]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800843e:	f06f 030a 	mvn.w	r3, #10
 8008442:	e044      	b.n	80084ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008444:	f06f 0306 	mvn.w	r3, #6
 8008448:	e041      	b.n	80084ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3310      	adds	r3, #16
 800844e:	f107 0118 	add.w	r1, r7, #24
 8008452:	2200      	movs	r2, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f010 f8e7 	bl	8018628 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008462:	2b10      	cmp	r3, #16
 8008464:	d117      	bne.n	8008496 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f107 0217 	add.w	r2, r7, #23
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f000 faca 	bl	8008a08 <lwip_netconn_is_err_msg>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d009      	beq.n	800848e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800847a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800847e:	f113 0f0f 	cmn.w	r3, #15
 8008482:	d101      	bne.n	8008488 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	e022      	b.n	80084ce <netconn_recv_data+0x172>
      }
      return err;
 8008488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800848c:	e01f      	b.n	80084ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	891b      	ldrh	r3, [r3, #8]
 8008492:	83fb      	strh	r3, [r7, #30]
 8008494:	e00d      	b.n	80084b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <netconn_recv_data+0x14e>
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <netconn_recv_data+0x17c>)
 800849e:	f240 2291 	movw	r2, #657	; 0x291
 80084a2:	4911      	ldr	r1, [pc, #68]	; (80084e8 <netconn_recv_data+0x18c>)
 80084a4:	480e      	ldr	r0, [pc, #56]	; (80084e0 <netconn_recv_data+0x184>)
 80084a6:	f010 fb41 	bl	8018b2c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	891b      	ldrh	r3, [r3, #8]
 80084b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <netconn_recv_data+0x16a>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	8bfa      	ldrh	r2, [r7, #30]
 80084c0:	2101      	movs	r1, #1
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80084c6:	69ba      	ldr	r2, [r7, #24]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	0801a094 	.word	0x0801a094
 80084dc:	0801a2ac 	.word	0x0801a2ac
 80084e0:	0801a0ec 	.word	0x0801a0ec
 80084e4:	0801a2cc 	.word	0x0801a2cc
 80084e8:	0801a2e8 	.word	0x0801a2e8

080084ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <netconn_tcp_recvd_msg+0x1e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008506:	2b10      	cmp	r3, #16
 8008508:	d009      	beq.n	800851e <netconn_tcp_recvd_msg+0x32>
 800850a:	4b0c      	ldr	r3, [pc, #48]	; (800853c <netconn_tcp_recvd_msg+0x50>)
 800850c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008510:	490b      	ldr	r1, [pc, #44]	; (8008540 <netconn_tcp_recvd_msg+0x54>)
 8008512:	480c      	ldr	r0, [pc, #48]	; (8008544 <netconn_tcp_recvd_msg+0x58>)
 8008514:	f010 fb0a 	bl	8018b2c <iprintf>
 8008518:	f06f 030f 	mvn.w	r3, #15
 800851c:	e00a      	b.n	8008534 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4806      	ldr	r0, [pc, #24]	; (8008548 <netconn_tcp_recvd_msg+0x5c>)
 800852e:	f7ff fd15 	bl	8007f5c <netconn_apimsg>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	0801a094 	.word	0x0801a094
 8008540:	0801a2f4 	.word	0x0801a2f4
 8008544:	0801a0ec 	.word	0x0801a0ec
 8008548:	08009db1 	.word	0x08009db1

0800854c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b090      	sub	sp, #64	; 0x40
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3310      	adds	r3, #16
 800855e:	4618      	mov	r0, r3
 8008560:	f010 f8bd 	bl	80186de <sys_mbox_valid>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800856a:	f06f 030a 	mvn.w	r3, #10
 800856e:	e06d      	b.n	800864c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	7f1b      	ldrb	r3, [r3, #28]
 8008574:	b25b      	sxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	da07      	bge.n	800858a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7f1b      	ldrb	r3, [r3, #28]
 800857e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008582:	b2da      	uxtb	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008588:	e039      	b.n	80085fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	461a      	mov	r2, r3
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff fee3 	bl	800835c <netconn_recv_data>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800859c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80085a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80085a8:	e050      	b.n	800864c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10e      	bne.n	80085d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <netconn_recv_data_tcp+0x7a>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	891b      	ldrh	r3, [r3, #8]
 80085c4:	e000      	b.n	80085c8 <netconn_recv_data_tcp+0x7c>
 80085c6:	2301      	movs	r3, #1
 80085c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80085ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085cc:	f107 0214 	add.w	r2, r7, #20
 80085d0:	4619      	mov	r1, r3
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff ff8a 	bl	80084ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d134      	bne.n	8008648 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7f1b      	ldrb	r3, [r3, #28]
 80085ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80085f6:	f06f 0306 	mvn.w	r3, #6
 80085fa:	e027      	b.n	800864c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80085fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <netconn_recv_data_tcp+0xc6>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	2101      	movs	r1, #1
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10f      	bne.n	800863a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f9a3 	bl	8008966 <netconn_err>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008626:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <netconn_recv_data_tcp+0xe8>
          return err;
 800862e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008632:	e00b      	b.n	800864c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008634:	f06f 030d 	mvn.w	r3, #13
 8008638:	e008      	b.n	800864c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800863a:	2101      	movs	r1, #1
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f955 	bl	80088ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008642:	f06f 030e 	mvn.w	r3, #14
 8008646:	e001      	b.n	800864c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008648:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800864c:	4618      	mov	r0, r3
 800864e:	3740      	adds	r7, #64	; 0x40
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <netconn_recv+0x28>
 8008668:	4b32      	ldr	r3, [pc, #200]	; (8008734 <netconn_recv+0xe0>)
 800866a:	f240 3263 	movw	r2, #867	; 0x363
 800866e:	4932      	ldr	r1, [pc, #200]	; (8008738 <netconn_recv+0xe4>)
 8008670:	4832      	ldr	r0, [pc, #200]	; (800873c <netconn_recv+0xe8>)
 8008672:	f010 fa5b 	bl	8018b2c <iprintf>
 8008676:	f06f 030f 	mvn.w	r3, #15
 800867a:	e056      	b.n	800872a <netconn_recv+0xd6>
  *new_buf = NULL;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d109      	bne.n	800869c <netconn_recv+0x48>
 8008688:	4b2a      	ldr	r3, [pc, #168]	; (8008734 <netconn_recv+0xe0>)
 800868a:	f240 3265 	movw	r2, #869	; 0x365
 800868e:	492c      	ldr	r1, [pc, #176]	; (8008740 <netconn_recv+0xec>)
 8008690:	482a      	ldr	r0, [pc, #168]	; (800873c <netconn_recv+0xe8>)
 8008692:	f010 fa4b 	bl	8018b2c <iprintf>
 8008696:	f06f 030f 	mvn.w	r3, #15
 800869a:	e046      	b.n	800872a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d13a      	bne.n	800871e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80086ac:	2006      	movs	r0, #6
 80086ae:	f003 fc13 	bl	800bed8 <memp_malloc>
 80086b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d102      	bne.n	80086c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	e034      	b.n	800872a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80086c0:	f107 030c 	add.w	r3, r7, #12
 80086c4:	2200      	movs	r2, #0
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff3f 	bl	800854c <netconn_recv_data_tcp>
 80086ce:	4603      	mov	r3, r0
 80086d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80086d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d006      	beq.n	80086e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80086da:	6979      	ldr	r1, [r7, #20]
 80086dc:	2006      	movs	r0, #6
 80086de:	f003 fc71 	bl	800bfc4 <memp_free>
      return err;
 80086e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086e6:	e020      	b.n	800872a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <netconn_recv+0xa8>
 80086ee:	4b11      	ldr	r3, [pc, #68]	; (8008734 <netconn_recv+0xe0>)
 80086f0:	f240 3279 	movw	r2, #889	; 0x379
 80086f4:	4913      	ldr	r1, [pc, #76]	; (8008744 <netconn_recv+0xf0>)
 80086f6:	4811      	ldr	r0, [pc, #68]	; (800873c <netconn_recv+0xe8>)
 80086f8:	f010 fa18 	bl	8018b2c <iprintf>

    buf->p = p;
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2200      	movs	r2, #0
 800870c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2200      	movs	r2, #0
 8008712:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	e005      	b.n	800872a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800871e:	2200      	movs	r2, #0
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fe1a 	bl	800835c <netconn_recv_data>
 8008728:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	0801a094 	.word	0x0801a094
 8008738:	0801a2ac 	.word	0x0801a2ac
 800873c:	0801a0ec 	.word	0x0801a0ec
 8008740:	0801a2cc 	.word	0x0801a2cc
 8008744:	0801a344 	.word	0x0801a344

08008748 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	f107 0110 	add.w	r1, r7, #16
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	2201      	movs	r2, #1
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f805 	bl	800877c <netconn_write_vectors_partly>
 8008772:	4603      	mov	r3, r0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b092      	sub	sp, #72	; 0x48
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4611      	mov	r1, r2
 8008788:	461a      	mov	r2, r3
 800878a:	460b      	mov	r3, r1
 800878c:	80fb      	strh	r3, [r7, #6]
 800878e:	4613      	mov	r3, r2
 8008790:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <netconn_write_vectors_partly+0x30>
 8008798:	4b4e      	ldr	r3, [pc, #312]	; (80088d4 <netconn_write_vectors_partly+0x158>)
 800879a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800879e:	494e      	ldr	r1, [pc, #312]	; (80088d8 <netconn_write_vectors_partly+0x15c>)
 80087a0:	484e      	ldr	r0, [pc, #312]	; (80088dc <netconn_write_vectors_partly+0x160>)
 80087a2:	f010 f9c3 	bl	8018b2c <iprintf>
 80087a6:	f06f 030f 	mvn.w	r3, #15
 80087aa:	e08e      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b4:	2b10      	cmp	r3, #16
 80087b6:	d009      	beq.n	80087cc <netconn_write_vectors_partly+0x50>
 80087b8:	4b46      	ldr	r3, [pc, #280]	; (80088d4 <netconn_write_vectors_partly+0x158>)
 80087ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80087be:	4948      	ldr	r1, [pc, #288]	; (80088e0 <netconn_write_vectors_partly+0x164>)
 80087c0:	4846      	ldr	r0, [pc, #280]	; (80088dc <netconn_write_vectors_partly+0x160>)
 80087c2:	f010 f9b3 	bl	8018b2c <iprintf>
 80087c6:	f06f 0305 	mvn.w	r3, #5
 80087ca:	e07e      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	7f1b      	ldrb	r3, [r3, #28]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <netconn_write_vectors_partly+0x66>
 80087d8:	797b      	ldrb	r3, [r7, #5]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <netconn_write_vectors_partly+0x6a>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <netconn_write_vectors_partly+0x6c>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80087ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <netconn_write_vectors_partly+0x84>
 80087f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80087fa:	f06f 0305 	mvn.w	r3, #5
 80087fe:	e064      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008804:	2300      	movs	r3, #0
 8008806:	643b      	str	r3, [r7, #64]	; 0x40
 8008808:	e015      	b.n	8008836 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4413      	add	r3, r2
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008816:	4413      	add	r3, r2
 8008818:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800881a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008826:	429a      	cmp	r2, r3
 8008828:	d202      	bcs.n	8008830 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800882a:	f06f 0305 	mvn.w	r3, #5
 800882e:	e04c      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008832:	3301      	adds	r3, #1
 8008834:	643b      	str	r3, [r7, #64]	; 0x40
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800883a:	429a      	cmp	r2, r3
 800883c:	dbe5      	blt.n	800880a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800883e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	e040      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800884a:	2b00      	cmp	r3, #0
 800884c:	da0a      	bge.n	8008864 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800884e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008854:	f06f 0305 	mvn.w	r3, #5
 8008858:	e037      	b.n	80088ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800885a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008874:	797b      	ldrb	r3, [r7, #5]
 8008876:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800887a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008882:	f107 0314 	add.w	r3, r7, #20
 8008886:	4619      	mov	r1, r3
 8008888:	4816      	ldr	r0, [pc, #88]	; (80088e4 <netconn_write_vectors_partly+0x168>)
 800888a:	f7ff fb67 	bl	8007f5c <netconn_apimsg>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008894:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008898:	2b00      	cmp	r3, #0
 800889a:	d114      	bne.n	80088c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800889c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80088a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80088a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d006      	beq.n	80088c6 <netconn_write_vectors_partly+0x14a>
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <netconn_write_vectors_partly+0x158>)
 80088ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80088be:	490a      	ldr	r1, [pc, #40]	; (80088e8 <netconn_write_vectors_partly+0x16c>)
 80088c0:	4806      	ldr	r0, [pc, #24]	; (80088dc <netconn_write_vectors_partly+0x160>)
 80088c2:	f010 f933 	bl	8018b2c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80088c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3748      	adds	r7, #72	; 0x48
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	0801a094 	.word	0x0801a094
 80088d8:	0801a36c 	.word	0x0801a36c
 80088dc:	0801a0ec 	.word	0x0801a0ec
 80088e0:	0801a388 	.word	0x0801a388
 80088e4:	0800a1b5 	.word	0x0800a1b5
 80088e8:	0801a3ac 	.word	0x0801a3ac

080088ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	; 0x30
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d109      	bne.n	8008912 <netconn_close_shutdown+0x26>
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <netconn_close_shutdown+0x50>)
 8008900:	f240 4247 	movw	r2, #1095	; 0x447
 8008904:	490e      	ldr	r1, [pc, #56]	; (8008940 <netconn_close_shutdown+0x54>)
 8008906:	480f      	ldr	r0, [pc, #60]	; (8008944 <netconn_close_shutdown+0x58>)
 8008908:	f010 f910 	bl	8018b2c <iprintf>
 800890c:	f06f 030f 	mvn.w	r3, #15
 8008910:	e010      	b.n	8008934 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800891a:	2329      	movs	r3, #41	; 0x29
 800891c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800891e:	f107 030c 	add.w	r3, r7, #12
 8008922:	4619      	mov	r1, r3
 8008924:	4808      	ldr	r0, [pc, #32]	; (8008948 <netconn_close_shutdown+0x5c>)
 8008926:	f7ff fb19 	bl	8007f5c <netconn_apimsg>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008930:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008934:	4618      	mov	r0, r3
 8008936:	3730      	adds	r7, #48	; 0x30
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	0801a094 	.word	0x0801a094
 8008940:	0801a3d0 	.word	0x0801a3d0
 8008944:	0801a0ec 	.word	0x0801a0ec
 8008948:	0800a2cd 	.word	0x0800a2cd

0800894c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008954:	2103      	movs	r1, #3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff ffc8 	bl	80088ec <netconn_close_shutdown>
 800895c:	4603      	mov	r3, r0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <netconn_err+0x12>
    return ERR_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	e00d      	b.n	8008994 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008978:	f00f ffcc 	bl	8018914 <sys_arch_protect>
 800897c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7a1b      	ldrb	r3, [r3, #8]
 8008982:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f00f ffd0 	bl	8018930 <sys_arch_unprotect>
  return err;
 8008990:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	f113 0f0d 	cmn.w	r3, #13
 80089ae:	d009      	beq.n	80089c4 <lwip_netconn_err_to_msg+0x28>
 80089b0:	f113 0f0d 	cmn.w	r3, #13
 80089b4:	dc0c      	bgt.n	80089d0 <lwip_netconn_err_to_msg+0x34>
 80089b6:	f113 0f0f 	cmn.w	r3, #15
 80089ba:	d007      	beq.n	80089cc <lwip_netconn_err_to_msg+0x30>
 80089bc:	f113 0f0e 	cmn.w	r3, #14
 80089c0:	d002      	beq.n	80089c8 <lwip_netconn_err_to_msg+0x2c>
 80089c2:	e005      	b.n	80089d0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80089c4:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <lwip_netconn_err_to_msg+0x54>)
 80089c6:	e00e      	b.n	80089e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <lwip_netconn_err_to_msg+0x58>)
 80089ca:	e00c      	b.n	80089e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <lwip_netconn_err_to_msg+0x5c>)
 80089ce:	e00a      	b.n	80089e6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80089d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <lwip_netconn_err_to_msg+0x48>
 80089d8:	4b08      	ldr	r3, [pc, #32]	; (80089fc <lwip_netconn_err_to_msg+0x60>)
 80089da:	227d      	movs	r2, #125	; 0x7d
 80089dc:	4908      	ldr	r1, [pc, #32]	; (8008a00 <lwip_netconn_err_to_msg+0x64>)
 80089de:	4809      	ldr	r0, [pc, #36]	; (8008a04 <lwip_netconn_err_to_msg+0x68>)
 80089e0:	f010 f8a4 	bl	8018b2c <iprintf>
      return NULL;
 80089e4:	2300      	movs	r3, #0
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	0801db48 	.word	0x0801db48
 80089f4:	0801db49 	.word	0x0801db49
 80089f8:	0801db4a 	.word	0x0801db4a
 80089fc:	0801a3ec 	.word	0x0801a3ec
 8008a00:	0801a420 	.word	0x0801a420
 8008a04:	0801a430 	.word	0x0801a430

08008a08 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <lwip_netconn_is_err_msg+0x1c>
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <lwip_netconn_is_err_msg+0x5c>)
 8008a1a:	2285      	movs	r2, #133	; 0x85
 8008a1c:	4912      	ldr	r1, [pc, #72]	; (8008a68 <lwip_netconn_is_err_msg+0x60>)
 8008a1e:	4813      	ldr	r0, [pc, #76]	; (8008a6c <lwip_netconn_is_err_msg+0x64>)
 8008a20:	f010 f884 	bl	8018b2c <iprintf>

  if (msg == &netconn_aborted) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a12      	ldr	r2, [pc, #72]	; (8008a70 <lwip_netconn_is_err_msg+0x68>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d104      	bne.n	8008a36 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	22f3      	movs	r2, #243	; 0xf3
 8008a30:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e012      	b.n	8008a5c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <lwip_netconn_is_err_msg+0x6c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d104      	bne.n	8008a48 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	22f2      	movs	r2, #242	; 0xf2
 8008a42:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e009      	b.n	8008a5c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <lwip_netconn_is_err_msg+0x70>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d104      	bne.n	8008a5a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	22f1      	movs	r2, #241	; 0xf1
 8008a54:	701a      	strb	r2, [r3, #0]
    return 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	0801a3ec 	.word	0x0801a3ec
 8008a68:	0801a458 	.word	0x0801a458
 8008a6c:	0801a430 	.word	0x0801a430
 8008a70:	0801db48 	.word	0x0801db48
 8008a74:	0801db49 	.word	0x0801db49
 8008a78:	0801db4a 	.word	0x0801db4a

08008a7c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d105      	bne.n	8008a9c <recv_udp+0x20>
 8008a90:	4b34      	ldr	r3, [pc, #208]	; (8008b64 <recv_udp+0xe8>)
 8008a92:	22e5      	movs	r2, #229	; 0xe5
 8008a94:	4934      	ldr	r1, [pc, #208]	; (8008b68 <recv_udp+0xec>)
 8008a96:	4835      	ldr	r0, [pc, #212]	; (8008b6c <recv_udp+0xf0>)
 8008a98:	f010 f848 	bl	8018b2c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d105      	bne.n	8008aae <recv_udp+0x32>
 8008aa2:	4b30      	ldr	r3, [pc, #192]	; (8008b64 <recv_udp+0xe8>)
 8008aa4:	22e6      	movs	r2, #230	; 0xe6
 8008aa6:	4932      	ldr	r1, [pc, #200]	; (8008b70 <recv_udp+0xf4>)
 8008aa8:	4830      	ldr	r0, [pc, #192]	; (8008b6c <recv_udp+0xf0>)
 8008aaa:	f010 f83f 	bl	8018b2c <iprintf>
  conn = (struct netconn *)arg;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <recv_udp+0x44>
    pbuf_free(p);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f004 f933 	bl	800cd24 <pbuf_free>
    return;
 8008abe:	e04d      	b.n	8008b5c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d005      	beq.n	8008ad6 <recv_udp+0x5a>
 8008aca:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <recv_udp+0xe8>)
 8008acc:	22ee      	movs	r2, #238	; 0xee
 8008ace:	4929      	ldr	r1, [pc, #164]	; (8008b74 <recv_udp+0xf8>)
 8008ad0:	4826      	ldr	r0, [pc, #152]	; (8008b6c <recv_udp+0xf0>)
 8008ad2:	f010 f82b 	bl	8018b2c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3310      	adds	r3, #16
 8008ada:	4618      	mov	r0, r3
 8008adc:	f00f fdff 	bl	80186de <sys_mbox_valid>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f004 f91c 	bl	800cd24 <pbuf_free>
    return;
 8008aec:	e036      	b.n	8008b5c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008aee:	2006      	movs	r0, #6
 8008af0:	f003 f9f2 	bl	800bed8 <memp_malloc>
 8008af4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d103      	bne.n	8008b04 <recv_udp+0x88>
    pbuf_free(p);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f004 f911 	bl	800cd24 <pbuf_free>
    return;
 8008b02:	e02b      	b.n	8008b5c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <recv_udp+0xa0>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	e000      	b.n	8008b1e <recv_udp+0xa2>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b26:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	891b      	ldrh	r3, [r3, #8]
 8008b2c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3310      	adds	r3, #16
 8008b32:	69b9      	ldr	r1, [r7, #24]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f00f fd5d 	bl	80185f4 <sys_mbox_trypost>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008b40:	69b8      	ldr	r0, [r7, #24]
 8008b42:	f001 fc4f 	bl	800a3e4 <netbuf_delete>
    return;
 8008b46:	e009      	b.n	8008b5c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d005      	beq.n	8008b5c <recv_udp+0xe0>
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	8afa      	ldrh	r2, [r7, #22]
 8008b56:	2100      	movs	r1, #0
 8008b58:	69f8      	ldr	r0, [r7, #28]
 8008b5a:	4798      	blx	r3
  }
}
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	0801a3ec 	.word	0x0801a3ec
 8008b68:	0801a464 	.word	0x0801a464
 8008b6c:	0801a430 	.word	0x0801a430
 8008b70:	0801a488 	.word	0x0801a488
 8008b74:	0801a4a8 	.word	0x0801a4a8

08008b78 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <recv_tcp+0x22>
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <recv_tcp+0xf0>)
 8008b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b92:	4936      	ldr	r1, [pc, #216]	; (8008c6c <recv_tcp+0xf4>)
 8008b94:	4836      	ldr	r0, [pc, #216]	; (8008c70 <recv_tcp+0xf8>)
 8008b96:	f00f ffc9 	bl	8018b2c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <recv_tcp+0x36>
 8008ba0:	4b31      	ldr	r3, [pc, #196]	; (8008c68 <recv_tcp+0xf0>)
 8008ba2:	f240 122d 	movw	r2, #301	; 0x12d
 8008ba6:	4933      	ldr	r1, [pc, #204]	; (8008c74 <recv_tcp+0xfc>)
 8008ba8:	4831      	ldr	r0, [pc, #196]	; (8008c70 <recv_tcp+0xf8>)
 8008baa:	f00f ffbf 	bl	8018b2c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d006      	beq.n	8008bc4 <recv_tcp+0x4c>
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <recv_tcp+0xf0>)
 8008bb8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008bbc:	492e      	ldr	r1, [pc, #184]	; (8008c78 <recv_tcp+0x100>)
 8008bbe:	482c      	ldr	r0, [pc, #176]	; (8008c70 <recv_tcp+0xf8>)
 8008bc0:	f00f ffb4 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <recv_tcp+0x5c>
    return ERR_VAL;
 8008bce:	f06f 0305 	mvn.w	r3, #5
 8008bd2:	e045      	b.n	8008c60 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d006      	beq.n	8008bec <recv_tcp+0x74>
 8008bde:	4b22      	ldr	r3, [pc, #136]	; (8008c68 <recv_tcp+0xf0>)
 8008be0:	f240 1235 	movw	r2, #309	; 0x135
 8008be4:	4925      	ldr	r1, [pc, #148]	; (8008c7c <recv_tcp+0x104>)
 8008be6:	4822      	ldr	r0, [pc, #136]	; (8008c70 <recv_tcp+0xf8>)
 8008be8:	f00f ffa0 	bl	8018b2c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	3310      	adds	r3, #16
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f00f fd74 	bl	80186de <sys_mbox_valid>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10d      	bne.n	8008c18 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	891b      	ldrh	r3, [r3, #8]
 8008c06:	4619      	mov	r1, r3
 8008c08:	68b8      	ldr	r0, [r7, #8]
 8008c0a:	f005 f865 	bl	800dcd8 <tcp_recved>
      pbuf_free(p);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f004 f888 	bl	800cd24 <pbuf_free>
    }
    return ERR_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e023      	b.n	8008c60 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <recv_tcp+0xb2>
    msg = p;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	891b      	ldrh	r3, [r3, #8]
 8008c26:	83fb      	strh	r3, [r7, #30]
 8008c28:	e003      	b.n	8008c32 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <recv_tcp+0x108>)
 8008c2c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	3310      	adds	r3, #16
 8008c36:	69b9      	ldr	r1, [r7, #24]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f00f fcdb 	bl	80185f4 <sys_mbox_trypost>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008c44:	f04f 33ff 	mov.w	r3, #4294967295
 8008c48:	e00a      	b.n	8008c60 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <recv_tcp+0xe6>
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	8bfa      	ldrh	r2, [r7, #30]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6978      	ldr	r0, [r7, #20]
 8008c5c:	4798      	blx	r3
  }

  return ERR_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3720      	adds	r7, #32
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	0801a3ec 	.word	0x0801a3ec
 8008c6c:	0801a4c8 	.word	0x0801a4c8
 8008c70:	0801a430 	.word	0x0801a430
 8008c74:	0801a4ec 	.word	0x0801a4ec
 8008c78:	0801a50c 	.word	0x0801a50c
 8008c7c:	0801a524 	.word	0x0801a524
 8008c80:	0801db4a 	.word	0x0801db4a

08008c84 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <poll_tcp+0x22>
 8008c98:	4b29      	ldr	r3, [pc, #164]	; (8008d40 <poll_tcp+0xbc>)
 8008c9a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008c9e:	4929      	ldr	r1, [pc, #164]	; (8008d44 <poll_tcp+0xc0>)
 8008ca0:	4829      	ldr	r0, [pc, #164]	; (8008d48 <poll_tcp+0xc4>)
 8008ca2:	f00f ff43 	bl	8018b2c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d104      	bne.n	8008cb8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008cae:	2101      	movs	r1, #1
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f001 f8b3 	bl	8009e1c <lwip_netconn_do_writemore>
 8008cb6:	e016      	b.n	8008ce6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d112      	bne.n	8008ce6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <poll_tcp+0x5a>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	7a5b      	ldrb	r3, [r3, #9]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	7a5a      	ldrb	r2, [r3, #9]
 8008cd8:	3a01      	subs	r2, #1
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008cde:	2101      	movs	r1, #1
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fbf7 	bl	80094d4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	7f1b      	ldrb	r3, [r3, #28]
 8008cea:	f003 0310 	and.w	r3, r3, #16
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d021      	beq.n	8008d36 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d01d      	beq.n	8008d36 <poll_tcp+0xb2>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008d06:	d316      	bcc.n	8008d36 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d810      	bhi.n	8008d36 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	7f1b      	ldrb	r3, [r3, #28]
 8008d18:	f023 0310 	bic.w	r3, r3, #16
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <poll_tcp+0xb2>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2102      	movs	r1, #2
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	0801a3ec 	.word	0x0801a3ec
 8008d44:	0801a544 	.word	0x0801a544
 8008d48:	0801a430 	.word	0x0801a430

08008d4c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <sent_tcp+0x26>
 8008d64:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <sent_tcp+0x9c>)
 8008d66:	f240 1293 	movw	r2, #403	; 0x193
 8008d6a:	4920      	ldr	r1, [pc, #128]	; (8008dec <sent_tcp+0xa0>)
 8008d6c:	4820      	ldr	r0, [pc, #128]	; (8008df0 <sent_tcp+0xa4>)
 8008d6e:	f00f fedd 	bl	8018b2c <iprintf>

  if (conn) {
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d032      	beq.n	8008dde <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d104      	bne.n	8008d8a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008d80:	2101      	movs	r1, #1
 8008d82:	6978      	ldr	r0, [r7, #20]
 8008d84:	f001 f84a 	bl	8009e1c <lwip_netconn_do_writemore>
 8008d88:	e007      	b.n	8008d9a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d103      	bne.n	8008d9a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008d92:	2101      	movs	r1, #1
 8008d94:	6978      	ldr	r0, [r7, #20]
 8008d96:	f000 fb9d 	bl	80094d4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01d      	beq.n	8008dde <sent_tcp+0x92>
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008daa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008dae:	d316      	bcc.n	8008dde <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d810      	bhi.n	8008dde <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	7f1b      	ldrb	r3, [r3, #28]
 8008dc0:	f023 0310 	bic.w	r3, r3, #16
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <sent_tcp+0x92>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	88fa      	ldrh	r2, [r7, #6]
 8008dd8:	2102      	movs	r1, #2
 8008dda:	6978      	ldr	r0, [r7, #20]
 8008ddc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	0801a3ec 	.word	0x0801a3ec
 8008dec:	0801a544 	.word	0x0801a544
 8008df0:	0801a430 	.word	0x0801a430

08008df4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <err_tcp+0x24>
 8008e0a:	4b5f      	ldr	r3, [pc, #380]	; (8008f88 <err_tcp+0x194>)
 8008e0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008e10:	495e      	ldr	r1, [pc, #376]	; (8008f8c <err_tcp+0x198>)
 8008e12:	485f      	ldr	r0, [pc, #380]	; (8008f90 <err_tcp+0x19c>)
 8008e14:	f00f fe8a 	bl	8018b2c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008e18:	f00f fd7c 	bl	8018914 <sys_arch_protect>
 8008e1c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	2200      	movs	r2, #0
 8008e22:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	7f1b      	ldrb	r3, [r3, #28]
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	2200      	movs	r2, #0
 8008e42:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008e44:	69b8      	ldr	r0, [r7, #24]
 8008e46:	f00f fd73 	bl	8018930 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <err_tcp+0x6a>
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2200      	movs	r2, #0
 8008e58:	2104      	movs	r1, #4
 8008e5a:	69f8      	ldr	r0, [r7, #28]
 8008e5c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <err_tcp+0x7e>
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	69f8      	ldr	r0, [r7, #28]
 8008e70:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <err_tcp+0x92>
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2102      	movs	r1, #2
 8008e82:	69f8      	ldr	r0, [r7, #28]
 8008e84:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fd86 	bl	800899c <lwip_netconn_err_to_msg>
 8008e90:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	3310      	adds	r3, #16
 8008e96:	4618      	mov	r0, r3
 8008e98:	f00f fc21 	bl	80186de <sys_mbox_valid>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	6939      	ldr	r1, [r7, #16]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f00f fba3 	bl	80185f4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f00f fc13 	bl	80186de <sys_mbox_valid>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	3314      	adds	r3, #20
 8008ec2:	6939      	ldr	r1, [r7, #16]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f00f fb95 	bl	80185f4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d005      	beq.n	8008edc <err_tcp+0xe8>
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d002      	beq.n	8008edc <err_tcp+0xe8>
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d143      	bne.n	8008f64 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	7f1b      	ldrb	r3, [r3, #28]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	7f1b      	ldrb	r3, [r3, #28]
 8008ef4:	f023 0304 	bic.w	r3, r3, #4
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d13b      	bne.n	8008f7c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <err_tcp+0x126>
 8008f0c:	4b1e      	ldr	r3, [pc, #120]	; (8008f88 <err_tcp+0x194>)
 8008f0e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008f12:	4920      	ldr	r1, [pc, #128]	; (8008f94 <err_tcp+0x1a0>)
 8008f14:	481e      	ldr	r0, [pc, #120]	; (8008f90 <err_tcp+0x19c>)
 8008f16:	f00f fe09 	bl	8018b2c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d104      	bne.n	8008f2a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	2200      	movs	r2, #0
 8008f26:	711a      	strb	r2, [r3, #4]
 8008f28:	e003      	b.n	8008f32 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	78fa      	ldrb	r2, [r7, #3]
 8008f30:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008f3c:	68b8      	ldr	r0, [r7, #8]
 8008f3e:	f00f fc5f 	bl	8018800 <sys_sem_valid>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <err_tcp+0x162>
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <err_tcp+0x194>)
 8008f4a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008f4e:	4912      	ldr	r1, [pc, #72]	; (8008f98 <err_tcp+0x1a4>)
 8008f50:	480f      	ldr	r0, [pc, #60]	; (8008f90 <err_tcp+0x19c>)
 8008f52:	f00f fdeb 	bl	8018b2c <iprintf>
      conn->current_msg = NULL;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008f5c:	68b8      	ldr	r0, [r7, #8]
 8008f5e:	f00f fc35 	bl	80187cc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008f62:	e00b      	b.n	8008f7c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <err_tcp+0x18a>
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <err_tcp+0x194>)
 8008f6e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008f72:	490a      	ldr	r1, [pc, #40]	; (8008f9c <err_tcp+0x1a8>)
 8008f74:	4806      	ldr	r0, [pc, #24]	; (8008f90 <err_tcp+0x19c>)
 8008f76:	f00f fdd9 	bl	8018b2c <iprintf>
  }
}
 8008f7a:	e000      	b.n	8008f7e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008f7c:	bf00      	nop
}
 8008f7e:	bf00      	nop
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	0801a3ec 	.word	0x0801a3ec
 8008f8c:	0801a544 	.word	0x0801a544
 8008f90:	0801a430 	.word	0x0801a430
 8008f94:	0801a554 	.word	0x0801a554
 8008f98:	0801a570 	.word	0x0801a570
 8008f9c:	0801a58c 	.word	0x0801a58c

08008fa0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f005 fe8d 	bl	800ecd0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008fb6:	490a      	ldr	r1, [pc, #40]	; (8008fe0 <setup_tcp+0x40>)
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f005 fe9b 	bl	800ecf4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008fbe:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <setup_tcp+0x44>)
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f005 feb9 	bl	800ed38 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	4907      	ldr	r1, [pc, #28]	; (8008fe8 <setup_tcp+0x48>)
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f005 ff10 	bl	800edf0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008fd0:	4906      	ldr	r1, [pc, #24]	; (8008fec <setup_tcp+0x4c>)
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f005 fed2 	bl	800ed7c <tcp_err>
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	08008b79 	.word	0x08008b79
 8008fe4:	08008d4d 	.word	0x08008d4d
 8008fe8:	08008c85 	.word	0x08008c85
 8008fec:	08008df5 	.word	0x08008df5

08008ff0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b089      	sub	sp, #36	; 0x24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <accept_function+0x1e>
    return ERR_VAL;
 8009008:	f06f 0305 	mvn.w	r3, #5
 800900c:	e0a1      	b.n	8009152 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	3314      	adds	r3, #20
 8009012:	4618      	mov	r0, r3
 8009014:	f00f fb63 	bl	80186de <sys_mbox_valid>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800901e:	f06f 0305 	mvn.w	r3, #5
 8009022:	e096      	b.n	8009152 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11b      	bne.n	8009062 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f103 0414 	add.w	r4, r3, #20
 8009030:	f06f 000c 	mvn.w	r0, #12
 8009034:	f7ff fcb2 	bl	800899c <lwip_netconn_err_to_msg>
 8009038:	4603      	mov	r3, r0
 800903a:	4619      	mov	r1, r3
 800903c:	4620      	mov	r0, r4
 800903e:	f00f fad9 	bl	80185f4 <sys_mbox_trypost>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d109      	bne.n	800905c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <accept_function+0x6c>
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	2200      	movs	r2, #0
 8009056:	2100      	movs	r1, #0
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	4798      	blx	r3
    }
    return ERR_VAL;
 800905c:	f06f 0305 	mvn.w	r3, #5
 8009060:	e077      	b.n	8009152 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <accept_function+0x88>
 800906a:	4b3c      	ldr	r3, [pc, #240]	; (800915c <accept_function+0x16c>)
 800906c:	f240 222a 	movw	r2, #554	; 0x22a
 8009070:	493b      	ldr	r1, [pc, #236]	; (8009160 <accept_function+0x170>)
 8009072:	483c      	ldr	r0, [pc, #240]	; (8009164 <accept_function+0x174>)
 8009074:	f00f fd5a 	bl	8018b2c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f000 f8f0 	bl	8009268 <netconn_alloc>
 8009088:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11b      	bne.n	80090c8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f103 0414 	add.w	r4, r3, #20
 8009096:	f06f 000c 	mvn.w	r0, #12
 800909a:	f7ff fc7f 	bl	800899c <lwip_netconn_err_to_msg>
 800909e:	4603      	mov	r3, r0
 80090a0:	4619      	mov	r1, r3
 80090a2:	4620      	mov	r0, r4
 80090a4:	f00f faa6 	bl	80185f4 <sys_mbox_trypost>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <accept_function+0xd2>
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	4798      	blx	r3
    }
    return ERR_MEM;
 80090c2:	f04f 33ff 	mov.w	r3, #4294967295
 80090c6:	e044      	b.n	8009152 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80090ce:	69b8      	ldr	r0, [r7, #24]
 80090d0:	f7ff ff66 	bl	8008fa0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3314      	adds	r3, #20
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	4618      	mov	r0, r3
 80090dc:	f00f fa8a 	bl	80185f4 <sys_mbox_trypost>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d02a      	beq.n	800913c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80090ec:	2100      	movs	r1, #0
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f005 fdee 	bl	800ecd0 <tcp_arg>
    tcp_recv(pcb, NULL);
 80090f4:	2100      	movs	r1, #0
 80090f6:	6978      	ldr	r0, [r7, #20]
 80090f8:	f005 fdfc 	bl	800ecf4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80090fc:	2100      	movs	r1, #0
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f005 fe1a 	bl	800ed38 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009104:	2200      	movs	r2, #0
 8009106:	2100      	movs	r1, #0
 8009108:	6978      	ldr	r0, [r7, #20]
 800910a:	f005 fe71 	bl	800edf0 <tcp_poll>
    tcp_err(pcb, NULL);
 800910e:	2100      	movs	r1, #0
 8009110:	6978      	ldr	r0, [r7, #20]
 8009112:	f005 fe33 	bl	800ed7c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	2200      	movs	r2, #0
 800911a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	3310      	adds	r3, #16
 8009120:	4618      	mov	r0, r3
 8009122:	f00f fa55 	bl	80185d0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	3310      	adds	r3, #16
 800912a:	4618      	mov	r0, r3
 800912c:	f00f fae8 	bl	8018700 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009130:	69b8      	ldr	r0, [r7, #24]
 8009132:	f000 f907 	bl	8009344 <netconn_free>
    return ERR_MEM;
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
 800913a:	e00a      	b.n	8009152 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <accept_function+0x160>
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2200      	movs	r2, #0
 800914a:	2100      	movs	r1, #0
 800914c:	69f8      	ldr	r0, [r7, #28]
 800914e:	4798      	blx	r3
  }

  return ERR_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3724      	adds	r7, #36	; 0x24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd90      	pop	{r4, r7, pc}
 800915a:	bf00      	nop
 800915c:	0801a3ec 	.word	0x0801a3ec
 8009160:	0801a5a8 	.word	0x0801a5a8
 8009164:	0801a430 	.word	0x0801a430

08009168 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009168:	b590      	push	{r4, r7, lr}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <pcb_new+0x24>
 800917e:	4b2b      	ldr	r3, [pc, #172]	; (800922c <pcb_new+0xc4>)
 8009180:	f240 2265 	movw	r2, #613	; 0x265
 8009184:	492a      	ldr	r1, [pc, #168]	; (8009230 <pcb_new+0xc8>)
 8009186:	482b      	ldr	r0, [pc, #172]	; (8009234 <pcb_new+0xcc>)
 8009188:	f00f fcd0 	bl	8018b2c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009196:	2b10      	cmp	r3, #16
 8009198:	d022      	beq.n	80091e0 <pcb_new+0x78>
 800919a:	2b20      	cmp	r3, #32
 800919c:	d133      	bne.n	8009206 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681c      	ldr	r4, [r3, #0]
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f00b f83a 	bl	801421e <udp_new_ip_type>
 80091aa:	4603      	mov	r3, r0
 80091ac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02a      	beq.n	800920e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b22      	cmp	r3, #34	; 0x22
 80091c0:	d104      	bne.n	80091cc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6858      	ldr	r0, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	4917      	ldr	r1, [pc, #92]	; (8009238 <pcb_new+0xd0>)
 80091da:	f00a ffa7 	bl	801412c <udp_recv>
      }
      break;
 80091de:	e016      	b.n	800920e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681c      	ldr	r4, [r3, #0]
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f005 fd64 	bl	800ecb4 <tcp_new_ip_type>
 80091ec:	4603      	mov	r3, r0
 80091ee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fece 	bl	8008fa0 <setup_tcp>
      }
      break;
 8009204:	e005      	b.n	8009212 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	22fa      	movs	r2, #250	; 0xfa
 800920a:	711a      	strb	r2, [r3, #4]
      return;
 800920c:	e00a      	b.n	8009224 <pcb_new+0xbc>
      break;
 800920e:	bf00      	nop
 8009210:	e000      	b.n	8009214 <pcb_new+0xac>
      break;
 8009212:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	22ff      	movs	r2, #255	; 0xff
 8009222:	711a      	strb	r2, [r3, #4]
  }
}
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}
 800922a:	bf00      	nop
 800922c:	0801a3ec 	.word	0x0801a3ec
 8009230:	0801a5d0 	.word	0x0801a5d0
 8009234:	0801a430 	.word	0x0801a430
 8009238:	08008a7d 	.word	0x08008a7d

0800923c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff ff85 	bl	8009168 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009278:	2007      	movs	r0, #7
 800927a:	f002 fe2d 	bl	800bed8 <memp_malloc>
 800927e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <netconn_alloc+0x22>
    return NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	e052      	b.n	8009330 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	79fa      	ldrb	r2, [r7, #7]
 8009294:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d004      	beq.n	80092b0 <netconn_alloc+0x48>
 80092a6:	2b20      	cmp	r3, #32
 80092a8:	d105      	bne.n	80092b6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80092aa:	2306      	movs	r3, #6
 80092ac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80092ae:	e00a      	b.n	80092c6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80092b0:	2306      	movs	r3, #6
 80092b2:	617b      	str	r3, [r7, #20]
      break;
 80092b4:	e007      	b.n	80092c6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80092b6:	4b20      	ldr	r3, [pc, #128]	; (8009338 <netconn_alloc+0xd0>)
 80092b8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80092bc:	491f      	ldr	r1, [pc, #124]	; (800933c <netconn_alloc+0xd4>)
 80092be:	4820      	ldr	r0, [pc, #128]	; (8009340 <netconn_alloc+0xd8>)
 80092c0:	f00f fc34 	bl	8018b2c <iprintf>
      goto free_and_return;
 80092c4:	e02f      	b.n	8009326 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3310      	adds	r3, #16
 80092ca:	6979      	ldr	r1, [r7, #20]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f00f f95d 	bl	801858c <sys_mbox_new>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d125      	bne.n	8009324 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	330c      	adds	r3, #12
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f00f fa1b 	bl	801871a <sys_sem_new>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3310      	adds	r3, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00f f96e 	bl	80185d0 <sys_mbox_free>
    goto free_and_return;
 80092f4:	e017      	b.n	8009326 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3314      	adds	r3, #20
 80092fa:	4618      	mov	r0, r3
 80092fc:	f00f fa00 	bl	8018700 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f04f 32ff 	mov.w	r2, #4294967295
 800930c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	7cfa      	ldrb	r2, [r7, #19]
 800931e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	e005      	b.n	8009330 <netconn_alloc+0xc8>
    goto free_and_return;
 8009324:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	2007      	movs	r0, #7
 800932a:	f002 fe4b 	bl	800bfc4 <memp_free>
  return NULL;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	0801a3ec 	.word	0x0801a3ec
 800933c:	0801a5f0 	.word	0x0801a5f0
 8009340:	0801a430 	.word	0x0801a430

08009344 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d006      	beq.n	8009362 <netconn_free+0x1e>
 8009354:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <netconn_free+0x80>)
 8009356:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800935a:	491b      	ldr	r1, [pc, #108]	; (80093c8 <netconn_free+0x84>)
 800935c:	481b      	ldr	r0, [pc, #108]	; (80093cc <netconn_free+0x88>)
 800935e:	f00f fbe5 	bl	8018b2c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3310      	adds	r3, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f00f f9b9 	bl	80186de <sys_mbox_valid>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <netconn_free+0x3c>
 8009372:	4b14      	ldr	r3, [pc, #80]	; (80093c4 <netconn_free+0x80>)
 8009374:	f240 3223 	movw	r2, #803	; 0x323
 8009378:	4915      	ldr	r1, [pc, #84]	; (80093d0 <netconn_free+0x8c>)
 800937a:	4814      	ldr	r0, [pc, #80]	; (80093cc <netconn_free+0x88>)
 800937c:	f00f fbd6 	bl	8018b2c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3314      	adds	r3, #20
 8009384:	4618      	mov	r0, r3
 8009386:	f00f f9aa 	bl	80186de <sys_mbox_valid>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <netconn_free+0x5a>
 8009390:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <netconn_free+0x80>)
 8009392:	f240 3226 	movw	r2, #806	; 0x326
 8009396:	490f      	ldr	r1, [pc, #60]	; (80093d4 <netconn_free+0x90>)
 8009398:	480c      	ldr	r0, [pc, #48]	; (80093cc <netconn_free+0x88>)
 800939a:	f00f fbc7 	bl	8018b2c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	330c      	adds	r3, #12
 80093a2:	4618      	mov	r0, r3
 80093a4:	f00f fa1f 	bl	80187e6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	330c      	adds	r3, #12
 80093ac:	4618      	mov	r0, r3
 80093ae:	f00f fa38 	bl	8018822 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	2007      	movs	r0, #7
 80093b6:	f002 fe05 	bl	800bfc4 <memp_free>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	0801a3ec 	.word	0x0801a3ec
 80093c8:	0801a618 	.word	0x0801a618
 80093cc:	0801a430 	.word	0x0801a430
 80093d0:	0801a648 	.word	0x0801a648
 80093d4:	0801a684 	.word	0x0801a684

080093d8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3310      	adds	r3, #16
 80093e4:	4618      	mov	r0, r3
 80093e6:	f00f f97a 	bl	80186de <sys_mbox_valid>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02f      	beq.n	8009450 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80093f0:	e018      	b.n	8009424 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093fa:	2b10      	cmp	r3, #16
 80093fc:	d10e      	bne.n	800941c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f107 020f 	add.w	r2, r7, #15
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fafe 	bl	8008a08 <lwip_netconn_is_err_msg>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d108      	bne.n	8009424 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4618      	mov	r0, r3
 8009416:	f003 fc85 	bl	800cd24 <pbuf_free>
 800941a:	e003      	b.n	8009424 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 ffe0 	bl	800a3e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3310      	adds	r3, #16
 8009428:	f107 0210 	add.w	r2, r7, #16
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f00f f939 	bl	80186a6 <sys_arch_mbox_tryfetch>
 8009434:	4603      	mov	r3, r0
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943a:	d1da      	bne.n	80093f2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3310      	adds	r3, #16
 8009440:	4618      	mov	r0, r3
 8009442:	f00f f8c5 	bl	80185d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3310      	adds	r3, #16
 800944a:	4618      	mov	r0, r3
 800944c:	f00f f958 	bl	8018700 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3314      	adds	r3, #20
 8009454:	4618      	mov	r0, r3
 8009456:	f00f f942 	bl	80186de <sys_mbox_valid>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d034      	beq.n	80094ca <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009460:	e01d      	b.n	800949e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f107 020e 	add.w	r2, r7, #14
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff facc 	bl	8008a08 <lwip_netconn_is_err_msg>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d113      	bne.n	800949e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800947a:	6978      	ldr	r0, [r7, #20]
 800947c:	f7ff ffac 	bl	80093d8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	f004 fa49 	bl	800d924 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2200      	movs	r2, #0
 8009496:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009498:	6978      	ldr	r0, [r7, #20]
 800949a:	f7ff ff53 	bl	8009344 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3314      	adds	r3, #20
 80094a2:	f107 0210 	add.w	r2, r7, #16
 80094a6:	4611      	mov	r1, r2
 80094a8:	4618      	mov	r0, r3
 80094aa:	f00f f8fc 	bl	80186a6 <sys_arch_mbox_tryfetch>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d1d5      	bne.n	8009462 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3314      	adds	r3, #20
 80094ba:	4618      	mov	r0, r3
 80094bc:	f00f f888 	bl	80185d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3314      	adds	r3, #20
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00f f91b 	bl	8018700 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80094ca:	bf00      	nop
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <lwip_netconn_do_close_internal+0x24>
 80094ea:	4b87      	ldr	r3, [pc, #540]	; (8009708 <lwip_netconn_do_close_internal+0x234>)
 80094ec:	f240 32a2 	movw	r2, #930	; 0x3a2
 80094f0:	4986      	ldr	r1, [pc, #536]	; (800970c <lwip_netconn_do_close_internal+0x238>)
 80094f2:	4887      	ldr	r0, [pc, #540]	; (8009710 <lwip_netconn_do_close_internal+0x23c>)
 80094f4:	f00f fb1a 	bl	8018b2c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009500:	2b10      	cmp	r3, #16
 8009502:	d006      	beq.n	8009512 <lwip_netconn_do_close_internal+0x3e>
 8009504:	4b80      	ldr	r3, [pc, #512]	; (8009708 <lwip_netconn_do_close_internal+0x234>)
 8009506:	f240 32a3 	movw	r2, #931	; 0x3a3
 800950a:	4982      	ldr	r1, [pc, #520]	; (8009714 <lwip_netconn_do_close_internal+0x240>)
 800950c:	4880      	ldr	r0, [pc, #512]	; (8009710 <lwip_netconn_do_close_internal+0x23c>)
 800950e:	f00f fb0d 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b04      	cmp	r3, #4
 8009518:	d006      	beq.n	8009528 <lwip_netconn_do_close_internal+0x54>
 800951a:	4b7b      	ldr	r3, [pc, #492]	; (8009708 <lwip_netconn_do_close_internal+0x234>)
 800951c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009520:	497d      	ldr	r1, [pc, #500]	; (8009718 <lwip_netconn_do_close_internal+0x244>)
 8009522:	487b      	ldr	r0, [pc, #492]	; (8009710 <lwip_netconn_do_close_internal+0x23c>)
 8009524:	f00f fb02 	bl	8018b2c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <lwip_netconn_do_close_internal+0x6a>
 8009530:	4b75      	ldr	r3, [pc, #468]	; (8009708 <lwip_netconn_do_close_internal+0x234>)
 8009532:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009536:	4979      	ldr	r1, [pc, #484]	; (800971c <lwip_netconn_do_close_internal+0x248>)
 8009538:	4875      	ldr	r0, [pc, #468]	; (8009710 <lwip_netconn_do_close_internal+0x23c>)
 800953a:	f00f faf7 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <lwip_netconn_do_close_internal+0x80>
 8009546:	4b70      	ldr	r3, [pc, #448]	; (8009708 <lwip_netconn_do_close_internal+0x234>)
 8009548:	f240 32a6 	movw	r2, #934	; 0x3a6
 800954c:	4974      	ldr	r1, [pc, #464]	; (8009720 <lwip_netconn_do_close_internal+0x24c>)
 800954e:	4870      	ldr	r0, [pc, #448]	; (8009710 <lwip_netconn_do_close_internal+0x23c>)
 8009550:	f00f faec 	bl	8018b2c <iprintf>

  tpcb = conn->pcb.tcp;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	7a1b      	ldrb	r3, [r3, #8]
 8009560:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b03      	cmp	r3, #3
 8009576:	d102      	bne.n	800957e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009578:	2301      	movs	r3, #1
 800957a:	75bb      	strb	r3, [r7, #22]
 800957c:	e01f      	b.n	80095be <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00e      	beq.n	80095a2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009588:	2b05      	cmp	r3, #5
 800958a:	d007      	beq.n	800959c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009590:	2b06      	cmp	r3, #6
 8009592:	d003      	beq.n	800959c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009598:	2b08      	cmp	r3, #8
 800959a:	d102      	bne.n	80095a2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800959c:	2301      	movs	r3, #1
 800959e:	75bb      	strb	r3, [r7, #22]
 80095a0:	e00d      	b.n	80095be <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80095a2:	7b7b      	ldrb	r3, [r7, #13]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <lwip_netconn_do_close_internal+0xe6>
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	8b5b      	ldrh	r3, [r3, #26]
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75bb      	strb	r3, [r7, #22]
 80095b8:	e001      	b.n	80095be <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80095be:	7dbb      	ldrb	r3, [r7, #22]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80095c4:	2100      	movs	r1, #0
 80095c6:	6938      	ldr	r0, [r7, #16]
 80095c8:	f005 fb82 	bl	800ecd0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	7d1b      	ldrb	r3, [r3, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d104      	bne.n	80095de <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80095d4:	2100      	movs	r1, #0
 80095d6:	6938      	ldr	r0, [r7, #16]
 80095d8:	f005 fbf2 	bl	800edc0 <tcp_accept>
 80095dc:	e01d      	b.n	800961a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80095e4:	2100      	movs	r1, #0
 80095e6:	6938      	ldr	r0, [r7, #16]
 80095e8:	f005 fb84 	bl	800ecf4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80095ec:	2100      	movs	r1, #0
 80095ee:	6938      	ldr	r0, [r7, #16]
 80095f0:	f005 fbe6 	bl	800edc0 <tcp_accept>
    }
    if (shut_tx) {
 80095f4:	7b7b      	ldrb	r3, [r7, #13]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80095fa:	2100      	movs	r1, #0
 80095fc:	6938      	ldr	r0, [r7, #16]
 80095fe:	f005 fb9b 	bl	800ed38 <tcp_sent>
    }
    if (shut_close) {
 8009602:	7dbb      	ldrb	r3, [r7, #22]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009608:	2200      	movs	r2, #0
 800960a:	2100      	movs	r1, #0
 800960c:	6938      	ldr	r0, [r7, #16]
 800960e:	f005 fbef 	bl	800edf0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009612:	2100      	movs	r1, #0
 8009614:	6938      	ldr	r0, [r7, #16]
 8009616:	f005 fbb1 	bl	800ed7c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800961a:	7dbb      	ldrb	r3, [r7, #22]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009620:	6938      	ldr	r0, [r7, #16]
 8009622:	f004 f839 	bl	800d698 <tcp_close>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
 800962a:	e007      	b.n	800963c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	7b7a      	ldrb	r2, [r7, #13]
 8009630:	4619      	mov	r1, r3
 8009632:	6938      	ldr	r0, [r7, #16]
 8009634:	f004 f85c 	bl	800d6f0 <tcp_shutdown>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800963c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009644:	2301      	movs	r3, #1
 8009646:	757b      	strb	r3, [r7, #21]
 8009648:	e016      	b.n	8009678 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800964a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d10f      	bne.n	8009674 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	7a5b      	ldrb	r3, [r3, #9]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800965e:	2301      	movs	r3, #1
 8009660:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009662:	7dbb      	ldrb	r3, [r7, #22]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009668:	6938      	ldr	r0, [r7, #16]
 800966a:	f004 f95b 	bl	800d924 <tcp_abort>
          err = ERR_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
 8009672:	e001      	b.n	8009678 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009674:	2301      	movs	r3, #1
 8009676:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009678:	7d7b      	ldrb	r3, [r7, #21]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d052      	beq.n	8009724 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	330c      	adds	r3, #12
 8009686:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	7dfa      	ldrb	r2, [r7, #23]
 800968e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800969c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d129      	bne.n	80096f8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80096a4:	7dbb      	ldrb	r3, [r7, #22]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00c      	beq.n	80096c4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <lwip_netconn_do_close_internal+0x1f0>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2200      	movs	r2, #0
 80096be:	2104      	movs	r1, #4
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
      }
      if (shut_rx) {
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <lwip_netconn_do_close_internal+0x20a>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2200      	movs	r2, #0
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
      }
      if (shut_tx) {
 80096de:	7b7b      	ldrb	r3, [r7, #13]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <lwip_netconn_do_close_internal+0x224>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2200      	movs	r2, #0
 80096f2:	2102      	movs	r1, #2
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80096fe:	68b8      	ldr	r0, [r7, #8]
 8009700:	f00f f864 	bl	80187cc <sys_sem_signal>
    }
    return ERR_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e03c      	b.n	8009782 <lwip_netconn_do_close_internal+0x2ae>
 8009708:	0801a3ec 	.word	0x0801a3ec
 800970c:	0801a6c0 	.word	0x0801a6c0
 8009710:	0801a430 	.word	0x0801a430
 8009714:	0801a6d0 	.word	0x0801a6d0
 8009718:	0801a6f0 	.word	0x0801a6f0
 800971c:	0801a714 	.word	0x0801a714
 8009720:	0801a554 	.word	0x0801a554
  }
  if (!close_finished) {
 8009724:	7d7b      	ldrb	r3, [r7, #21]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d11e      	bne.n	8009768 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	7d1b      	ldrb	r3, [r3, #20]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d106      	bne.n	8009740 <lwip_netconn_do_close_internal+0x26c>
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <lwip_netconn_do_close_internal+0x2b8>)
 8009734:	f240 4241 	movw	r2, #1089	; 0x441
 8009738:	4915      	ldr	r1, [pc, #84]	; (8009790 <lwip_netconn_do_close_internal+0x2bc>)
 800973a:	4816      	ldr	r0, [pc, #88]	; (8009794 <lwip_netconn_do_close_internal+0x2c0>)
 800973c:	f00f f9f6 	bl	8018b2c <iprintf>
    if (shut_tx) {
 8009740:	7b7b      	ldrb	r3, [r7, #13]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009746:	4914      	ldr	r1, [pc, #80]	; (8009798 <lwip_netconn_do_close_internal+0x2c4>)
 8009748:	6938      	ldr	r0, [r7, #16]
 800974a:	f005 faf5 	bl	800ed38 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800974e:	2201      	movs	r2, #1
 8009750:	4912      	ldr	r1, [pc, #72]	; (800979c <lwip_netconn_do_close_internal+0x2c8>)
 8009752:	6938      	ldr	r0, [r7, #16]
 8009754:	f005 fb4c 	bl	800edf0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009758:	4911      	ldr	r1, [pc, #68]	; (80097a0 <lwip_netconn_do_close_internal+0x2cc>)
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f005 fb0e 	bl	800ed7c <tcp_err>
    tcp_arg(tpcb, conn);
 8009760:	6879      	ldr	r1, [r7, #4]
 8009762:	6938      	ldr	r0, [r7, #16]
 8009764:	f005 fab4 	bl	800ecd0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <lwip_netconn_do_close_internal+0x2aa>
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <lwip_netconn_do_close_internal+0x2b8>)
 8009772:	f240 424d 	movw	r2, #1101	; 0x44d
 8009776:	490b      	ldr	r1, [pc, #44]	; (80097a4 <lwip_netconn_do_close_internal+0x2d0>)
 8009778:	4806      	ldr	r0, [pc, #24]	; (8009794 <lwip_netconn_do_close_internal+0x2c0>)
 800977a:	f00f f9d7 	bl	8018b2c <iprintf>
  return err;
 800977e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	0801a3ec 	.word	0x0801a3ec
 8009790:	0801a728 	.word	0x0801a728
 8009794:	0801a430 	.word	0x0801a430
 8009798:	08008d4d 	.word	0x08008d4d
 800979c:	08008c85 	.word	0x08008c85
 80097a0:	08008df5 	.word	0x08008df5
 80097a4:	0801a74c 	.word	0x0801a74c

080097a8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00d      	beq.n	80097de <lwip_netconn_do_delconn+0x36>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d006      	beq.n	80097de <lwip_netconn_do_delconn+0x36>
 80097d0:	4b60      	ldr	r3, [pc, #384]	; (8009954 <lwip_netconn_do_delconn+0x1ac>)
 80097d2:	f240 425e 	movw	r2, #1118	; 0x45e
 80097d6:	4960      	ldr	r1, [pc, #384]	; (8009958 <lwip_netconn_do_delconn+0x1b0>)
 80097d8:	4860      	ldr	r0, [pc, #384]	; (800995c <lwip_netconn_do_delconn+0x1b4>)
 80097da:	f00f f9a7 	bl	8018b2c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <lwip_netconn_do_delconn+0x48>
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d002      	beq.n	80097f0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d109      	bne.n	8009804 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d10a      	bne.n	800980c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	7f1b      	ldrb	r3, [r3, #28]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	22fb      	movs	r2, #251	; 0xfb
 8009808:	711a      	strb	r2, [r3, #4]
 800980a:	e097      	b.n	800993c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d10d      	bne.n	800982e <lwip_netconn_do_delconn+0x86>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	7f1b      	ldrb	r3, [r3, #28]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d106      	bne.n	800982e <lwip_netconn_do_delconn+0x86>
 8009820:	4b4c      	ldr	r3, [pc, #304]	; (8009954 <lwip_netconn_do_delconn+0x1ac>)
 8009822:	f240 427a 	movw	r2, #1146	; 0x47a
 8009826:	494e      	ldr	r1, [pc, #312]	; (8009960 <lwip_netconn_do_delconn+0x1b8>)
 8009828:	484c      	ldr	r0, [pc, #304]	; (800995c <lwip_netconn_do_delconn+0x1b4>)
 800982a:	f00f f97f 	bl	8018b2c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f7ff fdcd 	bl	80093d8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05f      	beq.n	8009908 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009852:	2b10      	cmp	r3, #16
 8009854:	d00d      	beq.n	8009872 <lwip_netconn_do_delconn+0xca>
 8009856:	2b20      	cmp	r3, #32
 8009858:	d151      	bne.n	80098fe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	f00a fc7e 	bl	801416c <udp_remove>
          break;
 8009870:	e046      	b.n	8009900 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <lwip_netconn_do_delconn+0xe2>
 800987c:	4b35      	ldr	r3, [pc, #212]	; (8009954 <lwip_netconn_do_delconn+0x1ac>)
 800987e:	f240 4294 	movw	r2, #1172	; 0x494
 8009882:	4938      	ldr	r1, [pc, #224]	; (8009964 <lwip_netconn_do_delconn+0x1bc>)
 8009884:	4835      	ldr	r0, [pc, #212]	; (800995c <lwip_netconn_do_delconn+0x1b4>)
 8009886:	f00f f951 	bl	8018b2c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2204      	movs	r2, #4
 8009890:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2203      	movs	r2, #3
 8009896:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fe14 	bl	80094d4 <lwip_netconn_do_close_internal>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d04b      	beq.n	800994a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d006      	beq.n	80098ca <lwip_netconn_do_delconn+0x122>
 80098bc:	4b25      	ldr	r3, [pc, #148]	; (8009954 <lwip_netconn_do_delconn+0x1ac>)
 80098be:	f240 429a 	movw	r2, #1178	; 0x49a
 80098c2:	4929      	ldr	r1, [pc, #164]	; (8009968 <lwip_netconn_do_delconn+0x1c0>)
 80098c4:	4825      	ldr	r0, [pc, #148]	; (800995c <lwip_netconn_do_delconn+0x1b4>)
 80098c6:	f00f f931 	bl	8018b2c <iprintf>
            UNLOCK_TCPIP_CORE();
 80098ca:	4828      	ldr	r0, [pc, #160]	; (800996c <lwip_netconn_do_delconn+0x1c4>)
 80098cc:	f00e ffef 	bl	80188ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f00e ff46 	bl	801876a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80098de:	4823      	ldr	r0, [pc, #140]	; (800996c <lwip_netconn_do_delconn+0x1c4>)
 80098e0:	f00e ffd6 	bl	8018890 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d02d      	beq.n	800994a <lwip_netconn_do_delconn+0x1a2>
 80098ee:	4b19      	ldr	r3, [pc, #100]	; (8009954 <lwip_netconn_do_delconn+0x1ac>)
 80098f0:	f240 429e 	movw	r2, #1182	; 0x49e
 80098f4:	491c      	ldr	r1, [pc, #112]	; (8009968 <lwip_netconn_do_delconn+0x1c0>)
 80098f6:	4819      	ldr	r0, [pc, #100]	; (800995c <lwip_netconn_do_delconn+0x1b4>)
 80098f8:	f00f f918 	bl	8018b2c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80098fc:	e025      	b.n	800994a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80098fe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2200      	movs	r2, #0
 8009906:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <lwip_netconn_do_delconn+0x17a>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	6810      	ldr	r0, [r2, #0]
 800991c:	2200      	movs	r2, #0
 800991e:	2100      	movs	r1, #0
 8009920:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <lwip_netconn_do_delconn+0x194>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	6810      	ldr	r0, [r2, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	2102      	movs	r1, #2
 800993a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	330c      	adds	r3, #12
 8009942:	4618      	mov	r0, r3
 8009944:	f00e ff5c 	bl	8018800 <sys_sem_valid>
 8009948:	e000      	b.n	800994c <lwip_netconn_do_delconn+0x1a4>
          return;
 800994a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	0801a3ec 	.word	0x0801a3ec
 8009958:	0801a75c 	.word	0x0801a75c
 800995c:	0801a430 	.word	0x0801a430
 8009960:	0801a770 	.word	0x0801a770
 8009964:	0801a790 	.word	0x0801a790
 8009968:	0801a7ac 	.word	0x0801a7ac
 800996c:	2000d5e8 	.word	0x2000d5e8

08009970 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d025      	beq.n	80099d2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009990:	2b10      	cmp	r3, #16
 8009992:	d00e      	beq.n	80099b2 <lwip_netconn_do_bind+0x42>
 8009994:	2b20      	cmp	r3, #32
 8009996:	d119      	bne.n	80099cc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6858      	ldr	r0, [r3, #4]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6899      	ldr	r1, [r3, #8]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	899b      	ldrh	r3, [r3, #12]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f00a faca 	bl	8013f40 <udp_bind>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
        break;
 80099b0:	e011      	b.n	80099d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6858      	ldr	r0, [r3, #4]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	6899      	ldr	r1, [r3, #8]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	899b      	ldrh	r3, [r3, #12]
 80099c0:	461a      	mov	r2, r3
 80099c2:	f003 ffbb 	bl	800d93c <tcp_bind>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
        break;
 80099ca:	e004      	b.n	80099d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80099cc:	23fa      	movs	r3, #250	; 0xfa
 80099ce:	73fb      	strb	r3, [r7, #15]
        break;
 80099d0:	e001      	b.n	80099d6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80099d2:	23fa      	movs	r3, #250	; 0xfa
 80099d4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	7bfa      	ldrb	r2, [r7, #15]
 80099da:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	4613      	mov	r3, r2
 80099f0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d102      	bne.n	8009a06 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009a00:	f06f 0305 	mvn.w	r3, #5
 8009a04:	e070      	b.n	8009ae8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d006      	beq.n	8009a1c <lwip_netconn_do_connected+0x38>
 8009a0e:	4b38      	ldr	r3, [pc, #224]	; (8009af0 <lwip_netconn_do_connected+0x10c>)
 8009a10:	f240 5223 	movw	r2, #1315	; 0x523
 8009a14:	4937      	ldr	r1, [pc, #220]	; (8009af4 <lwip_netconn_do_connected+0x110>)
 8009a16:	4838      	ldr	r0, [pc, #224]	; (8009af8 <lwip_netconn_do_connected+0x114>)
 8009a18:	f00f f888 	bl	8018b2c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10c      	bne.n	8009a3e <lwip_netconn_do_connected+0x5a>
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	7f1b      	ldrb	r3, [r3, #28]
 8009a28:	f003 0304 	and.w	r3, r3, #4
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d106      	bne.n	8009a3e <lwip_netconn_do_connected+0x5a>
 8009a30:	4b2f      	ldr	r3, [pc, #188]	; (8009af0 <lwip_netconn_do_connected+0x10c>)
 8009a32:	f240 5224 	movw	r2, #1316	; 0x524
 8009a36:	4931      	ldr	r1, [pc, #196]	; (8009afc <lwip_netconn_do_connected+0x118>)
 8009a38:	482f      	ldr	r0, [pc, #188]	; (8009af8 <lwip_netconn_do_connected+0x114>)
 8009a3a:	f00f f877 	bl	8018b2c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d008      	beq.n	8009a58 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	79fa      	ldrb	r2, [r7, #7]
 8009a4c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	330c      	adds	r3, #12
 8009a56:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a60:	2b10      	cmp	r3, #16
 8009a62:	d106      	bne.n	8009a72 <lwip_netconn_do_connected+0x8e>
 8009a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009a6c:	69b8      	ldr	r0, [r7, #24]
 8009a6e:	f7ff fa97 	bl	8008fa0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	7f1b      	ldrb	r3, [r3, #28]
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bf0c      	ite	eq
 8009a7e:	2301      	moveq	r3, #1
 8009a80:	2300      	movne	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	7f1b      	ldrb	r3, [r3, #28]
 8009a8a:	f023 0304 	bic.w	r3, r3, #4
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <lwip_netconn_do_connected+0xbc>
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10c      	bne.n	8009aba <lwip_netconn_do_connected+0xd6>
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <lwip_netconn_do_connected+0xc8>
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d006      	beq.n	8009aba <lwip_netconn_do_connected+0xd6>
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <lwip_netconn_do_connected+0x10c>)
 8009aae:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009ab2:	4913      	ldr	r1, [pc, #76]	; (8009b00 <lwip_netconn_do_connected+0x11c>)
 8009ab4:	4810      	ldr	r0, [pc, #64]	; (8009af8 <lwip_netconn_do_connected+0x114>)
 8009ab6:	f00f f839 	bl	8018b2c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	2200      	movs	r2, #0
 8009abe:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d005      	beq.n	8009ada <lwip_netconn_do_connected+0xf6>
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2102      	movs	r1, #2
 8009ad6:	69b8      	ldr	r0, [r7, #24]
 8009ad8:	4798      	blx	r3

  if (was_blocking) {
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009ae0:	69f8      	ldr	r0, [r7, #28]
 8009ae2:	f00e fe73 	bl	80187cc <sys_sem_signal>
  }
  return ERR_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	0801a3ec 	.word	0x0801a3ec
 8009af4:	0801a7b4 	.word	0x0801a7b4
 8009af8:	0801a430 	.word	0x0801a430
 8009afc:	0801a7d4 	.word	0x0801a7d4
 8009b00:	0801a814 	.word	0x0801a814

08009b04 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d102      	bne.n	8009b20 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009b1a:	23f1      	movs	r3, #241	; 0xf1
 8009b1c:	75fb      	strb	r3, [r7, #23]
 8009b1e:	e09b      	b.n	8009c58 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b2a:	2b10      	cmp	r3, #16
 8009b2c:	d00f      	beq.n	8009b4e <lwip_netconn_do_connect+0x4a>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	f040 8087 	bne.w	8009c42 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6858      	ldr	r0, [r3, #4]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	6899      	ldr	r1, [r3, #8]
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	899b      	ldrh	r3, [r3, #12]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f00a fa84 	bl	8014050 <udp_connect>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]
        break;
 8009b4c:	e084      	b.n	8009c58 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d102      	bne.n	8009b5e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009b58:	23f7      	movs	r3, #247	; 0xf7
 8009b5a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009b5c:	e07b      	b.n	8009c56 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009b68:	23f6      	movs	r3, #246	; 0xf6
 8009b6a:	75fb      	strb	r3, [r7, #23]
        break;
 8009b6c:	e073      	b.n	8009c56 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fa14 	bl	8008fa0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6858      	ldr	r0, [r3, #4]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6899      	ldr	r1, [r3, #8]
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	899a      	ldrh	r2, [r3, #12]
 8009b86:	4b38      	ldr	r3, [pc, #224]	; (8009c68 <lwip_netconn_do_connect+0x164>)
 8009b88:	f004 f93c 	bl	800de04 <tcp_connect>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d15e      	bne.n	8009c56 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	7f1b      	ldrb	r3, [r3, #28]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bf14      	ite	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	2300      	moveq	r3, #0
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d009      	beq.n	8009bd0 <lwip_netconn_do_connect+0xcc>
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	7f1a      	ldrb	r2, [r3, #28]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0204 	orr.w	r2, r2, #4
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	771a      	strb	r2, [r3, #28]
 8009bce:	e008      	b.n	8009be2 <lwip_netconn_do_connect+0xde>
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	7f1a      	ldrb	r2, [r3, #28]
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0204 	bic.w	r2, r2, #4
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009be8:	23fb      	movs	r3, #251	; 0xfb
 8009bea:	75fb      	strb	r3, [r7, #23]
        break;
 8009bec:	e033      	b.n	8009c56 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	785b      	ldrb	r3, [r3, #1]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d006      	beq.n	8009c0e <lwip_netconn_do_connect+0x10a>
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <lwip_netconn_do_connect+0x168>)
 8009c02:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009c06:	491a      	ldr	r1, [pc, #104]	; (8009c70 <lwip_netconn_do_connect+0x16c>)
 8009c08:	481a      	ldr	r0, [pc, #104]	; (8009c74 <lwip_netconn_do_connect+0x170>)
 8009c0a:	f00e ff8f 	bl	8018b2c <iprintf>
              UNLOCK_TCPIP_CORE();
 8009c0e:	481a      	ldr	r0, [pc, #104]	; (8009c78 <lwip_netconn_do_connect+0x174>)
 8009c10:	f00e fe4d 	bl	80188ae <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	330c      	adds	r3, #12
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f00e fda4 	bl	801876a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009c22:	4815      	ldr	r0, [pc, #84]	; (8009c78 <lwip_netconn_do_connect+0x174>)
 8009c24:	f00e fe34 	bl	8018890 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d116      	bne.n	8009c60 <lwip_netconn_do_connect+0x15c>
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <lwip_netconn_do_connect+0x168>)
 8009c34:	f240 5274 	movw	r2, #1396	; 0x574
 8009c38:	490d      	ldr	r1, [pc, #52]	; (8009c70 <lwip_netconn_do_connect+0x16c>)
 8009c3a:	480e      	ldr	r0, [pc, #56]	; (8009c74 <lwip_netconn_do_connect+0x170>)
 8009c3c:	f00e ff76 	bl	8018b2c <iprintf>
              return;
 8009c40:	e00e      	b.n	8009c60 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <lwip_netconn_do_connect+0x168>)
 8009c44:	f240 527d 	movw	r2, #1405	; 0x57d
 8009c48:	490c      	ldr	r1, [pc, #48]	; (8009c7c <lwip_netconn_do_connect+0x178>)
 8009c4a:	480a      	ldr	r0, [pc, #40]	; (8009c74 <lwip_netconn_do_connect+0x170>)
 8009c4c:	f00e ff6e 	bl	8018b2c <iprintf>
 8009c50:	23fa      	movs	r3, #250	; 0xfa
 8009c52:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009c54:	e000      	b.n	8009c58 <lwip_netconn_do_connect+0x154>
        break;
 8009c56:	bf00      	nop
    }
  }
  msg->err = err;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	7dfa      	ldrb	r2, [r7, #23]
 8009c5c:	711a      	strb	r2, [r3, #4]
 8009c5e:	e000      	b.n	8009c62 <lwip_netconn_do_connect+0x15e>
              return;
 8009c60:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009c62:	3718      	adds	r7, #24
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	080099e5 	.word	0x080099e5
 8009c6c:	0801a3ec 	.word	0x0801a3ec
 8009c70:	0801a7ac 	.word	0x0801a7ac
 8009c74:	0801a430 	.word	0x0801a430
 8009c78:	2000d5e8 	.word	0x2000d5e8
 8009c7c:	0801a834 	.word	0x0801a834

08009c80 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d07f      	beq.n	8009d96 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ca0:	2b10      	cmp	r3, #16
 8009ca2:	d175      	bne.n	8009d90 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d165      	bne.n	8009d7a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	7d1b      	ldrb	r3, [r3, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009cba:	23fa      	movs	r3, #250	; 0xfa
 8009cbc:	72fb      	strb	r3, [r7, #11]
 8009cbe:	e06c      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009cc0:	23ff      	movs	r3, #255	; 0xff
 8009cc2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f107 020b 	add.w	r2, r7, #11
 8009cce:	7cf9      	ldrb	r1, [r7, #19]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f003 fefd 	bl	800dad0 <tcp_listen_with_backlog_and_err>
 8009cd6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d05d      	beq.n	8009d9a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3310      	adds	r3, #16
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f00e fcfa 	bl	80186de <sys_mbox_valid>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3310      	adds	r3, #16
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f00e fc6a 	bl	80185d0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3310      	adds	r3, #16
 8009d02:	4618      	mov	r0, r3
 8009d04:	f00e fcfc 	bl	8018700 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3314      	adds	r3, #20
 8009d12:	4618      	mov	r0, r3
 8009d14:	f00e fce3 	bl	80186de <sys_mbox_valid>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d108      	bne.n	8009d30 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3314      	adds	r3, #20
 8009d24:	2106      	movs	r1, #6
 8009d26:	4618      	mov	r0, r3
 8009d28:	f00e fc30 	bl	801858c <sys_mbox_new>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009d30:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d118      	bne.n	8009d6a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f004 ffbb 	bl	800ecd0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4912      	ldr	r1, [pc, #72]	; (8009dac <lwip_netconn_do_listen+0x12c>)
 8009d62:	4618      	mov	r0, r3
 8009d64:	f005 f82c 	bl	800edc0 <tcp_accept>
 8009d68:	e017      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f003 fc94 	bl	800d698 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2200      	movs	r2, #0
 8009d76:	605a      	str	r2, [r3, #4]
 8009d78:	e00f      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d102      	bne.n	8009d8a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	72fb      	strb	r3, [r7, #11]
 8009d88:	e007      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009d8a:	23f5      	movs	r3, #245	; 0xf5
 8009d8c:	72fb      	strb	r3, [r7, #11]
 8009d8e:	e004      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009d90:	23f0      	movs	r3, #240	; 0xf0
 8009d92:	72fb      	strb	r3, [r7, #11]
 8009d94:	e001      	b.n	8009d9a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009d96:	23f5      	movs	r3, #245	; 0xf5
 8009d98:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009d9a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009da2:	bf00      	nop
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	08008ff1 	.word	0x08008ff1

08009db0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d022      	beq.n	8009e12 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d11b      	bne.n	8009e12 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de6:	d202      	bcs.n	8009dee <lwip_netconn_do_recv+0x3e>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	e001      	b.n	8009df2 <lwip_netconn_do_recv+0x42>
 8009dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009df2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	89fa      	ldrh	r2, [r7, #14]
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f003 ff6a 	bl	800dcd8 <tcp_recved>
        remaining -= recved;
 8009e04:	89fb      	ldrh	r3, [r7, #14]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e6      	bne.n	8009de0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e12:	bf00      	nop
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <lwip_netconn_do_writemore+0x24>
 8009e32:	4b96      	ldr	r3, [pc, #600]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009e34:	f240 6273 	movw	r2, #1651	; 0x673
 8009e38:	4995      	ldr	r1, [pc, #596]	; (800a090 <lwip_netconn_do_writemore+0x274>)
 8009e3a:	4896      	ldr	r0, [pc, #600]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009e3c:	f00e fe76 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	785b      	ldrb	r3, [r3, #1]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d006      	beq.n	8009e56 <lwip_netconn_do_writemore+0x3a>
 8009e48:	4b90      	ldr	r3, [pc, #576]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009e4a:	f240 6274 	movw	r2, #1652	; 0x674
 8009e4e:	4992      	ldr	r1, [pc, #584]	; (800a098 <lwip_netconn_do_writemore+0x27c>)
 8009e50:	4890      	ldr	r0, [pc, #576]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009e52:	f00e fe6b 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <lwip_netconn_do_writemore+0x50>
 8009e5e:	4b8b      	ldr	r3, [pc, #556]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009e60:	f240 6275 	movw	r2, #1653	; 0x675
 8009e64:	498d      	ldr	r1, [pc, #564]	; (800a09c <lwip_netconn_do_writemore+0x280>)
 8009e66:	488b      	ldr	r0, [pc, #556]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009e68:	f00e fe60 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <lwip_netconn_do_writemore+0x66>
 8009e74:	4b85      	ldr	r3, [pc, #532]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009e76:	f240 6276 	movw	r2, #1654	; 0x676
 8009e7a:	4989      	ldr	r1, [pc, #548]	; (800a0a0 <lwip_netconn_do_writemore+0x284>)
 8009e7c:	4885      	ldr	r0, [pc, #532]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009e7e:	f00e fe55 	bl	8018b2c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	699a      	ldr	r2, [r3, #24]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d306      	bcc.n	8009ea0 <lwip_netconn_do_writemore+0x84>
 8009e92:	4b7e      	ldr	r3, [pc, #504]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009e94:	f240 6277 	movw	r2, #1655	; 0x677
 8009e98:	4982      	ldr	r1, [pc, #520]	; (800a0a4 <lwip_netconn_do_writemore+0x288>)
 8009e9a:	487e      	ldr	r0, [pc, #504]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009e9c:	f00e fe46 	bl	8018b2c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	899b      	ldrh	r3, [r3, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <lwip_netconn_do_writemore+0x9c>
 8009eaa:	4b78      	ldr	r3, [pc, #480]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009eac:	f240 6279 	movw	r2, #1657	; 0x679
 8009eb0:	497d      	ldr	r1, [pc, #500]	; (800a0a8 <lwip_netconn_do_writemore+0x28c>)
 8009eb2:	4878      	ldr	r0, [pc, #480]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009eb4:	f00e fe3a 	bl	8018b2c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	7f1b      	ldrb	r3, [r3, #28]
 8009ebe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	7f1b      	ldrb	r3, [r3, #28]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <lwip_netconn_do_writemore+0xba>
 8009ecc:	7ebb      	ldrb	r3, [r7, #26]
 8009ece:	f003 0304 	and.w	r3, r3, #4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <lwip_netconn_do_writemore+0xbe>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <lwip_netconn_do_writemore+0xc0>
 8009eda:	2300      	movs	r3, #0
 8009edc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	4413      	add	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f08:	d307      	bcc.n	8009f1a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f0e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f10:	7ebb      	ldrb	r3, [r7, #26]
 8009f12:	f043 0302 	orr.w	r3, r3, #2
 8009f16:	76bb      	strb	r3, [r7, #26]
 8009f18:	e001      	b.n	8009f1e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f26:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f28:	89fa      	ldrh	r2, [r7, #14]
 8009f2a:	8bbb      	ldrh	r3, [r7, #28]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d216      	bcs.n	8009f5e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f34:	7e3b      	ldrb	r3, [r7, #24]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009f3a:	8bbb      	ldrh	r3, [r7, #28]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10e      	bne.n	8009f5e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <lwip_netconn_do_writemore+0x134>
 8009f4a:	f06f 0306 	mvn.w	r3, #6
 8009f4e:	e000      	b.n	8009f52 <lwip_netconn_do_writemore+0x136>
 8009f50:	2300      	movs	r3, #0
 8009f52:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009f54:	e07d      	b.n	800a052 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009f56:	7ebb      	ldrb	r3, [r7, #26]
 8009f58:	f043 0302 	orr.w	r3, r3, #2
 8009f5c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	8bbb      	ldrh	r3, [r7, #28]
 8009f66:	441a      	add	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d906      	bls.n	8009f82 <lwip_netconn_do_writemore+0x166>
 8009f74:	4b45      	ldr	r3, [pc, #276]	; (800a08c <lwip_netconn_do_writemore+0x270>)
 8009f76:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009f7a:	494c      	ldr	r1, [pc, #304]	; (800a0ac <lwip_netconn_do_writemore+0x290>)
 8009f7c:	4845      	ldr	r0, [pc, #276]	; (800a094 <lwip_netconn_do_writemore+0x278>)
 8009f7e:	f00e fdd5 	bl	8018b2c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009f82:	8bbb      	ldrh	r3, [r7, #28]
 8009f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d103      	bne.n	8009f94 <lwip_netconn_do_writemore+0x178>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f92:	d209      	bcs.n	8009fa8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009f98:	8bba      	ldrh	r2, [r7, #28]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d10b      	bne.n	8009fb6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	899b      	ldrh	r3, [r3, #12]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d906      	bls.n	8009fb6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fac:	7ebb      	ldrb	r3, [r7, #26]
 8009fae:	f043 0302 	orr.w	r3, r3, #2
 8009fb2:	76bb      	strb	r3, [r7, #26]
 8009fb4:	e001      	b.n	8009fba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6858      	ldr	r0, [r3, #4]
 8009fbe:	7ebb      	ldrb	r3, [r7, #26]
 8009fc0:	8bba      	ldrh	r2, [r7, #28]
 8009fc2:	6979      	ldr	r1, [r7, #20]
 8009fc4:	f007 fdc6 	bl	8011b54 <tcp_write>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009fcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d12c      	bne.n	800a02e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	6999      	ldr	r1, [r3, #24]
 8009fda:	8bba      	ldrh	r2, [r7, #28]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	6919      	ldr	r1, [r3, #16]
 8009fea:	8bba      	ldrh	r2, [r7, #28]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d113      	bne.n	800a02e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	899a      	ldrh	r2, [r3, #12]
 800a00c:	3a01      	subs	r2, #1
 800a00e:	b292      	uxth	r2, r2
 800a010:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	899b      	ldrh	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d008      	beq.n	800a02e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	3208      	adds	r2, #8
 800a024:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	2200      	movs	r2, #0
 800a02c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a02e:	7e7b      	ldrb	r3, [r7, #25]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d004      	beq.n	800a03e <lwip_netconn_do_writemore+0x222>
 800a034:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f43f af50 	beq.w	8009ede <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a03e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d004      	beq.n	800a050 <lwip_netconn_do_writemore+0x234>
 800a046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d146      	bne.n	800a0de <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a050:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a052:	7e3b      	ldrb	r3, [r7, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02b      	beq.n	800a0b0 <lwip_netconn_do_writemore+0x294>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	699a      	ldr	r2, [r3, #24]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	429a      	cmp	r2, r3
 800a066:	d223      	bcs.n	800a0b0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <lwip_netconn_do_writemore+0x260>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	2200      	movs	r2, #0
 800a076:	2103      	movs	r1, #3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7f1b      	ldrb	r3, [r3, #28]
 800a080:	f043 0310 	orr.w	r3, r3, #16
 800a084:	b2da      	uxtb	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	771a      	strb	r2, [r3, #28]
 800a08a:	e028      	b.n	800a0de <lwip_netconn_do_writemore+0x2c2>
 800a08c:	0801a3ec 	.word	0x0801a3ec
 800a090:	0801a544 	.word	0x0801a544
 800a094:	0801a430 	.word	0x0801a430
 800a098:	0801a84c 	.word	0x0801a84c
 800a09c:	0801a554 	.word	0x0801a554
 800a0a0:	0801a86c 	.word	0x0801a86c
 800a0a4:	0801a884 	.word	0x0801a884
 800a0a8:	0801a8c4 	.word	0x0801a8c4
 800a0ac:	0801a8ec 	.word	0x0801a8ec
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0b8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0bc:	d305      	bcc.n	800a0ca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d909      	bls.n	800a0de <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d005      	beq.n	800a0de <lwip_netconn_do_writemore+0x2c2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2103      	movs	r1, #3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a0de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d11d      	bne.n	800a122 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d002      	beq.n	800a0fc <lwip_netconn_do_writemore+0x2e0>
 800a0f6:	7e3b      	ldrb	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f008 fb0f 	bl	8012728 <tcp_output>
 800a10a:	4603      	mov	r3, r0
 800a10c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a10e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a112:	f113 0f04 	cmn.w	r3, #4
 800a116:	d12c      	bne.n	800a172 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a118:	7b3b      	ldrb	r3, [r7, #12]
 800a11a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a11c:	2301      	movs	r3, #1
 800a11e:	76fb      	strb	r3, [r7, #27]
 800a120:	e027      	b.n	800a172 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12a:	d120      	bne.n	800a16e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	f008 faf9 	bl	8012728 <tcp_output>
 800a136:	4603      	mov	r3, r0
 800a138:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a13a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a13e:	f113 0f04 	cmn.w	r3, #4
 800a142:	d104      	bne.n	800a14e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a144:	7b7b      	ldrb	r3, [r7, #13]
 800a146:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a148:	2301      	movs	r3, #1
 800a14a:	76fb      	strb	r3, [r7, #27]
 800a14c:	e011      	b.n	800a172 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a14e:	7e3b      	ldrb	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00e      	beq.n	800a172 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <lwip_netconn_do_writemore+0x348>
 800a15e:	f06f 0306 	mvn.w	r3, #6
 800a162:	e000      	b.n	800a166 <lwip_netconn_do_writemore+0x34a>
 800a164:	2300      	movs	r3, #0
 800a166:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a168:	2301      	movs	r3, #1
 800a16a:	76fb      	strb	r3, [r7, #27]
 800a16c:	e001      	b.n	800a172 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a172:	7efb      	ldrb	r3, [r7, #27]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d015      	beq.n	800a1a4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	330c      	adds	r3, #12
 800a180:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	7ffa      	ldrb	r2, [r7, #31]
 800a188:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a19c:	68b8      	ldr	r0, [r7, #8]
 800a19e:	f00e fb15 	bl	80187cc <sys_sem_signal>
 800a1a2:	e002      	b.n	800a1aa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	e000      	b.n	800a1ac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fbce 	bl	8008966 <netconn_err>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d166      	bne.n	800a2a4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	d15d      	bne.n	800a2a0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a1ee:	23fb      	movs	r3, #251	; 0xfb
 800a1f0:	73fb      	strb	r3, [r7, #15]
 800a1f2:	e057      	b.n	800a2a4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04d      	beq.n	800a29a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2201      	movs	r2, #1
 800a204:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <lwip_netconn_do_write+0x6a>
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <lwip_netconn_do_write+0x100>)
 800a212:	f240 7223 	movw	r2, #1827	; 0x723
 800a216:	4928      	ldr	r1, [pc, #160]	; (800a2b8 <lwip_netconn_do_write+0x104>)
 800a218:	4828      	ldr	r0, [pc, #160]	; (800a2bc <lwip_netconn_do_write+0x108>)
 800a21a:	f00e fc87 	bl	8018b2c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d106      	bne.n	800a234 <lwip_netconn_do_write+0x80>
 800a226:	4b23      	ldr	r3, [pc, #140]	; (800a2b4 <lwip_netconn_do_write+0x100>)
 800a228:	f240 7224 	movw	r2, #1828	; 0x724
 800a22c:	4924      	ldr	r1, [pc, #144]	; (800a2c0 <lwip_netconn_do_write+0x10c>)
 800a22e:	4823      	ldr	r0, [pc, #140]	; (800a2bc <lwip_netconn_do_write+0x108>)
 800a230:	f00e fc7c 	bl	8018b2c <iprintf>
        msg->conn->current_msg = msg;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fdea 	bl	8009e1c <lwip_netconn_do_writemore>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d02e      	beq.n	800a2ac <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d006      	beq.n	800a266 <lwip_netconn_do_write+0xb2>
 800a258:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <lwip_netconn_do_write+0x100>)
 800a25a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a25e:	4919      	ldr	r1, [pc, #100]	; (800a2c4 <lwip_netconn_do_write+0x110>)
 800a260:	4816      	ldr	r0, [pc, #88]	; (800a2bc <lwip_netconn_do_write+0x108>)
 800a262:	f00e fc63 	bl	8018b2c <iprintf>
          UNLOCK_TCPIP_CORE();
 800a266:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <lwip_netconn_do_write+0x114>)
 800a268:	f00e fb21 	bl	80188ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	2100      	movs	r1, #0
 800a274:	4618      	mov	r0, r3
 800a276:	f00e fa78 	bl	801876a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a27a:	4813      	ldr	r0, [pc, #76]	; (800a2c8 <lwip_netconn_do_write+0x114>)
 800a27c:	f00e fb08 	bl	8018890 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d110      	bne.n	800a2ac <lwip_netconn_do_write+0xf8>
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <lwip_netconn_do_write+0x100>)
 800a28c:	f240 722c 	movw	r2, #1836	; 0x72c
 800a290:	490c      	ldr	r1, [pc, #48]	; (800a2c4 <lwip_netconn_do_write+0x110>)
 800a292:	480a      	ldr	r0, [pc, #40]	; (800a2bc <lwip_netconn_do_write+0x108>)
 800a294:	f00e fc4a 	bl	8018b2c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a298:	e008      	b.n	800a2ac <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a29a:	23f5      	movs	r3, #245	; 0xf5
 800a29c:	73fb      	strb	r3, [r7, #15]
 800a29e:	e001      	b.n	800a2a4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a2a0:	23fa      	movs	r3, #250	; 0xfa
 800a2a2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	7bfa      	ldrb	r2, [r7, #15]
 800a2a8:	711a      	strb	r2, [r3, #4]
 800a2aa:	e000      	b.n	800a2ae <lwip_netconn_do_write+0xfa>
        return;
 800a2ac:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	0801a3ec 	.word	0x0801a3ec
 800a2b8:	0801a790 	.word	0x0801a790
 800a2bc:	0801a430 	.word	0x0801a430
 800a2c0:	0801a918 	.word	0x0801a918
 800a2c4:	0801a7ac 	.word	0x0801a7ac
 800a2c8:	2000d5e8 	.word	0x2000d5e8

0800a2cc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d069      	beq.n	800a3be <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a2f4:	2b10      	cmp	r3, #16
 800a2f6:	d162      	bne.n	800a3be <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d002      	beq.n	800a306 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d05b      	beq.n	800a3be <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d103      	bne.n	800a314 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	22f5      	movs	r2, #245	; 0xf5
 800a310:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a312:	e059      	b.n	800a3c8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d103      	bne.n	800a322 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	22fb      	movs	r2, #251	; 0xfb
 800a31e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a320:	e052      	b.n	800a3c8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	7a1b      	ldrb	r3, [r3, #8]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d004      	beq.n	800a338 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff f850 	bl	80093d8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d006      	beq.n	800a350 <lwip_netconn_do_close+0x84>
 800a342:	4b23      	ldr	r3, [pc, #140]	; (800a3d0 <lwip_netconn_do_close+0x104>)
 800a344:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a348:	4922      	ldr	r1, [pc, #136]	; (800a3d4 <lwip_netconn_do_close+0x108>)
 800a34a:	4823      	ldr	r0, [pc, #140]	; (800a3d8 <lwip_netconn_do_close+0x10c>)
 800a34c:	f00e fbee 	bl	8018b2c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2204      	movs	r2, #4
 800a356:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2100      	movs	r1, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f7ff f8b4 	bl	80094d4 <lwip_netconn_do_close_internal>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d029      	beq.n	800a3c6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d006      	beq.n	800a38a <lwip_netconn_do_close+0xbe>
 800a37c:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <lwip_netconn_do_close+0x104>)
 800a37e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a382:	4916      	ldr	r1, [pc, #88]	; (800a3dc <lwip_netconn_do_close+0x110>)
 800a384:	4814      	ldr	r0, [pc, #80]	; (800a3d8 <lwip_netconn_do_close+0x10c>)
 800a386:	f00e fbd1 	bl	8018b2c <iprintf>
        UNLOCK_TCPIP_CORE();
 800a38a:	4815      	ldr	r0, [pc, #84]	; (800a3e0 <lwip_netconn_do_close+0x114>)
 800a38c:	f00e fa8f 	bl	80188ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	330c      	adds	r3, #12
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f00e f9e6 	bl	801876a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a39e:	4810      	ldr	r0, [pc, #64]	; (800a3e0 <lwip_netconn_do_close+0x114>)
 800a3a0:	f00e fa76 	bl	8018890 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	785b      	ldrb	r3, [r3, #1]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00b      	beq.n	800a3c6 <lwip_netconn_do_close+0xfa>
 800a3ae:	4b08      	ldr	r3, [pc, #32]	; (800a3d0 <lwip_netconn_do_close+0x104>)
 800a3b0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a3b4:	4909      	ldr	r1, [pc, #36]	; (800a3dc <lwip_netconn_do_close+0x110>)
 800a3b6:	4808      	ldr	r0, [pc, #32]	; (800a3d8 <lwip_netconn_do_close+0x10c>)
 800a3b8:	f00e fbb8 	bl	8018b2c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a3bc:	e003      	b.n	800a3c6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	22f5      	movs	r2, #245	; 0xf5
 800a3c2:	711a      	strb	r2, [r3, #4]
 800a3c4:	e000      	b.n	800a3c8 <lwip_netconn_do_close+0xfc>
      return;
 800a3c6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0801a3ec 	.word	0x0801a3ec
 800a3d4:	0801a790 	.word	0x0801a790
 800a3d8:	0801a430 	.word	0x0801a430
 800a3dc:	0801a7ac 	.word	0x0801a7ac
 800a3e0:	2000d5e8 	.word	0x2000d5e8

0800a3e4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d013      	beq.n	800a41a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00b      	beq.n	800a412 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f002 fc90 	bl	800cd24 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	2006      	movs	r0, #6
 800a416:	f001 fdd5 	bl	800bfc4 <memp_free>
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d108      	bne.n	800a448 <netbuf_data+0x24>
 800a436:	4b1b      	ldr	r3, [pc, #108]	; (800a4a4 <netbuf_data+0x80>)
 800a438:	22c6      	movs	r2, #198	; 0xc6
 800a43a:	491b      	ldr	r1, [pc, #108]	; (800a4a8 <netbuf_data+0x84>)
 800a43c:	481b      	ldr	r0, [pc, #108]	; (800a4ac <netbuf_data+0x88>)
 800a43e:	f00e fb75 	bl	8018b2c <iprintf>
 800a442:	f06f 030f 	mvn.w	r3, #15
 800a446:	e029      	b.n	800a49c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <netbuf_data+0x3c>
 800a44e:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <netbuf_data+0x80>)
 800a450:	22c7      	movs	r2, #199	; 0xc7
 800a452:	4917      	ldr	r1, [pc, #92]	; (800a4b0 <netbuf_data+0x8c>)
 800a454:	4815      	ldr	r0, [pc, #84]	; (800a4ac <netbuf_data+0x88>)
 800a456:	f00e fb69 	bl	8018b2c <iprintf>
 800a45a:	f06f 030f 	mvn.w	r3, #15
 800a45e:	e01d      	b.n	800a49c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d108      	bne.n	800a478 <netbuf_data+0x54>
 800a466:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <netbuf_data+0x80>)
 800a468:	22c8      	movs	r2, #200	; 0xc8
 800a46a:	4912      	ldr	r1, [pc, #72]	; (800a4b4 <netbuf_data+0x90>)
 800a46c:	480f      	ldr	r0, [pc, #60]	; (800a4ac <netbuf_data+0x88>)
 800a46e:	f00e fb5d 	bl	8018b2c <iprintf>
 800a472:	f06f 030f 	mvn.w	r3, #15
 800a476:	e011      	b.n	800a49c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <netbuf_data+0x62>
    return ERR_BUF;
 800a480:	f06f 0301 	mvn.w	r3, #1
 800a484:	e00a      	b.n	800a49c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	895a      	ldrh	r2, [r3, #10]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	0801a944 	.word	0x0801a944
 800a4a8:	0801aa4c 	.word	0x0801aa4c
 800a4ac:	0801a994 	.word	0x0801a994
 800a4b0:	0801aa68 	.word	0x0801aa68
 800a4b4:	0801aa88 	.word	0x0801aa88

0800a4b8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d108      	bne.n	800a4d8 <netbuf_next+0x20>
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <netbuf_next+0x54>)
 800a4c8:	22e0      	movs	r2, #224	; 0xe0
 800a4ca:	4911      	ldr	r1, [pc, #68]	; (800a510 <netbuf_next+0x58>)
 800a4cc:	4811      	ldr	r0, [pc, #68]	; (800a514 <netbuf_next+0x5c>)
 800a4ce:	f00e fb2d 	bl	8018b2c <iprintf>
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d6:	e014      	b.n	800a502 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <netbuf_next+0x30>
    return -1;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	e00c      	b.n	800a502 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <netbuf_next+0x48>
    return 1;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <netbuf_next+0x4a>
  }
  return 0;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	0801a944 	.word	0x0801a944
 800a510:	0801aaa4 	.word	0x0801aaa4
 800a514:	0801a994 	.word	0x0801a994

0800a518 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a522:	f009 f9b9 	bl	8013898 <sys_timeouts_sleeptime>
 800a526:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d10b      	bne.n	800a548 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a530:	4813      	ldr	r0, [pc, #76]	; (800a580 <tcpip_timeouts_mbox_fetch+0x68>)
 800a532:	f00e f9bc 	bl	80188ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a536:	2200      	movs	r2, #0
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f00e f874 	bl	8018628 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a540:	480f      	ldr	r0, [pc, #60]	; (800a580 <tcpip_timeouts_mbox_fetch+0x68>)
 800a542:	f00e f9a5 	bl	8018890 <sys_mutex_lock>
    return;
 800a546:	e018      	b.n	800a57a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a54e:	f009 f969 	bl	8013824 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a552:	e7e6      	b.n	800a522 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a554:	480a      	ldr	r0, [pc, #40]	; (800a580 <tcpip_timeouts_mbox_fetch+0x68>)
 800a556:	f00e f9aa 	bl	80188ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f00e f862 	bl	8018628 <sys_arch_mbox_fetch>
 800a564:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a566:	4806      	ldr	r0, [pc, #24]	; (800a580 <tcpip_timeouts_mbox_fetch+0x68>)
 800a568:	f00e f992 	bl	8018890 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d102      	bne.n	800a57a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a574:	f009 f956 	bl	8013824 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a578:	e7d3      	b.n	800a522 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	2000d5e8 	.word	0x2000d5e8

0800a584 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a58c:	4810      	ldr	r0, [pc, #64]	; (800a5d0 <tcpip_thread+0x4c>)
 800a58e:	f00e f97f 	bl	8018890 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <tcpip_thread+0x50>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a59a:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <tcpip_thread+0x50>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a0e      	ldr	r2, [pc, #56]	; (800a5d8 <tcpip_thread+0x54>)
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	480b      	ldr	r0, [pc, #44]	; (800a5dc <tcpip_thread+0x58>)
 800a5ae:	f7ff ffb3 	bl	800a518 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a5b8:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <tcpip_thread+0x5c>)
 800a5ba:	2291      	movs	r2, #145	; 0x91
 800a5bc:	4909      	ldr	r1, [pc, #36]	; (800a5e4 <tcpip_thread+0x60>)
 800a5be:	480a      	ldr	r0, [pc, #40]	; (800a5e8 <tcpip_thread+0x64>)
 800a5c0:	f00e fab4 	bl	8018b2c <iprintf>
      continue;
 800a5c4:	e003      	b.n	800a5ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f80f 	bl	800a5ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a5ce:	e7ea      	b.n	800a5a6 <tcpip_thread+0x22>
 800a5d0:	2000d5e8 	.word	0x2000d5e8
 800a5d4:	2000d5dc 	.word	0x2000d5dc
 800a5d8:	2000d5e0 	.word	0x2000d5e0
 800a5dc:	2000d5e4 	.word	0x2000d5e4
 800a5e0:	0801aadc 	.word	0x0801aadc
 800a5e4:	0801ab0c 	.word	0x0801ab0c
 800a5e8:	0801ab2c 	.word	0x0801ab2c

0800a5ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d026      	beq.n	800a64a <tcpip_thread_handle_msg+0x5e>
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	dc2b      	bgt.n	800a658 <tcpip_thread_handle_msg+0x6c>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <tcpip_thread_handle_msg+0x1e>
 800a604:	2b01      	cmp	r3, #1
 800a606:	d015      	beq.n	800a634 <tcpip_thread_handle_msg+0x48>
 800a608:	e026      	b.n	800a658 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6850      	ldr	r0, [r2, #4]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	6892      	ldr	r2, [r2, #8]
 800a616:	4611      	mov	r1, r2
 800a618:	4798      	blx	r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	4618      	mov	r0, r3
 800a626:	f002 fb7d 	bl	800cd24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	2009      	movs	r0, #9
 800a62e:	f001 fcc9 	bl	800bfc4 <memp_free>
      break;
 800a632:	e018      	b.n	800a666 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6892      	ldr	r2, [r2, #8]
 800a63c:	4610      	mov	r0, r2
 800a63e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	2008      	movs	r0, #8
 800a644:	f001 fcbe 	bl	800bfc4 <memp_free>
      break;
 800a648:	e00d      	b.n	800a666 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6892      	ldr	r2, [r2, #8]
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
      break;
 800a656:	e006      	b.n	800a666 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a658:	4b05      	ldr	r3, [pc, #20]	; (800a670 <tcpip_thread_handle_msg+0x84>)
 800a65a:	22cf      	movs	r2, #207	; 0xcf
 800a65c:	4905      	ldr	r1, [pc, #20]	; (800a674 <tcpip_thread_handle_msg+0x88>)
 800a65e:	4806      	ldr	r0, [pc, #24]	; (800a678 <tcpip_thread_handle_msg+0x8c>)
 800a660:	f00e fa64 	bl	8018b2c <iprintf>
      break;
 800a664:	bf00      	nop
  }
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	0801aadc 	.word	0x0801aadc
 800a674:	0801ab0c 	.word	0x0801ab0c
 800a678:	0801ab2c 	.word	0x0801ab2c

0800a67c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a688:	481a      	ldr	r0, [pc, #104]	; (800a6f4 <tcpip_inpkt+0x78>)
 800a68a:	f00e f828 	bl	80186de <sys_mbox_valid>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <tcpip_inpkt+0x24>
 800a694:	4b18      	ldr	r3, [pc, #96]	; (800a6f8 <tcpip_inpkt+0x7c>)
 800a696:	22fc      	movs	r2, #252	; 0xfc
 800a698:	4918      	ldr	r1, [pc, #96]	; (800a6fc <tcpip_inpkt+0x80>)
 800a69a:	4819      	ldr	r0, [pc, #100]	; (800a700 <tcpip_inpkt+0x84>)
 800a69c:	f00e fa46 	bl	8018b2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a6a0:	2009      	movs	r0, #9
 800a6a2:	f001 fc19 	bl	800bed8 <memp_malloc>
 800a6a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b2:	e01a      	b.n	800a6ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a6cc:	6979      	ldr	r1, [r7, #20]
 800a6ce:	4809      	ldr	r0, [pc, #36]	; (800a6f4 <tcpip_inpkt+0x78>)
 800a6d0:	f00d ff90 	bl	80185f4 <sys_mbox_trypost>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d006      	beq.n	800a6e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6da:	6979      	ldr	r1, [r7, #20]
 800a6dc:	2009      	movs	r0, #9
 800a6de:	f001 fc71 	bl	800bfc4 <memp_free>
    return ERR_MEM;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e000      	b.n	800a6ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a6e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	2000d5e4 	.word	0x2000d5e4
 800a6f8:	0801aadc 	.word	0x0801aadc
 800a6fc:	0801ab54 	.word	0x0801ab54
 800a700:	0801ab2c 	.word	0x0801ab2c

0800a704 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a714:	f003 0318 	and.w	r3, r3, #24
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a71c:	4a08      	ldr	r2, [pc, #32]	; (800a740 <tcpip_input+0x3c>)
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff ffab 	bl	800a67c <tcpip_inpkt>
 800a726:	4603      	mov	r3, r0
 800a728:	e005      	b.n	800a736 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a72a:	4a06      	ldr	r2, [pc, #24]	; (800a744 <tcpip_input+0x40>)
 800a72c:	6839      	ldr	r1, [r7, #0]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff ffa4 	bl	800a67c <tcpip_inpkt>
 800a734:	4603      	mov	r3, r0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	080183e1 	.word	0x080183e1
 800a744:	080172ad 	.word	0x080172ad

0800a748 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a752:	4819      	ldr	r0, [pc, #100]	; (800a7b8 <tcpip_try_callback+0x70>)
 800a754:	f00d ffc3 	bl	80186de <sys_mbox_valid>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <tcpip_try_callback+0x24>
 800a75e:	4b17      	ldr	r3, [pc, #92]	; (800a7bc <tcpip_try_callback+0x74>)
 800a760:	f240 125d 	movw	r2, #349	; 0x15d
 800a764:	4916      	ldr	r1, [pc, #88]	; (800a7c0 <tcpip_try_callback+0x78>)
 800a766:	4817      	ldr	r0, [pc, #92]	; (800a7c4 <tcpip_try_callback+0x7c>)
 800a768:	f00e f9e0 	bl	8018b2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a76c:	2008      	movs	r0, #8
 800a76e:	f001 fbb3 	bl	800bed8 <memp_malloc>
 800a772:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295
 800a77e:	e017      	b.n	800a7b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	4808      	ldr	r0, [pc, #32]	; (800a7b8 <tcpip_try_callback+0x70>)
 800a796:	f00d ff2d 	bl	80185f4 <sys_mbox_trypost>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a7a0:	68f9      	ldr	r1, [r7, #12]
 800a7a2:	2008      	movs	r0, #8
 800a7a4:	f001 fc0e 	bl	800bfc4 <memp_free>
    return ERR_MEM;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ac:	e000      	b.n	800a7b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	2000d5e4 	.word	0x2000d5e4
 800a7bc:	0801aadc 	.word	0x0801aadc
 800a7c0:	0801ab54 	.word	0x0801ab54
 800a7c4:	0801ab2c 	.word	0x0801ab2c

0800a7c8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a7d4:	4806      	ldr	r0, [pc, #24]	; (800a7f0 <tcpip_send_msg_wait_sem+0x28>)
 800a7d6:	f00e f85b 	bl	8018890 <sys_mutex_lock>
  fn(apimsg);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68b8      	ldr	r0, [r7, #8]
 800a7de:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a7e0:	4803      	ldr	r0, [pc, #12]	; (800a7f0 <tcpip_send_msg_wait_sem+0x28>)
 800a7e2:	f00e f864 	bl	80188ae <sys_mutex_unlock>
  return ERR_OK;
 800a7e6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	2000d5e8 	.word	0x2000d5e8

0800a7f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af02      	add	r7, sp, #8
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a7fe:	f000 fec1 	bl	800b584 <lwip_init>

  tcpip_init_done = initfunc;
 800a802:	4a17      	ldr	r2, [pc, #92]	; (800a860 <tcpip_init+0x6c>)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a808:	4a16      	ldr	r2, [pc, #88]	; (800a864 <tcpip_init+0x70>)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a80e:	2106      	movs	r1, #6
 800a810:	4815      	ldr	r0, [pc, #84]	; (800a868 <tcpip_init+0x74>)
 800a812:	f00d febb 	bl	801858c <sys_mbox_new>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d006      	beq.n	800a82a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <tcpip_init+0x78>)
 800a81e:	f240 2261 	movw	r2, #609	; 0x261
 800a822:	4913      	ldr	r1, [pc, #76]	; (800a870 <tcpip_init+0x7c>)
 800a824:	4813      	ldr	r0, [pc, #76]	; (800a874 <tcpip_init+0x80>)
 800a826:	f00e f981 	bl	8018b2c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a82a:	4813      	ldr	r0, [pc, #76]	; (800a878 <tcpip_init+0x84>)
 800a82c:	f00e f814 	bl	8018858 <sys_mutex_new>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d006      	beq.n	800a844 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a836:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <tcpip_init+0x78>)
 800a838:	f240 2265 	movw	r2, #613	; 0x265
 800a83c:	490f      	ldr	r1, [pc, #60]	; (800a87c <tcpip_init+0x88>)
 800a83e:	480d      	ldr	r0, [pc, #52]	; (800a874 <tcpip_init+0x80>)
 800a840:	f00e f974 	bl	8018b2c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a844:	2300      	movs	r3, #0
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a84c:	2200      	movs	r2, #0
 800a84e:	490c      	ldr	r1, [pc, #48]	; (800a880 <tcpip_init+0x8c>)
 800a850:	480c      	ldr	r0, [pc, #48]	; (800a884 <tcpip_init+0x90>)
 800a852:	f00e f839 	bl	80188c8 <sys_thread_new>
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	2000d5dc 	.word	0x2000d5dc
 800a864:	2000d5e0 	.word	0x2000d5e0
 800a868:	2000d5e4 	.word	0x2000d5e4
 800a86c:	0801aadc 	.word	0x0801aadc
 800a870:	0801ab64 	.word	0x0801ab64
 800a874:	0801ab2c 	.word	0x0801ab2c
 800a878:	2000d5e8 	.word	0x2000d5e8
 800a87c:	0801ab88 	.word	0x0801ab88
 800a880:	0800a585 	.word	0x0800a585
 800a884:	0801abac 	.word	0x0801abac

0800a888 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <fs_open+0x16>
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d102      	bne.n	800a8a4 <fs_open+0x1c>
    return ERR_ARG;
 800a89e:	f06f 030f 	mvn.w	r3, #15
 800a8a2:	e028      	b.n	800a8f6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a8a4:	4b16      	ldr	r3, [pc, #88]	; (800a900 <fs_open+0x78>)
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e020      	b.n	800a8ec <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6838      	ldr	r0, [r7, #0]
 800a8b2:	f7f5 fc9d 	bl	80001f0 <strcmp>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d114      	bne.n	800a8e6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	7c1a      	ldrb	r2, [r3, #16]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e007      	b.n	800a8f6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1db      	bne.n	800a8aa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a8f2:	f06f 0305 	mvn.w	r3, #5
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	08027c48 	.word	0x08027c48

0800a904 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	1ad3      	subs	r3, r2, r3
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a93e:	222c      	movs	r2, #44	; 0x2c
 800a940:	2100      	movs	r1, #0
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f00e f991 	bl	8018c6a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a956:	202c      	movs	r0, #44	; 0x2c
 800a958:	f001 f91a 	bl	800bb90 <mem_malloc>
 800a95c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <http_state_alloc+0x1a>
    http_state_init(ret);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff ffe6 	bl	800a936 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a96a:	687b      	ldr	r3, [r7, #4]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d007      	beq.n	800a994 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff ffbb 	bl	800a904 <fs_close>
    hs->handle = NULL;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d007      	beq.n	800a9ac <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f002 f9bf 	bl	800cd24 <pbuf_free>
    hs->req = NULL;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <http_state_free+0x1a>
    http_state_eof(hs);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff ffd6 	bl	800a974 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 ff47 	bl	800b85c <mem_free>
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <http_write+0x22>
 800a9ec:	4b2c      	ldr	r3, [pc, #176]	; (800aaa0 <http_write+0xc8>)
 800a9ee:	f240 2219 	movw	r2, #537	; 0x219
 800a9f2:	492c      	ldr	r1, [pc, #176]	; (800aaa4 <http_write+0xcc>)
 800a9f4:	482c      	ldr	r0, [pc, #176]	; (800aaa8 <http_write+0xd0>)
 800a9f6:	f00e f899 	bl	8018b2c <iprintf>
  len = *length;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aa00:	8afb      	ldrh	r3, [r7, #22]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <http_write+0x32>
    return ERR_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	e045      	b.n	800aa96 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa10:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aa12:	8aba      	ldrh	r2, [r7, #20]
 800aa14:	8afb      	ldrh	r3, [r7, #22]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d201      	bcs.n	800aa1e <http_write+0x46>
    len = max_len;
 800aa1a:	8abb      	ldrh	r3, [r7, #20]
 800aa1c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800aa26:	8afa      	ldrh	r2, [r7, #22]
 800aa28:	8abb      	ldrh	r3, [r7, #20]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d901      	bls.n	800aa32 <http_write+0x5a>
    len = max_len;
 800aa2e:	8abb      	ldrh	r3, [r7, #20]
 800aa30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	8afa      	ldrh	r2, [r7, #22]
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f007 f88b 	bl	8011b54 <tcp_write>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aa42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d10f      	bne.n	800aa6c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d004      	beq.n	800aa60 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	d902      	bls.n	800aa66 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800aa60:	2301      	movs	r3, #1
 800aa62:	82fb      	strh	r3, [r7, #22]
 800aa64:	e002      	b.n	800aa6c <http_write+0x94>
      } else {
        len /= 2;
 800aa66:	8afb      	ldrh	r3, [r7, #22]
 800aa68:	085b      	lsrs	r3, r3, #1
 800aa6a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800aa6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa74:	d102      	bne.n	800aa7c <http_write+0xa4>
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d8da      	bhi.n	800aa32 <http_write+0x5a>

  if (err == ERR_OK) {
 800aa7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d103      	bne.n	800aa8c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	8afa      	ldrh	r2, [r7, #22]
 800aa88:	801a      	strh	r2, [r3, #0]
 800aa8a:	e002      	b.n	800aa92 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800aa92:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0801abfc 	.word	0x0801abfc
 800aaa4:	0801ac34 	.word	0x0801ac34
 800aaa8:	0801ac44 	.word	0x0801ac44

0800aaac <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800aaba:	2100      	movs	r1, #0
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f004 f907 	bl	800ecd0 <tcp_arg>
  altcp_recv(pcb, NULL);
 800aac2:	2100      	movs	r1, #0
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f004 f915 	bl	800ecf4 <tcp_recv>
  altcp_err(pcb, NULL);
 800aaca:	2100      	movs	r1, #0
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f004 f955 	bl	800ed7c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f004 f98a 	bl	800edf0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800aadc:	2100      	movs	r1, #0
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f004 f92a 	bl	800ed38 <tcp_sent>
  if (hs != NULL) {
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800aaea:	68b8      	ldr	r0, [r7, #8]
 800aaec:	f7ff ff62 	bl	800a9b4 <http_state_free>
  }

  if (abort_conn) {
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d004      	beq.n	800ab00 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f002 ff14 	bl	800d924 <tcp_abort>
    return ERR_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	e00f      	b.n	800ab20 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f002 fdc9 	bl	800d698 <tcp_close>
 800ab06:	4603      	mov	r3, r0
 800ab08:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ab0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d004      	beq.n	800ab1c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ab12:	2204      	movs	r2, #4
 800ab14:	4904      	ldr	r1, [pc, #16]	; (800ab28 <http_close_or_abort_conn+0x7c>)
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f004 f96a 	bl	800edf0 <tcp_poll>
  }
  return err;
 800ab1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	0800b1ef 	.word	0x0800b1ef

0800ab2c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ab36:	2200      	movs	r2, #0
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff ffb6 	bl	800aaac <http_close_or_abort_conn>
 800ab40:	4603      	mov	r3, r0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff ffe8 	bl	800ab2c <http_close_conn>
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d105      	bne.n	800ab82 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ffe6 	bl	800ab4a <http_eof>
    return 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e016      	b.n	800abb0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fec6 	bl	800a918 <fs_bytes_left>
 800ab8c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dc05      	bgt.n	800aba0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7ff ffd7 	bl	800ab4a <http_eof>
    return 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e007      	b.n	800abb0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800aba0:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <http_check_eof+0x54>)
 800aba2:	f240 429d 	movw	r2, #1181	; 0x49d
 800aba6:	4905      	ldr	r1, [pc, #20]	; (800abbc <http_check_eof+0x58>)
 800aba8:	4805      	ldr	r0, [pc, #20]	; (800abc0 <http_check_eof+0x5c>)
 800abaa:	f00d ffbf 	bl	8018b2c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800abae:	2301      	movs	r3, #1
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	0801abfc 	.word	0x0801abfc
 800abbc:	0801ac6c 	.word	0x0801ac6c
 800abc0:	0801ac44 	.word	0x0801ac44

0800abc4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800abda:	4293      	cmp	r3, r2
 800abdc:	d803      	bhi.n	800abe6 <http_send_data_nonssi+0x22>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	e001      	b.n	800abea <http_send_data_nonssi+0x26>
 800abe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abea:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	6999      	ldr	r1, [r3, #24]
 800abf0:	f107 020c 	add.w	r2, r7, #12
 800abf4:	2300      	movs	r3, #0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff feee 	bl	800a9d8 <http_write>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ac00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10d      	bne.n	800ac24 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	89ba      	ldrh	r2, [r7, #12]
 800ac12:	441a      	add	r2, r3
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	89ba      	ldrh	r2, [r7, #12]
 800ac1e:	1a9a      	subs	r2, r3, r2
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <http_send+0x18>
    return 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e025      	b.n	800ac92 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d108      	bne.n	800ac60 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ff87 	bl	800ab64 <http_check_eof>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <http_send+0x32>
      return 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e018      	b.n	800ac92 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff ffae 	bl	800abc4 <http_send_data_nonssi>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10d      	bne.n	800ac90 <http_send+0x62>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fe4d 	bl	800a918 <fs_bytes_left>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dc05      	bgt.n	800ac90 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff ff5f 	bl	800ab4a <http_eof>
    return 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	e000      	b.n	800ac92 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
	...

0800ac9c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	4a1c      	ldr	r2, [pc, #112]	; (800ad1c <http_get_404_file+0x80>)
 800acaa:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4619      	mov	r1, r3
 800acb4:	4610      	mov	r0, r2
 800acb6:	f7ff fde7 	bl	800a888 <fs_open>
 800acba:	4603      	mov	r3, r0
 800acbc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800acbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d024      	beq.n	800ad10 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	4a15      	ldr	r2, [pc, #84]	; (800ad20 <http_get_404_file+0x84>)
 800acca:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4619      	mov	r1, r3
 800acd4:	4610      	mov	r0, r2
 800acd6:	f7ff fdd7 	bl	800a888 <fs_open>
 800acda:	4603      	mov	r3, r0
 800acdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800acde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d014      	beq.n	800ad10 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	4a0e      	ldr	r2, [pc, #56]	; (800ad24 <http_get_404_file+0x88>)
 800acea:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4619      	mov	r1, r3
 800acf4:	4610      	mov	r0, r2
 800acf6:	f7ff fdc7 	bl	800a888 <fs_open>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800acfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d004      	beq.n	800ad10 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]
        return NULL;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e000      	b.n	800ad12 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800ad10:	687b      	ldr	r3, [r7, #4]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0801aca4 	.word	0x0801aca4
 800ad20:	0801acb0 	.word	0x0801acb0
 800ad24:	0801acbc 	.word	0x0801acbc

0800ad28 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <http_parse_request+0x24>
 800ad3e:	4b65      	ldr	r3, [pc, #404]	; (800aed4 <http_parse_request+0x1ac>)
 800ad40:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800ad44:	4964      	ldr	r1, [pc, #400]	; (800aed8 <http_parse_request+0x1b0>)
 800ad46:	4865      	ldr	r0, [pc, #404]	; (800aedc <http_parse_request+0x1b4>)
 800ad48:	f00d fef0 	bl	8018b2c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <http_parse_request+0x38>
 800ad52:	4b60      	ldr	r3, [pc, #384]	; (800aed4 <http_parse_request+0x1ac>)
 800ad54:	f240 72af 	movw	r2, #1967	; 0x7af
 800ad58:	4961      	ldr	r1, [pc, #388]	; (800aee0 <http_parse_request+0x1b8>)
 800ad5a:	4860      	ldr	r0, [pc, #384]	; (800aedc <http_parse_request+0x1b4>)
 800ad5c:	f00d fee6 	bl	8018b2c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <http_parse_request+0x48>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ad70:	f06f 0307 	mvn.w	r3, #7
 800ad74:	e0a9      	b.n	800aeca <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d103      	bne.n	800ad86 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad82:	621a      	str	r2, [r3, #32]
 800ad84:	e005      	b.n	800ad92 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f002 f897 	bl	800cec0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ad92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad94:	f002 f86c 	bl	800ce70 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	891b      	ldrh	r3, [r3, #8]
 800ada8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800adac:	4293      	cmp	r3, r2
 800adae:	bf28      	it	cs
 800adb0:	4613      	movcs	r3, r2
 800adb2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	6a18      	ldr	r0, [r3, #32]
 800adb8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800adba:	2300      	movs	r3, #0
 800adbc:	4949      	ldr	r1, [pc, #292]	; (800aee4 <http_parse_request+0x1bc>)
 800adbe:	f002 f9b7 	bl	800d130 <pbuf_copy_partial>
    data = httpd_req_buf;
 800adc2:	4b48      	ldr	r3, [pc, #288]	; (800aee4 <http_parse_request+0x1bc>)
 800adc4:	637b      	str	r3, [r7, #52]	; 0x34
 800adc6:	e005      	b.n	800add4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	895b      	ldrh	r3, [r3, #10]
 800add2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800add4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800add6:	2b06      	cmp	r3, #6
 800add8:	d962      	bls.n	800aea0 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800adda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800addc:	461a      	mov	r2, r3
 800adde:	4942      	ldr	r1, [pc, #264]	; (800aee8 <http_parse_request+0x1c0>)
 800ade0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ade2:	f000 fb99 	bl	800b518 <lwip_strnstr>
 800ade6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d058      	beq.n	800aea0 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800adf2:	2204      	movs	r2, #4
 800adf4:	493d      	ldr	r1, [pc, #244]	; (800aeec <http_parse_request+0x1c4>)
 800adf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adf8:	f00d ff67 	bl	8018cca <strncmp>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d116      	bne.n	800ae30 <http_parse_request+0x108>
        sp1 = data + 3;
 800ae02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae04:	3303      	adds	r3, #3
 800ae06:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	8b7a      	ldrh	r2, [r7, #26]
 800ae1e:	4934      	ldr	r1, [pc, #208]	; (800aef0 <http_parse_request+0x1c8>)
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fb79 	bl	800b518 <lwip_strnstr>
 800ae26:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d111      	bne.n	800ae52 <http_parse_request+0x12a>
 800ae2e:	e006      	b.n	800ae3e <http_parse_request+0x116>
        data[4] = 0;
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	3304      	adds	r3, #4
 800ae34:	2200      	movs	r2, #0
 800ae36:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800ae38:	f06f 030f 	mvn.w	r3, #15
 800ae3c:	e045      	b.n	800aeca <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	3301      	adds	r3, #1
 800ae42:	8b7a      	ldrh	r2, [r7, #26]
 800ae44:	4928      	ldr	r1, [pc, #160]	; (800aee8 <http_parse_request+0x1c0>)
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fb66 	bl	800b518 <lwip_strnstr>
 800ae4c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	3301      	adds	r3, #1
 800ae56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d01e      	beq.n	800aea0 <http_parse_request+0x178>
 800ae62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d91a      	bls.n	800aea0 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800ae6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4921      	ldr	r1, [pc, #132]	; (800aef4 <http_parse_request+0x1cc>)
 800ae70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae72:	f000 fb51 	bl	800b518 <lwip_strnstr>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d011      	beq.n	800aea0 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800ae88:	8b3b      	ldrh	r3, [r7, #24]
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	2200      	movs	r2, #0
 800ae90:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ae92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae94:	6979      	ldr	r1, [r7, #20]
 800ae96:	68b8      	ldr	r0, [r7, #8]
 800ae98:	f000 f82e 	bl	800aef8 <http_find_file>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	e014      	b.n	800aeca <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 ffcb 	bl	800ce40 <pbuf_clen>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	6a1b      	ldr	r3, [r3, #32]
 800aeb2:	891b      	ldrh	r3, [r3, #8]
 800aeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb8:	d205      	bcs.n	800aec6 <http_parse_request+0x19e>
 800aeba:	8a7b      	ldrh	r3, [r7, #18]
 800aebc:	2b05      	cmp	r3, #5
 800aebe:	d802      	bhi.n	800aec6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800aec0:	f06f 0304 	mvn.w	r3, #4
 800aec4:	e001      	b.n	800aeca <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800aec6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3738      	adds	r7, #56	; 0x38
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	0801abfc 	.word	0x0801abfc
 800aed8:	0801acc8 	.word	0x0801acc8
 800aedc:	0801ac44 	.word	0x0801ac44
 800aee0:	0801acd4 	.word	0x0801acd4
 800aee4:	2000d5ec 	.word	0x2000d5ec
 800aee8:	0801ace0 	.word	0x0801ace0
 800aeec:	0801ace4 	.word	0x0801ace4
 800aef0:	0801acec 	.word	0x0801acec
 800aef4:	0801acf0 	.word	0x0801acf0

0800aef8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b092      	sub	sp, #72	; 0x48
 800aefc:	af02      	add	r7, sp, #8
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	4618      	mov	r0, r3
 800af16:	f7f5 f975 	bl	8000204 <strlen>
 800af1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d06b      	beq.n	800affa <http_find_file+0x102>
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	3b01      	subs	r3, #1
 800af28:	4413      	add	r3, r2
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b2f      	cmp	r3, #47	; 0x2f
 800af2e:	d164      	bne.n	800affa <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800af30:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800af32:	4a53      	ldr	r2, [pc, #332]	; (800b080 <http_find_file+0x188>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d102      	bne.n	800af3e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d15d      	bne.n	800affa <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	3b01      	subs	r3, #1
 800af42:	2b3f      	cmp	r3, #63	; 0x3f
 800af44:	bf28      	it	cs
 800af46:	233f      	movcs	r3, #63	; 0x3f
 800af48:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00a      	beq.n	800af66 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af54:	4619      	mov	r1, r3
 800af56:	484a      	ldr	r0, [pc, #296]	; (800b080 <http_find_file+0x188>)
 800af58:	f00d ffe8 	bl	8018f2c <memcpy>
      http_uri_buf[copy_len] = 0;
 800af5c:	4a48      	ldr	r2, [pc, #288]	; (800b080 <http_find_file+0x188>)
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	4413      	add	r3, r2
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6a:	e043      	b.n	800aff4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d028      	beq.n	800afc4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800af78:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01e      	beq.n	800afbe <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800af80:	4a40      	ldr	r2, [pc, #256]	; (800b084 <http_find_file+0x18c>)
 800af82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f5 f93b 	bl	8000204 <strlen>
 800af8e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800af90:	69fa      	ldr	r2, [r7, #28]
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	4293      	cmp	r3, r2
 800af96:	bf28      	it	cs
 800af98:	4613      	movcs	r3, r2
 800af9a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	4a38      	ldr	r2, [pc, #224]	; (800b080 <http_find_file+0x188>)
 800afa0:	1898      	adds	r0, r3, r2
 800afa2:	4a38      	ldr	r2, [pc, #224]	; (800b084 <http_find_file+0x18c>)
 800afa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	4619      	mov	r1, r3
 800afae:	f00d ffbd 	bl	8018f2c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800afb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	4413      	add	r3, r2
 800afb8:	4a31      	ldr	r2, [pc, #196]	; (800b080 <http_find_file+0x188>)
 800afba:	2100      	movs	r1, #0
 800afbc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800afbe:	4b30      	ldr	r3, [pc, #192]	; (800b080 <http_find_file+0x188>)
 800afc0:	633b      	str	r3, [r7, #48]	; 0x30
 800afc2:	e004      	b.n	800afce <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800afc4:	4a2f      	ldr	r2, [pc, #188]	; (800b084 <http_find_file+0x18c>)
 800afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afcc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fc58 	bl	800a888 <fs_open>
 800afd8:	4603      	mov	r3, r0
 800afda:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800afdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <http_find_file+0xf6>
        uri = file_name;
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800afec:	e005      	b.n	800affa <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800afee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff0:	3301      	adds	r3, #1
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	d9b8      	bls.n	800af6c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	2b00      	cmp	r3, #0
 800affe:	d124      	bne.n	800b04a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	213f      	movs	r1, #63	; 0x3f
 800b004:	4618      	mov	r0, r3
 800b006:	f00d fe53 	bl	8018cb0 <strchr>
 800b00a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b014:	2200      	movs	r2, #0
 800b016:	701a      	strb	r2, [r3, #0]
      params++;
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	3301      	adds	r3, #1
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fc2f 	bl	800a888 <fs_open>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <http_find_file+0x144>
      file = &hs->file_handle;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	63bb      	str	r3, [r7, #56]	; 0x38
 800b03a:	e006      	b.n	800b04a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b03c:	f107 0308 	add.w	r3, r7, #8
 800b040:	4619      	mov	r1, r3
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f7ff fe2a 	bl	800ac9c <http_get_404_file>
 800b048:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b050:	f107 0308 	add.w	r3, r7, #8
 800b054:	4619      	mov	r1, r3
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff fe20 	bl	800ac9c <http_get_404_file>
 800b05c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4613      	mov	r3, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f809 	bl	800b088 <http_init_file>
 800b076:	4603      	mov	r3, r0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3740      	adds	r7, #64	; 0x40
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	2000d9ec 	.word	0x2000d9ec
 800b084:	08027c5c 	.word	0x08027c5c

0800b088 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d05c      	beq.n	800b156 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d106      	bne.n	800b0b2 <http_init_file+0x2a>
 800b0a4:	4b35      	ldr	r3, [pc, #212]	; (800b17c <http_init_file+0xf4>)
 800b0a6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b0aa:	4935      	ldr	r1, [pc, #212]	; (800b180 <http_init_file+0xf8>)
 800b0ac:	4835      	ldr	r0, [pc, #212]	; (800b184 <http_init_file+0xfc>)
 800b0ae:	f00d fd3d 	bl	8018b2c <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	da06      	bge.n	800b0d6 <http_init_file+0x4e>
 800b0c8:	4b2c      	ldr	r3, [pc, #176]	; (800b17c <http_init_file+0xf4>)
 800b0ca:	f640 1234 	movw	r2, #2356	; 0x934
 800b0ce:	492e      	ldr	r1, [pc, #184]	; (800b188 <http_init_file+0x100>)
 800b0d0:	482c      	ldr	r0, [pc, #176]	; (800b184 <http_init_file+0xfc>)
 800b0d2:	f00d fd2b 	bl	8018b2c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	7c1b      	ldrb	r3, [r3, #16]
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <http_init_file+0x7c>
 800b0f6:	4b21      	ldr	r3, [pc, #132]	; (800b17c <http_init_file+0xf4>)
 800b0f8:	f640 1243 	movw	r2, #2371	; 0x943
 800b0fc:	4923      	ldr	r1, [pc, #140]	; (800b18c <http_init_file+0x104>)
 800b0fe:	4821      	ldr	r0, [pc, #132]	; (800b184 <http_init_file+0xfc>)
 800b100:	f00d fd14 	bl	8018b2c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d032      	beq.n	800b170 <http_init_file+0xe8>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	7c1b      	ldrb	r3, [r3, #16]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d02b      	beq.n	800b170 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6998      	ldr	r0, [r3, #24]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	461a      	mov	r2, r3
 800b122:	491b      	ldr	r1, [pc, #108]	; (800b190 <http_init_file+0x108>)
 800b124:	f000 f9f8 	bl	800b518 <lwip_strnstr>
 800b128:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01f      	beq.n	800b170 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	1d1a      	adds	r2, r3, #4
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	699a      	ldr	r2, [r3, #24]
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	441a      	add	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	625a      	str	r2, [r3, #36]	; 0x24
 800b154:	e00c      	b.n	800b170 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	0801abfc 	.word	0x0801abfc
 800b180:	0801acf8 	.word	0x0801acf8
 800b184:	0801ac44 	.word	0x0801ac44
 800b188:	0801ad0c 	.word	0x0801ad0c
 800b18c:	0801ad2c 	.word	0x0801ad2c
 800b190:	0801acf0 	.word	0x0801acf0

0800b194 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <http_err+0x1c>
    http_state_free(hs);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fc02 	bl	800a9b4 <http_state_free>
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <http_sent+0x1c>
    return ERR_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e008      	b.n	800b1e6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b1dc:	6979      	ldr	r1, [r7, #20]
 800b1de:	68b8      	ldr	r0, [r7, #8]
 800b1e0:	f7ff fd25 	bl	800ac2e <http_send>

  return ERR_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3718      	adds	r7, #24
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d107      	bne.n	800b212 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b202:	2100      	movs	r1, #0
 800b204:	6838      	ldr	r0, [r7, #0]
 800b206:	f7ff fc91 	bl	800ab2c <http_close_conn>
 800b20a:	4603      	mov	r3, r0
 800b20c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	e021      	b.n	800b256 <http_poll+0x68>
  } else {
    hs->retries++;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b218:	3301      	adds	r3, #1
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d105      	bne.n	800b238 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b22c:	68f9      	ldr	r1, [r7, #12]
 800b22e:	6838      	ldr	r0, [r7, #0]
 800b230:	f7ff fc7c 	bl	800ab2c <http_close_conn>
      return ERR_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	e00e      	b.n	800b256 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b240:	68f9      	ldr	r1, [r7, #12]
 800b242:	6838      	ldr	r0, [r7, #0]
 800b244:	f7ff fcf3 	bl	800ac2e <http_send>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b24e:	6838      	ldr	r0, [r7, #0]
 800b250:	f007 fa6a 	bl	8012728 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <http_recv+0x26>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <http_recv+0x26>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d111      	bne.n	800b2aa <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	891b      	ldrh	r3, [r3, #8]
 800b290:	4619      	mov	r1, r3
 800b292:	68b8      	ldr	r0, [r7, #8]
 800b294:	f002 fd20 	bl	800dcd8 <tcp_recved>
      pbuf_free(p);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 fd43 	bl	800cd24 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b29e:	6979      	ldr	r1, [r7, #20]
 800b2a0:	68b8      	ldr	r0, [r7, #8]
 800b2a2:	f7ff fc43 	bl	800ab2c <http_close_conn>
    return ERR_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e055      	b.n	800b356 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	891b      	ldrh	r3, [r3, #8]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	68b8      	ldr	r0, [r7, #8]
 800b2b2:	f002 fd11 	bl	800dcd8 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d147      	bne.n	800b34e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	6979      	ldr	r1, [r7, #20]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff fd30 	bl	800ad28 <http_parse_request>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b2cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d015      	beq.n	800b300 <http_recv+0xa0>
 800b2d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2d8:	f113 0f05 	cmn.w	r3, #5
 800b2dc:	d010      	beq.n	800b300 <http_recv+0xa0>
 800b2de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2e2:	f113 0f10 	cmn.w	r3, #16
 800b2e6:	d00b      	beq.n	800b300 <http_recv+0xa0>
 800b2e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2ec:	f113 0f08 	cmn.w	r3, #8
 800b2f0:	d006      	beq.n	800b300 <http_recv+0xa0>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <http_recv+0x100>)
 800b2f4:	f640 2204 	movw	r2, #2564	; 0xa04
 800b2f8:	491a      	ldr	r1, [pc, #104]	; (800b364 <http_recv+0x104>)
 800b2fa:	481b      	ldr	r0, [pc, #108]	; (800b368 <http_recv+0x108>)
 800b2fc:	f00d fc16 	bl	8018b2c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b304:	f113 0f05 	cmn.w	r3, #5
 800b308:	d00b      	beq.n	800b322 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d007      	beq.n	800b322 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	4618      	mov	r0, r3
 800b318:	f001 fd04 	bl	800cd24 <pbuf_free>
          hs->req = NULL;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2200      	movs	r2, #0
 800b320:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fcfe 	bl	800cd24 <pbuf_free>
      if (parsed == ERR_OK) {
 800b328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b330:	6979      	ldr	r1, [r7, #20]
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f7ff fc7b 	bl	800ac2e <http_send>
 800b338:	e00c      	b.n	800b354 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b33a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b33e:	f113 0f10 	cmn.w	r3, #16
 800b342:	d107      	bne.n	800b354 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b344:	6979      	ldr	r1, [r7, #20]
 800b346:	68b8      	ldr	r0, [r7, #8]
 800b348:	f7ff fbf0 	bl	800ab2c <http_close_conn>
 800b34c:	e002      	b.n	800b354 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 fce8 	bl	800cd24 <pbuf_free>
    }
  }
  return ERR_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0801abfc 	.word	0x0801abfc
 800b364:	0801ad58 	.word	0x0801ad58
 800b368:	0801ac44 	.word	0x0801ac44

0800b36c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	4613      	mov	r3, r2
 800b378:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <http_accept+0x1c>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d102      	bne.n	800b38e <http_accept+0x22>
    return ERR_VAL;
 800b388:	f06f 0305 	mvn.w	r3, #5
 800b38c:	e025      	b.n	800b3da <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b38e:	2101      	movs	r1, #1
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f003 fa9d 	bl	800e8d0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b396:	f7ff fadb 	bl	800a950 <http_state_alloc>
 800b39a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d102      	bne.n	800b3a8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a6:	e018      	b.n	800b3da <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b3ae:	6979      	ldr	r1, [r7, #20]
 800b3b0:	68b8      	ldr	r0, [r7, #8]
 800b3b2:	f003 fc8d 	bl	800ecd0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b3b6:	490b      	ldr	r1, [pc, #44]	; (800b3e4 <http_accept+0x78>)
 800b3b8:	68b8      	ldr	r0, [r7, #8]
 800b3ba:	f003 fc9b 	bl	800ecf4 <tcp_recv>
  altcp_err(pcb, http_err);
 800b3be:	490a      	ldr	r1, [pc, #40]	; (800b3e8 <http_accept+0x7c>)
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f003 fcdb 	bl	800ed7c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	4908      	ldr	r1, [pc, #32]	; (800b3ec <http_accept+0x80>)
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f003 fd10 	bl	800edf0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b3d0:	4907      	ldr	r1, [pc, #28]	; (800b3f0 <http_accept+0x84>)
 800b3d2:	68b8      	ldr	r0, [r7, #8]
 800b3d4:	f003 fcb0 	bl	800ed38 <tcp_sent>

  return ERR_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800b261 	.word	0x0800b261
 800b3e8:	0800b195 	.word	0x0800b195
 800b3ec:	0800b1ef 	.word	0x0800b1ef
 800b3f0:	0800b1b9 	.word	0x0800b1b9

0800b3f4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d029      	beq.n	800b45a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b406:	2101      	movs	r1, #1
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f003 fa61 	bl	800e8d0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	461a      	mov	r2, r3
 800b412:	4914      	ldr	r1, [pc, #80]	; (800b464 <httpd_init_pcb+0x70>)
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f002 fa91 	bl	800d93c <tcp_bind>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d006      	beq.n	800b434 <httpd_init_pcb+0x40>
 800b426:	4b10      	ldr	r3, [pc, #64]	; (800b468 <httpd_init_pcb+0x74>)
 800b428:	f640 2257 	movw	r2, #2647	; 0xa57
 800b42c:	490f      	ldr	r1, [pc, #60]	; (800b46c <httpd_init_pcb+0x78>)
 800b42e:	4810      	ldr	r0, [pc, #64]	; (800b470 <httpd_init_pcb+0x7c>)
 800b430:	f00d fb7c 	bl	8018b2c <iprintf>
    pcb = altcp_listen(pcb);
 800b434:	21ff      	movs	r1, #255	; 0xff
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f002 fb38 	bl	800daac <tcp_listen_with_backlog>
 800b43c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d106      	bne.n	800b452 <httpd_init_pcb+0x5e>
 800b444:	4b08      	ldr	r3, [pc, #32]	; (800b468 <httpd_init_pcb+0x74>)
 800b446:	f640 2259 	movw	r2, #2649	; 0xa59
 800b44a:	490a      	ldr	r1, [pc, #40]	; (800b474 <httpd_init_pcb+0x80>)
 800b44c:	4808      	ldr	r0, [pc, #32]	; (800b470 <httpd_init_pcb+0x7c>)
 800b44e:	f00d fb6d 	bl	8018b2c <iprintf>
    altcp_accept(pcb, http_accept);
 800b452:	4909      	ldr	r1, [pc, #36]	; (800b478 <httpd_init_pcb+0x84>)
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f003 fcb3 	bl	800edc0 <tcp_accept>
  }
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	08027da4 	.word	0x08027da4
 800b468:	0801abfc 	.word	0x0801abfc
 800b46c:	0801ad84 	.word	0x0801ad84
 800b470:	0801ac44 	.word	0x0801ac44
 800b474:	0801ada0 	.word	0x0801ada0
 800b478:	0800b36d 	.word	0x0800b36d

0800b47c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b482:	202e      	movs	r0, #46	; 0x2e
 800b484:	f003 fc16 	bl	800ecb4 <tcp_new_ip_type>
 800b488:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <httpd_init+0x22>
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <httpd_init+0x34>)
 800b492:	f640 2272 	movw	r2, #2674	; 0xa72
 800b496:	4907      	ldr	r1, [pc, #28]	; (800b4b4 <httpd_init+0x38>)
 800b498:	4807      	ldr	r0, [pc, #28]	; (800b4b8 <httpd_init+0x3c>)
 800b49a:	f00d fb47 	bl	8018b2c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b49e:	2150      	movs	r1, #80	; 0x50
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff ffa7 	bl	800b3f4 <httpd_init_pcb>
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0801abfc 	.word	0x0801abfc
 800b4b4:	0801adc0 	.word	0x0801adc0
 800b4b8:	0801ac44 	.word	0x0801ac44

0800b4bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	b21a      	sxth	r2, r3
 800b4cc:	88fb      	ldrh	r3, [r7, #6]
 800b4ce:	0a1b      	lsrs	r3, r3, #8
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	b21b      	sxth	r3, r3
 800b4d8:	b29b      	uxth	r3, r3
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	061a      	lsls	r2, r3, #24
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0a1b      	lsrs	r3, r3, #8
 800b500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	0e1b      	lsrs	r3, r3, #24
 800b50a:	4313      	orrs	r3, r2
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b524:	68b8      	ldr	r0, [r7, #8]
 800b526:	f7f4 fe6d 	bl	8000204 <strlen>
 800b52a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	e022      	b.n	800b57c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e012      	b.n	800b562 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d109      	bne.n	800b55c <lwip_strnstr+0x44>
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f00d fbbc 	bl	8018cca <strncmp>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	e00f      	b.n	800b57c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	3301      	adds	r3, #1
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d007      	beq.n	800b57a <lwip_strnstr+0x62>
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	441a      	add	r2, r3
 800b570:	68f9      	ldr	r1, [r7, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	440b      	add	r3, r1
 800b576:	429a      	cmp	r2, r3
 800b578:	d9e0      	bls.n	800b53c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b58e:	f00d f955 	bl	801883c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b592:	f000 f8d5 	bl	800b740 <mem_init>
  memp_init();
 800b596:	f000 fc31 	bl	800bdfc <memp_init>
  pbuf_init();
  netif_init();
 800b59a:	f000 fd3d 	bl	800c018 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b59e:	f008 f9b3 	bl	8013908 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b5a2:	f001 fe69 	bl	800d278 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b5a6:	f008 f8f5 	bl	8013794 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b5be:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <ptr_to_mem+0x20>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	4413      	add	r3, r2
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	2000e098 	.word	0x2000e098

0800b5d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b5e0:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <mem_to_ptr+0x20>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	b29b      	uxth	r3, r3
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	2000e098 	.word	0x2000e098

0800b5fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b604:	4b45      	ldr	r3, [pc, #276]	; (800b71c <plug_holes+0x120>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d206      	bcs.n	800b61c <plug_holes+0x20>
 800b60e:	4b44      	ldr	r3, [pc, #272]	; (800b720 <plug_holes+0x124>)
 800b610:	f240 12df 	movw	r2, #479	; 0x1df
 800b614:	4943      	ldr	r1, [pc, #268]	; (800b724 <plug_holes+0x128>)
 800b616:	4844      	ldr	r0, [pc, #272]	; (800b728 <plug_holes+0x12c>)
 800b618:	f00d fa88 	bl	8018b2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b61c:	4b43      	ldr	r3, [pc, #268]	; (800b72c <plug_holes+0x130>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	429a      	cmp	r2, r3
 800b624:	d306      	bcc.n	800b634 <plug_holes+0x38>
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <plug_holes+0x124>)
 800b628:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b62c:	4940      	ldr	r1, [pc, #256]	; (800b730 <plug_holes+0x134>)
 800b62e:	483e      	ldr	r0, [pc, #248]	; (800b728 <plug_holes+0x12c>)
 800b630:	f00d fa7c 	bl	8018b2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	791b      	ldrb	r3, [r3, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d006      	beq.n	800b64a <plug_holes+0x4e>
 800b63c:	4b38      	ldr	r3, [pc, #224]	; (800b720 <plug_holes+0x124>)
 800b63e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b642:	493c      	ldr	r1, [pc, #240]	; (800b734 <plug_holes+0x138>)
 800b644:	4838      	ldr	r0, [pc, #224]	; (800b728 <plug_holes+0x12c>)
 800b646:	f00d fa71 	bl	8018b2c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b652:	d906      	bls.n	800b662 <plug_holes+0x66>
 800b654:	4b32      	ldr	r3, [pc, #200]	; (800b720 <plug_holes+0x124>)
 800b656:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b65a:	4937      	ldr	r1, [pc, #220]	; (800b738 <plug_holes+0x13c>)
 800b65c:	4832      	ldr	r0, [pc, #200]	; (800b728 <plug_holes+0x12c>)
 800b65e:	f00d fa65 	bl	8018b2c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff ffa4 	bl	800b5b4 <ptr_to_mem>
 800b66c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	429a      	cmp	r2, r3
 800b674:	d024      	beq.n	800b6c0 <plug_holes+0xc4>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d120      	bne.n	800b6c0 <plug_holes+0xc4>
 800b67e:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <plug_holes+0x130>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	429a      	cmp	r2, r3
 800b686:	d01b      	beq.n	800b6c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b688:	4b2c      	ldr	r3, [pc, #176]	; (800b73c <plug_holes+0x140>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d102      	bne.n	800b698 <plug_holes+0x9c>
      lfree = mem;
 800b692:	4a2a      	ldr	r2, [pc, #168]	; (800b73c <plug_holes+0x140>)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	881a      	ldrh	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6a8:	d00a      	beq.n	800b6c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff ff80 	bl	800b5b4 <ptr_to_mem>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff ff8e 	bl	800b5d8 <mem_to_ptr>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	885b      	ldrh	r3, [r3, #2]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff ff75 	bl	800b5b4 <ptr_to_mem>
 800b6ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d01f      	beq.n	800b714 <plug_holes+0x118>
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	791b      	ldrb	r3, [r3, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d11b      	bne.n	800b714 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b6dc:	4b17      	ldr	r3, [pc, #92]	; (800b73c <plug_holes+0x140>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d102      	bne.n	800b6ec <plug_holes+0xf0>
      lfree = pmem;
 800b6e6:	4a15      	ldr	r2, [pc, #84]	; (800b73c <plug_holes+0x140>)
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	881a      	ldrh	r2, [r3, #0]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6fc:	d00a      	beq.n	800b714 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff ff56 	bl	800b5b4 <ptr_to_mem>
 800b708:	4604      	mov	r4, r0
 800b70a:	68b8      	ldr	r0, [r7, #8]
 800b70c:	f7ff ff64 	bl	800b5d8 <mem_to_ptr>
 800b710:	4603      	mov	r3, r0
 800b712:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b714:	bf00      	nop
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd90      	pop	{r4, r7, pc}
 800b71c:	2000e098 	.word	0x2000e098
 800b720:	0801addc 	.word	0x0801addc
 800b724:	0801ae0c 	.word	0x0801ae0c
 800b728:	0801ae24 	.word	0x0801ae24
 800b72c:	2000e09c 	.word	0x2000e09c
 800b730:	0801ae4c 	.word	0x0801ae4c
 800b734:	0801ae68 	.word	0x0801ae68
 800b738:	0801ae84 	.word	0x0801ae84
 800b73c:	2000e0a4 	.word	0x2000e0a4

0800b740 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b746:	4b1f      	ldr	r3, [pc, #124]	; (800b7c4 <mem_init+0x84>)
 800b748:	3303      	adds	r3, #3
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	461a      	mov	r2, r3
 800b750:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <mem_init+0x88>)
 800b752:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b754:	4b1c      	ldr	r3, [pc, #112]	; (800b7c8 <mem_init+0x88>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b760:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b76e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b772:	f7ff ff1f 	bl	800b5b4 <ptr_to_mem>
 800b776:	4603      	mov	r3, r0
 800b778:	4a14      	ldr	r2, [pc, #80]	; (800b7cc <mem_init+0x8c>)
 800b77a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b77c:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <mem_init+0x8c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2201      	movs	r2, #1
 800b782:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b784:	4b11      	ldr	r3, [pc, #68]	; (800b7cc <mem_init+0x8c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b78c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <mem_init+0x8c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b796:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b798:	4b0b      	ldr	r3, [pc, #44]	; (800b7c8 <mem_init+0x88>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a0c      	ldr	r2, [pc, #48]	; (800b7d0 <mem_init+0x90>)
 800b79e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7a0:	480c      	ldr	r0, [pc, #48]	; (800b7d4 <mem_init+0x94>)
 800b7a2:	f00d f859 	bl	8018858 <sys_mutex_new>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d006      	beq.n	800b7ba <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <mem_init+0x98>)
 800b7ae:	f240 221f 	movw	r2, #543	; 0x21f
 800b7b2:	490a      	ldr	r1, [pc, #40]	; (800b7dc <mem_init+0x9c>)
 800b7b4:	480a      	ldr	r0, [pc, #40]	; (800b7e0 <mem_init+0xa0>)
 800b7b6:	f00d f9b9 	bl	8018b2c <iprintf>
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000da44 	.word	0x2000da44
 800b7c8:	2000e098 	.word	0x2000e098
 800b7cc:	2000e09c 	.word	0x2000e09c
 800b7d0:	2000e0a4 	.word	0x2000e0a4
 800b7d4:	2000e0a0 	.word	0x2000e0a0
 800b7d8:	0801addc 	.word	0x0801addc
 800b7dc:	0801aeb0 	.word	0x0801aeb0
 800b7e0:	0801ae24 	.word	0x0801ae24

0800b7e4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff fef3 	bl	800b5d8 <mem_to_ptr>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff feda 	bl	800b5b4 <ptr_to_mem>
 800b800:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	885b      	ldrh	r3, [r3, #2]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fed4 	bl	800b5b4 <ptr_to_mem>
 800b80c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b816:	d818      	bhi.n	800b84a <mem_link_valid+0x66>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	885b      	ldrh	r3, [r3, #2]
 800b81c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b820:	d813      	bhi.n	800b84a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b826:	8afa      	ldrh	r2, [r7, #22]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d004      	beq.n	800b836 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	8afa      	ldrh	r2, [r7, #22]
 800b832:	429a      	cmp	r2, r3
 800b834:	d109      	bne.n	800b84a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b836:	4b08      	ldr	r3, [pc, #32]	; (800b858 <mem_link_valid+0x74>)
 800b838:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d006      	beq.n	800b84e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	885b      	ldrh	r3, [r3, #2]
 800b844:	8afa      	ldrh	r2, [r7, #22]
 800b846:	429a      	cmp	r2, r3
 800b848:	d001      	beq.n	800b84e <mem_link_valid+0x6a>
    return 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	e000      	b.n	800b850 <mem_link_valid+0x6c>
  }
  return 1;
 800b84e:	2301      	movs	r3, #1
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	2000e09c 	.word	0x2000e09c

0800b85c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d070      	beq.n	800b94c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f003 0303 	and.w	r3, r3, #3
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00d      	beq.n	800b890 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b874:	4b37      	ldr	r3, [pc, #220]	; (800b954 <mem_free+0xf8>)
 800b876:	f240 2273 	movw	r2, #627	; 0x273
 800b87a:	4937      	ldr	r1, [pc, #220]	; (800b958 <mem_free+0xfc>)
 800b87c:	4837      	ldr	r0, [pc, #220]	; (800b95c <mem_free+0x100>)
 800b87e:	f00d f955 	bl	8018b2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b882:	f00d f847 	bl	8018914 <sys_arch_protect>
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f00d f851 	bl	8018930 <sys_arch_unprotect>
    return;
 800b88e:	e05e      	b.n	800b94e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3b08      	subs	r3, #8
 800b894:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b896:	4b32      	ldr	r3, [pc, #200]	; (800b960 <mem_free+0x104>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d306      	bcc.n	800b8ae <mem_free+0x52>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f103 020c 	add.w	r2, r3, #12
 800b8a6:	4b2f      	ldr	r3, [pc, #188]	; (800b964 <mem_free+0x108>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d90d      	bls.n	800b8ca <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b8ae:	4b29      	ldr	r3, [pc, #164]	; (800b954 <mem_free+0xf8>)
 800b8b0:	f240 227f 	movw	r2, #639	; 0x27f
 800b8b4:	492c      	ldr	r1, [pc, #176]	; (800b968 <mem_free+0x10c>)
 800b8b6:	4829      	ldr	r0, [pc, #164]	; (800b95c <mem_free+0x100>)
 800b8b8:	f00d f938 	bl	8018b2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8bc:	f00d f82a 	bl	8018914 <sys_arch_protect>
 800b8c0:	6138      	str	r0, [r7, #16]
 800b8c2:	6938      	ldr	r0, [r7, #16]
 800b8c4:	f00d f834 	bl	8018930 <sys_arch_unprotect>
    return;
 800b8c8:	e041      	b.n	800b94e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b8ca:	4828      	ldr	r0, [pc, #160]	; (800b96c <mem_free+0x110>)
 800b8cc:	f00c ffe0 	bl	8018890 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	791b      	ldrb	r3, [r3, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d110      	bne.n	800b8fa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b8d8:	4b1e      	ldr	r3, [pc, #120]	; (800b954 <mem_free+0xf8>)
 800b8da:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b8de:	4924      	ldr	r1, [pc, #144]	; (800b970 <mem_free+0x114>)
 800b8e0:	481e      	ldr	r0, [pc, #120]	; (800b95c <mem_free+0x100>)
 800b8e2:	f00d f923 	bl	8018b2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b8e6:	4821      	ldr	r0, [pc, #132]	; (800b96c <mem_free+0x110>)
 800b8e8:	f00c ffe1 	bl	80188ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b8ec:	f00d f812 	bl	8018914 <sys_arch_protect>
 800b8f0:	6178      	str	r0, [r7, #20]
 800b8f2:	6978      	ldr	r0, [r7, #20]
 800b8f4:	f00d f81c 	bl	8018930 <sys_arch_unprotect>
    return;
 800b8f8:	e029      	b.n	800b94e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b8fa:	69f8      	ldr	r0, [r7, #28]
 800b8fc:	f7ff ff72 	bl	800b7e4 <mem_link_valid>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d110      	bne.n	800b928 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b906:	4b13      	ldr	r3, [pc, #76]	; (800b954 <mem_free+0xf8>)
 800b908:	f240 2295 	movw	r2, #661	; 0x295
 800b90c:	4919      	ldr	r1, [pc, #100]	; (800b974 <mem_free+0x118>)
 800b90e:	4813      	ldr	r0, [pc, #76]	; (800b95c <mem_free+0x100>)
 800b910:	f00d f90c 	bl	8018b2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b914:	4815      	ldr	r0, [pc, #84]	; (800b96c <mem_free+0x110>)
 800b916:	f00c ffca 	bl	80188ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b91a:	f00c fffb 	bl	8018914 <sys_arch_protect>
 800b91e:	61b8      	str	r0, [r7, #24]
 800b920:	69b8      	ldr	r0, [r7, #24]
 800b922:	f00d f805 	bl	8018930 <sys_arch_unprotect>
    return;
 800b926:	e012      	b.n	800b94e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	2200      	movs	r2, #0
 800b92c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <mem_free+0x11c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	429a      	cmp	r2, r3
 800b936:	d202      	bcs.n	800b93e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b938:	4a0f      	ldr	r2, [pc, #60]	; (800b978 <mem_free+0x11c>)
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b93e:	69f8      	ldr	r0, [r7, #28]
 800b940:	f7ff fe5c 	bl	800b5fc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b944:	4809      	ldr	r0, [pc, #36]	; (800b96c <mem_free+0x110>)
 800b946:	f00c ffb2 	bl	80188ae <sys_mutex_unlock>
 800b94a:	e000      	b.n	800b94e <mem_free+0xf2>
    return;
 800b94c:	bf00      	nop
}
 800b94e:	3720      	adds	r7, #32
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	0801addc 	.word	0x0801addc
 800b958:	0801aecc 	.word	0x0801aecc
 800b95c:	0801ae24 	.word	0x0801ae24
 800b960:	2000e098 	.word	0x2000e098
 800b964:	2000e09c 	.word	0x2000e09c
 800b968:	0801aef0 	.word	0x0801aef0
 800b96c:	2000e0a0 	.word	0x2000e0a0
 800b970:	0801af0c 	.word	0x0801af0c
 800b974:	0801af34 	.word	0x0801af34
 800b978:	2000e0a4 	.word	0x2000e0a4

0800b97c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b988:	887b      	ldrh	r3, [r7, #2]
 800b98a:	3303      	adds	r3, #3
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	f023 0303 	bic.w	r3, r3, #3
 800b992:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b994:	8bfb      	ldrh	r3, [r7, #30]
 800b996:	2b0b      	cmp	r3, #11
 800b998:	d801      	bhi.n	800b99e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b99a:	230c      	movs	r3, #12
 800b99c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b99e:	8bfb      	ldrh	r3, [r7, #30]
 800b9a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9a4:	d803      	bhi.n	800b9ae <mem_trim+0x32>
 800b9a6:	8bfa      	ldrh	r2, [r7, #30]
 800b9a8:	887b      	ldrh	r3, [r7, #2]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d201      	bcs.n	800b9b2 <mem_trim+0x36>
    return NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e0d8      	b.n	800bb64 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b9b2:	4b6e      	ldr	r3, [pc, #440]	; (800bb6c <mem_trim+0x1f0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d304      	bcc.n	800b9c6 <mem_trim+0x4a>
 800b9bc:	4b6c      	ldr	r3, [pc, #432]	; (800bb70 <mem_trim+0x1f4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d306      	bcc.n	800b9d4 <mem_trim+0x58>
 800b9c6:	4b6b      	ldr	r3, [pc, #428]	; (800bb74 <mem_trim+0x1f8>)
 800b9c8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b9cc:	496a      	ldr	r1, [pc, #424]	; (800bb78 <mem_trim+0x1fc>)
 800b9ce:	486b      	ldr	r0, [pc, #428]	; (800bb7c <mem_trim+0x200>)
 800b9d0:	f00d f8ac 	bl	8018b2c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b9d4:	4b65      	ldr	r3, [pc, #404]	; (800bb6c <mem_trim+0x1f0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d304      	bcc.n	800b9e8 <mem_trim+0x6c>
 800b9de:	4b64      	ldr	r3, [pc, #400]	; (800bb70 <mem_trim+0x1f4>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d307      	bcc.n	800b9f8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9e8:	f00c ff94 	bl	8018914 <sys_arch_protect>
 800b9ec:	60b8      	str	r0, [r7, #8]
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f00c ff9e 	bl	8018930 <sys_arch_unprotect>
    return rmem;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	e0b5      	b.n	800bb64 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3b08      	subs	r3, #8
 800b9fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b9fe:	69b8      	ldr	r0, [r7, #24]
 800ba00:	f7ff fdea 	bl	800b5d8 <mem_to_ptr>
 800ba04:	4603      	mov	r3, r0
 800ba06:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	881a      	ldrh	r2, [r3, #0]
 800ba0c:	8afb      	ldrh	r3, [r7, #22]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	3b08      	subs	r3, #8
 800ba14:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ba16:	8bfa      	ldrh	r2, [r7, #30]
 800ba18:	8abb      	ldrh	r3, [r7, #20]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d906      	bls.n	800ba2c <mem_trim+0xb0>
 800ba1e:	4b55      	ldr	r3, [pc, #340]	; (800bb74 <mem_trim+0x1f8>)
 800ba20:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ba24:	4956      	ldr	r1, [pc, #344]	; (800bb80 <mem_trim+0x204>)
 800ba26:	4855      	ldr	r0, [pc, #340]	; (800bb7c <mem_trim+0x200>)
 800ba28:	f00d f880 	bl	8018b2c <iprintf>
  if (newsize > size) {
 800ba2c:	8bfa      	ldrh	r2, [r7, #30]
 800ba2e:	8abb      	ldrh	r3, [r7, #20]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d901      	bls.n	800ba38 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	e095      	b.n	800bb64 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ba38:	8bfa      	ldrh	r2, [r7, #30]
 800ba3a:	8abb      	ldrh	r3, [r7, #20]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d101      	bne.n	800ba44 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	e08f      	b.n	800bb64 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba44:	484f      	ldr	r0, [pc, #316]	; (800bb84 <mem_trim+0x208>)
 800ba46:	f00c ff23 	bl	8018890 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff fdb0 	bl	800b5b4 <ptr_to_mem>
 800ba54:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	791b      	ldrb	r3, [r3, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d13f      	bne.n	800bade <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba66:	d106      	bne.n	800ba76 <mem_trim+0xfa>
 800ba68:	4b42      	ldr	r3, [pc, #264]	; (800bb74 <mem_trim+0x1f8>)
 800ba6a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ba6e:	4946      	ldr	r1, [pc, #280]	; (800bb88 <mem_trim+0x20c>)
 800ba70:	4842      	ldr	r0, [pc, #264]	; (800bb7c <mem_trim+0x200>)
 800ba72:	f00d f85b 	bl	8018b2c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ba7c:	8afa      	ldrh	r2, [r7, #22]
 800ba7e:	8bfb      	ldrh	r3, [r7, #30]
 800ba80:	4413      	add	r3, r2
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	3308      	adds	r3, #8
 800ba86:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ba88:	4b40      	ldr	r3, [pc, #256]	; (800bb8c <mem_trim+0x210>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d106      	bne.n	800baa0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ba92:	89fb      	ldrh	r3, [r7, #14]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff fd8d 	bl	800b5b4 <ptr_to_mem>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	4a3b      	ldr	r2, [pc, #236]	; (800bb8c <mem_trim+0x210>)
 800ba9e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800baa0:	89fb      	ldrh	r3, [r7, #14]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fd86 	bl	800b5b4 <ptr_to_mem>
 800baa8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2200      	movs	r2, #0
 800baae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	89ba      	ldrh	r2, [r7, #12]
 800bab4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	8afa      	ldrh	r2, [r7, #22]
 800baba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	89fa      	ldrh	r2, [r7, #14]
 800bac0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800baca:	d047      	beq.n	800bb5c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff fd6f 	bl	800b5b4 <ptr_to_mem>
 800bad6:	4602      	mov	r2, r0
 800bad8:	89fb      	ldrh	r3, [r7, #14]
 800bada:	8053      	strh	r3, [r2, #2]
 800badc:	e03e      	b.n	800bb5c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bade:	8bfb      	ldrh	r3, [r7, #30]
 800bae0:	f103 0214 	add.w	r2, r3, #20
 800bae4:	8abb      	ldrh	r3, [r7, #20]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d838      	bhi.n	800bb5c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800baea:	8afa      	ldrh	r2, [r7, #22]
 800baec:	8bfb      	ldrh	r3, [r7, #30]
 800baee:	4413      	add	r3, r2
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	3308      	adds	r3, #8
 800baf4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	881b      	ldrh	r3, [r3, #0]
 800bafa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bafe:	d106      	bne.n	800bb0e <mem_trim+0x192>
 800bb00:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <mem_trim+0x1f8>)
 800bb02:	f240 3216 	movw	r2, #790	; 0x316
 800bb06:	4920      	ldr	r1, [pc, #128]	; (800bb88 <mem_trim+0x20c>)
 800bb08:	481c      	ldr	r0, [pc, #112]	; (800bb7c <mem_trim+0x200>)
 800bb0a:	f00d f80f 	bl	8018b2c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bb0e:	89fb      	ldrh	r3, [r7, #14]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff fd4f 	bl	800b5b4 <ptr_to_mem>
 800bb16:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bb18:	4b1c      	ldr	r3, [pc, #112]	; (800bb8c <mem_trim+0x210>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d202      	bcs.n	800bb28 <mem_trim+0x1ac>
      lfree = mem2;
 800bb22:	4a1a      	ldr	r2, [pc, #104]	; (800bb8c <mem_trim+0x210>)
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	881a      	ldrh	r2, [r3, #0]
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	8afa      	ldrh	r2, [r7, #22]
 800bb3a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	89fa      	ldrh	r2, [r7, #14]
 800bb40:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb4a:	d007      	beq.n	800bb5c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fd2f 	bl	800b5b4 <ptr_to_mem>
 800bb56:	4602      	mov	r2, r0
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bb5c:	4809      	ldr	r0, [pc, #36]	; (800bb84 <mem_trim+0x208>)
 800bb5e:	f00c fea6 	bl	80188ae <sys_mutex_unlock>
  return rmem;
 800bb62:	687b      	ldr	r3, [r7, #4]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	2000e098 	.word	0x2000e098
 800bb70:	2000e09c 	.word	0x2000e09c
 800bb74:	0801addc 	.word	0x0801addc
 800bb78:	0801af68 	.word	0x0801af68
 800bb7c:	0801ae24 	.word	0x0801ae24
 800bb80:	0801af80 	.word	0x0801af80
 800bb84:	2000e0a0 	.word	0x2000e0a0
 800bb88:	0801afa0 	.word	0x0801afa0
 800bb8c:	2000e0a4 	.word	0x2000e0a4

0800bb90 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bb9a:	88fb      	ldrh	r3, [r7, #6]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <mem_malloc+0x14>
    return NULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	e0e2      	b.n	800bd6a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bba4:	88fb      	ldrh	r3, [r7, #6]
 800bba6:	3303      	adds	r3, #3
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	f023 0303 	bic.w	r3, r3, #3
 800bbae:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bbb0:	8bbb      	ldrh	r3, [r7, #28]
 800bbb2:	2b0b      	cmp	r3, #11
 800bbb4:	d801      	bhi.n	800bbba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bbba:	8bbb      	ldrh	r3, [r7, #28]
 800bbbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbc0:	d803      	bhi.n	800bbca <mem_malloc+0x3a>
 800bbc2:	8bba      	ldrh	r2, [r7, #28]
 800bbc4:	88fb      	ldrh	r3, [r7, #6]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d201      	bcs.n	800bbce <mem_malloc+0x3e>
    return NULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e0cd      	b.n	800bd6a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bbce:	4869      	ldr	r0, [pc, #420]	; (800bd74 <mem_malloc+0x1e4>)
 800bbd0:	f00c fe5e 	bl	8018890 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bbd4:	4b68      	ldr	r3, [pc, #416]	; (800bd78 <mem_malloc+0x1e8>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fcfd 	bl	800b5d8 <mem_to_ptr>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	83fb      	strh	r3, [r7, #30]
 800bbe2:	e0b7      	b.n	800bd54 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bbe4:	8bfb      	ldrh	r3, [r7, #30]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fce4 	bl	800b5b4 <ptr_to_mem>
 800bbec:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	791b      	ldrb	r3, [r3, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f040 80a7 	bne.w	800bd46 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	881b      	ldrh	r3, [r3, #0]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	8bfb      	ldrh	r3, [r7, #30]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	f1a3 0208 	sub.w	r2, r3, #8
 800bc06:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	f0c0 809c 	bcc.w	800bd46 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	8bfb      	ldrh	r3, [r7, #30]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	f1a3 0208 	sub.w	r2, r3, #8
 800bc1c:	8bbb      	ldrh	r3, [r7, #28]
 800bc1e:	3314      	adds	r3, #20
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d333      	bcc.n	800bc8c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bc24:	8bfa      	ldrh	r2, [r7, #30]
 800bc26:	8bbb      	ldrh	r3, [r7, #28]
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bc30:	8a7b      	ldrh	r3, [r7, #18]
 800bc32:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc36:	d106      	bne.n	800bc46 <mem_malloc+0xb6>
 800bc38:	4b50      	ldr	r3, [pc, #320]	; (800bd7c <mem_malloc+0x1ec>)
 800bc3a:	f240 3287 	movw	r2, #903	; 0x387
 800bc3e:	4950      	ldr	r1, [pc, #320]	; (800bd80 <mem_malloc+0x1f0>)
 800bc40:	4850      	ldr	r0, [pc, #320]	; (800bd84 <mem_malloc+0x1f4>)
 800bc42:	f00c ff73 	bl	8018b2c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bc46:	8a7b      	ldrh	r3, [r7, #18]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff fcb3 	bl	800b5b4 <ptr_to_mem>
 800bc4e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	881a      	ldrh	r2, [r3, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8bfa      	ldrh	r2, [r7, #30]
 800bc62:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	8a7a      	ldrh	r2, [r7, #18]
 800bc68:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc78:	d00b      	beq.n	800bc92 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fc98 	bl	800b5b4 <ptr_to_mem>
 800bc84:	4602      	mov	r2, r0
 800bc86:	8a7b      	ldrh	r3, [r7, #18]
 800bc88:	8053      	strh	r3, [r2, #2]
 800bc8a:	e002      	b.n	800bc92 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bc92:	4b39      	ldr	r3, [pc, #228]	; (800bd78 <mem_malloc+0x1e8>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d127      	bne.n	800bcec <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bc9c:	4b36      	ldr	r3, [pc, #216]	; (800bd78 <mem_malloc+0x1e8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bca2:	e005      	b.n	800bcb0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff fc83 	bl	800b5b4 <ptr_to_mem>
 800bcae:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	791b      	ldrb	r3, [r3, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <mem_malloc+0x132>
 800bcb8:	4b33      	ldr	r3, [pc, #204]	; (800bd88 <mem_malloc+0x1f8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	69ba      	ldr	r2, [r7, #24]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d1f0      	bne.n	800bca4 <mem_malloc+0x114>
          }
          lfree = cur;
 800bcc2:	4a2d      	ldr	r2, [pc, #180]	; (800bd78 <mem_malloc+0x1e8>)
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bcc8:	4b2b      	ldr	r3, [pc, #172]	; (800bd78 <mem_malloc+0x1e8>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <mem_malloc+0x1f8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d00b      	beq.n	800bcec <mem_malloc+0x15c>
 800bcd4:	4b28      	ldr	r3, [pc, #160]	; (800bd78 <mem_malloc+0x1e8>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	791b      	ldrb	r3, [r3, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <mem_malloc+0x15c>
 800bcde:	4b27      	ldr	r3, [pc, #156]	; (800bd7c <mem_malloc+0x1ec>)
 800bce0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bce4:	4929      	ldr	r1, [pc, #164]	; (800bd8c <mem_malloc+0x1fc>)
 800bce6:	4827      	ldr	r0, [pc, #156]	; (800bd84 <mem_malloc+0x1f4>)
 800bce8:	f00c ff20 	bl	8018b2c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bcec:	4821      	ldr	r0, [pc, #132]	; (800bd74 <mem_malloc+0x1e4>)
 800bcee:	f00c fdde 	bl	80188ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bcf2:	8bba      	ldrh	r2, [r7, #28]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	4a23      	ldr	r2, [pc, #140]	; (800bd88 <mem_malloc+0x1f8>)
 800bcfc:	6812      	ldr	r2, [r2, #0]
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d906      	bls.n	800bd10 <mem_malloc+0x180>
 800bd02:	4b1e      	ldr	r3, [pc, #120]	; (800bd7c <mem_malloc+0x1ec>)
 800bd04:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bd08:	4921      	ldr	r1, [pc, #132]	; (800bd90 <mem_malloc+0x200>)
 800bd0a:	481e      	ldr	r0, [pc, #120]	; (800bd84 <mem_malloc+0x1f4>)
 800bd0c:	f00c ff0e 	bl	8018b2c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d006      	beq.n	800bd28 <mem_malloc+0x198>
 800bd1a:	4b18      	ldr	r3, [pc, #96]	; (800bd7c <mem_malloc+0x1ec>)
 800bd1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bd20:	491c      	ldr	r1, [pc, #112]	; (800bd94 <mem_malloc+0x204>)
 800bd22:	4818      	ldr	r0, [pc, #96]	; (800bd84 <mem_malloc+0x1f4>)
 800bd24:	f00c ff02 	bl	8018b2c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <mem_malloc+0x1b0>
 800bd32:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <mem_malloc+0x1ec>)
 800bd34:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bd38:	4917      	ldr	r1, [pc, #92]	; (800bd98 <mem_malloc+0x208>)
 800bd3a:	4812      	ldr	r0, [pc, #72]	; (800bd84 <mem_malloc+0x1f4>)
 800bd3c:	f00c fef6 	bl	8018b2c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3308      	adds	r3, #8
 800bd44:	e011      	b.n	800bd6a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fc33 	bl	800b5b4 <ptr_to_mem>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd54:	8bfa      	ldrh	r2, [r7, #30]
 800bd56:	8bbb      	ldrh	r3, [r7, #28]
 800bd58:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	f4ff af41 	bcc.w	800bbe4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bd62:	4804      	ldr	r0, [pc, #16]	; (800bd74 <mem_malloc+0x1e4>)
 800bd64:	f00c fda3 	bl	80188ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3720      	adds	r7, #32
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	2000e0a0 	.word	0x2000e0a0
 800bd78:	2000e0a4 	.word	0x2000e0a4
 800bd7c:	0801addc 	.word	0x0801addc
 800bd80:	0801afa0 	.word	0x0801afa0
 800bd84:	0801ae24 	.word	0x0801ae24
 800bd88:	2000e09c 	.word	0x2000e09c
 800bd8c:	0801afb4 	.word	0x0801afb4
 800bd90:	0801afd0 	.word	0x0801afd0
 800bd94:	0801b000 	.word	0x0801b000
 800bd98:	0801b030 	.word	0x0801b030

0800bd9c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	3303      	adds	r3, #3
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	e011      	b.n	800bde2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4413      	add	r3, r2
 800bdda:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	885b      	ldrh	r3, [r3, #2]
 800bde6:	461a      	mov	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4293      	cmp	r3, r2
 800bdec:	dbe7      	blt.n	800bdbe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be02:	2300      	movs	r3, #0
 800be04:	80fb      	strh	r3, [r7, #6]
 800be06:	e009      	b.n	800be1c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	4a08      	ldr	r2, [pc, #32]	; (800be2c <memp_init+0x30>)
 800be0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff ffc3 	bl	800bd9c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	3301      	adds	r3, #1
 800be1a:	80fb      	strh	r3, [r7, #6]
 800be1c:	88fb      	ldrh	r3, [r7, #6]
 800be1e:	2b0c      	cmp	r3, #12
 800be20:	d9f2      	bls.n	800be08 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08027d20 	.word	0x08027d20

0800be30 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800be38:	f00c fd6c 	bl	8018914 <sys_arch_protect>
 800be3c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d015      	beq.n	800be78 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f003 0303 	and.w	r3, r3, #3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d006      	beq.n	800be6e <do_memp_malloc_pool+0x3e>
 800be60:	4b09      	ldr	r3, [pc, #36]	; (800be88 <do_memp_malloc_pool+0x58>)
 800be62:	f44f 728c 	mov.w	r2, #280	; 0x118
 800be66:	4909      	ldr	r1, [pc, #36]	; (800be8c <do_memp_malloc_pool+0x5c>)
 800be68:	4809      	ldr	r0, [pc, #36]	; (800be90 <do_memp_malloc_pool+0x60>)
 800be6a:	f00c fe5f 	bl	8018b2c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f00c fd5e 	bl	8018930 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	e003      	b.n	800be80 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f00c fd59 	bl	8018930 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0801b054 	.word	0x0801b054
 800be8c:	0801b084 	.word	0x0801b084
 800be90:	0801b0a8 	.word	0x0801b0a8

0800be94 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <memp_malloc_pool+0x1c>
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <memp_malloc_pool+0x38>)
 800bea4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bea8:	4909      	ldr	r1, [pc, #36]	; (800bed0 <memp_malloc_pool+0x3c>)
 800beaa:	480a      	ldr	r0, [pc, #40]	; (800bed4 <memp_malloc_pool+0x40>)
 800beac:	f00c fe3e 	bl	8018b2c <iprintf>
  if (desc == NULL) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d101      	bne.n	800beba <memp_malloc_pool+0x26>
    return NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e003      	b.n	800bec2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff ffb8 	bl	800be30 <do_memp_malloc_pool>
 800bec0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	0801b054 	.word	0x0801b054
 800bed0:	0801b0d0 	.word	0x0801b0d0
 800bed4:	0801b0a8 	.word	0x0801b0a8

0800bed8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bee2:	79fb      	ldrb	r3, [r7, #7]
 800bee4:	2b0c      	cmp	r3, #12
 800bee6:	d908      	bls.n	800befa <memp_malloc+0x22>
 800bee8:	4b0a      	ldr	r3, [pc, #40]	; (800bf14 <memp_malloc+0x3c>)
 800beea:	f240 1257 	movw	r2, #343	; 0x157
 800beee:	490a      	ldr	r1, [pc, #40]	; (800bf18 <memp_malloc+0x40>)
 800bef0:	480a      	ldr	r0, [pc, #40]	; (800bf1c <memp_malloc+0x44>)
 800bef2:	f00c fe1b 	bl	8018b2c <iprintf>
 800bef6:	2300      	movs	r3, #0
 800bef8:	e008      	b.n	800bf0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <memp_malloc+0x48>)
 800befe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff ff94 	bl	800be30 <do_memp_malloc_pool>
 800bf08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	0801b054 	.word	0x0801b054
 800bf18:	0801b0e4 	.word	0x0801b0e4
 800bf1c:	0801b0a8 	.word	0x0801b0a8
 800bf20:	08027d20 	.word	0x08027d20

0800bf24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <do_memp_free_pool+0x22>
 800bf38:	4b0d      	ldr	r3, [pc, #52]	; (800bf70 <do_memp_free_pool+0x4c>)
 800bf3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bf3e:	490d      	ldr	r1, [pc, #52]	; (800bf74 <do_memp_free_pool+0x50>)
 800bf40:	480d      	ldr	r0, [pc, #52]	; (800bf78 <do_memp_free_pool+0x54>)
 800bf42:	f00c fdf3 	bl	8018b2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bf4a:	f00c fce3 	bl	8018914 <sys_arch_protect>
 800bf4e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bf62:	68b8      	ldr	r0, [r7, #8]
 800bf64:	f00c fce4 	bl	8018930 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bf68:	bf00      	nop
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	0801b054 	.word	0x0801b054
 800bf74:	0801b104 	.word	0x0801b104
 800bf78:	0801b0a8 	.word	0x0801b0a8

0800bf7c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <memp_free_pool+0x1e>
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <memp_free_pool+0x3c>)
 800bf8e:	f240 1295 	movw	r2, #405	; 0x195
 800bf92:	490a      	ldr	r1, [pc, #40]	; (800bfbc <memp_free_pool+0x40>)
 800bf94:	480a      	ldr	r0, [pc, #40]	; (800bfc0 <memp_free_pool+0x44>)
 800bf96:	f00c fdc9 	bl	8018b2c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d007      	beq.n	800bfb0 <memp_free_pool+0x34>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d004      	beq.n	800bfb0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff ffbb 	bl	800bf24 <do_memp_free_pool>
 800bfae:	e000      	b.n	800bfb2 <memp_free_pool+0x36>
    return;
 800bfb0:	bf00      	nop
}
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	0801b054 	.word	0x0801b054
 800bfbc:	0801b0d0 	.word	0x0801b0d0
 800bfc0:	0801b0a8 	.word	0x0801b0a8

0800bfc4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	6039      	str	r1, [r7, #0]
 800bfce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	2b0c      	cmp	r3, #12
 800bfd4:	d907      	bls.n	800bfe6 <memp_free+0x22>
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <memp_free+0x44>)
 800bfd8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bfdc:	490b      	ldr	r1, [pc, #44]	; (800c00c <memp_free+0x48>)
 800bfde:	480c      	ldr	r0, [pc, #48]	; (800c010 <memp_free+0x4c>)
 800bfe0:	f00c fda4 	bl	8018b2c <iprintf>
 800bfe4:	e00c      	b.n	800c000 <memp_free+0x3c>

  if (mem == NULL) {
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d008      	beq.n	800bffe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	4a09      	ldr	r2, [pc, #36]	; (800c014 <memp_free+0x50>)
 800bff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff ff94 	bl	800bf24 <do_memp_free_pool>
 800bffc:	e000      	b.n	800c000 <memp_free+0x3c>
    return;
 800bffe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	0801b054 	.word	0x0801b054
 800c00c:	0801b124 	.word	0x0801b124
 800c010:	0801b0a8 	.word	0x0801b0a8
 800c014:	08027d20 	.word	0x08027d20

0800c018 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c018:	b480      	push	{r7}
 800c01a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c01c:	bf00      	nop
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
	...

0800c028 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d108      	bne.n	800c04e <netif_add+0x26>
 800c03c:	4b5b      	ldr	r3, [pc, #364]	; (800c1ac <netif_add+0x184>)
 800c03e:	f240 1227 	movw	r2, #295	; 0x127
 800c042:	495b      	ldr	r1, [pc, #364]	; (800c1b0 <netif_add+0x188>)
 800c044:	485b      	ldr	r0, [pc, #364]	; (800c1b4 <netif_add+0x18c>)
 800c046:	f00c fd71 	bl	8018b2c <iprintf>
 800c04a:	2300      	movs	r3, #0
 800c04c:	e0a9      	b.n	800c1a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	2b00      	cmp	r3, #0
 800c052:	d108      	bne.n	800c066 <netif_add+0x3e>
 800c054:	4b55      	ldr	r3, [pc, #340]	; (800c1ac <netif_add+0x184>)
 800c056:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c05a:	4957      	ldr	r1, [pc, #348]	; (800c1b8 <netif_add+0x190>)
 800c05c:	4855      	ldr	r0, [pc, #340]	; (800c1b4 <netif_add+0x18c>)
 800c05e:	f00c fd65 	bl	8018b2c <iprintf>
 800c062:	2300      	movs	r3, #0
 800c064:	e09d      	b.n	800c1a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c06c:	4b53      	ldr	r3, [pc, #332]	; (800c1bc <netif_add+0x194>)
 800c06e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c076:	4b51      	ldr	r3, [pc, #324]	; (800c1bc <netif_add+0x194>)
 800c078:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c080:	4b4e      	ldr	r3, [pc, #312]	; (800c1bc <netif_add+0x194>)
 800c082:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4a49      	ldr	r2, [pc, #292]	; (800c1c0 <netif_add+0x198>)
 800c09a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	3324      	adds	r3, #36	; 0x24
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f00c fdd9 	bl	8018c6a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6a3a      	ldr	r2, [r7, #32]
 800c0c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c0c4:	4b3f      	ldr	r3, [pc, #252]	; (800c1c4 <netif_add+0x19c>)
 800c0c6:	781a      	ldrb	r2, [r3, #0]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f000 f914 	bl	800c308 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	4798      	blx	r3
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <netif_add+0xc8>
    return NULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e058      	b.n	800c1a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0f6:	2bff      	cmp	r3, #255	; 0xff
 800c0f8:	d103      	bne.n	800c102 <netif_add+0xda>
        netif->num = 0;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c106:	4b30      	ldr	r3, [pc, #192]	; (800c1c8 <netif_add+0x1a0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e02b      	b.n	800c166 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	429a      	cmp	r2, r3
 800c114:	d106      	bne.n	800c124 <netif_add+0xfc>
 800c116:	4b25      	ldr	r3, [pc, #148]	; (800c1ac <netif_add+0x184>)
 800c118:	f240 128b 	movw	r2, #395	; 0x18b
 800c11c:	492b      	ldr	r1, [pc, #172]	; (800c1cc <netif_add+0x1a4>)
 800c11e:	4825      	ldr	r0, [pc, #148]	; (800c1b4 <netif_add+0x18c>)
 800c120:	f00c fd04 	bl	8018b2c <iprintf>
        num_netifs++;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2bff      	cmp	r3, #255	; 0xff
 800c12e:	dd06      	ble.n	800c13e <netif_add+0x116>
 800c130:	4b1e      	ldr	r3, [pc, #120]	; (800c1ac <netif_add+0x184>)
 800c132:	f240 128d 	movw	r2, #397	; 0x18d
 800c136:	4926      	ldr	r1, [pc, #152]	; (800c1d0 <netif_add+0x1a8>)
 800c138:	481e      	ldr	r0, [pc, #120]	; (800c1b4 <netif_add+0x18c>)
 800c13a:	f00c fcf7 	bl	8018b2c <iprintf>
        if (netif2->num == netif->num) {
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d108      	bne.n	800c160 <netif_add+0x138>
          netif->num++;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c154:	3301      	adds	r3, #1
 800c156:	b2da      	uxtb	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c15e:	e005      	b.n	800c16c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	617b      	str	r3, [r7, #20]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1d0      	bne.n	800c10e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1be      	bne.n	800c0f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c178:	2bfe      	cmp	r3, #254	; 0xfe
 800c17a:	d103      	bne.n	800c184 <netif_add+0x15c>
    netif_num = 0;
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <netif_add+0x19c>)
 800c17e:	2200      	movs	r2, #0
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	e006      	b.n	800c192 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c18a:	3301      	adds	r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <netif_add+0x19c>)
 800c190:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <netif_add+0x1a0>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c19a:	4a0b      	ldr	r2, [pc, #44]	; (800c1c8 <netif_add+0x1a0>)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0801b140 	.word	0x0801b140
 800c1b0:	0801b1d4 	.word	0x0801b1d4
 800c1b4:	0801b190 	.word	0x0801b190
 800c1b8:	0801b1f0 	.word	0x0801b1f0
 800c1bc:	08027da4 	.word	0x08027da4
 800c1c0:	0800c5eb 	.word	0x0800c5eb
 800c1c4:	2001119c 	.word	0x2001119c
 800c1c8:	20011194 	.word	0x20011194
 800c1cc:	0801b214 	.word	0x0801b214
 800c1d0:	0801b228 	.word	0x0801b228

0800c1d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f002 ffab 	bl	800f13c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f008 f825 	bl	8014238 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c1ee:	bf00      	nop
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <netif_do_set_ipaddr+0x20>
 800c20a:	4b1d      	ldr	r3, [pc, #116]	; (800c280 <netif_do_set_ipaddr+0x88>)
 800c20c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c210:	491c      	ldr	r1, [pc, #112]	; (800c284 <netif_do_set_ipaddr+0x8c>)
 800c212:	481d      	ldr	r0, [pc, #116]	; (800c288 <netif_do_set_ipaddr+0x90>)
 800c214:	f00c fc8a 	bl	8018b2c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <netif_do_set_ipaddr+0x34>
 800c21e:	4b18      	ldr	r3, [pc, #96]	; (800c280 <netif_do_set_ipaddr+0x88>)
 800c220:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c224:	4917      	ldr	r1, [pc, #92]	; (800c284 <netif_do_set_ipaddr+0x8c>)
 800c226:	4818      	ldr	r0, [pc, #96]	; (800c288 <netif_do_set_ipaddr+0x90>)
 800c228:	f00c fc80 	bl	8018b2c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3304      	adds	r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d01c      	beq.n	800c274 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3304      	adds	r3, #4
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c24a:	f107 0314 	add.w	r3, r7, #20
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff ffbf 	bl	800c1d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <netif_do_set_ipaddr+0x6a>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	e000      	b.n	800c264 <netif_do_set_ipaddr+0x6c>
 800c262:	2300      	movs	r3, #0
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c268:	2101      	movs	r1, #1
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 f8d2 	bl	800c414 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	0801b140 	.word	0x0801b140
 800c284:	0801b258 	.word	0x0801b258
 800c288:	0801b190 	.word	0x0801b190

0800c28c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d00a      	beq.n	800c2bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <netif_do_set_netmask+0x26>
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	e000      	b.n	800c2b4 <netif_do_set_netmask+0x28>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e000      	b.n	800c2be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b085      	sub	sp, #20
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	330c      	adds	r3, #12
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d00a      	beq.n	800c2fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <netif_do_set_gw+0x26>
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	e000      	b.n	800c2f2 <netif_do_set_gw+0x28>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b088      	sub	sp, #32
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d101      	bne.n	800c328 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c324:	4b1c      	ldr	r3, [pc, #112]	; (800c398 <netif_set_addr+0x90>)
 800c326:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c32e:	4b1a      	ldr	r3, [pc, #104]	; (800c398 <netif_set_addr+0x90>)
 800c330:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d101      	bne.n	800c33c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c338:	4b17      	ldr	r3, [pc, #92]	; (800c398 <netif_set_addr+0x90>)
 800c33a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <netif_set_addr+0x42>
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <netif_set_addr+0x46>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e000      	b.n	800c350 <netif_set_addr+0x48>
 800c34e:	2300      	movs	r3, #0
 800c350:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c358:	f107 0310 	add.w	r3, r7, #16
 800c35c:	461a      	mov	r2, r3
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f7ff ff49 	bl	800c1f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ff8e 	bl	800c28c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff ffa8 	bl	800c2ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c380:	f107 0310 	add.w	r3, r7, #16
 800c384:	461a      	mov	r2, r3
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff ff35 	bl	800c1f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c38e:	bf00      	nop
 800c390:	3720      	adds	r7, #32
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	08027da4 	.word	0x08027da4

0800c39c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c3a4:	4a04      	ldr	r2, [pc, #16]	; (800c3b8 <netif_set_default+0x1c>)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	20011198 	.word	0x20011198

0800c3bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d107      	bne.n	800c3da <netif_set_up+0x1e>
 800c3ca:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <netif_set_up+0x4c>)
 800c3cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c3d0:	490e      	ldr	r1, [pc, #56]	; (800c40c <netif_set_up+0x50>)
 800c3d2:	480f      	ldr	r0, [pc, #60]	; (800c410 <netif_set_up+0x54>)
 800c3d4:	f00c fbaa 	bl	8018b2c <iprintf>
 800c3d8:	e013      	b.n	800c402 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10c      	bne.n	800c402 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3ee:	f043 0301 	orr.w	r3, r3, #1
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c3fa:	2103      	movs	r1, #3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f809 	bl	800c414 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	0801b140 	.word	0x0801b140
 800c40c:	0801b2c8 	.word	0x0801b2c8
 800c410:	0801b190 	.word	0x0801b190

0800c414 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <netif_issue_reports+0x20>
 800c426:	4b18      	ldr	r3, [pc, #96]	; (800c488 <netif_issue_reports+0x74>)
 800c428:	f240 326d 	movw	r2, #877	; 0x36d
 800c42c:	4917      	ldr	r1, [pc, #92]	; (800c48c <netif_issue_reports+0x78>)
 800c42e:	4818      	ldr	r0, [pc, #96]	; (800c490 <netif_issue_reports+0x7c>)
 800c430:	f00c fb7c 	bl	8018b2c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c43a:	f003 0304 	and.w	r3, r3, #4
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d01e      	beq.n	800c480 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c448:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d017      	beq.n	800c480 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	2b00      	cmp	r3, #0
 800c458:	d013      	beq.n	800c482 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3304      	adds	r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00e      	beq.n	800c482 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c46a:	f003 0308 	and.w	r3, r3, #8
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d007      	beq.n	800c482 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3304      	adds	r3, #4
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f00a fcdd 	bl	8016e38 <etharp_request>
 800c47e:	e000      	b.n	800c482 <netif_issue_reports+0x6e>
    return;
 800c480:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0801b140 	.word	0x0801b140
 800c48c:	0801b2e4 	.word	0x0801b2e4
 800c490:	0801b190 	.word	0x0801b190

0800c494 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d107      	bne.n	800c4b2 <netif_set_down+0x1e>
 800c4a2:	4b12      	ldr	r3, [pc, #72]	; (800c4ec <netif_set_down+0x58>)
 800c4a4:	f240 329b 	movw	r2, #923	; 0x39b
 800c4a8:	4911      	ldr	r1, [pc, #68]	; (800c4f0 <netif_set_down+0x5c>)
 800c4aa:	4812      	ldr	r0, [pc, #72]	; (800c4f4 <netif_set_down+0x60>)
 800c4ac:	f00c fb3e 	bl	8018b2c <iprintf>
 800c4b0:	e019      	b.n	800c4e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d012      	beq.n	800c4e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4c6:	f023 0301 	bic.w	r3, r3, #1
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4d8:	f003 0308 	and.w	r3, r3, #8
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f00a f863 	bl	80165ac <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	0801b140 	.word	0x0801b140
 800c4f0:	0801b308 	.word	0x0801b308
 800c4f4:	0801b190 	.word	0x0801b190

0800c4f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d107      	bne.n	800c516 <netif_set_link_up+0x1e>
 800c506:	4b15      	ldr	r3, [pc, #84]	; (800c55c <netif_set_link_up+0x64>)
 800c508:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c50c:	4914      	ldr	r1, [pc, #80]	; (800c560 <netif_set_link_up+0x68>)
 800c50e:	4815      	ldr	r0, [pc, #84]	; (800c564 <netif_set_link_up+0x6c>)
 800c510:	f00c fb0c 	bl	8018b2c <iprintf>
 800c514:	e01e      	b.n	800c554 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d117      	bne.n	800c554 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c52a:	f043 0304 	orr.w	r3, r3, #4
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f008 faa8 	bl	8014a8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c53c:	2103      	movs	r1, #3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff ff68 	bl	800c414 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	69db      	ldr	r3, [r3, #28]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <netif_set_link_up+0x5c>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	69db      	ldr	r3, [r3, #28]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	0801b140 	.word	0x0801b140
 800c560:	0801b328 	.word	0x0801b328
 800c564:	0801b190 	.word	0x0801b190

0800c568 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d107      	bne.n	800c586 <netif_set_link_down+0x1e>
 800c576:	4b11      	ldr	r3, [pc, #68]	; (800c5bc <netif_set_link_down+0x54>)
 800c578:	f240 4206 	movw	r2, #1030	; 0x406
 800c57c:	4910      	ldr	r1, [pc, #64]	; (800c5c0 <netif_set_link_down+0x58>)
 800c57e:	4811      	ldr	r0, [pc, #68]	; (800c5c4 <netif_set_link_down+0x5c>)
 800c580:	f00c fad4 	bl	8018b2c <iprintf>
 800c584:	e017      	b.n	800c5b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d010      	beq.n	800c5b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c59a:	f023 0304 	bic.w	r3, r3, #4
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <netif_set_link_down+0x4e>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	69db      	ldr	r3, [r3, #28]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	0801b140 	.word	0x0801b140
 800c5c0:	0801b34c 	.word	0x0801b34c
 800c5c4:	0801b190 	.word	0x0801b190

0800c5c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	61da      	str	r2, [r3, #28]
  }
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b085      	sub	sp, #20
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c5f6:	f06f 030b 	mvn.w	r3, #11
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
	...

0800c608 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d013      	beq.n	800c640 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <netif_get_by_index+0x48>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60fb      	str	r3, [r7, #12]
 800c61e:	e00c      	b.n	800c63a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c626:	3301      	adds	r3, #1
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	79fa      	ldrb	r2, [r7, #7]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d101      	bne.n	800c634 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	e006      	b.n	800c642 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1ef      	bne.n	800c620 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	20011194 	.word	0x20011194

0800c654 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c65a:	f00c f95b 	bl	8018914 <sys_arch_protect>
 800c65e:	6038      	str	r0, [r7, #0]
 800c660:	4b0d      	ldr	r3, [pc, #52]	; (800c698 <pbuf_free_ooseq+0x44>)
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	6838      	ldr	r0, [r7, #0]
 800c668:	f00c f962 	bl	8018930 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c66c:	4b0b      	ldr	r3, [pc, #44]	; (800c69c <pbuf_free_ooseq+0x48>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	607b      	str	r3, [r7, #4]
 800c672:	e00a      	b.n	800c68a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f002 fd9b 	bl	800f1b8 <tcp_free_ooseq>
      return;
 800c682:	e005      	b.n	800c690 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	607b      	str	r3, [r7, #4]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1f1      	bne.n	800c674 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2001119d 	.word	0x2001119d
 800c69c:	200111ac 	.word	0x200111ac

0800c6a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c6a8:	f7ff ffd4 	bl	800c654 <pbuf_free_ooseq>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c6ba:	f00c f92b 	bl	8018914 <sys_arch_protect>
 800c6be:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <pbuf_pool_is_empty+0x4c>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c6c6:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <pbuf_pool_is_empty+0x4c>)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f00c f92f 	bl	8018930 <sys_arch_unprotect>

  if (!queued) {
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10f      	bne.n	800c6f8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c6d8:	2100      	movs	r1, #0
 800c6da:	480a      	ldr	r0, [pc, #40]	; (800c704 <pbuf_pool_is_empty+0x50>)
 800c6dc:	f7fe f834 	bl	800a748 <tcpip_try_callback>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d008      	beq.n	800c6f8 <pbuf_pool_is_empty+0x44>
 800c6e6:	f00c f915 	bl	8018914 <sys_arch_protect>
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	4b04      	ldr	r3, [pc, #16]	; (800c700 <pbuf_pool_is_empty+0x4c>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f00c f91c 	bl	8018930 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c6f8:	bf00      	nop
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	2001119d 	.word	0x2001119d
 800c704:	0800c6a1 	.word	0x0800c6a1

0800c708 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4611      	mov	r1, r2
 800c714:	461a      	mov	r2, r3
 800c716:	460b      	mov	r3, r1
 800c718:	80fb      	strh	r3, [r7, #6]
 800c71a:	4613      	mov	r3, r2
 800c71c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2200      	movs	r2, #0
 800c722:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	88fa      	ldrh	r2, [r7, #6]
 800c72e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	88ba      	ldrh	r2, [r7, #4]
 800c734:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c736:	8b3b      	ldrh	r3, [r7, #24]
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	7f3a      	ldrb	r2, [r7, #28]
 800c742:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2201      	movs	r2, #1
 800c748:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	73da      	strb	r2, [r3, #15]
}
 800c750:	bf00      	nop
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08c      	sub	sp, #48	; 0x30
 800c760:	af02      	add	r7, sp, #8
 800c762:	4603      	mov	r3, r0
 800c764:	71fb      	strb	r3, [r7, #7]
 800c766:	460b      	mov	r3, r1
 800c768:	80bb      	strh	r3, [r7, #4]
 800c76a:	4613      	mov	r3, r2
 800c76c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c772:	887b      	ldrh	r3, [r7, #2]
 800c774:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c778:	d07f      	beq.n	800c87a <pbuf_alloc+0x11e>
 800c77a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c77e:	f300 80c8 	bgt.w	800c912 <pbuf_alloc+0x1b6>
 800c782:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c786:	d010      	beq.n	800c7aa <pbuf_alloc+0x4e>
 800c788:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c78c:	f300 80c1 	bgt.w	800c912 <pbuf_alloc+0x1b6>
 800c790:	2b01      	cmp	r3, #1
 800c792:	d002      	beq.n	800c79a <pbuf_alloc+0x3e>
 800c794:	2b41      	cmp	r3, #65	; 0x41
 800c796:	f040 80bc 	bne.w	800c912 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c79a:	887a      	ldrh	r2, [r7, #2]
 800c79c:	88bb      	ldrh	r3, [r7, #4]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	f000 f8d1 	bl	800c948 <pbuf_alloc_reference>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c7a8:	e0bd      	b.n	800c926 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c7b2:	88bb      	ldrh	r3, [r7, #4]
 800c7b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c7b6:	200c      	movs	r0, #12
 800c7b8:	f7ff fb8e 	bl	800bed8 <memp_malloc>
 800c7bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d109      	bne.n	800c7d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c7c4:	f7ff ff76 	bl	800c6b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7d0:	f000 faa8 	bl	800cd24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e0a7      	b.n	800c928 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c7d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7da:	3303      	adds	r3, #3
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	f023 0303 	bic.w	r3, r3, #3
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	8b7a      	ldrh	r2, [r7, #26]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	bf28      	it	cs
 800c7f0:	4613      	movcs	r3, r2
 800c7f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7f6:	3310      	adds	r3, #16
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	3303      	adds	r3, #3
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	4618      	mov	r0, r3
 800c804:	89f9      	ldrh	r1, [r7, #14]
 800c806:	8b7a      	ldrh	r2, [r7, #26]
 800c808:	2300      	movs	r3, #0
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	887b      	ldrh	r3, [r7, #2]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	460b      	mov	r3, r1
 800c812:	4601      	mov	r1, r0
 800c814:	6938      	ldr	r0, [r7, #16]
 800c816:	f7ff ff77 	bl	800c708 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f003 0303 	and.w	r3, r3, #3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d006      	beq.n	800c834 <pbuf_alloc+0xd8>
 800c826:	4b42      	ldr	r3, [pc, #264]	; (800c930 <pbuf_alloc+0x1d4>)
 800c828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c82c:	4941      	ldr	r1, [pc, #260]	; (800c934 <pbuf_alloc+0x1d8>)
 800c82e:	4842      	ldr	r0, [pc, #264]	; (800c938 <pbuf_alloc+0x1dc>)
 800c830:	f00c f97c 	bl	8018b2c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c836:	3303      	adds	r3, #3
 800c838:	f023 0303 	bic.w	r3, r3, #3
 800c83c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c840:	d106      	bne.n	800c850 <pbuf_alloc+0xf4>
 800c842:	4b3b      	ldr	r3, [pc, #236]	; (800c930 <pbuf_alloc+0x1d4>)
 800c844:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c848:	493c      	ldr	r1, [pc, #240]	; (800c93c <pbuf_alloc+0x1e0>)
 800c84a:	483b      	ldr	r0, [pc, #236]	; (800c938 <pbuf_alloc+0x1dc>)
 800c84c:	f00c f96e 	bl	8018b2c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
 800c85a:	e002      	b.n	800c862 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c866:	8b7a      	ldrh	r2, [r7, #26]
 800c868:	89fb      	ldrh	r3, [r7, #14]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c872:	8b7b      	ldrh	r3, [r7, #26]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d19e      	bne.n	800c7b6 <pbuf_alloc+0x5a>
      break;
 800c878:	e055      	b.n	800c926 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c87a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c87c:	3303      	adds	r3, #3
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f023 0303 	bic.w	r3, r3, #3
 800c884:	b29a      	uxth	r2, r3
 800c886:	88bb      	ldrh	r3, [r7, #4]
 800c888:	3303      	adds	r3, #3
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	f023 0303 	bic.w	r3, r3, #3
 800c890:	b29b      	uxth	r3, r3
 800c892:	4413      	add	r3, r2
 800c894:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c896:	8b3b      	ldrh	r3, [r7, #24]
 800c898:	3310      	adds	r3, #16
 800c89a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c89c:	8b3a      	ldrh	r2, [r7, #24]
 800c89e:	88bb      	ldrh	r3, [r7, #4]
 800c8a0:	3303      	adds	r3, #3
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d306      	bcc.n	800c8b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c8aa:	8afa      	ldrh	r2, [r7, #22]
 800c8ac:	88bb      	ldrh	r3, [r7, #4]
 800c8ae:	3303      	adds	r3, #3
 800c8b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d201      	bcs.n	800c8bc <pbuf_alloc+0x160>
        return NULL;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e035      	b.n	800c928 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c8bc:	8afb      	ldrh	r3, [r7, #22]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff f966 	bl	800bb90 <mem_malloc>
 800c8c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <pbuf_alloc+0x174>
        return NULL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e02b      	b.n	800c928 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c8d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8d2:	3310      	adds	r3, #16
 800c8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3303      	adds	r3, #3
 800c8da:	f023 0303 	bic.w	r3, r3, #3
 800c8de:	4618      	mov	r0, r3
 800c8e0:	88b9      	ldrh	r1, [r7, #4]
 800c8e2:	88ba      	ldrh	r2, [r7, #4]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	887b      	ldrh	r3, [r7, #2]
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4601      	mov	r1, r0
 800c8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8f2:	f7ff ff09 	bl	800c708 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f003 0303 	and.w	r3, r3, #3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d010      	beq.n	800c924 <pbuf_alloc+0x1c8>
 800c902:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <pbuf_alloc+0x1d4>)
 800c904:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c908:	490d      	ldr	r1, [pc, #52]	; (800c940 <pbuf_alloc+0x1e4>)
 800c90a:	480b      	ldr	r0, [pc, #44]	; (800c938 <pbuf_alloc+0x1dc>)
 800c90c:	f00c f90e 	bl	8018b2c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c910:	e008      	b.n	800c924 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c912:	4b07      	ldr	r3, [pc, #28]	; (800c930 <pbuf_alloc+0x1d4>)
 800c914:	f240 1227 	movw	r2, #295	; 0x127
 800c918:	490a      	ldr	r1, [pc, #40]	; (800c944 <pbuf_alloc+0x1e8>)
 800c91a:	4807      	ldr	r0, [pc, #28]	; (800c938 <pbuf_alloc+0x1dc>)
 800c91c:	f00c f906 	bl	8018b2c <iprintf>
      return NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	e001      	b.n	800c928 <pbuf_alloc+0x1cc>
      break;
 800c924:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3728      	adds	r7, #40	; 0x28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	0801b370 	.word	0x0801b370
 800c934:	0801b3a0 	.word	0x0801b3a0
 800c938:	0801b3d0 	.word	0x0801b3d0
 800c93c:	0801b3f8 	.word	0x0801b3f8
 800c940:	0801b42c 	.word	0x0801b42c
 800c944:	0801b458 	.word	0x0801b458

0800c948 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af02      	add	r7, sp, #8
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	807b      	strh	r3, [r7, #2]
 800c954:	4613      	mov	r3, r2
 800c956:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c958:	883b      	ldrh	r3, [r7, #0]
 800c95a:	2b41      	cmp	r3, #65	; 0x41
 800c95c:	d009      	beq.n	800c972 <pbuf_alloc_reference+0x2a>
 800c95e:	883b      	ldrh	r3, [r7, #0]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d006      	beq.n	800c972 <pbuf_alloc_reference+0x2a>
 800c964:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <pbuf_alloc_reference+0x5c>)
 800c966:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c96a:	490f      	ldr	r1, [pc, #60]	; (800c9a8 <pbuf_alloc_reference+0x60>)
 800c96c:	480f      	ldr	r0, [pc, #60]	; (800c9ac <pbuf_alloc_reference+0x64>)
 800c96e:	f00c f8dd 	bl	8018b2c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c972:	200b      	movs	r0, #11
 800c974:	f7ff fab0 	bl	800bed8 <memp_malloc>
 800c978:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	e00b      	b.n	800c99c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c984:	8879      	ldrh	r1, [r7, #2]
 800c986:	887a      	ldrh	r2, [r7, #2]
 800c988:	2300      	movs	r3, #0
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	883b      	ldrh	r3, [r7, #0]
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	460b      	mov	r3, r1
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7ff feb7 	bl	800c708 <pbuf_init_alloced_pbuf>
  return p;
 800c99a:	68fb      	ldr	r3, [r7, #12]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	0801b370 	.word	0x0801b370
 800c9a8:	0801b474 	.word	0x0801b474
 800c9ac:	0801b3d0 	.word	0x0801b3d0

0800c9b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b088      	sub	sp, #32
 800c9b4:	af02      	add	r7, sp, #8
 800c9b6:	607b      	str	r3, [r7, #4]
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	81bb      	strh	r3, [r7, #12]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
 800c9c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c9c8:	8a7b      	ldrh	r3, [r7, #18]
 800c9ca:	3303      	adds	r3, #3
 800c9cc:	f023 0203 	bic.w	r2, r3, #3
 800c9d0:	89bb      	ldrh	r3, [r7, #12]
 800c9d2:	441a      	add	r2, r3
 800c9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d901      	bls.n	800c9de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e018      	b.n	800ca10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d007      	beq.n	800c9f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c9e4:	8a7b      	ldrh	r3, [r7, #18]
 800c9e6:	3303      	adds	r3, #3
 800c9e8:	f023 0303 	bic.w	r3, r3, #3
 800c9ec:	6a3a      	ldr	r2, [r7, #32]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	617b      	str	r3, [r7, #20]
 800c9f2:	e001      	b.n	800c9f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	89b9      	ldrh	r1, [r7, #12]
 800c9fc:	89ba      	ldrh	r2, [r7, #12]
 800c9fe:	2302      	movs	r3, #2
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	897b      	ldrh	r3, [r7, #10]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	460b      	mov	r3, r1
 800ca08:	6979      	ldr	r1, [r7, #20]
 800ca0a:	f7ff fe7d 	bl	800c708 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ca0e:	687b      	ldr	r3, [r7, #4]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d106      	bne.n	800ca38 <pbuf_realloc+0x20>
 800ca2a:	4b3a      	ldr	r3, [pc, #232]	; (800cb14 <pbuf_realloc+0xfc>)
 800ca2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ca30:	4939      	ldr	r1, [pc, #228]	; (800cb18 <pbuf_realloc+0x100>)
 800ca32:	483a      	ldr	r0, [pc, #232]	; (800cb1c <pbuf_realloc+0x104>)
 800ca34:	f00c f87a 	bl	8018b2c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	891b      	ldrh	r3, [r3, #8]
 800ca3c:	887a      	ldrh	r2, [r7, #2]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d263      	bcs.n	800cb0a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	891a      	ldrh	r2, [r3, #8]
 800ca46:	887b      	ldrh	r3, [r7, #2]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ca4c:	887b      	ldrh	r3, [r7, #2]
 800ca4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ca54:	e018      	b.n	800ca88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	895b      	ldrh	r3, [r3, #10]
 800ca5a:	897a      	ldrh	r2, [r7, #10]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	891a      	ldrh	r2, [r3, #8]
 800ca64:	893b      	ldrh	r3, [r7, #8]
 800ca66:	1ad3      	subs	r3, r2, r3
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d106      	bne.n	800ca88 <pbuf_realloc+0x70>
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <pbuf_realloc+0xfc>)
 800ca7c:	f240 12af 	movw	r2, #431	; 0x1af
 800ca80:	4927      	ldr	r1, [pc, #156]	; (800cb20 <pbuf_realloc+0x108>)
 800ca82:	4826      	ldr	r0, [pc, #152]	; (800cb1c <pbuf_realloc+0x104>)
 800ca84:	f00c f852 	bl	8018b2c <iprintf>
  while (rem_len > q->len) {
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	897a      	ldrh	r2, [r7, #10]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d8e1      	bhi.n	800ca56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7b1b      	ldrb	r3, [r3, #12]
 800ca96:	f003 030f 	and.w	r3, r3, #15
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d121      	bne.n	800cae2 <pbuf_realloc+0xca>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	895b      	ldrh	r3, [r3, #10]
 800caa2:	897a      	ldrh	r2, [r7, #10]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d01c      	beq.n	800cae2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	7b5b      	ldrb	r3, [r3, #13]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d116      	bne.n	800cae2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	897b      	ldrh	r3, [r7, #10]
 800cac0:	4413      	add	r3, r2
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	4619      	mov	r1, r3
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7fe ff58 	bl	800b97c <mem_trim>
 800cacc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d106      	bne.n	800cae2 <pbuf_realloc+0xca>
 800cad4:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <pbuf_realloc+0xfc>)
 800cad6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cada:	4912      	ldr	r1, [pc, #72]	; (800cb24 <pbuf_realloc+0x10c>)
 800cadc:	480f      	ldr	r0, [pc, #60]	; (800cb1c <pbuf_realloc+0x104>)
 800cade:	f00c f825 	bl	8018b2c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	897a      	ldrh	r2, [r7, #10]
 800cae6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	895a      	ldrh	r2, [r3, #10]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f000 f911 	bl	800cd24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	e000      	b.n	800cb0c <pbuf_realloc+0xf4>
    return;
 800cb0a:	bf00      	nop

}
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	0801b370 	.word	0x0801b370
 800cb18:	0801b488 	.word	0x0801b488
 800cb1c:	0801b3d0 	.word	0x0801b3d0
 800cb20:	0801b4a0 	.word	0x0801b4a0
 800cb24:	0801b4b8 	.word	0x0801b4b8

0800cb28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d106      	bne.n	800cb4a <pbuf_add_header_impl+0x22>
 800cb3c:	4b2b      	ldr	r3, [pc, #172]	; (800cbec <pbuf_add_header_impl+0xc4>)
 800cb3e:	f240 12df 	movw	r2, #479	; 0x1df
 800cb42:	492b      	ldr	r1, [pc, #172]	; (800cbf0 <pbuf_add_header_impl+0xc8>)
 800cb44:	482b      	ldr	r0, [pc, #172]	; (800cbf4 <pbuf_add_header_impl+0xcc>)
 800cb46:	f00b fff1 	bl	8018b2c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <pbuf_add_header_impl+0x30>
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb56:	d301      	bcc.n	800cb5c <pbuf_add_header_impl+0x34>
    return 1;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e043      	b.n	800cbe4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <pbuf_add_header_impl+0x3e>
    return 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e03e      	b.n	800cbe4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	891a      	ldrh	r2, [r3, #8]
 800cb6e:	8a7b      	ldrh	r3, [r7, #18]
 800cb70:	4413      	add	r3, r2
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	8a7a      	ldrh	r2, [r7, #18]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d901      	bls.n	800cb7e <pbuf_add_header_impl+0x56>
    return 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e032      	b.n	800cbe4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	7b1b      	ldrb	r3, [r3, #12]
 800cb82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cb84:	8a3b      	ldrh	r3, [r7, #16]
 800cb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00c      	beq.n	800cba8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	425b      	negs	r3, r3
 800cb96:	4413      	add	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3310      	adds	r3, #16
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d20d      	bcs.n	800cbc0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cba4:	2301      	movs	r3, #1
 800cba6:	e01d      	b.n	800cbe4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d006      	beq.n	800cbbc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	425b      	negs	r3, r3
 800cbb6:	4413      	add	r3, r2
 800cbb8:	617b      	str	r3, [r7, #20]
 800cbba:	e001      	b.n	800cbc0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e011      	b.n	800cbe4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	895a      	ldrh	r2, [r3, #10]
 800cbca:	8a7b      	ldrh	r3, [r7, #18]
 800cbcc:	4413      	add	r3, r2
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	891a      	ldrh	r2, [r3, #8]
 800cbd8:	8a7b      	ldrh	r3, [r7, #18]
 800cbda:	4413      	add	r3, r2
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	811a      	strh	r2, [r3, #8]


  return 0;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	0801b370 	.word	0x0801b370
 800cbf0:	0801b4d4 	.word	0x0801b4d4
 800cbf4:	0801b3d0 	.word	0x0801b3d0

0800cbf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cc02:	2200      	movs	r2, #0
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff ff8e 	bl	800cb28 <pbuf_add_header_impl>
 800cc0c:	4603      	mov	r3, r0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
	...

0800cc18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d106      	bne.n	800cc36 <pbuf_remove_header+0x1e>
 800cc28:	4b20      	ldr	r3, [pc, #128]	; (800ccac <pbuf_remove_header+0x94>)
 800cc2a:	f240 224b 	movw	r2, #587	; 0x24b
 800cc2e:	4920      	ldr	r1, [pc, #128]	; (800ccb0 <pbuf_remove_header+0x98>)
 800cc30:	4820      	ldr	r0, [pc, #128]	; (800ccb4 <pbuf_remove_header+0x9c>)
 800cc32:	f00b ff7b 	bl	8018b2c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <pbuf_remove_header+0x2c>
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc42:	d301      	bcc.n	800cc48 <pbuf_remove_header+0x30>
    return 1;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e02c      	b.n	800cca2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <pbuf_remove_header+0x3a>
    return 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	e027      	b.n	800cca2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	895b      	ldrh	r3, [r3, #10]
 800cc5a:	89fa      	ldrh	r2, [r7, #14]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	d908      	bls.n	800cc72 <pbuf_remove_header+0x5a>
 800cc60:	4b12      	ldr	r3, [pc, #72]	; (800ccac <pbuf_remove_header+0x94>)
 800cc62:	f240 2255 	movw	r2, #597	; 0x255
 800cc66:	4914      	ldr	r1, [pc, #80]	; (800ccb8 <pbuf_remove_header+0xa0>)
 800cc68:	4812      	ldr	r0, [pc, #72]	; (800ccb4 <pbuf_remove_header+0x9c>)
 800cc6a:	f00b ff5f 	bl	8018b2c <iprintf>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e017      	b.n	800cca2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	441a      	add	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	895a      	ldrh	r2, [r3, #10]
 800cc88:	89fb      	ldrh	r3, [r7, #14]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	891a      	ldrh	r2, [r3, #8]
 800cc96:	89fb      	ldrh	r3, [r7, #14]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	0801b370 	.word	0x0801b370
 800ccb0:	0801b4d4 	.word	0x0801b4d4
 800ccb4:	0801b3d0 	.word	0x0801b3d0
 800ccb8:	0801b4e0 	.word	0x0801b4e0

0800ccbc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	807b      	strh	r3, [r7, #2]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	da08      	bge.n	800cce6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ccd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccd8:	425b      	negs	r3, r3
 800ccda:	4619      	mov	r1, r3
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff ff9b 	bl	800cc18 <pbuf_remove_header>
 800cce2:	4603      	mov	r3, r0
 800cce4:	e007      	b.n	800ccf6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cce6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ccea:	787a      	ldrb	r2, [r7, #1]
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff ff1a 	bl	800cb28 <pbuf_add_header_impl>
 800ccf4:	4603      	mov	r3, r0
  }
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b082      	sub	sp, #8
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	460b      	mov	r3, r1
 800cd08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cd0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	4619      	mov	r1, r3
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7ff ffd2 	bl	800ccbc <pbuf_header_impl>
 800cd18:	4603      	mov	r3, r0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10b      	bne.n	800cd4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d106      	bne.n	800cd46 <pbuf_free+0x22>
 800cd38:	4b3b      	ldr	r3, [pc, #236]	; (800ce28 <pbuf_free+0x104>)
 800cd3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cd3e:	493b      	ldr	r1, [pc, #236]	; (800ce2c <pbuf_free+0x108>)
 800cd40:	483b      	ldr	r0, [pc, #236]	; (800ce30 <pbuf_free+0x10c>)
 800cd42:	f00b fef3 	bl	8018b2c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	e069      	b.n	800ce1e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cd4e:	e062      	b.n	800ce16 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cd50:	f00b fde0 	bl	8018914 <sys_arch_protect>
 800cd54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7b9b      	ldrb	r3, [r3, #14]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <pbuf_free+0x48>
 800cd5e:	4b32      	ldr	r3, [pc, #200]	; (800ce28 <pbuf_free+0x104>)
 800cd60:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cd64:	4933      	ldr	r1, [pc, #204]	; (800ce34 <pbuf_free+0x110>)
 800cd66:	4832      	ldr	r0, [pc, #200]	; (800ce30 <pbuf_free+0x10c>)
 800cd68:	f00b fee0 	bl	8018b2c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7b9b      	ldrb	r3, [r3, #14]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	739a      	strb	r2, [r3, #14]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7b9b      	ldrb	r3, [r3, #14]
 800cd7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cd7e:	69b8      	ldr	r0, [r7, #24]
 800cd80:	f00b fdd6 	bl	8018930 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d143      	bne.n	800ce12 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7b1b      	ldrb	r3, [r3, #12]
 800cd94:	f003 030f 	and.w	r3, r3, #15
 800cd98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	7b5b      	ldrb	r3, [r3, #13]
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d011      	beq.n	800cdca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <pbuf_free+0x9c>
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	; (800ce28 <pbuf_free+0x104>)
 800cdb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cdb8:	491f      	ldr	r1, [pc, #124]	; (800ce38 <pbuf_free+0x114>)
 800cdba:	481d      	ldr	r0, [pc, #116]	; (800ce30 <pbuf_free+0x10c>)
 800cdbc:	f00b feb6 	bl	8018b2c <iprintf>
        pc->custom_free_function(p);
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
 800cdc8:	e01d      	b.n	800ce06 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d104      	bne.n	800cdda <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	200c      	movs	r0, #12
 800cdd4:	f7ff f8f6 	bl	800bfc4 <memp_free>
 800cdd8:	e015      	b.n	800ce06 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d104      	bne.n	800cdea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cde0:	6879      	ldr	r1, [r7, #4]
 800cde2:	200b      	movs	r0, #11
 800cde4:	f7ff f8ee 	bl	800bfc4 <memp_free>
 800cde8:	e00d      	b.n	800ce06 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d103      	bne.n	800cdf8 <pbuf_free+0xd4>
          mem_free(p);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7fe fd33 	bl	800b85c <mem_free>
 800cdf6:	e006      	b.n	800ce06 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cdf8:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <pbuf_free+0x104>)
 800cdfa:	f240 320f 	movw	r2, #783	; 0x30f
 800cdfe:	490f      	ldr	r1, [pc, #60]	; (800ce3c <pbuf_free+0x118>)
 800ce00:	480b      	ldr	r0, [pc, #44]	; (800ce30 <pbuf_free+0x10c>)
 800ce02:	f00b fe93 	bl	8018b2c <iprintf>
        }
      }
      count++;
 800ce06:	7ffb      	ldrb	r3, [r7, #31]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	607b      	str	r3, [r7, #4]
 800ce10:	e001      	b.n	800ce16 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d199      	bne.n	800cd50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3720      	adds	r7, #32
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	0801b370 	.word	0x0801b370
 800ce2c:	0801b4d4 	.word	0x0801b4d4
 800ce30:	0801b3d0 	.word	0x0801b3d0
 800ce34:	0801b500 	.word	0x0801b500
 800ce38:	0801b518 	.word	0x0801b518
 800ce3c:	0801b53c 	.word	0x0801b53c

0800ce40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ce4c:	e005      	b.n	800ce5a <pbuf_clen+0x1a>
    ++len;
 800ce4e:	89fb      	ldrh	r3, [r7, #14]
 800ce50:	3301      	adds	r3, #1
 800ce52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1f6      	bne.n	800ce4e <pbuf_clen+0xe>
  }
  return len;
 800ce60:	89fb      	ldrh	r3, [r7, #14]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
	...

0800ce70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d016      	beq.n	800ceac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ce7e:	f00b fd49 	bl	8018914 <sys_arch_protect>
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7b9b      	ldrb	r3, [r3, #14]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	739a      	strb	r2, [r3, #14]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f00b fd4d 	bl	8018930 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7b9b      	ldrb	r3, [r3, #14]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <pbuf_ref+0x3c>
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <pbuf_ref+0x44>)
 800cea0:	f240 3242 	movw	r2, #834	; 0x342
 800cea4:	4904      	ldr	r1, [pc, #16]	; (800ceb8 <pbuf_ref+0x48>)
 800cea6:	4805      	ldr	r0, [pc, #20]	; (800cebc <pbuf_ref+0x4c>)
 800cea8:	f00b fe40 	bl	8018b2c <iprintf>
  }
}
 800ceac:	bf00      	nop
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	0801b370 	.word	0x0801b370
 800ceb8:	0801b550 	.word	0x0801b550
 800cebc:	0801b3d0 	.word	0x0801b3d0

0800cec0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <pbuf_cat+0x16>
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d107      	bne.n	800cee6 <pbuf_cat+0x26>
 800ced6:	4b20      	ldr	r3, [pc, #128]	; (800cf58 <pbuf_cat+0x98>)
 800ced8:	f240 3259 	movw	r2, #857	; 0x359
 800cedc:	491f      	ldr	r1, [pc, #124]	; (800cf5c <pbuf_cat+0x9c>)
 800cede:	4820      	ldr	r0, [pc, #128]	; (800cf60 <pbuf_cat+0xa0>)
 800cee0:	f00b fe24 	bl	8018b2c <iprintf>
 800cee4:	e034      	b.n	800cf50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	e00a      	b.n	800cf02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	891a      	ldrh	r2, [r3, #8]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	891b      	ldrh	r3, [r3, #8]
 800cef4:	4413      	add	r3, r2
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1f0      	bne.n	800ceec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	891a      	ldrh	r2, [r3, #8]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d006      	beq.n	800cf24 <pbuf_cat+0x64>
 800cf16:	4b10      	ldr	r3, [pc, #64]	; (800cf58 <pbuf_cat+0x98>)
 800cf18:	f240 3262 	movw	r2, #866	; 0x362
 800cf1c:	4911      	ldr	r1, [pc, #68]	; (800cf64 <pbuf_cat+0xa4>)
 800cf1e:	4810      	ldr	r0, [pc, #64]	; (800cf60 <pbuf_cat+0xa0>)
 800cf20:	f00b fe04 	bl	8018b2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <pbuf_cat+0x7a>
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <pbuf_cat+0x98>)
 800cf2e:	f240 3263 	movw	r2, #867	; 0x363
 800cf32:	490d      	ldr	r1, [pc, #52]	; (800cf68 <pbuf_cat+0xa8>)
 800cf34:	480a      	ldr	r0, [pc, #40]	; (800cf60 <pbuf_cat+0xa0>)
 800cf36:	f00b fdf9 	bl	8018b2c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	891a      	ldrh	r2, [r3, #8]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	891b      	ldrh	r3, [r3, #8]
 800cf42:	4413      	add	r3, r2
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	0801b370 	.word	0x0801b370
 800cf5c:	0801b564 	.word	0x0801b564
 800cf60:	0801b3d0 	.word	0x0801b3d0
 800cf64:	0801b59c 	.word	0x0801b59c
 800cf68:	0801b5cc 	.word	0x0801b5cc

0800cf6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7ff ffa1 	bl	800cec0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cf7e:	6838      	ldr	r0, [r7, #0]
 800cf80:	f7ff ff76 	bl	800ce70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <pbuf_copy+0x2a>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d005      	beq.n	800cfb6 <pbuf_copy+0x2a>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	891a      	ldrh	r2, [r3, #8]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d209      	bcs.n	800cfca <pbuf_copy+0x3e>
 800cfb6:	4b57      	ldr	r3, [pc, #348]	; (800d114 <pbuf_copy+0x188>)
 800cfb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cfbc:	4956      	ldr	r1, [pc, #344]	; (800d118 <pbuf_copy+0x18c>)
 800cfbe:	4857      	ldr	r0, [pc, #348]	; (800d11c <pbuf_copy+0x190>)
 800cfc0:	f00b fdb4 	bl	8018b2c <iprintf>
 800cfc4:	f06f 030f 	mvn.w	r3, #15
 800cfc8:	e09f      	b.n	800d10a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	1ad2      	subs	r2, r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	895b      	ldrh	r3, [r3, #10]
 800cfd8:	4619      	mov	r1, r3
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	1acb      	subs	r3, r1, r3
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d306      	bcc.n	800cff0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	895b      	ldrh	r3, [r3, #10]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	e005      	b.n	800cffc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	895b      	ldrh	r3, [r3, #10]
 800cff4:	461a      	mov	r2, r3
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	18d0      	adds	r0, r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	4413      	add	r3, r2
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	4619      	mov	r1, r3
 800d010:	f00b ff8c 	bl	8018f2c <memcpy>
    offset_to += len;
 800d014:	697a      	ldr	r2, [r7, #20]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	4413      	add	r3, r2
 800d01a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	4413      	add	r3, r2
 800d022:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	895b      	ldrh	r3, [r3, #10]
 800d028:	461a      	mov	r2, r3
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d906      	bls.n	800d03e <pbuf_copy+0xb2>
 800d030:	4b38      	ldr	r3, [pc, #224]	; (800d114 <pbuf_copy+0x188>)
 800d032:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d036:	493a      	ldr	r1, [pc, #232]	; (800d120 <pbuf_copy+0x194>)
 800d038:	4838      	ldr	r0, [pc, #224]	; (800d11c <pbuf_copy+0x190>)
 800d03a:	f00b fd77 	bl	8018b2c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	895b      	ldrh	r3, [r3, #10]
 800d042:	461a      	mov	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	4293      	cmp	r3, r2
 800d048:	d906      	bls.n	800d058 <pbuf_copy+0xcc>
 800d04a:	4b32      	ldr	r3, [pc, #200]	; (800d114 <pbuf_copy+0x188>)
 800d04c:	f240 32da 	movw	r2, #986	; 0x3da
 800d050:	4934      	ldr	r1, [pc, #208]	; (800d124 <pbuf_copy+0x198>)
 800d052:	4832      	ldr	r0, [pc, #200]	; (800d11c <pbuf_copy+0x190>)
 800d054:	f00b fd6a 	bl	8018b2c <iprintf>
    if (offset_from >= p_from->len) {
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	895b      	ldrh	r3, [r3, #10]
 800d05c:	461a      	mov	r2, r3
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	4293      	cmp	r3, r2
 800d062:	d304      	bcc.n	800d06e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	895b      	ldrh	r3, [r3, #10]
 800d072:	461a      	mov	r2, r3
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	4293      	cmp	r3, r2
 800d078:	d114      	bne.n	800d0a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d07a:	2300      	movs	r3, #0
 800d07c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10c      	bne.n	800d0a4 <pbuf_copy+0x118>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d009      	beq.n	800d0a4 <pbuf_copy+0x118>
 800d090:	4b20      	ldr	r3, [pc, #128]	; (800d114 <pbuf_copy+0x188>)
 800d092:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d096:	4924      	ldr	r1, [pc, #144]	; (800d128 <pbuf_copy+0x19c>)
 800d098:	4820      	ldr	r0, [pc, #128]	; (800d11c <pbuf_copy+0x190>)
 800d09a:	f00b fd47 	bl	8018b2c <iprintf>
 800d09e:	f06f 030f 	mvn.w	r3, #15
 800d0a2:	e032      	b.n	800d10a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d013      	beq.n	800d0d2 <pbuf_copy+0x146>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	895a      	ldrh	r2, [r3, #10]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	891b      	ldrh	r3, [r3, #8]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d10d      	bne.n	800d0d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d009      	beq.n	800d0d2 <pbuf_copy+0x146>
 800d0be:	4b15      	ldr	r3, [pc, #84]	; (800d114 <pbuf_copy+0x188>)
 800d0c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d0c4:	4919      	ldr	r1, [pc, #100]	; (800d12c <pbuf_copy+0x1a0>)
 800d0c6:	4815      	ldr	r0, [pc, #84]	; (800d11c <pbuf_copy+0x190>)
 800d0c8:	f00b fd30 	bl	8018b2c <iprintf>
 800d0cc:	f06f 0305 	mvn.w	r3, #5
 800d0d0:	e01b      	b.n	800d10a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d013      	beq.n	800d100 <pbuf_copy+0x174>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	895a      	ldrh	r2, [r3, #10]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	891b      	ldrh	r3, [r3, #8]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d10d      	bne.n	800d100 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d009      	beq.n	800d100 <pbuf_copy+0x174>
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <pbuf_copy+0x188>)
 800d0ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d0f2:	490e      	ldr	r1, [pc, #56]	; (800d12c <pbuf_copy+0x1a0>)
 800d0f4:	4809      	ldr	r0, [pc, #36]	; (800d11c <pbuf_copy+0x190>)
 800d0f6:	f00b fd19 	bl	8018b2c <iprintf>
 800d0fa:	f06f 0305 	mvn.w	r3, #5
 800d0fe:	e004      	b.n	800d10a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	f47f af61 	bne.w	800cfca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	0801b370 	.word	0x0801b370
 800d118:	0801b618 	.word	0x0801b618
 800d11c:	0801b3d0 	.word	0x0801b3d0
 800d120:	0801b648 	.word	0x0801b648
 800d124:	0801b660 	.word	0x0801b660
 800d128:	0801b67c 	.word	0x0801b67c
 800d12c:	0801b68c 	.word	0x0801b68c

0800d130 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	460b      	mov	r3, r1
 800d140:	80fb      	strh	r3, [r7, #6]
 800d142:	4613      	mov	r3, r2
 800d144:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d108      	bne.n	800d166 <pbuf_copy_partial+0x36>
 800d154:	4b2b      	ldr	r3, [pc, #172]	; (800d204 <pbuf_copy_partial+0xd4>)
 800d156:	f240 420a 	movw	r2, #1034	; 0x40a
 800d15a:	492b      	ldr	r1, [pc, #172]	; (800d208 <pbuf_copy_partial+0xd8>)
 800d15c:	482b      	ldr	r0, [pc, #172]	; (800d20c <pbuf_copy_partial+0xdc>)
 800d15e:	f00b fce5 	bl	8018b2c <iprintf>
 800d162:	2300      	movs	r3, #0
 800d164:	e04a      	b.n	800d1fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d108      	bne.n	800d17e <pbuf_copy_partial+0x4e>
 800d16c:	4b25      	ldr	r3, [pc, #148]	; (800d204 <pbuf_copy_partial+0xd4>)
 800d16e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d172:	4927      	ldr	r1, [pc, #156]	; (800d210 <pbuf_copy_partial+0xe0>)
 800d174:	4825      	ldr	r0, [pc, #148]	; (800d20c <pbuf_copy_partial+0xdc>)
 800d176:	f00b fcd9 	bl	8018b2c <iprintf>
 800d17a:	2300      	movs	r3, #0
 800d17c:	e03e      	b.n	800d1fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	61fb      	str	r3, [r7, #28]
 800d182:	e034      	b.n	800d1ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d184:	88bb      	ldrh	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <pbuf_copy_partial+0x70>
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	895b      	ldrh	r3, [r3, #10]
 800d18e:	88ba      	ldrh	r2, [r7, #4]
 800d190:	429a      	cmp	r2, r3
 800d192:	d305      	bcc.n	800d1a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	895b      	ldrh	r3, [r3, #10]
 800d198:	88ba      	ldrh	r2, [r7, #4]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	80bb      	strh	r3, [r7, #4]
 800d19e:	e023      	b.n	800d1e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	895a      	ldrh	r2, [r3, #10]
 800d1a4:	88bb      	ldrh	r3, [r7, #4]
 800d1a6:	1ad3      	subs	r3, r2, r3
 800d1a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d1aa:	8b3a      	ldrh	r2, [r7, #24]
 800d1ac:	88fb      	ldrh	r3, [r7, #6]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d901      	bls.n	800d1b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d1b2:	88fb      	ldrh	r3, [r7, #6]
 800d1b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d1b6:	8b7b      	ldrh	r3, [r7, #26]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	18d0      	adds	r0, r2, r3
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	685a      	ldr	r2, [r3, #4]
 800d1c0:	88bb      	ldrh	r3, [r7, #4]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	8b3a      	ldrh	r2, [r7, #24]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	f00b feb0 	bl	8018f2c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d1cc:	8afa      	ldrh	r2, [r7, #22]
 800d1ce:	8b3b      	ldrh	r3, [r7, #24]
 800d1d0:	4413      	add	r3, r2
 800d1d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d1d4:	8b7a      	ldrh	r2, [r7, #26]
 800d1d6:	8b3b      	ldrh	r3, [r7, #24]
 800d1d8:	4413      	add	r3, r2
 800d1da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d1dc:	88fa      	ldrh	r2, [r7, #6]
 800d1de:	8b3b      	ldrh	r3, [r7, #24]
 800d1e0:	1ad3      	subs	r3, r2, r3
 800d1e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	61fb      	str	r3, [r7, #28]
 800d1ee:	88fb      	ldrh	r3, [r7, #6]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <pbuf_copy_partial+0xca>
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1c4      	bne.n	800d184 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d1fa:	8afb      	ldrh	r3, [r7, #22]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3720      	adds	r7, #32
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	0801b370 	.word	0x0801b370
 800d208:	0801b6b8 	.word	0x0801b6b8
 800d20c:	0801b3d0 	.word	0x0801b3d0
 800d210:	0801b6d8 	.word	0x0801b6d8

0800d214 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	603a      	str	r2, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
 800d220:	460b      	mov	r3, r1
 800d222:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	8919      	ldrh	r1, [r3, #8]
 800d228:	88ba      	ldrh	r2, [r7, #4]
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff fa95 	bl	800c75c <pbuf_alloc>
 800d232:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <pbuf_clone+0x2a>
    return NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e011      	b.n	800d262 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7ff fea3 	bl	800cf8c <pbuf_copy>
 800d246:	4603      	mov	r3, r0
 800d248:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d24a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <pbuf_clone+0x4c>
 800d252:	4b06      	ldr	r3, [pc, #24]	; (800d26c <pbuf_clone+0x58>)
 800d254:	f240 5224 	movw	r2, #1316	; 0x524
 800d258:	4905      	ldr	r1, [pc, #20]	; (800d270 <pbuf_clone+0x5c>)
 800d25a:	4806      	ldr	r0, [pc, #24]	; (800d274 <pbuf_clone+0x60>)
 800d25c:	f00b fc66 	bl	8018b2c <iprintf>
  return q;
 800d260:	68fb      	ldr	r3, [r7, #12]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	0801b370 	.word	0x0801b370
 800d270:	0801b7e4 	.word	0x0801b7e4
 800d274:	0801b3d0 	.word	0x0801b3d0

0800d278 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d27c:	f00b fb68 	bl	8018950 <rand>
 800d280:	4603      	mov	r3, r0
 800d282:	b29b      	uxth	r3, r3
 800d284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d288:	b29b      	uxth	r3, r3
 800d28a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d28e:	b29a      	uxth	r2, r3
 800d290:	4b01      	ldr	r3, [pc, #4]	; (800d298 <tcp_init+0x20>)
 800d292:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d294:	bf00      	nop
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20000024 	.word	0x20000024

0800d29c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	7d1b      	ldrb	r3, [r3, #20]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d105      	bne.n	800d2b8 <tcp_free+0x1c>
 800d2ac:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <tcp_free+0x2c>)
 800d2ae:	22d4      	movs	r2, #212	; 0xd4
 800d2b0:	4906      	ldr	r1, [pc, #24]	; (800d2cc <tcp_free+0x30>)
 800d2b2:	4807      	ldr	r0, [pc, #28]	; (800d2d0 <tcp_free+0x34>)
 800d2b4:	f00b fc3a 	bl	8018b2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d2b8:	6879      	ldr	r1, [r7, #4]
 800d2ba:	2001      	movs	r0, #1
 800d2bc:	f7fe fe82 	bl	800bfc4 <memp_free>
}
 800d2c0:	bf00      	nop
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	0801b870 	.word	0x0801b870
 800d2cc:	0801b8a0 	.word	0x0801b8a0
 800d2d0:	0801b8b4 	.word	0x0801b8b4

0800d2d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7d1b      	ldrb	r3, [r3, #20]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d105      	bne.n	800d2f0 <tcp_free_listen+0x1c>
 800d2e4:	4b06      	ldr	r3, [pc, #24]	; (800d300 <tcp_free_listen+0x2c>)
 800d2e6:	22df      	movs	r2, #223	; 0xdf
 800d2e8:	4906      	ldr	r1, [pc, #24]	; (800d304 <tcp_free_listen+0x30>)
 800d2ea:	4807      	ldr	r0, [pc, #28]	; (800d308 <tcp_free_listen+0x34>)
 800d2ec:	f00b fc1e 	bl	8018b2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	2002      	movs	r0, #2
 800d2f4:	f7fe fe66 	bl	800bfc4 <memp_free>
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	0801b870 	.word	0x0801b870
 800d304:	0801b8dc 	.word	0x0801b8dc
 800d308:	0801b8b4 	.word	0x0801b8b4

0800d30c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d310:	f001 f9d0 	bl	800e6b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d314:	4b07      	ldr	r3, [pc, #28]	; (800d334 <tcp_tmr+0x28>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	3301      	adds	r3, #1
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <tcp_tmr+0x28>)
 800d31e:	701a      	strb	r2, [r3, #0]
 800d320:	4b04      	ldr	r3, [pc, #16]	; (800d334 <tcp_tmr+0x28>)
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d001      	beq.n	800d330 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d32c:	f000 fe82 	bl	800e034 <tcp_slowtmr>
  }
}
 800d330:	bf00      	nop
 800d332:	bd80      	pop	{r7, pc}
 800d334:	200111b5 	.word	0x200111b5

0800d338 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d105      	bne.n	800d354 <tcp_remove_listener+0x1c>
 800d348:	4b0d      	ldr	r3, [pc, #52]	; (800d380 <tcp_remove_listener+0x48>)
 800d34a:	22ff      	movs	r2, #255	; 0xff
 800d34c:	490d      	ldr	r1, [pc, #52]	; (800d384 <tcp_remove_listener+0x4c>)
 800d34e:	480e      	ldr	r0, [pc, #56]	; (800d388 <tcp_remove_listener+0x50>)
 800d350:	f00b fbec 	bl	8018b2c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	e00a      	b.n	800d370 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	429a      	cmp	r2, r3
 800d362:	d102      	bne.n	800d36a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1f1      	bne.n	800d35a <tcp_remove_listener+0x22>
    }
  }
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	0801b870 	.word	0x0801b870
 800d384:	0801b8f8 	.word	0x0801b8f8
 800d388:	0801b8b4 	.word	0x0801b8b4

0800d38c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <tcp_listen_closed+0x1c>
 800d39a:	4b14      	ldr	r3, [pc, #80]	; (800d3ec <tcp_listen_closed+0x60>)
 800d39c:	f240 1211 	movw	r2, #273	; 0x111
 800d3a0:	4913      	ldr	r1, [pc, #76]	; (800d3f0 <tcp_listen_closed+0x64>)
 800d3a2:	4814      	ldr	r0, [pc, #80]	; (800d3f4 <tcp_listen_closed+0x68>)
 800d3a4:	f00b fbc2 	bl	8018b2c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7d1b      	ldrb	r3, [r3, #20]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d006      	beq.n	800d3be <tcp_listen_closed+0x32>
 800d3b0:	4b0e      	ldr	r3, [pc, #56]	; (800d3ec <tcp_listen_closed+0x60>)
 800d3b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d3b6:	4910      	ldr	r1, [pc, #64]	; (800d3f8 <tcp_listen_closed+0x6c>)
 800d3b8:	480e      	ldr	r0, [pc, #56]	; (800d3f4 <tcp_listen_closed+0x68>)
 800d3ba:	f00b fbb7 	bl	8018b2c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3be:	2301      	movs	r3, #1
 800d3c0:	60fb      	str	r3, [r7, #12]
 800d3c2:	e00b      	b.n	800d3dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d3c4:	4a0d      	ldr	r2, [pc, #52]	; (800d3fc <tcp_listen_closed+0x70>)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff ffb1 	bl	800d338 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d9f0      	bls.n	800d3c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d3e2:	bf00      	nop
 800d3e4:	bf00      	nop
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	0801b870 	.word	0x0801b870
 800d3f0:	0801b920 	.word	0x0801b920
 800d3f4:	0801b8b4 	.word	0x0801b8b4
 800d3f8:	0801b92c 	.word	0x0801b92c
 800d3fc:	08027d6c 	.word	0x08027d6c

0800d400 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d400:	b5b0      	push	{r4, r5, r7, lr}
 800d402:	b088      	sub	sp, #32
 800d404:	af04      	add	r7, sp, #16
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	460b      	mov	r3, r1
 800d40a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d106      	bne.n	800d420 <tcp_close_shutdown+0x20>
 800d412:	4b63      	ldr	r3, [pc, #396]	; (800d5a0 <tcp_close_shutdown+0x1a0>)
 800d414:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d418:	4962      	ldr	r1, [pc, #392]	; (800d5a4 <tcp_close_shutdown+0x1a4>)
 800d41a:	4863      	ldr	r0, [pc, #396]	; (800d5a8 <tcp_close_shutdown+0x1a8>)
 800d41c:	f00b fb86 	bl	8018b2c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d420:	78fb      	ldrb	r3, [r7, #3]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d066      	beq.n	800d4f4 <tcp_close_shutdown+0xf4>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d003      	beq.n	800d436 <tcp_close_shutdown+0x36>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7d1b      	ldrb	r3, [r3, #20]
 800d432:	2b07      	cmp	r3, #7
 800d434:	d15e      	bne.n	800d4f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d104      	bne.n	800d448 <tcp_close_shutdown+0x48>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d442:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d446:	d055      	beq.n	800d4f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8b5b      	ldrh	r3, [r3, #26]
 800d44c:	f003 0310 	and.w	r3, r3, #16
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <tcp_close_shutdown+0x62>
 800d454:	4b52      	ldr	r3, [pc, #328]	; (800d5a0 <tcp_close_shutdown+0x1a0>)
 800d456:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d45a:	4954      	ldr	r1, [pc, #336]	; (800d5ac <tcp_close_shutdown+0x1ac>)
 800d45c:	4852      	ldr	r0, [pc, #328]	; (800d5a8 <tcp_close_shutdown+0x1a8>)
 800d45e:	f00b fb65 	bl	8018b2c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d46a:	687d      	ldr	r5, [r7, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3304      	adds	r3, #4
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	8ad2      	ldrh	r2, [r2, #22]
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	8b09      	ldrh	r1, [r1, #24]
 800d478:	9102      	str	r1, [sp, #8]
 800d47a:	9201      	str	r2, [sp, #4]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	462b      	mov	r3, r5
 800d480:	4622      	mov	r2, r4
 800d482:	4601      	mov	r1, r0
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f005 ff03 	bl	8013290 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 fce0 	bl	800ee50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d490:	4b47      	ldr	r3, [pc, #284]	; (800d5b0 <tcp_close_shutdown+0x1b0>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	429a      	cmp	r2, r3
 800d498:	d105      	bne.n	800d4a6 <tcp_close_shutdown+0xa6>
 800d49a:	4b45      	ldr	r3, [pc, #276]	; (800d5b0 <tcp_close_shutdown+0x1b0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	4a43      	ldr	r2, [pc, #268]	; (800d5b0 <tcp_close_shutdown+0x1b0>)
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	e013      	b.n	800d4ce <tcp_close_shutdown+0xce>
 800d4a6:	4b42      	ldr	r3, [pc, #264]	; (800d5b0 <tcp_close_shutdown+0x1b0>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	e00c      	b.n	800d4c8 <tcp_close_shutdown+0xc8>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d104      	bne.n	800d4c2 <tcp_close_shutdown+0xc2>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68da      	ldr	r2, [r3, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	60da      	str	r2, [r3, #12]
 800d4c0:	e005      	b.n	800d4ce <tcp_close_shutdown+0xce>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1ef      	bne.n	800d4ae <tcp_close_shutdown+0xae>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	60da      	str	r2, [r3, #12]
 800d4d4:	4b37      	ldr	r3, [pc, #220]	; (800d5b4 <tcp_close_shutdown+0x1b4>)
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d4da:	4b37      	ldr	r3, [pc, #220]	; (800d5b8 <tcp_close_shutdown+0x1b8>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d102      	bne.n	800d4ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d4e4:	f004 f978 	bl	80117d8 <tcp_trigger_input_pcb_close>
 800d4e8:	e002      	b.n	800d4f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff fed6 	bl	800d29c <tcp_free>
      }
      return ERR_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e050      	b.n	800d596 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7d1b      	ldrb	r3, [r3, #20]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d03b      	beq.n	800d574 <tcp_close_shutdown+0x174>
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	dc44      	bgt.n	800d58a <tcp_close_shutdown+0x18a>
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <tcp_close_shutdown+0x10a>
 800d504:	2b01      	cmp	r3, #1
 800d506:	d02a      	beq.n	800d55e <tcp_close_shutdown+0x15e>
 800d508:	e03f      	b.n	800d58a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	8adb      	ldrh	r3, [r3, #22]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d021      	beq.n	800d556 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d512:	4b2a      	ldr	r3, [pc, #168]	; (800d5bc <tcp_close_shutdown+0x1bc>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d105      	bne.n	800d528 <tcp_close_shutdown+0x128>
 800d51c:	4b27      	ldr	r3, [pc, #156]	; (800d5bc <tcp_close_shutdown+0x1bc>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	4a26      	ldr	r2, [pc, #152]	; (800d5bc <tcp_close_shutdown+0x1bc>)
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	e013      	b.n	800d550 <tcp_close_shutdown+0x150>
 800d528:	4b24      	ldr	r3, [pc, #144]	; (800d5bc <tcp_close_shutdown+0x1bc>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	60bb      	str	r3, [r7, #8]
 800d52e:	e00c      	b.n	800d54a <tcp_close_shutdown+0x14a>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d104      	bne.n	800d544 <tcp_close_shutdown+0x144>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	60da      	str	r2, [r3, #12]
 800d542:	e005      	b.n	800d550 <tcp_close_shutdown+0x150>
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	60bb      	str	r3, [r7, #8]
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1ef      	bne.n	800d530 <tcp_close_shutdown+0x130>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f7ff fea0 	bl	800d29c <tcp_free>
      break;
 800d55c:	e01a      	b.n	800d594 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff ff14 	bl	800d38c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	4816      	ldr	r0, [pc, #88]	; (800d5c0 <tcp_close_shutdown+0x1c0>)
 800d568:	f001 fcc2 	bl	800eef0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff feb1 	bl	800d2d4 <tcp_free_listen>
      break;
 800d572:	e00f      	b.n	800d594 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	480e      	ldr	r0, [pc, #56]	; (800d5b0 <tcp_close_shutdown+0x1b0>)
 800d578:	f001 fcba 	bl	800eef0 <tcp_pcb_remove>
 800d57c:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <tcp_close_shutdown+0x1b4>)
 800d57e:	2201      	movs	r2, #1
 800d580:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff fe8a 	bl	800d29c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d588:	e004      	b.n	800d594 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 f81a 	bl	800d5c4 <tcp_close_shutdown_fin>
 800d590:	4603      	mov	r3, r0
 800d592:	e000      	b.n	800d596 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bdb0      	pop	{r4, r5, r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	0801b870 	.word	0x0801b870
 800d5a4:	0801b944 	.word	0x0801b944
 800d5a8:	0801b8b4 	.word	0x0801b8b4
 800d5ac:	0801b964 	.word	0x0801b964
 800d5b0:	200111ac 	.word	0x200111ac
 800d5b4:	200111b4 	.word	0x200111b4
 800d5b8:	200111ec 	.word	0x200111ec
 800d5bc:	200111a4 	.word	0x200111a4
 800d5c0:	200111a8 	.word	0x200111a8

0800d5c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <tcp_close_shutdown_fin+0x1c>
 800d5d2:	4b2e      	ldr	r3, [pc, #184]	; (800d68c <tcp_close_shutdown_fin+0xc8>)
 800d5d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d5d8:	492d      	ldr	r1, [pc, #180]	; (800d690 <tcp_close_shutdown_fin+0xcc>)
 800d5da:	482e      	ldr	r0, [pc, #184]	; (800d694 <tcp_close_shutdown_fin+0xd0>)
 800d5dc:	f00b faa6 	bl	8018b2c <iprintf>

  switch (pcb->state) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	2b07      	cmp	r3, #7
 800d5e6:	d020      	beq.n	800d62a <tcp_close_shutdown_fin+0x66>
 800d5e8:	2b07      	cmp	r3, #7
 800d5ea:	dc2b      	bgt.n	800d644 <tcp_close_shutdown_fin+0x80>
 800d5ec:	2b03      	cmp	r3, #3
 800d5ee:	d002      	beq.n	800d5f6 <tcp_close_shutdown_fin+0x32>
 800d5f0:	2b04      	cmp	r3, #4
 800d5f2:	d00d      	beq.n	800d610 <tcp_close_shutdown_fin+0x4c>
 800d5f4:	e026      	b.n	800d644 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f004 ff58 	bl	80124ac <tcp_send_fin>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d11f      	bne.n	800d648 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2205      	movs	r2, #5
 800d60c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d60e:	e01b      	b.n	800d648 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f004 ff4b 	bl	80124ac <tcp_send_fin>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d114      	bne.n	800d64c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2205      	movs	r2, #5
 800d626:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d628:	e010      	b.n	800d64c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f004 ff3e 	bl	80124ac <tcp_send_fin>
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d109      	bne.n	800d650 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2209      	movs	r2, #9
 800d640:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d642:	e005      	b.n	800d650 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	e01c      	b.n	800d682 <tcp_close_shutdown_fin+0xbe>
      break;
 800d648:	bf00      	nop
 800d64a:	e002      	b.n	800d652 <tcp_close_shutdown_fin+0x8e>
      break;
 800d64c:	bf00      	nop
 800d64e:	e000      	b.n	800d652 <tcp_close_shutdown_fin+0x8e>
      break;
 800d650:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d103      	bne.n	800d662 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f005 f864 	bl	8012728 <tcp_output>
 800d660:	e00d      	b.n	800d67e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d108      	bne.n	800d67e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	8b5b      	ldrh	r3, [r3, #26]
 800d670:	f043 0308 	orr.w	r3, r3, #8
 800d674:	b29a      	uxth	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	e001      	b.n	800d682 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	0801b870 	.word	0x0801b870
 800d690:	0801b920 	.word	0x0801b920
 800d694:	0801b8b4 	.word	0x0801b8b4

0800d698 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d109      	bne.n	800d6ba <tcp_close+0x22>
 800d6a6:	4b0f      	ldr	r3, [pc, #60]	; (800d6e4 <tcp_close+0x4c>)
 800d6a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d6ac:	490e      	ldr	r1, [pc, #56]	; (800d6e8 <tcp_close+0x50>)
 800d6ae:	480f      	ldr	r0, [pc, #60]	; (800d6ec <tcp_close+0x54>)
 800d6b0:	f00b fa3c 	bl	8018b2c <iprintf>
 800d6b4:	f06f 030f 	mvn.w	r3, #15
 800d6b8:	e00f      	b.n	800d6da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	7d1b      	ldrb	r3, [r3, #20]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d006      	beq.n	800d6d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	8b5b      	ldrh	r3, [r3, #26]
 800d6c6:	f043 0310 	orr.w	r3, r3, #16
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fe94 	bl	800d400 <tcp_close_shutdown>
 800d6d8:	4603      	mov	r3, r0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0801b870 	.word	0x0801b870
 800d6e8:	0801b980 	.word	0x0801b980
 800d6ec:	0801b8b4 	.word	0x0801b8b4

0800d6f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d109      	bne.n	800d716 <tcp_shutdown+0x26>
 800d702:	4b26      	ldr	r3, [pc, #152]	; (800d79c <tcp_shutdown+0xac>)
 800d704:	f240 2207 	movw	r2, #519	; 0x207
 800d708:	4925      	ldr	r1, [pc, #148]	; (800d7a0 <tcp_shutdown+0xb0>)
 800d70a:	4826      	ldr	r0, [pc, #152]	; (800d7a4 <tcp_shutdown+0xb4>)
 800d70c:	f00b fa0e 	bl	8018b2c <iprintf>
 800d710:	f06f 030f 	mvn.w	r3, #15
 800d714:	e03d      	b.n	800d792 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d102      	bne.n	800d724 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d71e:	f06f 030a 	mvn.w	r3, #10
 800d722:	e036      	b.n	800d792 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d01b      	beq.n	800d762 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	8b5b      	ldrh	r3, [r3, #26]
 800d72e:	f043 0310 	orr.w	r3, r3, #16
 800d732:	b29a      	uxth	r2, r3
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d005      	beq.n	800d74a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d73e:	2101      	movs	r1, #1
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff fe5d 	bl	800d400 <tcp_close_shutdown>
 800d746:	4603      	mov	r3, r0
 800d748:	e023      	b.n	800d792 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fae4 	bl	800cd24 <pbuf_free>
      pcb->refused_data = NULL;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d013      	beq.n	800d790 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	7d1b      	ldrb	r3, [r3, #20]
 800d76c:	2b04      	cmp	r3, #4
 800d76e:	dc02      	bgt.n	800d776 <tcp_shutdown+0x86>
 800d770:	2b03      	cmp	r3, #3
 800d772:	da02      	bge.n	800d77a <tcp_shutdown+0x8a>
 800d774:	e009      	b.n	800d78a <tcp_shutdown+0x9a>
 800d776:	2b07      	cmp	r3, #7
 800d778:	d107      	bne.n	800d78a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	4619      	mov	r1, r3
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7ff fe3d 	bl	800d400 <tcp_close_shutdown>
 800d786:	4603      	mov	r3, r0
 800d788:	e003      	b.n	800d792 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d78a:	f06f 030a 	mvn.w	r3, #10
 800d78e:	e000      	b.n	800d792 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0801b870 	.word	0x0801b870
 800d7a0:	0801b998 	.word	0x0801b998
 800d7a4:	0801b8b4 	.word	0x0801b8b4

0800d7a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08e      	sub	sp, #56	; 0x38
 800d7ac:	af04      	add	r7, sp, #16
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d107      	bne.n	800d7c8 <tcp_abandon+0x20>
 800d7b8:	4b52      	ldr	r3, [pc, #328]	; (800d904 <tcp_abandon+0x15c>)
 800d7ba:	f240 223d 	movw	r2, #573	; 0x23d
 800d7be:	4952      	ldr	r1, [pc, #328]	; (800d908 <tcp_abandon+0x160>)
 800d7c0:	4852      	ldr	r0, [pc, #328]	; (800d90c <tcp_abandon+0x164>)
 800d7c2:	f00b f9b3 	bl	8018b2c <iprintf>
 800d7c6:	e099      	b.n	800d8fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	7d1b      	ldrb	r3, [r3, #20]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d106      	bne.n	800d7de <tcp_abandon+0x36>
 800d7d0:	4b4c      	ldr	r3, [pc, #304]	; (800d904 <tcp_abandon+0x15c>)
 800d7d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d7d6:	494e      	ldr	r1, [pc, #312]	; (800d910 <tcp_abandon+0x168>)
 800d7d8:	484c      	ldr	r0, [pc, #304]	; (800d90c <tcp_abandon+0x164>)
 800d7da:	f00b f9a7 	bl	8018b2c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7d1b      	ldrb	r3, [r3, #20]
 800d7e2:	2b0a      	cmp	r3, #10
 800d7e4:	d107      	bne.n	800d7f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	484a      	ldr	r0, [pc, #296]	; (800d914 <tcp_abandon+0x16c>)
 800d7ea:	f001 fb81 	bl	800eef0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff fd54 	bl	800d29c <tcp_free>
 800d7f4:	e082      	b.n	800d8fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d802:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d810:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7d1b      	ldrb	r3, [r3, #20]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d126      	bne.n	800d86e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	8adb      	ldrh	r3, [r3, #22]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d02e      	beq.n	800d886 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d828:	4b3b      	ldr	r3, [pc, #236]	; (800d918 <tcp_abandon+0x170>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d105      	bne.n	800d83e <tcp_abandon+0x96>
 800d832:	4b39      	ldr	r3, [pc, #228]	; (800d918 <tcp_abandon+0x170>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	4a37      	ldr	r2, [pc, #220]	; (800d918 <tcp_abandon+0x170>)
 800d83a:	6013      	str	r3, [r2, #0]
 800d83c:	e013      	b.n	800d866 <tcp_abandon+0xbe>
 800d83e:	4b36      	ldr	r3, [pc, #216]	; (800d918 <tcp_abandon+0x170>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	e00c      	b.n	800d860 <tcp_abandon+0xb8>
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d104      	bne.n	800d85a <tcp_abandon+0xb2>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	60da      	str	r2, [r3, #12]
 800d858:	e005      	b.n	800d866 <tcp_abandon+0xbe>
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	61fb      	str	r3, [r7, #28]
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1ef      	bne.n	800d846 <tcp_abandon+0x9e>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	60da      	str	r2, [r3, #12]
 800d86c:	e00b      	b.n	800d886 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	8adb      	ldrh	r3, [r3, #22]
 800d876:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d878:	6879      	ldr	r1, [r7, #4]
 800d87a:	4828      	ldr	r0, [pc, #160]	; (800d91c <tcp_abandon+0x174>)
 800d87c:	f001 fb38 	bl	800eef0 <tcp_pcb_remove>
 800d880:	4b27      	ldr	r3, [pc, #156]	; (800d920 <tcp_abandon+0x178>)
 800d882:	2201      	movs	r2, #1
 800d884:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d004      	beq.n	800d898 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d892:	4618      	mov	r0, r3
 800d894:	f000 ffee 	bl	800e874 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d004      	beq.n	800d8aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 ffe5 	bl	800e874 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d004      	beq.n	800d8bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f000 ffdc 	bl	800e874 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00e      	beq.n	800d8e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d8c2:	6879      	ldr	r1, [r7, #4]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	8b12      	ldrh	r2, [r2, #24]
 800d8cc:	9202      	str	r2, [sp, #8]
 800d8ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8d0:	9201      	str	r2, [sp, #4]
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	69b9      	ldr	r1, [r7, #24]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f005 fcd8 	bl	8013290 <tcp_rst>
    }
    last_state = pcb->state;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	7d1b      	ldrb	r3, [r3, #20]
 800d8e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fcd8 	bl	800d29c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d004      	beq.n	800d8fc <tcp_abandon+0x154>
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f06f 010c 	mvn.w	r1, #12
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	4798      	blx	r3
  }
}
 800d8fc:	3728      	adds	r7, #40	; 0x28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	0801b870 	.word	0x0801b870
 800d908:	0801b9b4 	.word	0x0801b9b4
 800d90c:	0801b8b4 	.word	0x0801b8b4
 800d910:	0801b9d0 	.word	0x0801b9d0
 800d914:	200111b0 	.word	0x200111b0
 800d918:	200111a4 	.word	0x200111a4
 800d91c:	200111ac 	.word	0x200111ac
 800d920:	200111b4 	.word	0x200111b4

0800d924 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d92c:	2101      	movs	r1, #1
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff ff3a 	bl	800d7a8 <tcp_abandon>
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	4613      	mov	r3, r2
 800d948:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d94a:	2304      	movs	r3, #4
 800d94c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d954:	4b3e      	ldr	r3, [pc, #248]	; (800da50 <tcp_bind+0x114>)
 800d956:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d109      	bne.n	800d972 <tcp_bind+0x36>
 800d95e:	4b3d      	ldr	r3, [pc, #244]	; (800da54 <tcp_bind+0x118>)
 800d960:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d964:	493c      	ldr	r1, [pc, #240]	; (800da58 <tcp_bind+0x11c>)
 800d966:	483d      	ldr	r0, [pc, #244]	; (800da5c <tcp_bind+0x120>)
 800d968:	f00b f8e0 	bl	8018b2c <iprintf>
 800d96c:	f06f 030f 	mvn.w	r3, #15
 800d970:	e06a      	b.n	800da48 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	7d1b      	ldrb	r3, [r3, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d009      	beq.n	800d98e <tcp_bind+0x52>
 800d97a:	4b36      	ldr	r3, [pc, #216]	; (800da54 <tcp_bind+0x118>)
 800d97c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d980:	4937      	ldr	r1, [pc, #220]	; (800da60 <tcp_bind+0x124>)
 800d982:	4836      	ldr	r0, [pc, #216]	; (800da5c <tcp_bind+0x120>)
 800d984:	f00b f8d2 	bl	8018b2c <iprintf>
 800d988:	f06f 0305 	mvn.w	r3, #5
 800d98c:	e05c      	b.n	800da48 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d109      	bne.n	800d9a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d994:	f000 f9f0 	bl	800dd78 <tcp_new_port>
 800d998:	4603      	mov	r3, r0
 800d99a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d99c:	88fb      	ldrh	r3, [r7, #6]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d135      	bne.n	800da0e <tcp_bind+0xd2>
      return ERR_BUF;
 800d9a2:	f06f 0301 	mvn.w	r3, #1
 800d9a6:	e04f      	b.n	800da48 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	e02b      	b.n	800da06 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d9ae:	4a2d      	ldr	r2, [pc, #180]	; (800da64 <tcp_bind+0x128>)
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	61bb      	str	r3, [r7, #24]
 800d9ba:	e01e      	b.n	800d9fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	8adb      	ldrh	r3, [r3, #22]
 800d9c0:	88fa      	ldrh	r2, [r7, #6]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d116      	bne.n	800d9f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d9c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d010      	beq.n	800d9ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00c      	beq.n	800d9ee <tcp_bind+0xb2>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d009      	beq.n	800d9ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d005      	beq.n	800d9ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d102      	bne.n	800d9f4 <tcp_bind+0xb8>
              return ERR_USE;
 800d9ee:	f06f 0307 	mvn.w	r3, #7
 800d9f2:	e029      	b.n	800da48 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	61bb      	str	r3, [r7, #24]
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1dd      	bne.n	800d9bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	3301      	adds	r3, #1
 800da04:	61fb      	str	r3, [r7, #28]
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	dbcf      	blt.n	800d9ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00c      	beq.n	800da2e <tcp_bind+0xf2>
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d008      	beq.n	800da2e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <tcp_bind+0xec>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	e000      	b.n	800da2a <tcp_bind+0xee>
 800da28:	2300      	movs	r3, #0
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	88fa      	ldrh	r2, [r7, #6]
 800da32:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800da34:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <tcp_bind+0x12c>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	60da      	str	r2, [r3, #12]
 800da3c:	4a0a      	ldr	r2, [pc, #40]	; (800da68 <tcp_bind+0x12c>)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6013      	str	r3, [r2, #0]
 800da42:	f005 fde7 	bl	8013614 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3720      	adds	r7, #32
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	08027da4 	.word	0x08027da4
 800da54:	0801b870 	.word	0x0801b870
 800da58:	0801ba04 	.word	0x0801ba04
 800da5c:	0801b8b4 	.word	0x0801b8b4
 800da60:	0801ba1c 	.word	0x0801ba1c
 800da64:	08027d6c 	.word	0x08027d6c
 800da68:	200111a4 	.word	0x200111a4

0800da6c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	4613      	mov	r3, r2
 800da78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d106      	bne.n	800da8e <tcp_accept_null+0x22>
 800da80:	4b07      	ldr	r3, [pc, #28]	; (800daa0 <tcp_accept_null+0x34>)
 800da82:	f240 320f 	movw	r2, #783	; 0x30f
 800da86:	4907      	ldr	r1, [pc, #28]	; (800daa4 <tcp_accept_null+0x38>)
 800da88:	4807      	ldr	r0, [pc, #28]	; (800daa8 <tcp_accept_null+0x3c>)
 800da8a:	f00b f84f 	bl	8018b2c <iprintf>

  tcp_abort(pcb);
 800da8e:	68b8      	ldr	r0, [r7, #8]
 800da90:	f7ff ff48 	bl	800d924 <tcp_abort>

  return ERR_ABRT;
 800da94:	f06f 030c 	mvn.w	r3, #12
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	0801b870 	.word	0x0801b870
 800daa4:	0801ba44 	.word	0x0801ba44
 800daa8:	0801b8b4 	.word	0x0801b8b4

0800daac <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dab8:	78fb      	ldrb	r3, [r7, #3]
 800daba:	2200      	movs	r2, #0
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f806 	bl	800dad0 <tcp_listen_with_backlog_and_err>
 800dac4:	4603      	mov	r3, r0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
	...

0800dad0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	460b      	mov	r3, r1
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dade:	2300      	movs	r3, #0
 800dae0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d109      	bne.n	800dafc <tcp_listen_with_backlog_and_err+0x2c>
 800dae8:	4b47      	ldr	r3, [pc, #284]	; (800dc08 <tcp_listen_with_backlog_and_err+0x138>)
 800daea:	f240 3259 	movw	r2, #857	; 0x359
 800daee:	4947      	ldr	r1, [pc, #284]	; (800dc0c <tcp_listen_with_backlog_and_err+0x13c>)
 800daf0:	4847      	ldr	r0, [pc, #284]	; (800dc10 <tcp_listen_with_backlog_and_err+0x140>)
 800daf2:	f00b f81b 	bl	8018b2c <iprintf>
 800daf6:	23f0      	movs	r3, #240	; 0xf0
 800daf8:	76fb      	strb	r3, [r7, #27]
 800dafa:	e079      	b.n	800dbf0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	7d1b      	ldrb	r3, [r3, #20]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d009      	beq.n	800db18 <tcp_listen_with_backlog_and_err+0x48>
 800db04:	4b40      	ldr	r3, [pc, #256]	; (800dc08 <tcp_listen_with_backlog_and_err+0x138>)
 800db06:	f240 325a 	movw	r2, #858	; 0x35a
 800db0a:	4942      	ldr	r1, [pc, #264]	; (800dc14 <tcp_listen_with_backlog_and_err+0x144>)
 800db0c:	4840      	ldr	r0, [pc, #256]	; (800dc10 <tcp_listen_with_backlog_and_err+0x140>)
 800db0e:	f00b f80d 	bl	8018b2c <iprintf>
 800db12:	23f1      	movs	r3, #241	; 0xf1
 800db14:	76fb      	strb	r3, [r7, #27]
 800db16:	e06b      	b.n	800dbf0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d104      	bne.n	800db2a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800db24:	23f7      	movs	r3, #247	; 0xf7
 800db26:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db28:	e062      	b.n	800dbf0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800db2a:	2002      	movs	r0, #2
 800db2c:	f7fe f9d4 	bl	800bed8 <memp_malloc>
 800db30:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800db38:	23ff      	movs	r3, #255	; 0xff
 800db3a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db3c:	e058      	b.n	800dbf0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	691a      	ldr	r2, [r3, #16]
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	8ada      	ldrh	r2, [r3, #22]
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	2201      	movs	r2, #1
 800db52:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	7d5a      	ldrb	r2, [r3, #21]
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	7a5a      	ldrb	r2, [r3, #9]
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2200      	movs	r2, #0
 800db68:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	7ada      	ldrb	r2, [r3, #11]
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	7a9a      	ldrb	r2, [r3, #10]
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	8adb      	ldrh	r3, [r3, #22]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d021      	beq.n	800dbce <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db8a:	4b23      	ldr	r3, [pc, #140]	; (800dc18 <tcp_listen_with_backlog_and_err+0x148>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	429a      	cmp	r2, r3
 800db92:	d105      	bne.n	800dba0 <tcp_listen_with_backlog_and_err+0xd0>
 800db94:	4b20      	ldr	r3, [pc, #128]	; (800dc18 <tcp_listen_with_backlog_and_err+0x148>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	4a1f      	ldr	r2, [pc, #124]	; (800dc18 <tcp_listen_with_backlog_and_err+0x148>)
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	e013      	b.n	800dbc8 <tcp_listen_with_backlog_and_err+0xf8>
 800dba0:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <tcp_listen_with_backlog_and_err+0x148>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	617b      	str	r3, [r7, #20]
 800dba6:	e00c      	b.n	800dbc2 <tcp_listen_with_backlog_and_err+0xf2>
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d104      	bne.n	800dbbc <tcp_listen_with_backlog_and_err+0xec>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	68da      	ldr	r2, [r3, #12]
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	60da      	str	r2, [r3, #12]
 800dbba:	e005      	b.n	800dbc8 <tcp_listen_with_backlog_and_err+0xf8>
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1ef      	bne.n	800dba8 <tcp_listen_with_backlog_and_err+0xd8>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff fb64 	bl	800d29c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	4a11      	ldr	r2, [pc, #68]	; (800dc1c <tcp_listen_with_backlog_and_err+0x14c>)
 800dbd8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dbda:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <tcp_listen_with_backlog_and_err+0x150>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	60da      	str	r2, [r3, #12]
 800dbe2:	4a0f      	ldr	r2, [pc, #60]	; (800dc20 <tcp_listen_with_backlog_and_err+0x150>)
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	f005 fd14 	bl	8013614 <tcp_timer_needed>
  res = ERR_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	7efa      	ldrb	r2, [r7, #27]
 800dbfa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3720      	adds	r7, #32
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	0801b870 	.word	0x0801b870
 800dc0c:	0801ba64 	.word	0x0801ba64
 800dc10:	0801b8b4 	.word	0x0801b8b4
 800dc14:	0801ba94 	.word	0x0801ba94
 800dc18:	200111a4 	.word	0x200111a4
 800dc1c:	0800da6d 	.word	0x0800da6d
 800dc20:	200111a8 	.word	0x200111a8

0800dc24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <tcp_update_rcv_ann_wnd+0x1c>
 800dc32:	4b25      	ldr	r3, [pc, #148]	; (800dcc8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dc34:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dc38:	4924      	ldr	r1, [pc, #144]	; (800dccc <tcp_update_rcv_ann_wnd+0xa8>)
 800dc3a:	4825      	ldr	r0, [pc, #148]	; (800dcd0 <tcp_update_rcv_ann_wnd+0xac>)
 800dc3c:	f00a ff76 	bl	8018b2c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dc48:	4413      	add	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dc54:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dc58:	bf28      	it	cs
 800dc5a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dc5e:	b292      	uxth	r2, r2
 800dc60:	4413      	add	r3, r2
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	db08      	blt.n	800dc7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	e020      	b.n	800dcbe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dd03      	ble.n	800dc92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dc90:	e014      	b.n	800dcbc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dca4:	d306      	bcc.n	800dcb4 <tcp_update_rcv_ann_wnd+0x90>
 800dca6:	4b08      	ldr	r3, [pc, #32]	; (800dcc8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dca8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dcac:	4909      	ldr	r1, [pc, #36]	; (800dcd4 <tcp_update_rcv_ann_wnd+0xb0>)
 800dcae:	4808      	ldr	r0, [pc, #32]	; (800dcd0 <tcp_update_rcv_ann_wnd+0xac>)
 800dcb0:	f00a ff3c 	bl	8018b2c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dcbc:	2300      	movs	r3, #0
  }
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0801b870 	.word	0x0801b870
 800dccc:	0801bacc 	.word	0x0801bacc
 800dcd0:	0801b8b4 	.word	0x0801b8b4
 800dcd4:	0801baf0 	.word	0x0801baf0

0800dcd8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d107      	bne.n	800dcfa <tcp_recved+0x22>
 800dcea:	4b1f      	ldr	r3, [pc, #124]	; (800dd68 <tcp_recved+0x90>)
 800dcec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dcf0:	491e      	ldr	r1, [pc, #120]	; (800dd6c <tcp_recved+0x94>)
 800dcf2:	481f      	ldr	r0, [pc, #124]	; (800dd70 <tcp_recved+0x98>)
 800dcf4:	f00a ff1a 	bl	8018b2c <iprintf>
 800dcf8:	e032      	b.n	800dd60 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	7d1b      	ldrb	r3, [r3, #20]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d106      	bne.n	800dd10 <tcp_recved+0x38>
 800dd02:	4b19      	ldr	r3, [pc, #100]	; (800dd68 <tcp_recved+0x90>)
 800dd04:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dd08:	491a      	ldr	r1, [pc, #104]	; (800dd74 <tcp_recved+0x9c>)
 800dd0a:	4819      	ldr	r0, [pc, #100]	; (800dd70 <tcp_recved+0x98>)
 800dd0c:	f00a ff0e 	bl	8018b2c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd14:	887b      	ldrh	r3, [r7, #2]
 800dd16:	4413      	add	r3, r2
 800dd18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dd1a:	89fb      	ldrh	r3, [r7, #14]
 800dd1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd20:	d804      	bhi.n	800dd2c <tcp_recved+0x54>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd26:	89fa      	ldrh	r2, [r7, #14]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d204      	bcs.n	800dd36 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dd32:	851a      	strh	r2, [r3, #40]	; 0x28
 800dd34:	e002      	b.n	800dd3c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	89fa      	ldrh	r2, [r7, #14]
 800dd3a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff ff71 	bl	800dc24 <tcp_update_rcv_ann_wnd>
 800dd42:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dd4a:	d309      	bcc.n	800dd60 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8b5b      	ldrh	r3, [r3, #26]
 800dd50:	f043 0302 	orr.w	r3, r3, #2
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f004 fce4 	bl	8012728 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	0801b870 	.word	0x0801b870
 800dd6c:	0801bb0c 	.word	0x0801bb0c
 800dd70:	0801b8b4 	.word	0x0801b8b4
 800dd74:	0801bb24 	.word	0x0801bb24

0800dd78 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dd82:	4b1e      	ldr	r3, [pc, #120]	; (800ddfc <tcp_new_port+0x84>)
 800dd84:	881b      	ldrh	r3, [r3, #0]
 800dd86:	3301      	adds	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <tcp_new_port+0x84>)
 800dd8c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dd8e:	4b1b      	ldr	r3, [pc, #108]	; (800ddfc <tcp_new_port+0x84>)
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d103      	bne.n	800dda2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dd9a:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <tcp_new_port+0x84>)
 800dd9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dda0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dda2:	2300      	movs	r3, #0
 800dda4:	71fb      	strb	r3, [r7, #7]
 800dda6:	e01e      	b.n	800dde6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dda8:	79fb      	ldrb	r3, [r7, #7]
 800ddaa:	4a15      	ldr	r2, [pc, #84]	; (800de00 <tcp_new_port+0x88>)
 800ddac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	603b      	str	r3, [r7, #0]
 800ddb4:	e011      	b.n	800ddda <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	8ada      	ldrh	r2, [r3, #22]
 800ddba:	4b10      	ldr	r3, [pc, #64]	; (800ddfc <tcp_new_port+0x84>)
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d108      	bne.n	800ddd4 <tcp_new_port+0x5c>
        n++;
 800ddc2:	88bb      	ldrh	r3, [r7, #4]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ddc8:	88bb      	ldrh	r3, [r7, #4]
 800ddca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddce:	d3d8      	bcc.n	800dd82 <tcp_new_port+0xa>
          return 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	e00d      	b.n	800ddf0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	603b      	str	r3, [r7, #0]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1ea      	bne.n	800ddb6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	3301      	adds	r3, #1
 800dde4:	71fb      	strb	r3, [r7, #7]
 800dde6:	79fb      	ldrb	r3, [r7, #7]
 800dde8:	2b03      	cmp	r3, #3
 800ddea:	d9dd      	bls.n	800dda8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ddec:	4b03      	ldr	r3, [pc, #12]	; (800ddfc <tcp_new_port+0x84>)
 800ddee:	881b      	ldrh	r3, [r3, #0]
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	20000024 	.word	0x20000024
 800de00:	08027d6c 	.word	0x08027d6c

0800de04 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08a      	sub	sp, #40	; 0x28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	603b      	str	r3, [r7, #0]
 800de10:	4613      	mov	r3, r2
 800de12:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d109      	bne.n	800de32 <tcp_connect+0x2e>
 800de1e:	4b7d      	ldr	r3, [pc, #500]	; (800e014 <tcp_connect+0x210>)
 800de20:	f240 4235 	movw	r2, #1077	; 0x435
 800de24:	497c      	ldr	r1, [pc, #496]	; (800e018 <tcp_connect+0x214>)
 800de26:	487d      	ldr	r0, [pc, #500]	; (800e01c <tcp_connect+0x218>)
 800de28:	f00a fe80 	bl	8018b2c <iprintf>
 800de2c:	f06f 030f 	mvn.w	r3, #15
 800de30:	e0ec      	b.n	800e00c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d109      	bne.n	800de4c <tcp_connect+0x48>
 800de38:	4b76      	ldr	r3, [pc, #472]	; (800e014 <tcp_connect+0x210>)
 800de3a:	f240 4236 	movw	r2, #1078	; 0x436
 800de3e:	4978      	ldr	r1, [pc, #480]	; (800e020 <tcp_connect+0x21c>)
 800de40:	4876      	ldr	r0, [pc, #472]	; (800e01c <tcp_connect+0x218>)
 800de42:	f00a fe73 	bl	8018b2c <iprintf>
 800de46:	f06f 030f 	mvn.w	r3, #15
 800de4a:	e0df      	b.n	800e00c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	7d1b      	ldrb	r3, [r3, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d009      	beq.n	800de68 <tcp_connect+0x64>
 800de54:	4b6f      	ldr	r3, [pc, #444]	; (800e014 <tcp_connect+0x210>)
 800de56:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800de5a:	4972      	ldr	r1, [pc, #456]	; (800e024 <tcp_connect+0x220>)
 800de5c:	486f      	ldr	r0, [pc, #444]	; (800e01c <tcp_connect+0x218>)
 800de5e:	f00a fe65 	bl	8018b2c <iprintf>
 800de62:	f06f 0309 	mvn.w	r3, #9
 800de66:	e0d1      	b.n	800e00c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <tcp_connect+0x70>
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	e000      	b.n	800de76 <tcp_connect+0x72>
 800de74:	2300      	movs	r3, #0
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	88fa      	ldrh	r2, [r7, #6]
 800de7e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	7a1b      	ldrb	r3, [r3, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d006      	beq.n	800de96 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	7a1b      	ldrb	r3, [r3, #8]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe fbbb 	bl	800c608 <netif_get_by_index>
 800de92:	6278      	str	r0, [r7, #36]	; 0x24
 800de94:	e005      	b.n	800dea2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3304      	adds	r3, #4
 800de9a:	4618      	mov	r0, r3
 800de9c:	f009 f96c 	bl	8017178 <ip4_route>
 800dea0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dea8:	f06f 0303 	mvn.w	r3, #3
 800deac:	e0ae      	b.n	800e00c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d003      	beq.n	800debc <tcp_connect+0xb8>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d111      	bne.n	800dee0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <tcp_connect+0xc4>
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	3304      	adds	r3, #4
 800dec6:	e000      	b.n	800deca <tcp_connect+0xc6>
 800dec8:	2300      	movs	r3, #0
 800deca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d102      	bne.n	800ded8 <tcp_connect+0xd4>
      return ERR_RTE;
 800ded2:	f06f 0303 	mvn.w	r3, #3
 800ded6:	e099      	b.n	800e00c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	8adb      	ldrh	r3, [r3, #22]
 800dee4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8adb      	ldrh	r3, [r3, #22]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10c      	bne.n	800df08 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800deee:	f7ff ff43 	bl	800dd78 <tcp_new_port>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	8adb      	ldrh	r3, [r3, #22]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d102      	bne.n	800df08 <tcp_connect+0x104>
      return ERR_BUF;
 800df02:	f06f 0301 	mvn.w	r3, #1
 800df06:	e081      	b.n	800e00c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f001 f885 	bl	800f018 <tcp_next_iss>
 800df0e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	1e5a      	subs	r2, r3, #1
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	1e5a      	subs	r2, r3, #1
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	1e5a      	subs	r2, r3, #1
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df5c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3304      	adds	r3, #4
 800df66:	461a      	mov	r2, r3
 800df68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df6a:	f001 f87b 	bl	800f064 <tcp_eff_send_mss_netif>
 800df6e:	4603      	mov	r3, r0
 800df70:	461a      	mov	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2201      	movs	r2, #1
 800df7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800df86:	2102      	movs	r1, #2
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f004 fadf 	bl	801254c <tcp_enqueue_flags>
 800df8e:	4603      	mov	r3, r0
 800df90:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800df92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d136      	bne.n	800e008 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2202      	movs	r2, #2
 800df9e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800dfa0:	8b7b      	ldrh	r3, [r7, #26]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d021      	beq.n	800dfea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfa6:	4b20      	ldr	r3, [pc, #128]	; (800e028 <tcp_connect+0x224>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d105      	bne.n	800dfbc <tcp_connect+0x1b8>
 800dfb0:	4b1d      	ldr	r3, [pc, #116]	; (800e028 <tcp_connect+0x224>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	4a1c      	ldr	r2, [pc, #112]	; (800e028 <tcp_connect+0x224>)
 800dfb8:	6013      	str	r3, [r2, #0]
 800dfba:	e013      	b.n	800dfe4 <tcp_connect+0x1e0>
 800dfbc:	4b1a      	ldr	r3, [pc, #104]	; (800e028 <tcp_connect+0x224>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	623b      	str	r3, [r7, #32]
 800dfc2:	e00c      	b.n	800dfde <tcp_connect+0x1da>
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d104      	bne.n	800dfd8 <tcp_connect+0x1d4>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	60da      	str	r2, [r3, #12]
 800dfd6:	e005      	b.n	800dfe4 <tcp_connect+0x1e0>
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	623b      	str	r3, [r7, #32]
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1ef      	bne.n	800dfc4 <tcp_connect+0x1c0>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800dfea:	4b10      	ldr	r3, [pc, #64]	; (800e02c <tcp_connect+0x228>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	4a0e      	ldr	r2, [pc, #56]	; (800e02c <tcp_connect+0x228>)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	f005 fb0c 	bl	8013614 <tcp_timer_needed>
 800dffc:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <tcp_connect+0x22c>)
 800dffe:	2201      	movs	r2, #1
 800e000:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f004 fb90 	bl	8012728 <tcp_output>
  }
  return ret;
 800e008:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3728      	adds	r7, #40	; 0x28
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	0801b870 	.word	0x0801b870
 800e018:	0801bb4c 	.word	0x0801bb4c
 800e01c:	0801b8b4 	.word	0x0801b8b4
 800e020:	0801bb68 	.word	0x0801bb68
 800e024:	0801bb84 	.word	0x0801bb84
 800e028:	200111a4 	.word	0x200111a4
 800e02c:	200111ac 	.word	0x200111ac
 800e030:	200111b4 	.word	0x200111b4

0800e034 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e034:	b5b0      	push	{r4, r5, r7, lr}
 800e036:	b090      	sub	sp, #64	; 0x40
 800e038:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e040:	4b94      	ldr	r3, [pc, #592]	; (800e294 <tcp_slowtmr+0x260>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	4a93      	ldr	r2, [pc, #588]	; (800e294 <tcp_slowtmr+0x260>)
 800e048:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e04a:	4b93      	ldr	r3, [pc, #588]	; (800e298 <tcp_slowtmr+0x264>)
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	b2da      	uxtb	r2, r3
 800e052:	4b91      	ldr	r3, [pc, #580]	; (800e298 <tcp_slowtmr+0x264>)
 800e054:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e05a:	4b90      	ldr	r3, [pc, #576]	; (800e29c <tcp_slowtmr+0x268>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e060:	e29f      	b.n	800e5a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e064:	7d1b      	ldrb	r3, [r3, #20]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <tcp_slowtmr+0x44>
 800e06a:	4b8d      	ldr	r3, [pc, #564]	; (800e2a0 <tcp_slowtmr+0x26c>)
 800e06c:	f240 42be 	movw	r2, #1214	; 0x4be
 800e070:	498c      	ldr	r1, [pc, #560]	; (800e2a4 <tcp_slowtmr+0x270>)
 800e072:	488d      	ldr	r0, [pc, #564]	; (800e2a8 <tcp_slowtmr+0x274>)
 800e074:	f00a fd5a 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	7d1b      	ldrb	r3, [r3, #20]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d106      	bne.n	800e08e <tcp_slowtmr+0x5a>
 800e080:	4b87      	ldr	r3, [pc, #540]	; (800e2a0 <tcp_slowtmr+0x26c>)
 800e082:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e086:	4989      	ldr	r1, [pc, #548]	; (800e2ac <tcp_slowtmr+0x278>)
 800e088:	4887      	ldr	r0, [pc, #540]	; (800e2a8 <tcp_slowtmr+0x274>)
 800e08a:	f00a fd4f 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e090:	7d1b      	ldrb	r3, [r3, #20]
 800e092:	2b0a      	cmp	r3, #10
 800e094:	d106      	bne.n	800e0a4 <tcp_slowtmr+0x70>
 800e096:	4b82      	ldr	r3, [pc, #520]	; (800e2a0 <tcp_slowtmr+0x26c>)
 800e098:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e09c:	4984      	ldr	r1, [pc, #528]	; (800e2b0 <tcp_slowtmr+0x27c>)
 800e09e:	4882      	ldr	r0, [pc, #520]	; (800e2a8 <tcp_slowtmr+0x274>)
 800e0a0:	f00a fd44 	bl	8018b2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	7f9a      	ldrb	r2, [r3, #30]
 800e0a8:	4b7b      	ldr	r3, [pc, #492]	; (800e298 <tcp_slowtmr+0x264>)
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d105      	bne.n	800e0bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e0ba:	e272      	b.n	800e5a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e0bc:	4b76      	ldr	r3, [pc, #472]	; (800e298 <tcp_slowtmr+0x264>)
 800e0be:	781a      	ldrb	r2, [r3, #0]
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	7d1b      	ldrb	r3, [r3, #20]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d10a      	bne.n	800e0ee <tcp_slowtmr+0xba>
 800e0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0de:	2b05      	cmp	r3, #5
 800e0e0:	d905      	bls.n	800e0ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0ec:	e11e      	b.n	800e32c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0f4:	2b0b      	cmp	r3, #11
 800e0f6:	d905      	bls.n	800e104 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e102:	e113      	b.n	800e32c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d075      	beq.n	800e1fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e112:	2b00      	cmp	r3, #0
 800e114:	d006      	beq.n	800e124 <tcp_slowtmr+0xf0>
 800e116:	4b62      	ldr	r3, [pc, #392]	; (800e2a0 <tcp_slowtmr+0x26c>)
 800e118:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e11c:	4965      	ldr	r1, [pc, #404]	; (800e2b4 <tcp_slowtmr+0x280>)
 800e11e:	4862      	ldr	r0, [pc, #392]	; (800e2a8 <tcp_slowtmr+0x274>)
 800e120:	f00a fd04 	bl	8018b2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <tcp_slowtmr+0x106>
 800e12c:	4b5c      	ldr	r3, [pc, #368]	; (800e2a0 <tcp_slowtmr+0x26c>)
 800e12e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e132:	4961      	ldr	r1, [pc, #388]	; (800e2b8 <tcp_slowtmr+0x284>)
 800e134:	485c      	ldr	r0, [pc, #368]	; (800e2a8 <tcp_slowtmr+0x274>)
 800e136:	f00a fcf9 	bl	8018b2c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e140:	2b0b      	cmp	r3, #11
 800e142:	d905      	bls.n	800e150 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e148:	3301      	adds	r3, #1
 800e14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e14e:	e0ed      	b.n	800e32c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e156:	3b01      	subs	r3, #1
 800e158:	4a58      	ldr	r2, [pc, #352]	; (800e2bc <tcp_slowtmr+0x288>)
 800e15a:	5cd3      	ldrb	r3, [r2, r3]
 800e15c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e164:	7c7a      	ldrb	r2, [r7, #17]
 800e166:	429a      	cmp	r2, r3
 800e168:	d907      	bls.n	800e17a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e170:	3301      	adds	r3, #1
 800e172:	b2da      	uxtb	r2, r3
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e180:	7c7a      	ldrb	r2, [r7, #17]
 800e182:	429a      	cmp	r2, r3
 800e184:	f200 80d2 	bhi.w	800e32c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e188:	2301      	movs	r3, #1
 800e18a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e192:	2b00      	cmp	r3, #0
 800e194:	d108      	bne.n	800e1a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e198:	f005 f96e 	bl	8013478 <tcp_zero_window_probe>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d014      	beq.n	800e1cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	623b      	str	r3, [r7, #32]
 800e1a6:	e011      	b.n	800e1cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1b2:	f004 f833 	bl	801221c <tcp_split_unsent_seg>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d107      	bne.n	800e1cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e1bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1be:	f004 fab3 	bl	8012728 <tcp_output>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d101      	bne.n	800e1cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	f000 80ac 	beq.w	800e32c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1e2:	2b06      	cmp	r3, #6
 800e1e4:	f200 80a2 	bhi.w	800e32c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e1f8:	e098      	b.n	800e32c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e200:	2b00      	cmp	r3, #0
 800e202:	db0f      	blt.n	800e224 <tcp_slowtmr+0x1f0>
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e20a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e20e:	4293      	cmp	r3, r2
 800e210:	d008      	beq.n	800e224 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e218:	b29b      	uxth	r3, r3
 800e21a:	3301      	adds	r3, #1
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	b21a      	sxth	r2, r3
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e226:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e230:	429a      	cmp	r2, r3
 800e232:	db7b      	blt.n	800e32c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e236:	f004 fd6b 	bl	8012d10 <tcp_rexmit_rto_prepare>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d007      	beq.n	800e250 <tcp_slowtmr+0x21c>
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e244:	2b00      	cmp	r3, #0
 800e246:	d171      	bne.n	800e32c <tcp_slowtmr+0x2f8>
 800e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d06d      	beq.n	800e32c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	7d1b      	ldrb	r3, [r3, #20]
 800e254:	2b02      	cmp	r3, #2
 800e256:	d03a      	beq.n	800e2ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e25e:	2b0c      	cmp	r3, #12
 800e260:	bf28      	it	cs
 800e262:	230c      	movcs	r3, #12
 800e264:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e26c:	10db      	asrs	r3, r3, #3
 800e26e:	b21b      	sxth	r3, r3
 800e270:	461a      	mov	r2, r3
 800e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e274:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e278:	4413      	add	r3, r2
 800e27a:	7efa      	ldrb	r2, [r7, #27]
 800e27c:	4910      	ldr	r1, [pc, #64]	; (800e2c0 <tcp_slowtmr+0x28c>)
 800e27e:	5c8a      	ldrb	r2, [r1, r2]
 800e280:	4093      	lsls	r3, r2
 800e282:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e28a:	4293      	cmp	r3, r2
 800e28c:	dc1a      	bgt.n	800e2c4 <tcp_slowtmr+0x290>
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	b21a      	sxth	r2, r3
 800e292:	e019      	b.n	800e2c8 <tcp_slowtmr+0x294>
 800e294:	200111a0 	.word	0x200111a0
 800e298:	200111b6 	.word	0x200111b6
 800e29c:	200111ac 	.word	0x200111ac
 800e2a0:	0801b870 	.word	0x0801b870
 800e2a4:	0801bbb4 	.word	0x0801bbb4
 800e2a8:	0801b8b4 	.word	0x0801b8b4
 800e2ac:	0801bbe0 	.word	0x0801bbe0
 800e2b0:	0801bc0c 	.word	0x0801bc0c
 800e2b4:	0801bc3c 	.word	0x0801bc3c
 800e2b8:	0801bc70 	.word	0x0801bc70
 800e2bc:	08027d64 	.word	0x08027d64
 800e2c0:	08027d54 	.word	0x08027d54
 800e2c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	bf28      	it	cs
 800e2e4:	4613      	movcs	r3, r2
 800e2e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e2e8:	8a7b      	ldrh	r3, [r7, #18]
 800e2ea:	085b      	lsrs	r3, r3, #1
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	b29b      	uxth	r3, r3
 800e302:	429a      	cmp	r2, r3
 800e304:	d206      	bcs.n	800e314 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e30a:	005b      	lsls	r3, r3, #1
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e320:	2200      	movs	r2, #0
 800e322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e328:	f004 fd62 	bl	8012df0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	2b06      	cmp	r3, #6
 800e332:	d111      	bne.n	800e358 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	8b5b      	ldrh	r3, [r3, #26]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00b      	beq.n	800e358 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e340:	4b9d      	ldr	r3, [pc, #628]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	6a1b      	ldr	r3, [r3, #32]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	2b28      	cmp	r3, #40	; 0x28
 800e34c:	d904      	bls.n	800e358 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e352:	3301      	adds	r3, #1
 800e354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	7a5b      	ldrb	r3, [r3, #9]
 800e35c:	f003 0308 	and.w	r3, r3, #8
 800e360:	2b00      	cmp	r3, #0
 800e362:	d04c      	beq.n	800e3fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e366:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e368:	2b04      	cmp	r3, #4
 800e36a:	d003      	beq.n	800e374 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e370:	2b07      	cmp	r3, #7
 800e372:	d144      	bne.n	800e3fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e374:	4b90      	ldr	r3, [pc, #576]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e384:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e388:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e38c:	498b      	ldr	r1, [pc, #556]	; (800e5bc <tcp_slowtmr+0x588>)
 800e38e:	fba1 1303 	umull	r1, r3, r1, r3
 800e392:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e394:	429a      	cmp	r2, r3
 800e396:	d90a      	bls.n	800e3ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e39c:	3301      	adds	r3, #1
 800e39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e3a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e3ac:	e027      	b.n	800e3fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3ae:	4b82      	ldr	r3, [pc, #520]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	6a1b      	ldr	r3, [r3, #32]
 800e3b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	4b7e      	ldr	r3, [pc, #504]	; (800e5c0 <tcp_slowtmr+0x58c>)
 800e3c8:	fb00 f303 	mul.w	r3, r0, r3
 800e3cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e3ce:	497b      	ldr	r1, [pc, #492]	; (800e5bc <tcp_slowtmr+0x588>)
 800e3d0:	fba1 1303 	umull	r1, r3, r1, r3
 800e3d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d911      	bls.n	800e3fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3dc:	f005 f80c 	bl	80133f8 <tcp_keepalive>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e3e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d107      	bne.n	800e3fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e402:	2b00      	cmp	r3, #0
 800e404:	d011      	beq.n	800e42a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e406:	4b6c      	ldr	r3, [pc, #432]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40c:	6a1b      	ldr	r3, [r3, #32]
 800e40e:	1ad2      	subs	r2, r2, r3
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e416:	4619      	mov	r1, r3
 800e418:	460b      	mov	r3, r1
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	440b      	add	r3, r1
 800e41e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e420:	429a      	cmp	r2, r3
 800e422:	d302      	bcc.n	800e42a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e426:	f000 fec7 	bl	800f1b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d10b      	bne.n	800e44a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e432:	4b61      	ldr	r3, [pc, #388]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	2b28      	cmp	r3, #40	; 0x28
 800e43e:	d904      	bls.n	800e44a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e444:	3301      	adds	r3, #1
 800e446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44c:	7d1b      	ldrb	r3, [r3, #20]
 800e44e:	2b09      	cmp	r3, #9
 800e450:	d10b      	bne.n	800e46a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e452:	4b59      	ldr	r3, [pc, #356]	; (800e5b8 <tcp_slowtmr+0x584>)
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	2bf0      	cmp	r3, #240	; 0xf0
 800e45e:	d904      	bls.n	800e46a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e464:	3301      	adds	r3, #1
 800e466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d060      	beq.n	800e534 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e478:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e47a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e47c:	f000 fce8 	bl	800ee50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	2b00      	cmp	r3, #0
 800e484:	d010      	beq.n	800e4a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e486:	4b4f      	ldr	r3, [pc, #316]	; (800e5c4 <tcp_slowtmr+0x590>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d106      	bne.n	800e49e <tcp_slowtmr+0x46a>
 800e490:	4b4d      	ldr	r3, [pc, #308]	; (800e5c8 <tcp_slowtmr+0x594>)
 800e492:	f240 526d 	movw	r2, #1389	; 0x56d
 800e496:	494d      	ldr	r1, [pc, #308]	; (800e5cc <tcp_slowtmr+0x598>)
 800e498:	484d      	ldr	r0, [pc, #308]	; (800e5d0 <tcp_slowtmr+0x59c>)
 800e49a:	f00a fb47 	bl	8018b2c <iprintf>
        prev->next = pcb->next;
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	60da      	str	r2, [r3, #12]
 800e4a6:	e00f      	b.n	800e4c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e4a8:	4b46      	ldr	r3, [pc, #280]	; (800e5c4 <tcp_slowtmr+0x590>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d006      	beq.n	800e4c0 <tcp_slowtmr+0x48c>
 800e4b2:	4b45      	ldr	r3, [pc, #276]	; (800e5c8 <tcp_slowtmr+0x594>)
 800e4b4:	f240 5271 	movw	r2, #1393	; 0x571
 800e4b8:	4946      	ldr	r1, [pc, #280]	; (800e5d4 <tcp_slowtmr+0x5a0>)
 800e4ba:	4845      	ldr	r0, [pc, #276]	; (800e5d0 <tcp_slowtmr+0x59c>)
 800e4bc:	f00a fb36 	bl	8018b2c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	4a3f      	ldr	r2, [pc, #252]	; (800e5c4 <tcp_slowtmr+0x590>)
 800e4c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d013      	beq.n	800e4f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	3304      	adds	r3, #4
 800e4de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4e0:	8ad2      	ldrh	r2, [r2, #22]
 800e4e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4e4:	8b09      	ldrh	r1, [r1, #24]
 800e4e6:	9102      	str	r1, [sp, #8]
 800e4e8:	9201      	str	r2, [sp, #4]
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	4601      	mov	r1, r0
 800e4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4f4:	f004 fecc 	bl	8013290 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	7d1b      	ldrb	r3, [r3, #20]
 800e502:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e50e:	6838      	ldr	r0, [r7, #0]
 800e510:	f7fe fec4 	bl	800d29c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e514:	4b30      	ldr	r3, [pc, #192]	; (800e5d8 <tcp_slowtmr+0x5a4>)
 800e516:	2200      	movs	r2, #0
 800e518:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <tcp_slowtmr+0x4f6>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f06f 010c 	mvn.w	r1, #12
 800e526:	68b8      	ldr	r0, [r7, #8]
 800e528:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e52a:	4b2b      	ldr	r3, [pc, #172]	; (800e5d8 <tcp_slowtmr+0x5a4>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d037      	beq.n	800e5a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e532:	e590      	b.n	800e056 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e536:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	7f1b      	ldrb	r3, [r3, #28]
 800e542:	3301      	adds	r3, #1
 800e544:	b2da      	uxtb	r2, r3
 800e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e548:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	7f1a      	ldrb	r2, [r3, #28]
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	7f5b      	ldrb	r3, [r3, #29]
 800e552:	429a      	cmp	r2, r3
 800e554:	d325      	bcc.n	800e5a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	2200      	movs	r2, #0
 800e55a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e55c:	4b1e      	ldr	r3, [pc, #120]	; (800e5d8 <tcp_slowtmr+0x5a4>)
 800e55e:	2200      	movs	r2, #0
 800e560:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00b      	beq.n	800e584 <tcp_slowtmr+0x550>
 800e56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e574:	6912      	ldr	r2, [r2, #16]
 800e576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	4603      	mov	r3, r0
 800e57e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e582:	e002      	b.n	800e58a <tcp_slowtmr+0x556>
 800e584:	2300      	movs	r3, #0
 800e586:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e58a:	4b13      	ldr	r3, [pc, #76]	; (800e5d8 <tcp_slowtmr+0x5a4>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d000      	beq.n	800e594 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e592:	e560      	b.n	800e056 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e594:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d102      	bne.n	800e5a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e59e:	f004 f8c3 	bl	8012728 <tcp_output>
  while (pcb != NULL) {
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f47f ad5c 	bne.w	800e062 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e5ae:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <tcp_slowtmr+0x5a8>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e5b4:	e067      	b.n	800e686 <tcp_slowtmr+0x652>
 800e5b6:	bf00      	nop
 800e5b8:	200111a0 	.word	0x200111a0
 800e5bc:	10624dd3 	.word	0x10624dd3
 800e5c0:	000124f8 	.word	0x000124f8
 800e5c4:	200111ac 	.word	0x200111ac
 800e5c8:	0801b870 	.word	0x0801b870
 800e5cc:	0801bca8 	.word	0x0801bca8
 800e5d0:	0801b8b4 	.word	0x0801b8b4
 800e5d4:	0801bcd4 	.word	0x0801bcd4
 800e5d8:	200111b4 	.word	0x200111b4
 800e5dc:	200111b0 	.word	0x200111b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b0a      	cmp	r3, #10
 800e5e6:	d006      	beq.n	800e5f6 <tcp_slowtmr+0x5c2>
 800e5e8:	4b2b      	ldr	r3, [pc, #172]	; (800e698 <tcp_slowtmr+0x664>)
 800e5ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e5ee:	492b      	ldr	r1, [pc, #172]	; (800e69c <tcp_slowtmr+0x668>)
 800e5f0:	482b      	ldr	r0, [pc, #172]	; (800e6a0 <tcp_slowtmr+0x66c>)
 800e5f2:	f00a fa9b 	bl	8018b2c <iprintf>
    pcb_remove = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e5fc:	4b29      	ldr	r3, [pc, #164]	; (800e6a4 <tcp_slowtmr+0x670>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	6a1b      	ldr	r3, [r3, #32]
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	2bf0      	cmp	r3, #240	; 0xf0
 800e608:	d904      	bls.n	800e614 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e60a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e60e:	3301      	adds	r3, #1
 800e610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d02f      	beq.n	800e67c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e61c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e61e:	f000 fc17 	bl	800ee50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	2b00      	cmp	r3, #0
 800e626:	d010      	beq.n	800e64a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e628:	4b1f      	ldr	r3, [pc, #124]	; (800e6a8 <tcp_slowtmr+0x674>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e62e:	429a      	cmp	r2, r3
 800e630:	d106      	bne.n	800e640 <tcp_slowtmr+0x60c>
 800e632:	4b19      	ldr	r3, [pc, #100]	; (800e698 <tcp_slowtmr+0x664>)
 800e634:	f240 52af 	movw	r2, #1455	; 0x5af
 800e638:	491c      	ldr	r1, [pc, #112]	; (800e6ac <tcp_slowtmr+0x678>)
 800e63a:	4819      	ldr	r0, [pc, #100]	; (800e6a0 <tcp_slowtmr+0x66c>)
 800e63c:	f00a fa76 	bl	8018b2c <iprintf>
        prev->next = pcb->next;
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	68da      	ldr	r2, [r3, #12]
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	60da      	str	r2, [r3, #12]
 800e648:	e00f      	b.n	800e66a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e64a:	4b17      	ldr	r3, [pc, #92]	; (800e6a8 <tcp_slowtmr+0x674>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e650:	429a      	cmp	r2, r3
 800e652:	d006      	beq.n	800e662 <tcp_slowtmr+0x62e>
 800e654:	4b10      	ldr	r3, [pc, #64]	; (800e698 <tcp_slowtmr+0x664>)
 800e656:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e65a:	4915      	ldr	r1, [pc, #84]	; (800e6b0 <tcp_slowtmr+0x67c>)
 800e65c:	4810      	ldr	r0, [pc, #64]	; (800e6a0 <tcp_slowtmr+0x66c>)
 800e65e:	f00a fa65 	bl	8018b2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4a10      	ldr	r2, [pc, #64]	; (800e6a8 <tcp_slowtmr+0x674>)
 800e668:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	f7fe fe11 	bl	800d29c <tcp_free>
 800e67a:	e004      	b.n	800e686 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1a9      	bne.n	800e5e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e68c:	bf00      	nop
 800e68e:	bf00      	nop
 800e690:	3730      	adds	r7, #48	; 0x30
 800e692:	46bd      	mov	sp, r7
 800e694:	bdb0      	pop	{r4, r5, r7, pc}
 800e696:	bf00      	nop
 800e698:	0801b870 	.word	0x0801b870
 800e69c:	0801bd00 	.word	0x0801bd00
 800e6a0:	0801b8b4 	.word	0x0801b8b4
 800e6a4:	200111a0 	.word	0x200111a0
 800e6a8:	200111b0 	.word	0x200111b0
 800e6ac:	0801bd30 	.word	0x0801bd30
 800e6b0:	0801bd58 	.word	0x0801bd58

0800e6b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e6ba:	4b2d      	ldr	r3, [pc, #180]	; (800e770 <tcp_fasttmr+0xbc>)
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	4b2b      	ldr	r3, [pc, #172]	; (800e770 <tcp_fasttmr+0xbc>)
 800e6c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e6c6:	4b2b      	ldr	r3, [pc, #172]	; (800e774 <tcp_fasttmr+0xc0>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6cc:	e048      	b.n	800e760 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	7f9a      	ldrb	r2, [r3, #30]
 800e6d2:	4b27      	ldr	r3, [pc, #156]	; (800e770 <tcp_fasttmr+0xbc>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d03f      	beq.n	800e75a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e6da:	4b25      	ldr	r3, [pc, #148]	; (800e770 <tcp_fasttmr+0xbc>)
 800e6dc:	781a      	ldrb	r2, [r3, #0]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	8b5b      	ldrh	r3, [r3, #26]
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d010      	beq.n	800e710 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8b5b      	ldrh	r3, [r3, #26]
 800e6f2:	f043 0302 	orr.w	r3, r3, #2
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f004 f813 	bl	8012728 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	8b5b      	ldrh	r3, [r3, #26]
 800e706:	f023 0303 	bic.w	r3, r3, #3
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8b5b      	ldrh	r3, [r3, #26]
 800e714:	f003 0308 	and.w	r3, r3, #8
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d009      	beq.n	800e730 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	8b5b      	ldrh	r3, [r3, #26]
 800e720:	f023 0308 	bic.w	r3, r3, #8
 800e724:	b29a      	uxth	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f7fe ff4a 	bl	800d5c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e73e:	4b0e      	ldr	r3, [pc, #56]	; (800e778 <tcp_fasttmr+0xc4>)
 800e740:	2200      	movs	r2, #0
 800e742:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 f819 	bl	800e77c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e74a:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <tcp_fasttmr+0xc4>)
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d000      	beq.n	800e754 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e752:	e7b8      	b.n	800e6c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	607b      	str	r3, [r7, #4]
 800e758:	e002      	b.n	800e760 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d1b3      	bne.n	800e6ce <tcp_fasttmr+0x1a>
    }
  }
}
 800e766:	bf00      	nop
 800e768:	bf00      	nop
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	200111b6 	.word	0x200111b6
 800e774:	200111ac 	.word	0x200111ac
 800e778:	200111b4 	.word	0x200111b4

0800e77c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e77c:	b590      	push	{r4, r7, lr}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d109      	bne.n	800e79e <tcp_process_refused_data+0x22>
 800e78a:	4b37      	ldr	r3, [pc, #220]	; (800e868 <tcp_process_refused_data+0xec>)
 800e78c:	f240 6209 	movw	r2, #1545	; 0x609
 800e790:	4936      	ldr	r1, [pc, #216]	; (800e86c <tcp_process_refused_data+0xf0>)
 800e792:	4837      	ldr	r0, [pc, #220]	; (800e870 <tcp_process_refused_data+0xf4>)
 800e794:	f00a f9ca 	bl	8018b2c <iprintf>
 800e798:	f06f 030f 	mvn.w	r3, #15
 800e79c:	e060      	b.n	800e860 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7a2:	7b5b      	ldrb	r3, [r3, #13]
 800e7a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00b      	beq.n	800e7d4 <tcp_process_refused_data+0x58>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6918      	ldr	r0, [r3, #16]
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	68ba      	ldr	r2, [r7, #8]
 800e7ca:	6879      	ldr	r1, [r7, #4]
 800e7cc:	47a0      	blx	r4
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	73fb      	strb	r3, [r7, #15]
 800e7d2:	e007      	b.n	800e7e4 <tcp_process_refused_data+0x68>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	2000      	movs	r0, #0
 800e7dc:	f000 f8c2 	bl	800e964 <tcp_recv_null>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e7e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d12a      	bne.n	800e842 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	f003 0320 	and.w	r3, r3, #32
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d033      	beq.n	800e85e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e7fe:	d005      	beq.n	800e80c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e804:	3301      	adds	r3, #1
 800e806:	b29a      	uxth	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00b      	beq.n	800e82e <tcp_process_refused_data+0xb2>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6918      	ldr	r0, [r3, #16]
 800e820:	2300      	movs	r3, #0
 800e822:	2200      	movs	r2, #0
 800e824:	6879      	ldr	r1, [r7, #4]
 800e826:	47a0      	blx	r4
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
 800e82c:	e001      	b.n	800e832 <tcp_process_refused_data+0xb6>
 800e82e:	2300      	movs	r3, #0
 800e830:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e836:	f113 0f0d 	cmn.w	r3, #13
 800e83a:	d110      	bne.n	800e85e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e83c:	f06f 030c 	mvn.w	r3, #12
 800e840:	e00e      	b.n	800e860 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e846:	f113 0f0d 	cmn.w	r3, #13
 800e84a:	d102      	bne.n	800e852 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e84c:	f06f 030c 	mvn.w	r3, #12
 800e850:	e006      	b.n	800e860 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e858:	f06f 0304 	mvn.w	r3, #4
 800e85c:	e000      	b.n	800e860 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	bd90      	pop	{r4, r7, pc}
 800e868:	0801b870 	.word	0x0801b870
 800e86c:	0801bd80 	.word	0x0801bd80
 800e870:	0801b8b4 	.word	0x0801b8b4

0800e874 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e87c:	e007      	b.n	800e88e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 f80a 	bl	800e89e <tcp_seg_free>
    seg = next;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1f4      	bne.n	800e87e <tcp_segs_free+0xa>
  }
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00c      	beq.n	800e8c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fa33 	bl	800cd24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e8be:	6879      	ldr	r1, [r7, #4]
 800e8c0:	2003      	movs	r0, #3
 800e8c2:	f7fd fb7f 	bl	800bfc4 <memp_free>
  }
}
 800e8c6:	bf00      	nop
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d107      	bne.n	800e8f2 <tcp_setprio+0x22>
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <tcp_setprio+0x30>)
 800e8e4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e8e8:	4906      	ldr	r1, [pc, #24]	; (800e904 <tcp_setprio+0x34>)
 800e8ea:	4807      	ldr	r0, [pc, #28]	; (800e908 <tcp_setprio+0x38>)
 800e8ec:	f00a f91e 	bl	8018b2c <iprintf>
 800e8f0:	e002      	b.n	800e8f8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	78fa      	ldrb	r2, [r7, #3]
 800e8f6:	755a      	strb	r2, [r3, #21]
}
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	0801b870 	.word	0x0801b870
 800e904:	0801bda8 	.word	0x0801bda8
 800e908:	0801b8b4 	.word	0x0801b8b4

0800e90c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d106      	bne.n	800e928 <tcp_seg_copy+0x1c>
 800e91a:	4b0f      	ldr	r3, [pc, #60]	; (800e958 <tcp_seg_copy+0x4c>)
 800e91c:	f240 6282 	movw	r2, #1666	; 0x682
 800e920:	490e      	ldr	r1, [pc, #56]	; (800e95c <tcp_seg_copy+0x50>)
 800e922:	480f      	ldr	r0, [pc, #60]	; (800e960 <tcp_seg_copy+0x54>)
 800e924:	f00a f902 	bl	8018b2c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e928:	2003      	movs	r0, #3
 800e92a:	f7fd fad5 	bl	800bed8 <memp_malloc>
 800e92e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <tcp_seg_copy+0x2e>
    return NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	e00a      	b.n	800e950 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e93a:	2210      	movs	r2, #16
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f00a faf4 	bl	8018f2c <memcpy>
  pbuf_ref(cseg->p);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe fa91 	bl	800ce70 <pbuf_ref>
  return cseg;
 800e94e:	68fb      	ldr	r3, [r7, #12]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	0801b870 	.word	0x0801b870
 800e95c:	0801bdc4 	.word	0x0801bdc4
 800e960:	0801b8b4 	.word	0x0801b8b4

0800e964 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d109      	bne.n	800e98c <tcp_recv_null+0x28>
 800e978:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <tcp_recv_null+0x60>)
 800e97a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e97e:	4912      	ldr	r1, [pc, #72]	; (800e9c8 <tcp_recv_null+0x64>)
 800e980:	4812      	ldr	r0, [pc, #72]	; (800e9cc <tcp_recv_null+0x68>)
 800e982:	f00a f8d3 	bl	8018b2c <iprintf>
 800e986:	f06f 030f 	mvn.w	r3, #15
 800e98a:	e016      	b.n	800e9ba <tcp_recv_null+0x56>

  if (p != NULL) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d009      	beq.n	800e9a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	891b      	ldrh	r3, [r3, #8]
 800e996:	4619      	mov	r1, r3
 800e998:	68b8      	ldr	r0, [r7, #8]
 800e99a:	f7ff f99d 	bl	800dcd8 <tcp_recved>
    pbuf_free(p);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7fe f9c0 	bl	800cd24 <pbuf_free>
 800e9a4:	e008      	b.n	800e9b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e9a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d104      	bne.n	800e9b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e9ae:	68b8      	ldr	r0, [r7, #8]
 800e9b0:	f7fe fe72 	bl	800d698 <tcp_close>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	e000      	b.n	800e9ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	0801b870 	.word	0x0801b870
 800e9c8:	0801bde0 	.word	0x0801bde0
 800e9cc:	0801b8b4 	.word	0x0801b8b4

0800e9d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e9da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	db01      	blt.n	800e9e6 <tcp_kill_prio+0x16>
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	e000      	b.n	800e9e8 <tcp_kill_prio+0x18>
 800e9e6:	237f      	movs	r3, #127	; 0x7f
 800e9e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e9ea:	7afb      	ldrb	r3, [r7, #11]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d034      	beq.n	800ea5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9fe:	4b19      	ldr	r3, [pc, #100]	; (800ea64 <tcp_kill_prio+0x94>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	e01f      	b.n	800ea46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	7d5b      	ldrb	r3, [r3, #21]
 800ea0a:	7afa      	ldrb	r2, [r7, #11]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d80c      	bhi.n	800ea2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ea14:	7afa      	ldrb	r2, [r7, #11]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d112      	bne.n	800ea40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea1a:	4b13      	ldr	r3, [pc, #76]	; (800ea68 <tcp_kill_prio+0x98>)
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d80a      	bhi.n	800ea40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ea2a:	4b0f      	ldr	r3, [pc, #60]	; (800ea68 <tcp_kill_prio+0x98>)
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	7d5b      	ldrb	r3, [r3, #21]
 800ea3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	617b      	str	r3, [r7, #20]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1dc      	bne.n	800ea06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d004      	beq.n	800ea5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ea52:	6938      	ldr	r0, [r7, #16]
 800ea54:	f7fe ff66 	bl	800d924 <tcp_abort>
 800ea58:	e000      	b.n	800ea5c <tcp_kill_prio+0x8c>
    return;
 800ea5a:	bf00      	nop
  }
}
 800ea5c:	3718      	adds	r7, #24
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	200111ac 	.word	0x200111ac
 800ea68:	200111a0 	.word	0x200111a0

0800ea6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	2b08      	cmp	r3, #8
 800ea7a:	d009      	beq.n	800ea90 <tcp_kill_state+0x24>
 800ea7c:	79fb      	ldrb	r3, [r7, #7]
 800ea7e:	2b09      	cmp	r3, #9
 800ea80:	d006      	beq.n	800ea90 <tcp_kill_state+0x24>
 800ea82:	4b1a      	ldr	r3, [pc, #104]	; (800eaec <tcp_kill_state+0x80>)
 800ea84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ea88:	4919      	ldr	r1, [pc, #100]	; (800eaf0 <tcp_kill_state+0x84>)
 800ea8a:	481a      	ldr	r0, [pc, #104]	; (800eaf4 <tcp_kill_state+0x88>)
 800ea8c:	f00a f84e 	bl	8018b2c <iprintf>

  inactivity = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea98:	4b17      	ldr	r3, [pc, #92]	; (800eaf8 <tcp_kill_state+0x8c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e017      	b.n	800ead0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	7d1b      	ldrb	r3, [r3, #20]
 800eaa4:	79fa      	ldrb	r2, [r7, #7]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d10f      	bne.n	800eaca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eaaa:	4b14      	ldr	r3, [pc, #80]	; (800eafc <tcp_kill_state+0x90>)
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	68fa      	ldr	r2, [r7, #12]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d807      	bhi.n	800eaca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eaba:	4b10      	ldr	r3, [pc, #64]	; (800eafc <tcp_kill_state+0x90>)
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	617b      	str	r3, [r7, #20]
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1e4      	bne.n	800eaa0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d003      	beq.n	800eae4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eadc:	2100      	movs	r1, #0
 800eade:	6938      	ldr	r0, [r7, #16]
 800eae0:	f7fe fe62 	bl	800d7a8 <tcp_abandon>
  }
}
 800eae4:	bf00      	nop
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	0801b870 	.word	0x0801b870
 800eaf0:	0801bdfc 	.word	0x0801bdfc
 800eaf4:	0801b8b4 	.word	0x0801b8b4
 800eaf8:	200111ac 	.word	0x200111ac
 800eafc:	200111a0 	.word	0x200111a0

0800eb00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb0e:	4b12      	ldr	r3, [pc, #72]	; (800eb58 <tcp_kill_timewait+0x58>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	e012      	b.n	800eb3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb16:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <tcp_kill_timewait+0x5c>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d807      	bhi.n	800eb36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eb26:	4b0d      	ldr	r3, [pc, #52]	; (800eb5c <tcp_kill_timewait+0x5c>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6a1b      	ldr	r3, [r3, #32]
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	60fb      	str	r3, [r7, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1e9      	bne.n	800eb16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb48:	68b8      	ldr	r0, [r7, #8]
 800eb4a:	f7fe feeb 	bl	800d924 <tcp_abort>
  }
}
 800eb4e:	bf00      	nop
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	200111b0 	.word	0x200111b0
 800eb5c:	200111a0 	.word	0x200111a0

0800eb60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eb66:	4b10      	ldr	r3, [pc, #64]	; (800eba8 <tcp_handle_closepend+0x48>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb6c:	e014      	b.n	800eb98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	8b5b      	ldrh	r3, [r3, #26]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d009      	beq.n	800eb94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	8b5b      	ldrh	r3, [r3, #26]
 800eb84:	f023 0308 	bic.w	r3, r3, #8
 800eb88:	b29a      	uxth	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7fe fd18 	bl	800d5c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1e7      	bne.n	800eb6e <tcp_handle_closepend+0xe>
  }
}
 800eb9e:	bf00      	nop
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	200111ac 	.word	0x200111ac

0800ebac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebb6:	2001      	movs	r0, #1
 800ebb8:	f7fd f98e 	bl	800bed8 <memp_malloc>
 800ebbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d126      	bne.n	800ec12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ebc4:	f7ff ffcc 	bl	800eb60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ebc8:	f7ff ff9a 	bl	800eb00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebcc:	2001      	movs	r0, #1
 800ebce:	f7fd f983 	bl	800bed8 <memp_malloc>
 800ebd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d11b      	bne.n	800ec12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ebda:	2009      	movs	r0, #9
 800ebdc:	f7ff ff46 	bl	800ea6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	f7fd f979 	bl	800bed8 <memp_malloc>
 800ebe6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d111      	bne.n	800ec12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ebee:	2008      	movs	r0, #8
 800ebf0:	f7ff ff3c 	bl	800ea6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebf4:	2001      	movs	r0, #1
 800ebf6:	f7fd f96f 	bl	800bed8 <memp_malloc>
 800ebfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d107      	bne.n	800ec12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7ff fee3 	bl	800e9d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec0a:	2001      	movs	r0, #1
 800ec0c:	f7fd f964 	bl	800bed8 <memp_malloc>
 800ec10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d03f      	beq.n	800ec98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ec18:	229c      	movs	r2, #156	; 0x9c
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f00a f824 	bl	8018c6a <memset>
    pcb->prio = prio;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	79fa      	ldrb	r2, [r7, #7]
 800ec26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec38:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	22ff      	movs	r2, #255	; 0xff
 800ec46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ec4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2206      	movs	r2, #6
 800ec54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2206      	movs	r2, #6
 800ec5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ec6e:	4b0d      	ldr	r3, [pc, #52]	; (800eca4 <tcp_alloc+0xf8>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec76:	4b0c      	ldr	r3, [pc, #48]	; (800eca8 <tcp_alloc+0xfc>)
 800ec78:	781a      	ldrb	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	4a08      	ldr	r2, [pc, #32]	; (800ecac <tcp_alloc+0x100>)
 800ec8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	4a07      	ldr	r2, [pc, #28]	; (800ecb0 <tcp_alloc+0x104>)
 800ec94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ec98:	68fb      	ldr	r3, [r7, #12]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	200111a0 	.word	0x200111a0
 800eca8:	200111b6 	.word	0x200111b6
 800ecac:	0800e965 	.word	0x0800e965
 800ecb0:	006ddd00 	.word	0x006ddd00

0800ecb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ecbe:	2040      	movs	r0, #64	; 0x40
 800ecc0:	f7ff ff74 	bl	800ebac <tcp_alloc>
 800ecc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	611a      	str	r2, [r3, #16]
  }
}
 800ece6:	bf00      	nop
 800ece8:	370c      	adds	r7, #12
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00e      	beq.n	800ed22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	7d1b      	ldrb	r3, [r3, #20]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d106      	bne.n	800ed1a <tcp_recv+0x26>
 800ed0c:	4b07      	ldr	r3, [pc, #28]	; (800ed2c <tcp_recv+0x38>)
 800ed0e:	f240 72df 	movw	r2, #2015	; 0x7df
 800ed12:	4907      	ldr	r1, [pc, #28]	; (800ed30 <tcp_recv+0x3c>)
 800ed14:	4807      	ldr	r0, [pc, #28]	; (800ed34 <tcp_recv+0x40>)
 800ed16:	f009 ff09 	bl	8018b2c <iprintf>
    pcb->recv = recv;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ed22:	bf00      	nop
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	0801b870 	.word	0x0801b870
 800ed30:	0801be0c 	.word	0x0801be0c
 800ed34:	0801b8b4 	.word	0x0801b8b4

0800ed38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00e      	beq.n	800ed66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d106      	bne.n	800ed5e <tcp_sent+0x26>
 800ed50:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <tcp_sent+0x38>)
 800ed52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ed56:	4907      	ldr	r1, [pc, #28]	; (800ed74 <tcp_sent+0x3c>)
 800ed58:	4807      	ldr	r0, [pc, #28]	; (800ed78 <tcp_sent+0x40>)
 800ed5a:	f009 fee7 	bl	8018b2c <iprintf>
    pcb->sent = sent;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ed66:	bf00      	nop
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	0801b870 	.word	0x0801b870
 800ed74:	0801be34 	.word	0x0801be34
 800ed78:	0801b8b4 	.word	0x0801b8b4

0800ed7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00e      	beq.n	800edaa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d106      	bne.n	800eda2 <tcp_err+0x26>
 800ed94:	4b07      	ldr	r3, [pc, #28]	; (800edb4 <tcp_err+0x38>)
 800ed96:	f640 020d 	movw	r2, #2061	; 0x80d
 800ed9a:	4907      	ldr	r1, [pc, #28]	; (800edb8 <tcp_err+0x3c>)
 800ed9c:	4807      	ldr	r0, [pc, #28]	; (800edbc <tcp_err+0x40>)
 800ed9e:	f009 fec5 	bl	8018b2c <iprintf>
    pcb->errf = err;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800edaa:	bf00      	nop
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	0801b870 	.word	0x0801b870
 800edb8:	0801be5c 	.word	0x0801be5c
 800edbc:	0801b8b4 	.word	0x0801b8b4

0800edc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d008      	beq.n	800ede2 <tcp_accept+0x22>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d104      	bne.n	800ede2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	619a      	str	r2, [r3, #24]
  }
}
 800ede2:	bf00      	nop
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d107      	bne.n	800ee14 <tcp_poll+0x24>
 800ee04:	4b0e      	ldr	r3, [pc, #56]	; (800ee40 <tcp_poll+0x50>)
 800ee06:	f640 023d 	movw	r2, #2109	; 0x83d
 800ee0a:	490e      	ldr	r1, [pc, #56]	; (800ee44 <tcp_poll+0x54>)
 800ee0c:	480e      	ldr	r0, [pc, #56]	; (800ee48 <tcp_poll+0x58>)
 800ee0e:	f009 fe8d 	bl	8018b2c <iprintf>
 800ee12:	e011      	b.n	800ee38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	7d1b      	ldrb	r3, [r3, #20]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d106      	bne.n	800ee2a <tcp_poll+0x3a>
 800ee1c:	4b08      	ldr	r3, [pc, #32]	; (800ee40 <tcp_poll+0x50>)
 800ee1e:	f640 023e 	movw	r2, #2110	; 0x83e
 800ee22:	490a      	ldr	r1, [pc, #40]	; (800ee4c <tcp_poll+0x5c>)
 800ee24:	4808      	ldr	r0, [pc, #32]	; (800ee48 <tcp_poll+0x58>)
 800ee26:	f009 fe81 	bl	8018b2c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	79fa      	ldrb	r2, [r7, #7]
 800ee36:	775a      	strb	r2, [r3, #29]
}
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	0801b870 	.word	0x0801b870
 800ee44:	0801be84 	.word	0x0801be84
 800ee48:	0801b8b4 	.word	0x0801b8b4
 800ee4c:	0801be9c 	.word	0x0801be9c

0800ee50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d107      	bne.n	800ee6e <tcp_pcb_purge+0x1e>
 800ee5e:	4b21      	ldr	r3, [pc, #132]	; (800eee4 <tcp_pcb_purge+0x94>)
 800ee60:	f640 0251 	movw	r2, #2129	; 0x851
 800ee64:	4920      	ldr	r1, [pc, #128]	; (800eee8 <tcp_pcb_purge+0x98>)
 800ee66:	4821      	ldr	r0, [pc, #132]	; (800eeec <tcp_pcb_purge+0x9c>)
 800ee68:	f009 fe60 	bl	8018b2c <iprintf>
 800ee6c:	e037      	b.n	800eede <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	7d1b      	ldrb	r3, [r3, #20]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d033      	beq.n	800eede <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ee7a:	2b0a      	cmp	r3, #10
 800ee7c:	d02f      	beq.n	800eede <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d02b      	beq.n	800eede <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd ff46 	bl	800cd24 <pbuf_free>
      pcb->refused_data = NULL;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f986 	bl	800f1b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff fcdb 	bl	800e874 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fcd6 	bl	800e874 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	66da      	str	r2, [r3, #108]	; 0x6c
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	0801b870 	.word	0x0801b870
 800eee8:	0801bebc 	.word	0x0801bebc
 800eeec:	0801b8b4 	.word	0x0801b8b4

0800eef0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d106      	bne.n	800ef0e <tcp_pcb_remove+0x1e>
 800ef00:	4b3e      	ldr	r3, [pc, #248]	; (800effc <tcp_pcb_remove+0x10c>)
 800ef02:	f640 0283 	movw	r2, #2179	; 0x883
 800ef06:	493e      	ldr	r1, [pc, #248]	; (800f000 <tcp_pcb_remove+0x110>)
 800ef08:	483e      	ldr	r0, [pc, #248]	; (800f004 <tcp_pcb_remove+0x114>)
 800ef0a:	f009 fe0f 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d106      	bne.n	800ef22 <tcp_pcb_remove+0x32>
 800ef14:	4b39      	ldr	r3, [pc, #228]	; (800effc <tcp_pcb_remove+0x10c>)
 800ef16:	f640 0284 	movw	r2, #2180	; 0x884
 800ef1a:	493b      	ldr	r1, [pc, #236]	; (800f008 <tcp_pcb_remove+0x118>)
 800ef1c:	4839      	ldr	r0, [pc, #228]	; (800f004 <tcp_pcb_remove+0x114>)
 800ef1e:	f009 fe05 	bl	8018b2c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d105      	bne.n	800ef38 <tcp_pcb_remove+0x48>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68da      	ldr	r2, [r3, #12]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	e013      	b.n	800ef60 <tcp_pcb_remove+0x70>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e00c      	b.n	800ef5a <tcp_pcb_remove+0x6a>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d104      	bne.n	800ef54 <tcp_pcb_remove+0x64>
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	68da      	ldr	r2, [r3, #12]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	60da      	str	r2, [r3, #12]
 800ef52:	e005      	b.n	800ef60 <tcp_pcb_remove+0x70>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1ef      	bne.n	800ef40 <tcp_pcb_remove+0x50>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	2200      	movs	r2, #0
 800ef64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ef66:	6838      	ldr	r0, [r7, #0]
 800ef68:	f7ff ff72 	bl	800ee50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	7d1b      	ldrb	r3, [r3, #20]
 800ef70:	2b0a      	cmp	r3, #10
 800ef72:	d013      	beq.n	800ef9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d00f      	beq.n	800ef9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	8b5b      	ldrh	r3, [r3, #26]
 800ef80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d009      	beq.n	800ef9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	8b5b      	ldrh	r3, [r3, #26]
 800ef8c:	f043 0302 	orr.w	r3, r3, #2
 800ef90:	b29a      	uxth	r2, r3
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef96:	6838      	ldr	r0, [r7, #0]
 800ef98:	f003 fbc6 	bl	8012728 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	7d1b      	ldrb	r3, [r3, #20]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d020      	beq.n	800efe6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d006      	beq.n	800efba <tcp_pcb_remove+0xca>
 800efac:	4b13      	ldr	r3, [pc, #76]	; (800effc <tcp_pcb_remove+0x10c>)
 800efae:	f640 0293 	movw	r2, #2195	; 0x893
 800efb2:	4916      	ldr	r1, [pc, #88]	; (800f00c <tcp_pcb_remove+0x11c>)
 800efb4:	4813      	ldr	r0, [pc, #76]	; (800f004 <tcp_pcb_remove+0x114>)
 800efb6:	f009 fdb9 	bl	8018b2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d006      	beq.n	800efd0 <tcp_pcb_remove+0xe0>
 800efc2:	4b0e      	ldr	r3, [pc, #56]	; (800effc <tcp_pcb_remove+0x10c>)
 800efc4:	f640 0294 	movw	r2, #2196	; 0x894
 800efc8:	4911      	ldr	r1, [pc, #68]	; (800f010 <tcp_pcb_remove+0x120>)
 800efca:	480e      	ldr	r0, [pc, #56]	; (800f004 <tcp_pcb_remove+0x114>)
 800efcc:	f009 fdae 	bl	8018b2c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d006      	beq.n	800efe6 <tcp_pcb_remove+0xf6>
 800efd8:	4b08      	ldr	r3, [pc, #32]	; (800effc <tcp_pcb_remove+0x10c>)
 800efda:	f640 0296 	movw	r2, #2198	; 0x896
 800efde:	490d      	ldr	r1, [pc, #52]	; (800f014 <tcp_pcb_remove+0x124>)
 800efe0:	4808      	ldr	r0, [pc, #32]	; (800f004 <tcp_pcb_remove+0x114>)
 800efe2:	f009 fda3 	bl	8018b2c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2200      	movs	r2, #0
 800efea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	2200      	movs	r2, #0
 800eff0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eff2:	bf00      	nop
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	0801b870 	.word	0x0801b870
 800f000:	0801bed8 	.word	0x0801bed8
 800f004:	0801b8b4 	.word	0x0801b8b4
 800f008:	0801bef4 	.word	0x0801bef4
 800f00c:	0801bf14 	.word	0x0801bf14
 800f010:	0801bf2c 	.word	0x0801bf2c
 800f014:	0801bf48 	.word	0x0801bf48

0800f018 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <tcp_next_iss+0x1c>
 800f026:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <tcp_next_iss+0x38>)
 800f028:	f640 02af 	movw	r2, #2223	; 0x8af
 800f02c:	4909      	ldr	r1, [pc, #36]	; (800f054 <tcp_next_iss+0x3c>)
 800f02e:	480a      	ldr	r0, [pc, #40]	; (800f058 <tcp_next_iss+0x40>)
 800f030:	f009 fd7c 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f034:	4b09      	ldr	r3, [pc, #36]	; (800f05c <tcp_next_iss+0x44>)
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	4b09      	ldr	r3, [pc, #36]	; (800f060 <tcp_next_iss+0x48>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4413      	add	r3, r2
 800f03e:	4a07      	ldr	r2, [pc, #28]	; (800f05c <tcp_next_iss+0x44>)
 800f040:	6013      	str	r3, [r2, #0]
  return iss;
 800f042:	4b06      	ldr	r3, [pc, #24]	; (800f05c <tcp_next_iss+0x44>)
 800f044:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	0801b870 	.word	0x0801b870
 800f054:	0801bf60 	.word	0x0801bf60
 800f058:	0801b8b4 	.word	0x0801b8b4
 800f05c:	20000028 	.word	0x20000028
 800f060:	200111a0 	.word	0x200111a0

0800f064 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	4603      	mov	r3, r0
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <tcp_eff_send_mss_netif+0x22>
 800f078:	4b14      	ldr	r3, [pc, #80]	; (800f0cc <tcp_eff_send_mss_netif+0x68>)
 800f07a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f07e:	4914      	ldr	r1, [pc, #80]	; (800f0d0 <tcp_eff_send_mss_netif+0x6c>)
 800f080:	4814      	ldr	r0, [pc, #80]	; (800f0d4 <tcp_eff_send_mss_netif+0x70>)
 800f082:	f009 fd53 	bl	8018b2c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f08c:	89fb      	ldrh	r3, [r7, #14]
 800f08e:	e019      	b.n	800f0c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f094:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f096:	8afb      	ldrh	r3, [r7, #22]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d012      	beq.n	800f0c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f09c:	2328      	movs	r3, #40	; 0x28
 800f09e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f0a0:	8afa      	ldrh	r2, [r7, #22]
 800f0a2:	8abb      	ldrh	r3, [r7, #20]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d904      	bls.n	800f0b2 <tcp_eff_send_mss_netif+0x4e>
 800f0a8:	8afa      	ldrh	r2, [r7, #22]
 800f0aa:	8abb      	ldrh	r3, [r7, #20]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	e000      	b.n	800f0b4 <tcp_eff_send_mss_netif+0x50>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f0b6:	8a7a      	ldrh	r2, [r7, #18]
 800f0b8:	89fb      	ldrh	r3, [r7, #14]
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	bf28      	it	cs
 800f0be:	4613      	movcs	r3, r2
 800f0c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f0c2:	89fb      	ldrh	r3, [r7, #14]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3718      	adds	r7, #24
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	0801b870 	.word	0x0801b870
 800f0d0:	0801bf7c 	.word	0x0801bf7c
 800f0d4:	0801b8b4 	.word	0x0801b8b4

0800f0d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d119      	bne.n	800f120 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f0ec:	4b10      	ldr	r3, [pc, #64]	; (800f130 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f0ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f0f2:	4910      	ldr	r1, [pc, #64]	; (800f134 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f0f4:	4810      	ldr	r0, [pc, #64]	; (800f138 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f0f6:	f009 fd19 	bl	8018b2c <iprintf>

  while (pcb != NULL) {
 800f0fa:	e011      	b.n	800f120 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d108      	bne.n	800f11a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7fe fc08 	bl	800d924 <tcp_abort>
      pcb = next;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	60fb      	str	r3, [r7, #12]
 800f118:	e002      	b.n	800f120 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1ea      	bne.n	800f0fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f126:	bf00      	nop
 800f128:	bf00      	nop
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	0801b870 	.word	0x0801b870
 800f134:	0801bfa4 	.word	0x0801bfa4
 800f138:	0801b8b4 	.word	0x0801b8b4

0800f13c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d02a      	beq.n	800f1a2 <tcp_netif_ip_addr_changed+0x66>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d026      	beq.n	800f1a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f154:	4b15      	ldr	r3, [pc, #84]	; (800f1ac <tcp_netif_ip_addr_changed+0x70>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff ffbc 	bl	800f0d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f160:	4b13      	ldr	r3, [pc, #76]	; (800f1b0 <tcp_netif_ip_addr_changed+0x74>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4619      	mov	r1, r3
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7ff ffb6 	bl	800f0d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d017      	beq.n	800f1a2 <tcp_netif_ip_addr_changed+0x66>
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d013      	beq.n	800f1a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f17a:	4b0e      	ldr	r3, [pc, #56]	; (800f1b4 <tcp_netif_ip_addr_changed+0x78>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]
 800f180:	e00c      	b.n	800f19c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d103      	bne.n	800f196 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1ef      	bne.n	800f182 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f1a2:	bf00      	nop
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	200111ac 	.word	0x200111ac
 800f1b0:	200111a4 	.word	0x200111a4
 800f1b4:	200111a8 	.word	0x200111a8

0800f1b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d007      	beq.n	800f1d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7ff fb51 	bl	800e874 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f1e0:	b590      	push	{r4, r7, lr}
 800f1e2:	b08d      	sub	sp, #52	; 0x34
 800f1e4:	af04      	add	r7, sp, #16
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d105      	bne.n	800f1fc <tcp_input+0x1c>
 800f1f0:	4b9b      	ldr	r3, [pc, #620]	; (800f460 <tcp_input+0x280>)
 800f1f2:	2283      	movs	r2, #131	; 0x83
 800f1f4:	499b      	ldr	r1, [pc, #620]	; (800f464 <tcp_input+0x284>)
 800f1f6:	489c      	ldr	r0, [pc, #624]	; (800f468 <tcp_input+0x288>)
 800f1f8:	f009 fc98 	bl	8018b2c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	4a9a      	ldr	r2, [pc, #616]	; (800f46c <tcp_input+0x28c>)
 800f202:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	895b      	ldrh	r3, [r3, #10]
 800f208:	2b13      	cmp	r3, #19
 800f20a:	f240 83d1 	bls.w	800f9b0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f20e:	4b98      	ldr	r3, [pc, #608]	; (800f470 <tcp_input+0x290>)
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	4a97      	ldr	r2, [pc, #604]	; (800f470 <tcp_input+0x290>)
 800f214:	6812      	ldr	r2, [r2, #0]
 800f216:	4611      	mov	r1, r2
 800f218:	4618      	mov	r0, r3
 800f21a:	f008 fa61 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	f040 83c7 	bne.w	800f9b4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f226:	4b92      	ldr	r3, [pc, #584]	; (800f470 <tcp_input+0x290>)
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f22e:	2be0      	cmp	r3, #224	; 0xe0
 800f230:	f000 83c0 	beq.w	800f9b4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f234:	4b8d      	ldr	r3, [pc, #564]	; (800f46c <tcp_input+0x28c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	899b      	ldrh	r3, [r3, #12]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fc f93d 	bl	800b4bc <lwip_htons>
 800f242:	4603      	mov	r3, r0
 800f244:	0b1b      	lsrs	r3, r3, #12
 800f246:	b29b      	uxth	r3, r3
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f24e:	7cbb      	ldrb	r3, [r7, #18]
 800f250:	2b13      	cmp	r3, #19
 800f252:	f240 83b1 	bls.w	800f9b8 <tcp_input+0x7d8>
 800f256:	7cbb      	ldrb	r3, [r7, #18]
 800f258:	b29a      	uxth	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	891b      	ldrh	r3, [r3, #8]
 800f25e:	429a      	cmp	r2, r3
 800f260:	f200 83aa 	bhi.w	800f9b8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f264:	7cbb      	ldrb	r3, [r7, #18]
 800f266:	b29b      	uxth	r3, r3
 800f268:	3b14      	subs	r3, #20
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	4b81      	ldr	r3, [pc, #516]	; (800f474 <tcp_input+0x294>)
 800f26e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f270:	4b81      	ldr	r3, [pc, #516]	; (800f478 <tcp_input+0x298>)
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	895a      	ldrh	r2, [r3, #10]
 800f27a:	7cbb      	ldrb	r3, [r7, #18]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	429a      	cmp	r2, r3
 800f280:	d309      	bcc.n	800f296 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f282:	4b7c      	ldr	r3, [pc, #496]	; (800f474 <tcp_input+0x294>)
 800f284:	881a      	ldrh	r2, [r3, #0]
 800f286:	4b7d      	ldr	r3, [pc, #500]	; (800f47c <tcp_input+0x29c>)
 800f288:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f28a:	7cbb      	ldrb	r3, [r7, #18]
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f7fd fcc2 	bl	800cc18 <pbuf_remove_header>
 800f294:	e04e      	b.n	800f334 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d105      	bne.n	800f2aa <tcp_input+0xca>
 800f29e:	4b70      	ldr	r3, [pc, #448]	; (800f460 <tcp_input+0x280>)
 800f2a0:	22c2      	movs	r2, #194	; 0xc2
 800f2a2:	4977      	ldr	r1, [pc, #476]	; (800f480 <tcp_input+0x2a0>)
 800f2a4:	4870      	ldr	r0, [pc, #448]	; (800f468 <tcp_input+0x288>)
 800f2a6:	f009 fc41 	bl	8018b2c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f2aa:	2114      	movs	r1, #20
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fd fcb3 	bl	800cc18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	895a      	ldrh	r2, [r3, #10]
 800f2b6:	4b71      	ldr	r3, [pc, #452]	; (800f47c <tcp_input+0x29c>)
 800f2b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f2ba:	4b6e      	ldr	r3, [pc, #440]	; (800f474 <tcp_input+0x294>)
 800f2bc:	881a      	ldrh	r2, [r3, #0]
 800f2be:	4b6f      	ldr	r3, [pc, #444]	; (800f47c <tcp_input+0x29c>)
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f2c6:	4b6d      	ldr	r3, [pc, #436]	; (800f47c <tcp_input+0x29c>)
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7fd fca3 	bl	800cc18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	895b      	ldrh	r3, [r3, #10]
 800f2d8:	8a3a      	ldrh	r2, [r7, #16]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	f200 836e 	bhi.w	800f9bc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	4a64      	ldr	r2, [pc, #400]	; (800f478 <tcp_input+0x298>)
 800f2e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	8a3a      	ldrh	r2, [r7, #16]
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fc90 	bl	800cc18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	891a      	ldrh	r2, [r3, #8]
 800f2fc:	8a3b      	ldrh	r3, [r7, #16]
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	b29a      	uxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	895b      	ldrh	r3, [r3, #10]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d005      	beq.n	800f31a <tcp_input+0x13a>
 800f30e:	4b54      	ldr	r3, [pc, #336]	; (800f460 <tcp_input+0x280>)
 800f310:	22df      	movs	r2, #223	; 0xdf
 800f312:	495c      	ldr	r1, [pc, #368]	; (800f484 <tcp_input+0x2a4>)
 800f314:	4854      	ldr	r0, [pc, #336]	; (800f468 <tcp_input+0x288>)
 800f316:	f009 fc09 	bl	8018b2c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	891a      	ldrh	r2, [r3, #8]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	891b      	ldrh	r3, [r3, #8]
 800f324:	429a      	cmp	r2, r3
 800f326:	d005      	beq.n	800f334 <tcp_input+0x154>
 800f328:	4b4d      	ldr	r3, [pc, #308]	; (800f460 <tcp_input+0x280>)
 800f32a:	22e0      	movs	r2, #224	; 0xe0
 800f32c:	4956      	ldr	r1, [pc, #344]	; (800f488 <tcp_input+0x2a8>)
 800f32e:	484e      	ldr	r0, [pc, #312]	; (800f468 <tcp_input+0x288>)
 800f330:	f009 fbfc 	bl	8018b2c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f334:	4b4d      	ldr	r3, [pc, #308]	; (800f46c <tcp_input+0x28c>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	4a4b      	ldr	r2, [pc, #300]	; (800f46c <tcp_input+0x28c>)
 800f33e:	6814      	ldr	r4, [r2, #0]
 800f340:	4618      	mov	r0, r3
 800f342:	f7fc f8bb 	bl	800b4bc <lwip_htons>
 800f346:	4603      	mov	r3, r0
 800f348:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f34a:	4b48      	ldr	r3, [pc, #288]	; (800f46c <tcp_input+0x28c>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	885b      	ldrh	r3, [r3, #2]
 800f350:	b29b      	uxth	r3, r3
 800f352:	4a46      	ldr	r2, [pc, #280]	; (800f46c <tcp_input+0x28c>)
 800f354:	6814      	ldr	r4, [r2, #0]
 800f356:	4618      	mov	r0, r3
 800f358:	f7fc f8b0 	bl	800b4bc <lwip_htons>
 800f35c:	4603      	mov	r3, r0
 800f35e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f360:	4b42      	ldr	r3, [pc, #264]	; (800f46c <tcp_input+0x28c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	4a41      	ldr	r2, [pc, #260]	; (800f46c <tcp_input+0x28c>)
 800f368:	6814      	ldr	r4, [r2, #0]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fc f8bb 	bl	800b4e6 <lwip_htonl>
 800f370:	4603      	mov	r3, r0
 800f372:	6063      	str	r3, [r4, #4]
 800f374:	6863      	ldr	r3, [r4, #4]
 800f376:	4a45      	ldr	r2, [pc, #276]	; (800f48c <tcp_input+0x2ac>)
 800f378:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f37a:	4b3c      	ldr	r3, [pc, #240]	; (800f46c <tcp_input+0x28c>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	4a3a      	ldr	r2, [pc, #232]	; (800f46c <tcp_input+0x28c>)
 800f382:	6814      	ldr	r4, [r2, #0]
 800f384:	4618      	mov	r0, r3
 800f386:	f7fc f8ae 	bl	800b4e6 <lwip_htonl>
 800f38a:	4603      	mov	r3, r0
 800f38c:	60a3      	str	r3, [r4, #8]
 800f38e:	68a3      	ldr	r3, [r4, #8]
 800f390:	4a3f      	ldr	r2, [pc, #252]	; (800f490 <tcp_input+0x2b0>)
 800f392:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f394:	4b35      	ldr	r3, [pc, #212]	; (800f46c <tcp_input+0x28c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	89db      	ldrh	r3, [r3, #14]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	4a33      	ldr	r2, [pc, #204]	; (800f46c <tcp_input+0x28c>)
 800f39e:	6814      	ldr	r4, [r2, #0]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fc f88b 	bl	800b4bc <lwip_htons>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f3aa:	4b30      	ldr	r3, [pc, #192]	; (800f46c <tcp_input+0x28c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	899b      	ldrh	r3, [r3, #12]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fc f882 	bl	800b4bc <lwip_htons>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	4b34      	ldr	r3, [pc, #208]	; (800f494 <tcp_input+0x2b4>)
 800f3c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	891a      	ldrh	r2, [r3, #8]
 800f3ca:	4b33      	ldr	r3, [pc, #204]	; (800f498 <tcp_input+0x2b8>)
 800f3cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f3ce:	4b31      	ldr	r3, [pc, #196]	; (800f494 <tcp_input+0x2b4>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	f003 0303 	and.w	r3, r3, #3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00c      	beq.n	800f3f4 <tcp_input+0x214>
    tcplen++;
 800f3da:	4b2f      	ldr	r3, [pc, #188]	; (800f498 <tcp_input+0x2b8>)
 800f3dc:	881b      	ldrh	r3, [r3, #0]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	4b2d      	ldr	r3, [pc, #180]	; (800f498 <tcp_input+0x2b8>)
 800f3e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	891a      	ldrh	r2, [r3, #8]
 800f3ea:	4b2b      	ldr	r3, [pc, #172]	; (800f498 <tcp_input+0x2b8>)
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	f200 82e6 	bhi.w	800f9c0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3f8:	4b28      	ldr	r3, [pc, #160]	; (800f49c <tcp_input+0x2bc>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	61fb      	str	r3, [r7, #28]
 800f3fe:	e09d      	b.n	800f53c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d105      	bne.n	800f414 <tcp_input+0x234>
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <tcp_input+0x280>)
 800f40a:	22fb      	movs	r2, #251	; 0xfb
 800f40c:	4924      	ldr	r1, [pc, #144]	; (800f4a0 <tcp_input+0x2c0>)
 800f40e:	4816      	ldr	r0, [pc, #88]	; (800f468 <tcp_input+0x288>)
 800f410:	f009 fb8c 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	7d1b      	ldrb	r3, [r3, #20]
 800f418:	2b0a      	cmp	r3, #10
 800f41a:	d105      	bne.n	800f428 <tcp_input+0x248>
 800f41c:	4b10      	ldr	r3, [pc, #64]	; (800f460 <tcp_input+0x280>)
 800f41e:	22fc      	movs	r2, #252	; 0xfc
 800f420:	4920      	ldr	r1, [pc, #128]	; (800f4a4 <tcp_input+0x2c4>)
 800f422:	4811      	ldr	r0, [pc, #68]	; (800f468 <tcp_input+0x288>)
 800f424:	f009 fb82 	bl	8018b2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	7d1b      	ldrb	r3, [r3, #20]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d105      	bne.n	800f43c <tcp_input+0x25c>
 800f430:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <tcp_input+0x280>)
 800f432:	22fd      	movs	r2, #253	; 0xfd
 800f434:	491c      	ldr	r1, [pc, #112]	; (800f4a8 <tcp_input+0x2c8>)
 800f436:	480c      	ldr	r0, [pc, #48]	; (800f468 <tcp_input+0x288>)
 800f438:	f009 fb78 	bl	8018b2c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	7a1b      	ldrb	r3, [r3, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d033      	beq.n	800f4ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	7a1a      	ldrb	r2, [r3, #8]
 800f448:	4b09      	ldr	r3, [pc, #36]	; (800f470 <tcp_input+0x290>)
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f450:	3301      	adds	r3, #1
 800f452:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f454:	429a      	cmp	r2, r3
 800f456:	d029      	beq.n	800f4ac <tcp_input+0x2cc>
      prev = pcb;
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	61bb      	str	r3, [r7, #24]
      continue;
 800f45c:	e06b      	b.n	800f536 <tcp_input+0x356>
 800f45e:	bf00      	nop
 800f460:	0801bfd8 	.word	0x0801bfd8
 800f464:	0801c00c 	.word	0x0801c00c
 800f468:	0801c024 	.word	0x0801c024
 800f46c:	200111c8 	.word	0x200111c8
 800f470:	2000da2c 	.word	0x2000da2c
 800f474:	200111cc 	.word	0x200111cc
 800f478:	200111d0 	.word	0x200111d0
 800f47c:	200111ce 	.word	0x200111ce
 800f480:	0801c04c 	.word	0x0801c04c
 800f484:	0801c05c 	.word	0x0801c05c
 800f488:	0801c068 	.word	0x0801c068
 800f48c:	200111d8 	.word	0x200111d8
 800f490:	200111dc 	.word	0x200111dc
 800f494:	200111e4 	.word	0x200111e4
 800f498:	200111e2 	.word	0x200111e2
 800f49c:	200111ac 	.word	0x200111ac
 800f4a0:	0801c088 	.word	0x0801c088
 800f4a4:	0801c0b0 	.word	0x0801c0b0
 800f4a8:	0801c0dc 	.word	0x0801c0dc
    }

    if (pcb->remote_port == tcphdr->src &&
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	8b1a      	ldrh	r2, [r3, #24]
 800f4b0:	4b72      	ldr	r3, [pc, #456]	; (800f67c <tcp_input+0x49c>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d13a      	bne.n	800f532 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	8ada      	ldrh	r2, [r3, #22]
 800f4c0:	4b6e      	ldr	r3, [pc, #440]	; (800f67c <tcp_input+0x49c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	885b      	ldrh	r3, [r3, #2]
 800f4c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d132      	bne.n	800f532 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	4b6b      	ldr	r3, [pc, #428]	; (800f680 <tcp_input+0x4a0>)
 800f4d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d12c      	bne.n	800f532 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	4b68      	ldr	r3, [pc, #416]	; (800f680 <tcp_input+0x4a0>)
 800f4de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d126      	bne.n	800f532 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	69fa      	ldr	r2, [r7, #28]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d106      	bne.n	800f4fc <tcp_input+0x31c>
 800f4ee:	4b65      	ldr	r3, [pc, #404]	; (800f684 <tcp_input+0x4a4>)
 800f4f0:	f240 120d 	movw	r2, #269	; 0x10d
 800f4f4:	4964      	ldr	r1, [pc, #400]	; (800f688 <tcp_input+0x4a8>)
 800f4f6:	4865      	ldr	r0, [pc, #404]	; (800f68c <tcp_input+0x4ac>)
 800f4f8:	f009 fb18 	bl	8018b2c <iprintf>
      if (prev != NULL) {
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00a      	beq.n	800f518 <tcp_input+0x338>
        prev->next = pcb->next;
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	68da      	ldr	r2, [r3, #12]
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f50a:	4b61      	ldr	r3, [pc, #388]	; (800f690 <tcp_input+0x4b0>)
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f512:	4a5f      	ldr	r2, [pc, #380]	; (800f690 <tcp_input+0x4b0>)
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	69fa      	ldr	r2, [r7, #28]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d111      	bne.n	800f546 <tcp_input+0x366>
 800f522:	4b58      	ldr	r3, [pc, #352]	; (800f684 <tcp_input+0x4a4>)
 800f524:	f240 1215 	movw	r2, #277	; 0x115
 800f528:	495a      	ldr	r1, [pc, #360]	; (800f694 <tcp_input+0x4b4>)
 800f52a:	4858      	ldr	r0, [pc, #352]	; (800f68c <tcp_input+0x4ac>)
 800f52c:	f009 fafe 	bl	8018b2c <iprintf>
      break;
 800f530:	e009      	b.n	800f546 <tcp_input+0x366>
    }
    prev = pcb;
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	61fb      	str	r3, [r7, #28]
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f47f af5e 	bne.w	800f400 <tcp_input+0x220>
 800f544:	e000      	b.n	800f548 <tcp_input+0x368>
      break;
 800f546:	bf00      	nop
  }

  if (pcb == NULL) {
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f040 80aa 	bne.w	800f6a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f550:	4b51      	ldr	r3, [pc, #324]	; (800f698 <tcp_input+0x4b8>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	61fb      	str	r3, [r7, #28]
 800f556:	e03f      	b.n	800f5d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	7d1b      	ldrb	r3, [r3, #20]
 800f55c:	2b0a      	cmp	r3, #10
 800f55e:	d006      	beq.n	800f56e <tcp_input+0x38e>
 800f560:	4b48      	ldr	r3, [pc, #288]	; (800f684 <tcp_input+0x4a4>)
 800f562:	f240 121f 	movw	r2, #287	; 0x11f
 800f566:	494d      	ldr	r1, [pc, #308]	; (800f69c <tcp_input+0x4bc>)
 800f568:	4848      	ldr	r0, [pc, #288]	; (800f68c <tcp_input+0x4ac>)
 800f56a:	f009 fadf 	bl	8018b2c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	7a1b      	ldrb	r3, [r3, #8]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d009      	beq.n	800f58a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	7a1a      	ldrb	r2, [r3, #8]
 800f57a:	4b41      	ldr	r3, [pc, #260]	; (800f680 <tcp_input+0x4a0>)
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f582:	3301      	adds	r3, #1
 800f584:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f586:	429a      	cmp	r2, r3
 800f588:	d122      	bne.n	800f5d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	8b1a      	ldrh	r2, [r3, #24]
 800f58e:	4b3b      	ldr	r3, [pc, #236]	; (800f67c <tcp_input+0x49c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	b29b      	uxth	r3, r3
 800f596:	429a      	cmp	r2, r3
 800f598:	d11b      	bne.n	800f5d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	8ada      	ldrh	r2, [r3, #22]
 800f59e:	4b37      	ldr	r3, [pc, #220]	; (800f67c <tcp_input+0x49c>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d113      	bne.n	800f5d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	4b34      	ldr	r3, [pc, #208]	; (800f680 <tcp_input+0x4a0>)
 800f5b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d10d      	bne.n	800f5d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	4b31      	ldr	r3, [pc, #196]	; (800f680 <tcp_input+0x4a0>)
 800f5bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d107      	bne.n	800f5d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f5c2:	69f8      	ldr	r0, [r7, #28]
 800f5c4:	f000 fb56 	bl	800fc74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7fd fbab 	bl	800cd24 <pbuf_free>
        return;
 800f5ce:	e1fd      	b.n	800f9cc <tcp_input+0x7ec>
        continue;
 800f5d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	61fb      	str	r3, [r7, #28]
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1bc      	bne.n	800f558 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5e2:	4b2f      	ldr	r3, [pc, #188]	; (800f6a0 <tcp_input+0x4c0>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	e02a      	b.n	800f640 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	7a1b      	ldrb	r3, [r3, #8]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00c      	beq.n	800f60c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	7a1a      	ldrb	r2, [r3, #8]
 800f5f6:	4b22      	ldr	r3, [pc, #136]	; (800f680 <tcp_input+0x4a0>)
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5fe:	3301      	adds	r3, #1
 800f600:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f602:	429a      	cmp	r2, r3
 800f604:	d002      	beq.n	800f60c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	61bb      	str	r3, [r7, #24]
        continue;
 800f60a:	e016      	b.n	800f63a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	8ada      	ldrh	r2, [r3, #22]
 800f610:	4b1a      	ldr	r3, [pc, #104]	; (800f67c <tcp_input+0x49c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	885b      	ldrh	r3, [r3, #2]
 800f616:	b29b      	uxth	r3, r3
 800f618:	429a      	cmp	r2, r3
 800f61a:	d10c      	bne.n	800f636 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	4b17      	ldr	r3, [pc, #92]	; (800f680 <tcp_input+0x4a0>)
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	429a      	cmp	r2, r3
 800f626:	d00f      	beq.n	800f648 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00d      	beq.n	800f64a <tcp_input+0x46a>
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d009      	beq.n	800f64a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	617b      	str	r3, [r7, #20]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1d1      	bne.n	800f5ea <tcp_input+0x40a>
 800f646:	e000      	b.n	800f64a <tcp_input+0x46a>
            break;
 800f648:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d029      	beq.n	800f6a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f650:	69bb      	ldr	r3, [r7, #24]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00a      	beq.n	800f66c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	68da      	ldr	r2, [r3, #12]
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f65e:	4b10      	ldr	r3, [pc, #64]	; (800f6a0 <tcp_input+0x4c0>)
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f666:	4a0e      	ldr	r2, [pc, #56]	; (800f6a0 <tcp_input+0x4c0>)
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f66c:	6978      	ldr	r0, [r7, #20]
 800f66e:	f000 fa03 	bl	800fa78 <tcp_listen_input>
      }
      pbuf_free(p);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7fd fb56 	bl	800cd24 <pbuf_free>
      return;
 800f678:	e1a8      	b.n	800f9cc <tcp_input+0x7ec>
 800f67a:	bf00      	nop
 800f67c:	200111c8 	.word	0x200111c8
 800f680:	2000da2c 	.word	0x2000da2c
 800f684:	0801bfd8 	.word	0x0801bfd8
 800f688:	0801c104 	.word	0x0801c104
 800f68c:	0801c024 	.word	0x0801c024
 800f690:	200111ac 	.word	0x200111ac
 800f694:	0801c130 	.word	0x0801c130
 800f698:	200111b0 	.word	0x200111b0
 800f69c:	0801c15c 	.word	0x0801c15c
 800f6a0:	200111a8 	.word	0x200111a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 8158 	beq.w	800f95c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6ac:	4b95      	ldr	r3, [pc, #596]	; (800f904 <tcp_input+0x724>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	891a      	ldrh	r2, [r3, #8]
 800f6b6:	4b93      	ldr	r3, [pc, #588]	; (800f904 <tcp_input+0x724>)
 800f6b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6ba:	4a92      	ldr	r2, [pc, #584]	; (800f904 <tcp_input+0x724>)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6c0:	4b91      	ldr	r3, [pc, #580]	; (800f908 <tcp_input+0x728>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a8f      	ldr	r2, [pc, #572]	; (800f904 <tcp_input+0x724>)
 800f6c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6c8:	4b90      	ldr	r3, [pc, #576]	; (800f90c <tcp_input+0x72c>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6ce:	4b90      	ldr	r3, [pc, #576]	; (800f910 <tcp_input+0x730>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f6d4:	4b8f      	ldr	r3, [pc, #572]	; (800f914 <tcp_input+0x734>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f6da:	4b8f      	ldr	r3, [pc, #572]	; (800f918 <tcp_input+0x738>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	f003 0308 	and.w	r3, r3, #8
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d006      	beq.n	800f6f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	7b5b      	ldrb	r3, [r3, #13]
 800f6ea:	f043 0301 	orr.w	r3, r3, #1
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d017      	beq.n	800f72c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f6fc:	69f8      	ldr	r0, [r7, #28]
 800f6fe:	f7ff f83d 	bl	800e77c <tcp_process_refused_data>
 800f702:	4603      	mov	r3, r0
 800f704:	f113 0f0d 	cmn.w	r3, #13
 800f708:	d007      	beq.n	800f71a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00c      	beq.n	800f72c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f712:	4b82      	ldr	r3, [pc, #520]	; (800f91c <tcp_input+0x73c>)
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d008      	beq.n	800f72c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f040 80e3 	bne.w	800f8ea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f724:	69f8      	ldr	r0, [r7, #28]
 800f726:	f003 fe05 	bl	8013334 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f72a:	e0de      	b.n	800f8ea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f72c:	4a7c      	ldr	r2, [pc, #496]	; (800f920 <tcp_input+0x740>)
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f732:	69f8      	ldr	r0, [r7, #28]
 800f734:	f000 fb18 	bl	800fd68 <tcp_process>
 800f738:	4603      	mov	r3, r0
 800f73a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f73c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f740:	f113 0f0d 	cmn.w	r3, #13
 800f744:	f000 80d3 	beq.w	800f8ee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f748:	4b71      	ldr	r3, [pc, #452]	; (800f910 <tcp_input+0x730>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	f003 0308 	and.w	r3, r3, #8
 800f750:	2b00      	cmp	r3, #0
 800f752:	d015      	beq.n	800f780 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d008      	beq.n	800f770 <tcp_input+0x590>
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f764:	69fa      	ldr	r2, [r7, #28]
 800f766:	6912      	ldr	r2, [r2, #16]
 800f768:	f06f 010d 	mvn.w	r1, #13
 800f76c:	4610      	mov	r0, r2
 800f76e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f770:	69f9      	ldr	r1, [r7, #28]
 800f772:	486c      	ldr	r0, [pc, #432]	; (800f924 <tcp_input+0x744>)
 800f774:	f7ff fbbc 	bl	800eef0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f778:	69f8      	ldr	r0, [r7, #28]
 800f77a:	f7fd fd8f 	bl	800d29c <tcp_free>
 800f77e:	e0da      	b.n	800f936 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f780:	2300      	movs	r3, #0
 800f782:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f784:	4b63      	ldr	r3, [pc, #396]	; (800f914 <tcp_input+0x734>)
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d01d      	beq.n	800f7c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f78c:	4b61      	ldr	r3, [pc, #388]	; (800f914 <tcp_input+0x734>)
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00a      	beq.n	800f7b2 <tcp_input+0x5d2>
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7a2:	69fa      	ldr	r2, [r7, #28]
 800f7a4:	6910      	ldr	r0, [r2, #16]
 800f7a6:	89fa      	ldrh	r2, [r7, #14]
 800f7a8:	69f9      	ldr	r1, [r7, #28]
 800f7aa:	4798      	blx	r3
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	74fb      	strb	r3, [r7, #19]
 800f7b0:	e001      	b.n	800f7b6 <tcp_input+0x5d6>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f7b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7ba:	f113 0f0d 	cmn.w	r3, #13
 800f7be:	f000 8098 	beq.w	800f8f2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f7c2:	4b54      	ldr	r3, [pc, #336]	; (800f914 <tcp_input+0x734>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f7c8:	69f8      	ldr	r0, [r7, #28]
 800f7ca:	f000 f915 	bl	800f9f8 <tcp_input_delayed_close>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f040 8090 	bne.w	800f8f6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f7d6:	4b4d      	ldr	r3, [pc, #308]	; (800f90c <tcp_input+0x72c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d041      	beq.n	800f862 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d006      	beq.n	800f7f4 <tcp_input+0x614>
 800f7e6:	4b50      	ldr	r3, [pc, #320]	; (800f928 <tcp_input+0x748>)
 800f7e8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f7ec:	494f      	ldr	r1, [pc, #316]	; (800f92c <tcp_input+0x74c>)
 800f7ee:	4850      	ldr	r0, [pc, #320]	; (800f930 <tcp_input+0x750>)
 800f7f0:	f009 f99c 	bl	8018b2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	8b5b      	ldrh	r3, [r3, #26]
 800f7f8:	f003 0310 	and.w	r3, r3, #16
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d008      	beq.n	800f812 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f800:	4b42      	ldr	r3, [pc, #264]	; (800f90c <tcp_input+0x72c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f7fd fa8d 	bl	800cd24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f80a:	69f8      	ldr	r0, [r7, #28]
 800f80c:	f7fe f88a 	bl	800d924 <tcp_abort>
            goto aborted;
 800f810:	e091      	b.n	800f936 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00c      	beq.n	800f836 <tcp_input+0x656>
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	6918      	ldr	r0, [r3, #16]
 800f826:	4b39      	ldr	r3, [pc, #228]	; (800f90c <tcp_input+0x72c>)
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	2300      	movs	r3, #0
 800f82c:	69f9      	ldr	r1, [r7, #28]
 800f82e:	47a0      	blx	r4
 800f830:	4603      	mov	r3, r0
 800f832:	74fb      	strb	r3, [r7, #19]
 800f834:	e008      	b.n	800f848 <tcp_input+0x668>
 800f836:	4b35      	ldr	r3, [pc, #212]	; (800f90c <tcp_input+0x72c>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	2300      	movs	r3, #0
 800f83c:	69f9      	ldr	r1, [r7, #28]
 800f83e:	2000      	movs	r0, #0
 800f840:	f7ff f890 	bl	800e964 <tcp_recv_null>
 800f844:	4603      	mov	r3, r0
 800f846:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f84c:	f113 0f0d 	cmn.w	r3, #13
 800f850:	d053      	beq.n	800f8fa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d003      	beq.n	800f862 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f85a:	4b2c      	ldr	r3, [pc, #176]	; (800f90c <tcp_input+0x72c>)
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f862:	4b2b      	ldr	r3, [pc, #172]	; (800f910 <tcp_input+0x730>)
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	f003 0320 	and.w	r3, r3, #32
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d030      	beq.n	800f8d0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f872:	2b00      	cmp	r3, #0
 800f874:	d009      	beq.n	800f88a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f87a:	7b5a      	ldrb	r2, [r3, #13]
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f880:	f042 0220 	orr.w	r2, r2, #32
 800f884:	b2d2      	uxtb	r2, r2
 800f886:	735a      	strb	r2, [r3, #13]
 800f888:	e022      	b.n	800f8d0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f88e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f892:	d005      	beq.n	800f8a0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f898:	3301      	adds	r3, #1
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <tcp_input+0x6e2>
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	6918      	ldr	r0, [r3, #16]
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	69f9      	ldr	r1, [r7, #28]
 800f8ba:	47a0      	blx	r4
 800f8bc:	4603      	mov	r3, r0
 800f8be:	74fb      	strb	r3, [r7, #19]
 800f8c0:	e001      	b.n	800f8c6 <tcp_input+0x6e6>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f8c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8ca:	f113 0f0d 	cmn.w	r3, #13
 800f8ce:	d016      	beq.n	800f8fe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f8d0:	4b13      	ldr	r3, [pc, #76]	; (800f920 <tcp_input+0x740>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f8d6:	69f8      	ldr	r0, [r7, #28]
 800f8d8:	f000 f88e 	bl	800f9f8 <tcp_input_delayed_close>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d128      	bne.n	800f934 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f8e2:	69f8      	ldr	r0, [r7, #28]
 800f8e4:	f002 ff20 	bl	8012728 <tcp_output>
 800f8e8:	e025      	b.n	800f936 <tcp_input+0x756>
        goto aborted;
 800f8ea:	bf00      	nop
 800f8ec:	e023      	b.n	800f936 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f8ee:	bf00      	nop
 800f8f0:	e021      	b.n	800f936 <tcp_input+0x756>
              goto aborted;
 800f8f2:	bf00      	nop
 800f8f4:	e01f      	b.n	800f936 <tcp_input+0x756>
          goto aborted;
 800f8f6:	bf00      	nop
 800f8f8:	e01d      	b.n	800f936 <tcp_input+0x756>
            goto aborted;
 800f8fa:	bf00      	nop
 800f8fc:	e01b      	b.n	800f936 <tcp_input+0x756>
              goto aborted;
 800f8fe:	bf00      	nop
 800f900:	e019      	b.n	800f936 <tcp_input+0x756>
 800f902:	bf00      	nop
 800f904:	200111b8 	.word	0x200111b8
 800f908:	200111c8 	.word	0x200111c8
 800f90c:	200111e8 	.word	0x200111e8
 800f910:	200111e5 	.word	0x200111e5
 800f914:	200111e0 	.word	0x200111e0
 800f918:	200111e4 	.word	0x200111e4
 800f91c:	200111e2 	.word	0x200111e2
 800f920:	200111ec 	.word	0x200111ec
 800f924:	200111ac 	.word	0x200111ac
 800f928:	0801bfd8 	.word	0x0801bfd8
 800f92c:	0801c18c 	.word	0x0801c18c
 800f930:	0801c024 	.word	0x0801c024
          goto aborted;
 800f934:	bf00      	nop
    tcp_input_pcb = NULL;
 800f936:	4b27      	ldr	r3, [pc, #156]	; (800f9d4 <tcp_input+0x7f4>)
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f93c:	4b26      	ldr	r3, [pc, #152]	; (800f9d8 <tcp_input+0x7f8>)
 800f93e:	2200      	movs	r2, #0
 800f940:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f942:	4b26      	ldr	r3, [pc, #152]	; (800f9dc <tcp_input+0x7fc>)
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d03f      	beq.n	800f9ca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f94a:	4b24      	ldr	r3, [pc, #144]	; (800f9dc <tcp_input+0x7fc>)
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fd f9e8 	bl	800cd24 <pbuf_free>
      inseg.p = NULL;
 800f954:	4b21      	ldr	r3, [pc, #132]	; (800f9dc <tcp_input+0x7fc>)
 800f956:	2200      	movs	r2, #0
 800f958:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f95a:	e036      	b.n	800f9ca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f95c:	4b20      	ldr	r3, [pc, #128]	; (800f9e0 <tcp_input+0x800>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	899b      	ldrh	r3, [r3, #12]
 800f962:	b29b      	uxth	r3, r3
 800f964:	4618      	mov	r0, r3
 800f966:	f7fb fda9 	bl	800b4bc <lwip_htons>
 800f96a:	4603      	mov	r3, r0
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	f003 0304 	and.w	r3, r3, #4
 800f972:	2b00      	cmp	r3, #0
 800f974:	d118      	bne.n	800f9a8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f976:	4b1b      	ldr	r3, [pc, #108]	; (800f9e4 <tcp_input+0x804>)
 800f978:	6819      	ldr	r1, [r3, #0]
 800f97a:	4b1b      	ldr	r3, [pc, #108]	; (800f9e8 <tcp_input+0x808>)
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	4b1a      	ldr	r3, [pc, #104]	; (800f9ec <tcp_input+0x80c>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f986:	4b16      	ldr	r3, [pc, #88]	; (800f9e0 <tcp_input+0x800>)
 800f988:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f98a:	885b      	ldrh	r3, [r3, #2]
 800f98c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f98e:	4a14      	ldr	r2, [pc, #80]	; (800f9e0 <tcp_input+0x800>)
 800f990:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f992:	8812      	ldrh	r2, [r2, #0]
 800f994:	b292      	uxth	r2, r2
 800f996:	9202      	str	r2, [sp, #8]
 800f998:	9301      	str	r3, [sp, #4]
 800f99a:	4b15      	ldr	r3, [pc, #84]	; (800f9f0 <tcp_input+0x810>)
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	4b15      	ldr	r3, [pc, #84]	; (800f9f4 <tcp_input+0x814>)
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	f003 fc74 	bl	8013290 <tcp_rst>
    pbuf_free(p);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7fd f9bb 	bl	800cd24 <pbuf_free>
  return;
 800f9ae:	e00c      	b.n	800f9ca <tcp_input+0x7ea>
    goto dropped;
 800f9b0:	bf00      	nop
 800f9b2:	e006      	b.n	800f9c2 <tcp_input+0x7e2>
    goto dropped;
 800f9b4:	bf00      	nop
 800f9b6:	e004      	b.n	800f9c2 <tcp_input+0x7e2>
    goto dropped;
 800f9b8:	bf00      	nop
 800f9ba:	e002      	b.n	800f9c2 <tcp_input+0x7e2>
      goto dropped;
 800f9bc:	bf00      	nop
 800f9be:	e000      	b.n	800f9c2 <tcp_input+0x7e2>
      goto dropped;
 800f9c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fd f9ae 	bl	800cd24 <pbuf_free>
 800f9c8:	e000      	b.n	800f9cc <tcp_input+0x7ec>
  return;
 800f9ca:	bf00      	nop
}
 800f9cc:	3724      	adds	r7, #36	; 0x24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd90      	pop	{r4, r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	200111ec 	.word	0x200111ec
 800f9d8:	200111e8 	.word	0x200111e8
 800f9dc:	200111b8 	.word	0x200111b8
 800f9e0:	200111c8 	.word	0x200111c8
 800f9e4:	200111dc 	.word	0x200111dc
 800f9e8:	200111e2 	.word	0x200111e2
 800f9ec:	200111d8 	.word	0x200111d8
 800f9f0:	2000da3c 	.word	0x2000da3c
 800f9f4:	2000da40 	.word	0x2000da40

0800f9f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d106      	bne.n	800fa14 <tcp_input_delayed_close+0x1c>
 800fa06:	4b17      	ldr	r3, [pc, #92]	; (800fa64 <tcp_input_delayed_close+0x6c>)
 800fa08:	f240 225a 	movw	r2, #602	; 0x25a
 800fa0c:	4916      	ldr	r1, [pc, #88]	; (800fa68 <tcp_input_delayed_close+0x70>)
 800fa0e:	4817      	ldr	r0, [pc, #92]	; (800fa6c <tcp_input_delayed_close+0x74>)
 800fa10:	f009 f88c 	bl	8018b2c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fa14:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <tcp_input_delayed_close+0x78>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 0310 	and.w	r3, r3, #16
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d01c      	beq.n	800fa5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f003 0310 	and.w	r3, r3, #16
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10d      	bne.n	800fa48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d008      	beq.n	800fa48 <tcp_input_delayed_close+0x50>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	6912      	ldr	r2, [r2, #16]
 800fa40:	f06f 010e 	mvn.w	r1, #14
 800fa44:	4610      	mov	r0, r2
 800fa46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	480a      	ldr	r0, [pc, #40]	; (800fa74 <tcp_input_delayed_close+0x7c>)
 800fa4c:	f7ff fa50 	bl	800eef0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7fd fc23 	bl	800d29c <tcp_free>
    return 1;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e000      	b.n	800fa5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	0801bfd8 	.word	0x0801bfd8
 800fa68:	0801c1a8 	.word	0x0801c1a8
 800fa6c:	0801c024 	.word	0x0801c024
 800fa70:	200111e5 	.word	0x200111e5
 800fa74:	200111ac 	.word	0x200111ac

0800fa78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fa78:	b590      	push	{r4, r7, lr}
 800fa7a:	b08b      	sub	sp, #44	; 0x2c
 800fa7c:	af04      	add	r7, sp, #16
 800fa7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fa80:	4b6f      	ldr	r3, [pc, #444]	; (800fc40 <tcp_listen_input+0x1c8>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 0304 	and.w	r3, r3, #4
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f040 80d2 	bne.w	800fc32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d106      	bne.n	800faa2 <tcp_listen_input+0x2a>
 800fa94:	4b6b      	ldr	r3, [pc, #428]	; (800fc44 <tcp_listen_input+0x1cc>)
 800fa96:	f240 2281 	movw	r2, #641	; 0x281
 800fa9a:	496b      	ldr	r1, [pc, #428]	; (800fc48 <tcp_listen_input+0x1d0>)
 800fa9c:	486b      	ldr	r0, [pc, #428]	; (800fc4c <tcp_listen_input+0x1d4>)
 800fa9e:	f009 f845 	bl	8018b2c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800faa2:	4b67      	ldr	r3, [pc, #412]	; (800fc40 <tcp_listen_input+0x1c8>)
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	f003 0310 	and.w	r3, r3, #16
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d019      	beq.n	800fae2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faae:	4b68      	ldr	r3, [pc, #416]	; (800fc50 <tcp_listen_input+0x1d8>)
 800fab0:	6819      	ldr	r1, [r3, #0]
 800fab2:	4b68      	ldr	r3, [pc, #416]	; (800fc54 <tcp_listen_input+0x1dc>)
 800fab4:	881b      	ldrh	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	4b67      	ldr	r3, [pc, #412]	; (800fc58 <tcp_listen_input+0x1e0>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fabe:	4b67      	ldr	r3, [pc, #412]	; (800fc5c <tcp_listen_input+0x1e4>)
 800fac0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fac2:	885b      	ldrh	r3, [r3, #2]
 800fac4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fac6:	4a65      	ldr	r2, [pc, #404]	; (800fc5c <tcp_listen_input+0x1e4>)
 800fac8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faca:	8812      	ldrh	r2, [r2, #0]
 800facc:	b292      	uxth	r2, r2
 800face:	9202      	str	r2, [sp, #8]
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	4b63      	ldr	r3, [pc, #396]	; (800fc60 <tcp_listen_input+0x1e8>)
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	4b63      	ldr	r3, [pc, #396]	; (800fc64 <tcp_listen_input+0x1ec>)
 800fad8:	4602      	mov	r2, r0
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f003 fbd8 	bl	8013290 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fae0:	e0a9      	b.n	800fc36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fae2:	4b57      	ldr	r3, [pc, #348]	; (800fc40 <tcp_listen_input+0x1c8>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	f003 0302 	and.w	r3, r3, #2
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 80a3 	beq.w	800fc36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	7d5b      	ldrb	r3, [r3, #21]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff f859 	bl	800ebac <tcp_alloc>
 800fafa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d111      	bne.n	800fb26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00a      	beq.n	800fb20 <tcp_listen_input+0xa8>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	6910      	ldr	r0, [r2, #16]
 800fb12:	f04f 32ff 	mov.w	r2, #4294967295
 800fb16:	2100      	movs	r1, #0
 800fb18:	4798      	blx	r3
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	73bb      	strb	r3, [r7, #14]
      return;
 800fb1e:	e08b      	b.n	800fc38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb20:	23f0      	movs	r3, #240	; 0xf0
 800fb22:	73bb      	strb	r3, [r7, #14]
      return;
 800fb24:	e088      	b.n	800fc38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb26:	4b50      	ldr	r3, [pc, #320]	; (800fc68 <tcp_listen_input+0x1f0>)
 800fb28:	695a      	ldr	r2, [r3, #20]
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb2e:	4b4e      	ldr	r3, [pc, #312]	; (800fc68 <tcp_listen_input+0x1f0>)
 800fb30:	691a      	ldr	r2, [r3, #16]
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	8ada      	ldrh	r2, [r3, #22]
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb3e:	4b47      	ldr	r3, [pc, #284]	; (800fc5c <tcp_listen_input+0x1e4>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	2203      	movs	r2, #3
 800fb4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb50:	4b41      	ldr	r3, [pc, #260]	; (800fc58 <tcp_listen_input+0x1e0>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	1c5a      	adds	r2, r3, #1
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb62:	6978      	ldr	r0, [r7, #20]
 800fb64:	f7ff fa58 	bl	800f018 <tcp_next_iss>
 800fb68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	693a      	ldr	r2, [r7, #16]
 800fb80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fb82:	4b35      	ldr	r3, [pc, #212]	; (800fc58 <tcp_listen_input+0x1e0>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	1e5a      	subs	r2, r3, #1
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691a      	ldr	r2, [r3, #16]
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	7a5b      	ldrb	r3, [r3, #9]
 800fb9e:	f003 030c 	and.w	r3, r3, #12
 800fba2:	b2da      	uxtb	r2, r3
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7a1a      	ldrb	r2, [r3, #8]
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbb0:	4b2e      	ldr	r3, [pc, #184]	; (800fc6c <tcp_listen_input+0x1f4>)
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	60da      	str	r2, [r3, #12]
 800fbb8:	4a2c      	ldr	r2, [pc, #176]	; (800fc6c <tcp_listen_input+0x1f4>)
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	f003 fd29 	bl	8013614 <tcp_timer_needed>
 800fbc2:	4b2b      	ldr	r3, [pc, #172]	; (800fc70 <tcp_listen_input+0x1f8>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbc8:	6978      	ldr	r0, [r7, #20]
 800fbca:	f001 fd8f 	bl	80116ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbce:	4b23      	ldr	r3, [pc, #140]	; (800fc5c <tcp_listen_input+0x1e4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	89db      	ldrh	r3, [r3, #14]
 800fbd4:	b29a      	uxth	r2, r3
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f007 fac1 	bl	8017178 <ip4_route>
 800fbf6:	4601      	mov	r1, r0
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f7ff fa30 	bl	800f064 <tcp_eff_send_mss_netif>
 800fc04:	4603      	mov	r3, r0
 800fc06:	461a      	mov	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fc0c:	2112      	movs	r1, #18
 800fc0e:	6978      	ldr	r0, [r7, #20]
 800fc10:	f002 fc9c 	bl	801254c <tcp_enqueue_flags>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fc20:	2100      	movs	r1, #0
 800fc22:	6978      	ldr	r0, [r7, #20]
 800fc24:	f7fd fdc0 	bl	800d7a8 <tcp_abandon>
      return;
 800fc28:	e006      	b.n	800fc38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fc2a:	6978      	ldr	r0, [r7, #20]
 800fc2c:	f002 fd7c 	bl	8012728 <tcp_output>
  return;
 800fc30:	e001      	b.n	800fc36 <tcp_listen_input+0x1be>
    return;
 800fc32:	bf00      	nop
 800fc34:	e000      	b.n	800fc38 <tcp_listen_input+0x1c0>
  return;
 800fc36:	bf00      	nop
}
 800fc38:	371c      	adds	r7, #28
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd90      	pop	{r4, r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	200111e4 	.word	0x200111e4
 800fc44:	0801bfd8 	.word	0x0801bfd8
 800fc48:	0801c1d0 	.word	0x0801c1d0
 800fc4c:	0801c024 	.word	0x0801c024
 800fc50:	200111dc 	.word	0x200111dc
 800fc54:	200111e2 	.word	0x200111e2
 800fc58:	200111d8 	.word	0x200111d8
 800fc5c:	200111c8 	.word	0x200111c8
 800fc60:	2000da3c 	.word	0x2000da3c
 800fc64:	2000da40 	.word	0x2000da40
 800fc68:	2000da2c 	.word	0x2000da2c
 800fc6c:	200111ac 	.word	0x200111ac
 800fc70:	200111b4 	.word	0x200111b4

0800fc74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af04      	add	r7, sp, #16
 800fc7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fc7c:	4b2f      	ldr	r3, [pc, #188]	; (800fd3c <tcp_timewait_input+0xc8>)
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 0304 	and.w	r3, r3, #4
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d153      	bne.n	800fd30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d106      	bne.n	800fc9c <tcp_timewait_input+0x28>
 800fc8e:	4b2c      	ldr	r3, [pc, #176]	; (800fd40 <tcp_timewait_input+0xcc>)
 800fc90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fc94:	492b      	ldr	r1, [pc, #172]	; (800fd44 <tcp_timewait_input+0xd0>)
 800fc96:	482c      	ldr	r0, [pc, #176]	; (800fd48 <tcp_timewait_input+0xd4>)
 800fc98:	f008 ff48 	bl	8018b2c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fc9c:	4b27      	ldr	r3, [pc, #156]	; (800fd3c <tcp_timewait_input+0xc8>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 0302 	and.w	r3, r3, #2
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d02a      	beq.n	800fcfe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fca8:	4b28      	ldr	r3, [pc, #160]	; (800fd4c <tcp_timewait_input+0xd8>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	db2d      	blt.n	800fd12 <tcp_timewait_input+0x9e>
 800fcb6:	4b25      	ldr	r3, [pc, #148]	; (800fd4c <tcp_timewait_input+0xd8>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbe:	6879      	ldr	r1, [r7, #4]
 800fcc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcc2:	440b      	add	r3, r1
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	dc23      	bgt.n	800fd12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcca:	4b21      	ldr	r3, [pc, #132]	; (800fd50 <tcp_timewait_input+0xdc>)
 800fccc:	6819      	ldr	r1, [r3, #0]
 800fcce:	4b21      	ldr	r3, [pc, #132]	; (800fd54 <tcp_timewait_input+0xe0>)
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	4b1d      	ldr	r3, [pc, #116]	; (800fd4c <tcp_timewait_input+0xd8>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcda:	4b1f      	ldr	r3, [pc, #124]	; (800fd58 <tcp_timewait_input+0xe4>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcde:	885b      	ldrh	r3, [r3, #2]
 800fce0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fce2:	4a1d      	ldr	r2, [pc, #116]	; (800fd58 <tcp_timewait_input+0xe4>)
 800fce4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fce6:	8812      	ldrh	r2, [r2, #0]
 800fce8:	b292      	uxth	r2, r2
 800fcea:	9202      	str	r2, [sp, #8]
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	4b1b      	ldr	r3, [pc, #108]	; (800fd5c <tcp_timewait_input+0xe8>)
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	4b1b      	ldr	r3, [pc, #108]	; (800fd60 <tcp_timewait_input+0xec>)
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f003 faca 	bl	8013290 <tcp_rst>
      return;
 800fcfc:	e01b      	b.n	800fd36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fcfe:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <tcp_timewait_input+0xc8>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fd0a:	4b16      	ldr	r3, [pc, #88]	; (800fd64 <tcp_timewait_input+0xf0>)
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fd12:	4b10      	ldr	r3, [pc, #64]	; (800fd54 <tcp_timewait_input+0xe0>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00c      	beq.n	800fd34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8b5b      	ldrh	r3, [r3, #26]
 800fd1e:	f043 0302 	orr.w	r3, r3, #2
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f002 fcfd 	bl	8012728 <tcp_output>
  }
  return;
 800fd2e:	e001      	b.n	800fd34 <tcp_timewait_input+0xc0>
    return;
 800fd30:	bf00      	nop
 800fd32:	e000      	b.n	800fd36 <tcp_timewait_input+0xc2>
  return;
 800fd34:	bf00      	nop
}
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	200111e4 	.word	0x200111e4
 800fd40:	0801bfd8 	.word	0x0801bfd8
 800fd44:	0801c1f0 	.word	0x0801c1f0
 800fd48:	0801c024 	.word	0x0801c024
 800fd4c:	200111d8 	.word	0x200111d8
 800fd50:	200111dc 	.word	0x200111dc
 800fd54:	200111e2 	.word	0x200111e2
 800fd58:	200111c8 	.word	0x200111c8
 800fd5c:	2000da3c 	.word	0x2000da3c
 800fd60:	2000da40 	.word	0x2000da40
 800fd64:	200111a0 	.word	0x200111a0

0800fd68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b08d      	sub	sp, #52	; 0x34
 800fd6c:	af04      	add	r7, sp, #16
 800fd6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fd70:	2300      	movs	r3, #0
 800fd72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d106      	bne.n	800fd8c <tcp_process+0x24>
 800fd7e:	4b9d      	ldr	r3, [pc, #628]	; (800fff4 <tcp_process+0x28c>)
 800fd80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fd84:	499c      	ldr	r1, [pc, #624]	; (800fff8 <tcp_process+0x290>)
 800fd86:	489d      	ldr	r0, [pc, #628]	; (800fffc <tcp_process+0x294>)
 800fd88:	f008 fed0 	bl	8018b2c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fd8c:	4b9c      	ldr	r3, [pc, #624]	; (8010000 <tcp_process+0x298>)
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	f003 0304 	and.w	r3, r3, #4
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d04e      	beq.n	800fe36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	7d1b      	ldrb	r3, [r3, #20]
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d108      	bne.n	800fdb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fda4:	4b97      	ldr	r3, [pc, #604]	; (8010004 <tcp_process+0x29c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d123      	bne.n	800fdf4 <tcp_process+0x8c>
        acceptable = 1;
 800fdac:	2301      	movs	r3, #1
 800fdae:	76fb      	strb	r3, [r7, #27]
 800fdb0:	e020      	b.n	800fdf4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdb6:	4b94      	ldr	r3, [pc, #592]	; (8010008 <tcp_process+0x2a0>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d102      	bne.n	800fdc4 <tcp_process+0x5c>
        acceptable = 1;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	76fb      	strb	r3, [r7, #27]
 800fdc2:	e017      	b.n	800fdf4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdc4:	4b90      	ldr	r3, [pc, #576]	; (8010008 <tcp_process+0x2a0>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	db10      	blt.n	800fdf4 <tcp_process+0x8c>
 800fdd2:	4b8d      	ldr	r3, [pc, #564]	; (8010008 <tcp_process+0x2a0>)
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdde:	440b      	add	r3, r1
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	dc06      	bgt.n	800fdf4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	8b5b      	ldrh	r3, [r3, #26]
 800fdea:	f043 0302 	orr.w	r3, r3, #2
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fdf4:	7efb      	ldrb	r3, [r7, #27]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d01b      	beq.n	800fe32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	7d1b      	ldrb	r3, [r3, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <tcp_process+0xa8>
 800fe02:	4b7c      	ldr	r3, [pc, #496]	; (800fff4 <tcp_process+0x28c>)
 800fe04:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fe08:	4980      	ldr	r1, [pc, #512]	; (801000c <tcp_process+0x2a4>)
 800fe0a:	487c      	ldr	r0, [pc, #496]	; (800fffc <tcp_process+0x294>)
 800fe0c:	f008 fe8e 	bl	8018b2c <iprintf>
      recv_flags |= TF_RESET;
 800fe10:	4b7f      	ldr	r3, [pc, #508]	; (8010010 <tcp_process+0x2a8>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	f043 0308 	orr.w	r3, r3, #8
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	4b7d      	ldr	r3, [pc, #500]	; (8010010 <tcp_process+0x2a8>)
 800fe1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	8b5b      	ldrh	r3, [r3, #26]
 800fe22:	f023 0301 	bic.w	r3, r3, #1
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fe2c:	f06f 030d 	mvn.w	r3, #13
 800fe30:	e37a      	b.n	8010528 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	e378      	b.n	8010528 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fe36:	4b72      	ldr	r3, [pc, #456]	; (8010000 <tcp_process+0x298>)
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0302 	and.w	r3, r3, #2
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d010      	beq.n	800fe64 <tcp_process+0xfc>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7d1b      	ldrb	r3, [r3, #20]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d00c      	beq.n	800fe64 <tcp_process+0xfc>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	7d1b      	ldrb	r3, [r3, #20]
 800fe4e:	2b03      	cmp	r3, #3
 800fe50:	d008      	beq.n	800fe64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	8b5b      	ldrh	r3, [r3, #26]
 800fe56:	f043 0302 	orr.w	r3, r3, #2
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e361      	b.n	8010528 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	8b5b      	ldrh	r3, [r3, #26]
 800fe68:	f003 0310 	and.w	r3, r3, #16
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d103      	bne.n	800fe78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fe70:	4b68      	ldr	r3, [pc, #416]	; (8010014 <tcp_process+0x2ac>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f001 fc2f 	bl	80116ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	3b02      	subs	r3, #2
 800fe94:	2b07      	cmp	r3, #7
 800fe96:	f200 8337 	bhi.w	8010508 <tcp_process+0x7a0>
 800fe9a:	a201      	add	r2, pc, #4	; (adr r2, 800fea0 <tcp_process+0x138>)
 800fe9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea0:	0800fec1 	.word	0x0800fec1
 800fea4:	080100f1 	.word	0x080100f1
 800fea8:	08010269 	.word	0x08010269
 800feac:	08010293 	.word	0x08010293
 800feb0:	080103b7 	.word	0x080103b7
 800feb4:	08010269 	.word	0x08010269
 800feb8:	08010443 	.word	0x08010443
 800febc:	080104d3 	.word	0x080104d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fec0:	4b4f      	ldr	r3, [pc, #316]	; (8010000 <tcp_process+0x298>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f003 0310 	and.w	r3, r3, #16
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 80e4 	beq.w	8010096 <tcp_process+0x32e>
 800fece:	4b4c      	ldr	r3, [pc, #304]	; (8010000 <tcp_process+0x298>)
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	f003 0302 	and.w	r3, r3, #2
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 80dd 	beq.w	8010096 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fee0:	1c5a      	adds	r2, r3, #1
 800fee2:	4b48      	ldr	r3, [pc, #288]	; (8010004 <tcp_process+0x29c>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	f040 80d5 	bne.w	8010096 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800feec:	4b46      	ldr	r3, [pc, #280]	; (8010008 <tcp_process+0x2a0>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	1c5a      	adds	r2, r3, #1
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fefe:	4b41      	ldr	r3, [pc, #260]	; (8010004 <tcp_process+0x29c>)
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ff06:	4b44      	ldr	r3, [pc, #272]	; (8010018 <tcp_process+0x2b0>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	89db      	ldrh	r3, [r3, #14]
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ff20:	4b39      	ldr	r3, [pc, #228]	; (8010008 <tcp_process+0x2a0>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	1e5a      	subs	r2, r3, #1
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2204      	movs	r2, #4
 800ff2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	3304      	adds	r3, #4
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f007 f91d 	bl	8017178 <ip4_route>
 800ff3e:	4601      	mov	r1, r0
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	3304      	adds	r3, #4
 800ff44:	461a      	mov	r2, r3
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7ff f88c 	bl	800f064 <tcp_eff_send_mss_netif>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff58:	009a      	lsls	r2, r3, #2
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff5e:	005b      	lsls	r3, r3, #1
 800ff60:	f241 111c 	movw	r1, #4380	; 0x111c
 800ff64:	428b      	cmp	r3, r1
 800ff66:	bf38      	it	cc
 800ff68:	460b      	movcc	r3, r1
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d204      	bcs.n	800ff78 <tcp_process+0x210>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	e00d      	b.n	800ff94 <tcp_process+0x22c>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff7c:	005b      	lsls	r3, r3, #1
 800ff7e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d904      	bls.n	800ff90 <tcp_process+0x228>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	e001      	b.n	800ff94 <tcp_process+0x22c>
 800ff90:	f241 131c 	movw	r3, #4380	; 0x111c
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d106      	bne.n	800ffb2 <tcp_process+0x24a>
 800ffa4:	4b13      	ldr	r3, [pc, #76]	; (800fff4 <tcp_process+0x28c>)
 800ffa6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ffaa:	491c      	ldr	r1, [pc, #112]	; (801001c <tcp_process+0x2b4>)
 800ffac:	4813      	ldr	r0, [pc, #76]	; (800fffc <tcp_process+0x294>)
 800ffae:	f008 fdbd 	bl	8018b2c <iprintf>
        --pcb->snd_queuelen;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffc6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d12a      	bne.n	8010024 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d106      	bne.n	800ffe8 <tcp_process+0x280>
 800ffda:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <tcp_process+0x28c>)
 800ffdc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ffe0:	490f      	ldr	r1, [pc, #60]	; (8010020 <tcp_process+0x2b8>)
 800ffe2:	4806      	ldr	r0, [pc, #24]	; (800fffc <tcp_process+0x294>)
 800ffe4:	f008 fda2 	bl	8018b2c <iprintf>
          pcb->unsent = rseg->next;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	66da      	str	r2, [r3, #108]	; 0x6c
 800fff0:	e01c      	b.n	801002c <tcp_process+0x2c4>
 800fff2:	bf00      	nop
 800fff4:	0801bfd8 	.word	0x0801bfd8
 800fff8:	0801c210 	.word	0x0801c210
 800fffc:	0801c024 	.word	0x0801c024
 8010000:	200111e4 	.word	0x200111e4
 8010004:	200111dc 	.word	0x200111dc
 8010008:	200111d8 	.word	0x200111d8
 801000c:	0801c22c 	.word	0x0801c22c
 8010010:	200111e5 	.word	0x200111e5
 8010014:	200111a0 	.word	0x200111a0
 8010018:	200111c8 	.word	0x200111c8
 801001c:	0801c24c 	.word	0x0801c24c
 8010020:	0801c264 	.word	0x0801c264
        } else {
          pcb->unacked = rseg->next;
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801002c:	69f8      	ldr	r0, [r7, #28]
 801002e:	f7fe fc36 	bl	800e89e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010040:	861a      	strh	r2, [r3, #48]	; 0x30
 8010042:	e006      	b.n	8010052 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00a      	beq.n	8010072 <tcp_process+0x30a>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	6910      	ldr	r0, [r2, #16]
 8010066:	2200      	movs	r2, #0
 8010068:	6879      	ldr	r1, [r7, #4]
 801006a:	4798      	blx	r3
 801006c:	4603      	mov	r3, r0
 801006e:	76bb      	strb	r3, [r7, #26]
 8010070:	e001      	b.n	8010076 <tcp_process+0x30e>
 8010072:	2300      	movs	r3, #0
 8010074:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010076:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801007a:	f113 0f0d 	cmn.w	r3, #13
 801007e:	d102      	bne.n	8010086 <tcp_process+0x31e>
          return ERR_ABRT;
 8010080:	f06f 030c 	mvn.w	r3, #12
 8010084:	e250      	b.n	8010528 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8b5b      	ldrh	r3, [r3, #26]
 801008a:	f043 0302 	orr.w	r3, r3, #2
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010094:	e23a      	b.n	801050c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010096:	4b98      	ldr	r3, [pc, #608]	; (80102f8 <tcp_process+0x590>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f003 0310 	and.w	r3, r3, #16
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f000 8234 	beq.w	801050c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100a4:	4b95      	ldr	r3, [pc, #596]	; (80102fc <tcp_process+0x594>)
 80100a6:	6819      	ldr	r1, [r3, #0]
 80100a8:	4b95      	ldr	r3, [pc, #596]	; (8010300 <tcp_process+0x598>)
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	461a      	mov	r2, r3
 80100ae:	4b95      	ldr	r3, [pc, #596]	; (8010304 <tcp_process+0x59c>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100b4:	4b94      	ldr	r3, [pc, #592]	; (8010308 <tcp_process+0x5a0>)
 80100b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100b8:	885b      	ldrh	r3, [r3, #2]
 80100ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100bc:	4a92      	ldr	r2, [pc, #584]	; (8010308 <tcp_process+0x5a0>)
 80100be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100c0:	8812      	ldrh	r2, [r2, #0]
 80100c2:	b292      	uxth	r2, r2
 80100c4:	9202      	str	r2, [sp, #8]
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	4b90      	ldr	r3, [pc, #576]	; (801030c <tcp_process+0x5a4>)
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	4b90      	ldr	r3, [pc, #576]	; (8010310 <tcp_process+0x5a8>)
 80100ce:	4602      	mov	r2, r0
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f003 f8dd 	bl	8013290 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100dc:	2b05      	cmp	r3, #5
 80100de:	f200 8215 	bhi.w	801050c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f002 fea9 	bl	8012e40 <tcp_rexmit_rto>
      break;
 80100ee:	e20d      	b.n	801050c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80100f0:	4b81      	ldr	r3, [pc, #516]	; (80102f8 <tcp_process+0x590>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 0310 	and.w	r3, r3, #16
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f000 80a1 	beq.w	8010240 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100fe:	4b7f      	ldr	r3, [pc, #508]	; (80102fc <tcp_process+0x594>)
 8010100:	681a      	ldr	r2, [r3, #0]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	3b01      	subs	r3, #1
 801010a:	2b00      	cmp	r3, #0
 801010c:	db7e      	blt.n	801020c <tcp_process+0x4a4>
 801010e:	4b7b      	ldr	r3, [pc, #492]	; (80102fc <tcp_process+0x594>)
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	dc77      	bgt.n	801020c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2204      	movs	r2, #4
 8010120:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010126:	2b00      	cmp	r3, #0
 8010128:	d102      	bne.n	8010130 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801012a:	23fa      	movs	r3, #250	; 0xfa
 801012c:	76bb      	strb	r3, [r7, #26]
 801012e:	e01d      	b.n	801016c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010134:	699b      	ldr	r3, [r3, #24]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d106      	bne.n	8010148 <tcp_process+0x3e0>
 801013a:	4b76      	ldr	r3, [pc, #472]	; (8010314 <tcp_process+0x5ac>)
 801013c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010140:	4975      	ldr	r1, [pc, #468]	; (8010318 <tcp_process+0x5b0>)
 8010142:	4876      	ldr	r0, [pc, #472]	; (801031c <tcp_process+0x5b4>)
 8010144:	f008 fcf2 	bl	8018b2c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801014c:	699b      	ldr	r3, [r3, #24]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00a      	beq.n	8010168 <tcp_process+0x400>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010156:	699b      	ldr	r3, [r3, #24]
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	6910      	ldr	r0, [r2, #16]
 801015c:	2200      	movs	r2, #0
 801015e:	6879      	ldr	r1, [r7, #4]
 8010160:	4798      	blx	r3
 8010162:	4603      	mov	r3, r0
 8010164:	76bb      	strb	r3, [r7, #26]
 8010166:	e001      	b.n	801016c <tcp_process+0x404>
 8010168:	23f0      	movs	r3, #240	; 0xf0
 801016a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801016c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d00a      	beq.n	801018a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010174:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010178:	f113 0f0d 	cmn.w	r3, #13
 801017c:	d002      	beq.n	8010184 <tcp_process+0x41c>
              tcp_abort(pcb);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7fd fbd0 	bl	800d924 <tcp_abort>
            }
            return ERR_ABRT;
 8010184:	f06f 030c 	mvn.w	r3, #12
 8010188:	e1ce      	b.n	8010528 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 fae0 	bl	8010750 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010190:	4b63      	ldr	r3, [pc, #396]	; (8010320 <tcp_process+0x5b8>)
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d005      	beq.n	80101a4 <tcp_process+0x43c>
            recv_acked--;
 8010198:	4b61      	ldr	r3, [pc, #388]	; (8010320 <tcp_process+0x5b8>)
 801019a:	881b      	ldrh	r3, [r3, #0]
 801019c:	3b01      	subs	r3, #1
 801019e:	b29a      	uxth	r2, r3
 80101a0:	4b5f      	ldr	r3, [pc, #380]	; (8010320 <tcp_process+0x5b8>)
 80101a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101a8:	009a      	lsls	r2, r3, #2
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80101b4:	428b      	cmp	r3, r1
 80101b6:	bf38      	it	cc
 80101b8:	460b      	movcc	r3, r1
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d204      	bcs.n	80101c8 <tcp_process+0x460>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	e00d      	b.n	80101e4 <tcp_process+0x47c>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d904      	bls.n	80101e0 <tcp_process+0x478>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101da:	005b      	lsls	r3, r3, #1
 80101dc:	b29b      	uxth	r3, r3
 80101de:	e001      	b.n	80101e4 <tcp_process+0x47c>
 80101e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80101ea:	4b4e      	ldr	r3, [pc, #312]	; (8010324 <tcp_process+0x5bc>)
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	f003 0320 	and.w	r3, r3, #32
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d037      	beq.n	8010266 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8b5b      	ldrh	r3, [r3, #26]
 80101fa:	f043 0302 	orr.w	r3, r3, #2
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2207      	movs	r2, #7
 8010208:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801020a:	e02c      	b.n	8010266 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801020c:	4b3b      	ldr	r3, [pc, #236]	; (80102fc <tcp_process+0x594>)
 801020e:	6819      	ldr	r1, [r3, #0]
 8010210:	4b3b      	ldr	r3, [pc, #236]	; (8010300 <tcp_process+0x598>)
 8010212:	881b      	ldrh	r3, [r3, #0]
 8010214:	461a      	mov	r2, r3
 8010216:	4b3b      	ldr	r3, [pc, #236]	; (8010304 <tcp_process+0x59c>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801021c:	4b3a      	ldr	r3, [pc, #232]	; (8010308 <tcp_process+0x5a0>)
 801021e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010224:	4a38      	ldr	r2, [pc, #224]	; (8010308 <tcp_process+0x5a0>)
 8010226:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010228:	8812      	ldrh	r2, [r2, #0]
 801022a:	b292      	uxth	r2, r2
 801022c:	9202      	str	r2, [sp, #8]
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	4b36      	ldr	r3, [pc, #216]	; (801030c <tcp_process+0x5a4>)
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4b36      	ldr	r3, [pc, #216]	; (8010310 <tcp_process+0x5a8>)
 8010236:	4602      	mov	r2, r0
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f003 f829 	bl	8013290 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801023e:	e167      	b.n	8010510 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010240:	4b2d      	ldr	r3, [pc, #180]	; (80102f8 <tcp_process+0x590>)
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f003 0302 	and.w	r3, r3, #2
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 8161 	beq.w	8010510 <tcp_process+0x7a8>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010252:	1e5a      	subs	r2, r3, #1
 8010254:	4b2b      	ldr	r3, [pc, #172]	; (8010304 <tcp_process+0x59c>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	429a      	cmp	r2, r3
 801025a:	f040 8159 	bne.w	8010510 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f002 fe10 	bl	8012e84 <tcp_rexmit>
      break;
 8010264:	e154      	b.n	8010510 <tcp_process+0x7a8>
 8010266:	e153      	b.n	8010510 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fa71 	bl	8010750 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801026e:	4b2d      	ldr	r3, [pc, #180]	; (8010324 <tcp_process+0x5bc>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	f003 0320 	and.w	r3, r3, #32
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 814c 	beq.w	8010514 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f043 0302 	orr.w	r3, r3, #2
 8010284:	b29a      	uxth	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2207      	movs	r2, #7
 801028e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010290:	e140      	b.n	8010514 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 fa5c 	bl	8010750 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010298:	4b22      	ldr	r3, [pc, #136]	; (8010324 <tcp_process+0x5bc>)
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	f003 0320 	and.w	r3, r3, #32
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d071      	beq.n	8010388 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102a4:	4b14      	ldr	r3, [pc, #80]	; (80102f8 <tcp_process+0x590>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	f003 0310 	and.w	r3, r3, #16
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d060      	beq.n	8010372 <tcp_process+0x60a>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102b4:	4b11      	ldr	r3, [pc, #68]	; (80102fc <tcp_process+0x594>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d15a      	bne.n	8010372 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d156      	bne.n	8010372 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	8b5b      	ldrh	r3, [r3, #26]
 80102c8:	f043 0302 	orr.w	r3, r3, #2
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7fe fdbc 	bl	800ee50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80102d8:	4b13      	ldr	r3, [pc, #76]	; (8010328 <tcp_process+0x5c0>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d105      	bne.n	80102ee <tcp_process+0x586>
 80102e2:	4b11      	ldr	r3, [pc, #68]	; (8010328 <tcp_process+0x5c0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	4a0f      	ldr	r2, [pc, #60]	; (8010328 <tcp_process+0x5c0>)
 80102ea:	6013      	str	r3, [r2, #0]
 80102ec:	e02e      	b.n	801034c <tcp_process+0x5e4>
 80102ee:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <tcp_process+0x5c0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	617b      	str	r3, [r7, #20]
 80102f4:	e027      	b.n	8010346 <tcp_process+0x5de>
 80102f6:	bf00      	nop
 80102f8:	200111e4 	.word	0x200111e4
 80102fc:	200111dc 	.word	0x200111dc
 8010300:	200111e2 	.word	0x200111e2
 8010304:	200111d8 	.word	0x200111d8
 8010308:	200111c8 	.word	0x200111c8
 801030c:	2000da3c 	.word	0x2000da3c
 8010310:	2000da40 	.word	0x2000da40
 8010314:	0801bfd8 	.word	0x0801bfd8
 8010318:	0801c278 	.word	0x0801c278
 801031c:	0801c024 	.word	0x0801c024
 8010320:	200111e0 	.word	0x200111e0
 8010324:	200111e5 	.word	0x200111e5
 8010328:	200111ac 	.word	0x200111ac
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	687a      	ldr	r2, [r7, #4]
 8010332:	429a      	cmp	r2, r3
 8010334:	d104      	bne.n	8010340 <tcp_process+0x5d8>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	68da      	ldr	r2, [r3, #12]
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	60da      	str	r2, [r3, #12]
 801033e:	e005      	b.n	801034c <tcp_process+0x5e4>
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	617b      	str	r3, [r7, #20]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1ef      	bne.n	801032c <tcp_process+0x5c4>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	60da      	str	r2, [r3, #12]
 8010352:	4b77      	ldr	r3, [pc, #476]	; (8010530 <tcp_process+0x7c8>)
 8010354:	2201      	movs	r2, #1
 8010356:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	220a      	movs	r2, #10
 801035c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801035e:	4b75      	ldr	r3, [pc, #468]	; (8010534 <tcp_process+0x7cc>)
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	60da      	str	r2, [r3, #12]
 8010366:	4a73      	ldr	r2, [pc, #460]	; (8010534 <tcp_process+0x7cc>)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6013      	str	r3, [r2, #0]
 801036c:	f003 f952 	bl	8013614 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010370:	e0d2      	b.n	8010518 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	8b5b      	ldrh	r3, [r3, #26]
 8010376:	f043 0302 	orr.w	r3, r3, #2
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2208      	movs	r2, #8
 8010384:	751a      	strb	r2, [r3, #20]
      break;
 8010386:	e0c7      	b.n	8010518 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010388:	4b6b      	ldr	r3, [pc, #428]	; (8010538 <tcp_process+0x7d0>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	f003 0310 	and.w	r3, r3, #16
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 80c1 	beq.w	8010518 <tcp_process+0x7b0>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801039a:	4b68      	ldr	r3, [pc, #416]	; (801053c <tcp_process+0x7d4>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	429a      	cmp	r2, r3
 80103a0:	f040 80ba 	bne.w	8010518 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f040 80b5 	bne.w	8010518 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2206      	movs	r2, #6
 80103b2:	751a      	strb	r2, [r3, #20]
      break;
 80103b4:	e0b0      	b.n	8010518 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f9ca 	bl	8010750 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80103bc:	4b60      	ldr	r3, [pc, #384]	; (8010540 <tcp_process+0x7d8>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	f003 0320 	and.w	r3, r3, #32
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	f000 80a9 	beq.w	801051c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	8b5b      	ldrh	r3, [r3, #26]
 80103ce:	f043 0302 	orr.w	r3, r3, #2
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7fe fd39 	bl	800ee50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80103de:	4b59      	ldr	r3, [pc, #356]	; (8010544 <tcp_process+0x7dc>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d105      	bne.n	80103f4 <tcp_process+0x68c>
 80103e8:	4b56      	ldr	r3, [pc, #344]	; (8010544 <tcp_process+0x7dc>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	4a55      	ldr	r2, [pc, #340]	; (8010544 <tcp_process+0x7dc>)
 80103f0:	6013      	str	r3, [r2, #0]
 80103f2:	e013      	b.n	801041c <tcp_process+0x6b4>
 80103f4:	4b53      	ldr	r3, [pc, #332]	; (8010544 <tcp_process+0x7dc>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	613b      	str	r3, [r7, #16]
 80103fa:	e00c      	b.n	8010416 <tcp_process+0x6ae>
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	429a      	cmp	r2, r3
 8010404:	d104      	bne.n	8010410 <tcp_process+0x6a8>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	68da      	ldr	r2, [r3, #12]
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	60da      	str	r2, [r3, #12]
 801040e:	e005      	b.n	801041c <tcp_process+0x6b4>
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1ef      	bne.n	80103fc <tcp_process+0x694>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	60da      	str	r2, [r3, #12]
 8010422:	4b43      	ldr	r3, [pc, #268]	; (8010530 <tcp_process+0x7c8>)
 8010424:	2201      	movs	r2, #1
 8010426:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	220a      	movs	r2, #10
 801042c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801042e:	4b41      	ldr	r3, [pc, #260]	; (8010534 <tcp_process+0x7cc>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	60da      	str	r2, [r3, #12]
 8010436:	4a3f      	ldr	r2, [pc, #252]	; (8010534 <tcp_process+0x7cc>)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6013      	str	r3, [r2, #0]
 801043c:	f003 f8ea 	bl	8013614 <tcp_timer_needed>
      }
      break;
 8010440:	e06c      	b.n	801051c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 f984 	bl	8010750 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010448:	4b3b      	ldr	r3, [pc, #236]	; (8010538 <tcp_process+0x7d0>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	2b00      	cmp	r3, #0
 8010452:	d065      	beq.n	8010520 <tcp_process+0x7b8>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010458:	4b38      	ldr	r3, [pc, #224]	; (801053c <tcp_process+0x7d4>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	429a      	cmp	r2, r3
 801045e:	d15f      	bne.n	8010520 <tcp_process+0x7b8>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010464:	2b00      	cmp	r3, #0
 8010466:	d15b      	bne.n	8010520 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7fe fcf1 	bl	800ee50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801046e:	4b35      	ldr	r3, [pc, #212]	; (8010544 <tcp_process+0x7dc>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	429a      	cmp	r2, r3
 8010476:	d105      	bne.n	8010484 <tcp_process+0x71c>
 8010478:	4b32      	ldr	r3, [pc, #200]	; (8010544 <tcp_process+0x7dc>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	4a31      	ldr	r2, [pc, #196]	; (8010544 <tcp_process+0x7dc>)
 8010480:	6013      	str	r3, [r2, #0]
 8010482:	e013      	b.n	80104ac <tcp_process+0x744>
 8010484:	4b2f      	ldr	r3, [pc, #188]	; (8010544 <tcp_process+0x7dc>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	e00c      	b.n	80104a6 <tcp_process+0x73e>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	429a      	cmp	r2, r3
 8010494:	d104      	bne.n	80104a0 <tcp_process+0x738>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	60da      	str	r2, [r3, #12]
 801049e:	e005      	b.n	80104ac <tcp_process+0x744>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	60fb      	str	r3, [r7, #12]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1ef      	bne.n	801048c <tcp_process+0x724>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	60da      	str	r2, [r3, #12]
 80104b2:	4b1f      	ldr	r3, [pc, #124]	; (8010530 <tcp_process+0x7c8>)
 80104b4:	2201      	movs	r2, #1
 80104b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	220a      	movs	r2, #10
 80104bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104be:	4b1d      	ldr	r3, [pc, #116]	; (8010534 <tcp_process+0x7cc>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	60da      	str	r2, [r3, #12]
 80104c6:	4a1b      	ldr	r2, [pc, #108]	; (8010534 <tcp_process+0x7cc>)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	f003 f8a2 	bl	8013614 <tcp_timer_needed>
      }
      break;
 80104d0:	e026      	b.n	8010520 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 f93c 	bl	8010750 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80104d8:	4b17      	ldr	r3, [pc, #92]	; (8010538 <tcp_process+0x7d0>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 0310 	and.w	r3, r3, #16
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d01f      	beq.n	8010524 <tcp_process+0x7bc>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104e8:	4b14      	ldr	r3, [pc, #80]	; (801053c <tcp_process+0x7d4>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d119      	bne.n	8010524 <tcp_process+0x7bc>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d115      	bne.n	8010524 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80104f8:	4b11      	ldr	r3, [pc, #68]	; (8010540 <tcp_process+0x7d8>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f043 0310 	orr.w	r3, r3, #16
 8010500:	b2da      	uxtb	r2, r3
 8010502:	4b0f      	ldr	r3, [pc, #60]	; (8010540 <tcp_process+0x7d8>)
 8010504:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010506:	e00d      	b.n	8010524 <tcp_process+0x7bc>
    default:
      break;
 8010508:	bf00      	nop
 801050a:	e00c      	b.n	8010526 <tcp_process+0x7be>
      break;
 801050c:	bf00      	nop
 801050e:	e00a      	b.n	8010526 <tcp_process+0x7be>
      break;
 8010510:	bf00      	nop
 8010512:	e008      	b.n	8010526 <tcp_process+0x7be>
      break;
 8010514:	bf00      	nop
 8010516:	e006      	b.n	8010526 <tcp_process+0x7be>
      break;
 8010518:	bf00      	nop
 801051a:	e004      	b.n	8010526 <tcp_process+0x7be>
      break;
 801051c:	bf00      	nop
 801051e:	e002      	b.n	8010526 <tcp_process+0x7be>
      break;
 8010520:	bf00      	nop
 8010522:	e000      	b.n	8010526 <tcp_process+0x7be>
      break;
 8010524:	bf00      	nop
  }
  return ERR_OK;
 8010526:	2300      	movs	r3, #0
}
 8010528:	4618      	mov	r0, r3
 801052a:	3724      	adds	r7, #36	; 0x24
 801052c:	46bd      	mov	sp, r7
 801052e:	bd90      	pop	{r4, r7, pc}
 8010530:	200111b4 	.word	0x200111b4
 8010534:	200111b0 	.word	0x200111b0
 8010538:	200111e4 	.word	0x200111e4
 801053c:	200111dc 	.word	0x200111dc
 8010540:	200111e5 	.word	0x200111e5
 8010544:	200111ac 	.word	0x200111ac

08010548 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010548:	b590      	push	{r4, r7, lr}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d106      	bne.n	8010566 <tcp_oos_insert_segment+0x1e>
 8010558:	4b3b      	ldr	r3, [pc, #236]	; (8010648 <tcp_oos_insert_segment+0x100>)
 801055a:	f240 421f 	movw	r2, #1055	; 0x41f
 801055e:	493b      	ldr	r1, [pc, #236]	; (801064c <tcp_oos_insert_segment+0x104>)
 8010560:	483b      	ldr	r0, [pc, #236]	; (8010650 <tcp_oos_insert_segment+0x108>)
 8010562:	f008 fae3 	bl	8018b2c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	899b      	ldrh	r3, [r3, #12]
 801056c:	b29b      	uxth	r3, r3
 801056e:	4618      	mov	r0, r3
 8010570:	f7fa ffa4 	bl	800b4bc <lwip_htons>
 8010574:	4603      	mov	r3, r0
 8010576:	b2db      	uxtb	r3, r3
 8010578:	f003 0301 	and.w	r3, r3, #1
 801057c:	2b00      	cmp	r3, #0
 801057e:	d028      	beq.n	80105d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010580:	6838      	ldr	r0, [r7, #0]
 8010582:	f7fe f977 	bl	800e874 <tcp_segs_free>
    next = NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	603b      	str	r3, [r7, #0]
 801058a:	e056      	b.n	801063a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	b29b      	uxth	r3, r3
 8010594:	4618      	mov	r0, r3
 8010596:	f7fa ff91 	bl	800b4bc <lwip_htons>
 801059a:	4603      	mov	r3, r0
 801059c:	b2db      	uxtb	r3, r3
 801059e:	f003 0301 	and.w	r3, r3, #1
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00d      	beq.n	80105c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	899b      	ldrh	r3, [r3, #12]
 80105ac:	b29c      	uxth	r4, r3
 80105ae:	2001      	movs	r0, #1
 80105b0:	f7fa ff84 	bl	800b4bc <lwip_htons>
 80105b4:	4603      	mov	r3, r0
 80105b6:	461a      	mov	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	4322      	orrs	r2, r4
 80105be:	b292      	uxth	r2, r2
 80105c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f7fe f966 	bl	800e89e <tcp_seg_free>
    while (next &&
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00e      	beq.n	80105f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	891b      	ldrh	r3, [r3, #8]
 80105dc:	461a      	mov	r2, r3
 80105de:	4b1d      	ldr	r3, [pc, #116]	; (8010654 <tcp_oos_insert_segment+0x10c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	441a      	add	r2, r3
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	8909      	ldrh	r1, [r1, #8]
 80105ee:	440b      	add	r3, r1
 80105f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	daca      	bge.n	801058c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d01e      	beq.n	801063a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	891b      	ldrh	r3, [r3, #8]
 8010600:	461a      	mov	r2, r3
 8010602:	4b14      	ldr	r3, [pc, #80]	; (8010654 <tcp_oos_insert_segment+0x10c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	441a      	add	r2, r3
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010610:	2b00      	cmp	r3, #0
 8010612:	dd12      	ble.n	801063a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	b29a      	uxth	r2, r3
 801061c:	4b0d      	ldr	r3, [pc, #52]	; (8010654 <tcp_oos_insert_segment+0x10c>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	b29b      	uxth	r3, r3
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	b29a      	uxth	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685a      	ldr	r2, [r3, #4]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	891b      	ldrh	r3, [r3, #8]
 8010632:	4619      	mov	r1, r3
 8010634:	4610      	mov	r0, r2
 8010636:	f7fc f9ef 	bl	800ca18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	601a      	str	r2, [r3, #0]
}
 8010640:	bf00      	nop
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	bd90      	pop	{r4, r7, pc}
 8010648:	0801bfd8 	.word	0x0801bfd8
 801064c:	0801c298 	.word	0x0801c298
 8010650:	0801c024 	.word	0x0801c024
 8010654:	200111d8 	.word	0x200111d8

08010658 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010658:	b5b0      	push	{r4, r5, r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010666:	e03e      	b.n	80106e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	f7fc fbe2 	bl	800ce40 <pbuf_clen>
 801067c:	4603      	mov	r3, r0
 801067e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010686:	8a7a      	ldrh	r2, [r7, #18]
 8010688:	429a      	cmp	r2, r3
 801068a:	d906      	bls.n	801069a <tcp_free_acked_segments+0x42>
 801068c:	4b2a      	ldr	r3, [pc, #168]	; (8010738 <tcp_free_acked_segments+0xe0>)
 801068e:	f240 4257 	movw	r2, #1111	; 0x457
 8010692:	492a      	ldr	r1, [pc, #168]	; (801073c <tcp_free_acked_segments+0xe4>)
 8010694:	482a      	ldr	r0, [pc, #168]	; (8010740 <tcp_free_acked_segments+0xe8>)
 8010696:	f008 fa49 	bl	8018b2c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80106a0:	8a7b      	ldrh	r3, [r7, #18]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	891a      	ldrh	r2, [r3, #8]
 80106b0:	4b24      	ldr	r3, [pc, #144]	; (8010744 <tcp_free_acked_segments+0xec>)
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	4413      	add	r3, r2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	4b22      	ldr	r3, [pc, #136]	; (8010744 <tcp_free_acked_segments+0xec>)
 80106ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80106bc:	6978      	ldr	r0, [r7, #20]
 80106be:	f7fe f8ee 	bl	800e89e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00c      	beq.n	80106e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d109      	bne.n	80106e6 <tcp_free_acked_segments+0x8e>
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <tcp_free_acked_segments+0x8e>
 80106d8:	4b17      	ldr	r3, [pc, #92]	; (8010738 <tcp_free_acked_segments+0xe0>)
 80106da:	f240 4261 	movw	r2, #1121	; 0x461
 80106de:	491a      	ldr	r1, [pc, #104]	; (8010748 <tcp_free_acked_segments+0xf0>)
 80106e0:	4817      	ldr	r0, [pc, #92]	; (8010740 <tcp_free_acked_segments+0xe8>)
 80106e2:	f008 fa23 	bl	8018b2c <iprintf>
  while (seg_list != NULL &&
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d020      	beq.n	801072e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fa fef7 	bl	800b4e6 <lwip_htonl>
 80106f8:	4604      	mov	r4, r0
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	891b      	ldrh	r3, [r3, #8]
 80106fe:	461d      	mov	r5, r3
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	899b      	ldrh	r3, [r3, #12]
 8010706:	b29b      	uxth	r3, r3
 8010708:	4618      	mov	r0, r3
 801070a:	f7fa fed7 	bl	800b4bc <lwip_htons>
 801070e:	4603      	mov	r3, r0
 8010710:	b2db      	uxtb	r3, r3
 8010712:	f003 0303 	and.w	r3, r3, #3
 8010716:	2b00      	cmp	r3, #0
 8010718:	d001      	beq.n	801071e <tcp_free_acked_segments+0xc6>
 801071a:	2301      	movs	r3, #1
 801071c:	e000      	b.n	8010720 <tcp_free_acked_segments+0xc8>
 801071e:	2300      	movs	r3, #0
 8010720:	442b      	add	r3, r5
 8010722:	18e2      	adds	r2, r4, r3
 8010724:	4b09      	ldr	r3, [pc, #36]	; (801074c <tcp_free_acked_segments+0xf4>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801072a:	2b00      	cmp	r3, #0
 801072c:	dd9c      	ble.n	8010668 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801072e:	68bb      	ldr	r3, [r7, #8]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bdb0      	pop	{r4, r5, r7, pc}
 8010738:	0801bfd8 	.word	0x0801bfd8
 801073c:	0801c2c0 	.word	0x0801c2c0
 8010740:	0801c024 	.word	0x0801c024
 8010744:	200111e0 	.word	0x200111e0
 8010748:	0801c2e8 	.word	0x0801c2e8
 801074c:	200111dc 	.word	0x200111dc

08010750 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010750:	b5b0      	push	{r4, r5, r7, lr}
 8010752:	b094      	sub	sp, #80	; 0x50
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <tcp_receive+0x20>
 8010762:	4b91      	ldr	r3, [pc, #580]	; (80109a8 <tcp_receive+0x258>)
 8010764:	f240 427b 	movw	r2, #1147	; 0x47b
 8010768:	4990      	ldr	r1, [pc, #576]	; (80109ac <tcp_receive+0x25c>)
 801076a:	4891      	ldr	r0, [pc, #580]	; (80109b0 <tcp_receive+0x260>)
 801076c:	f008 f9de 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7d1b      	ldrb	r3, [r3, #20]
 8010774:	2b03      	cmp	r3, #3
 8010776:	d806      	bhi.n	8010786 <tcp_receive+0x36>
 8010778:	4b8b      	ldr	r3, [pc, #556]	; (80109a8 <tcp_receive+0x258>)
 801077a:	f240 427c 	movw	r2, #1148	; 0x47c
 801077e:	498d      	ldr	r1, [pc, #564]	; (80109b4 <tcp_receive+0x264>)
 8010780:	488b      	ldr	r0, [pc, #556]	; (80109b0 <tcp_receive+0x260>)
 8010782:	f008 f9d3 	bl	8018b2c <iprintf>

  if (flags & TCP_ACK) {
 8010786:	4b8c      	ldr	r3, [pc, #560]	; (80109b8 <tcp_receive+0x268>)
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	f003 0310 	and.w	r3, r3, #16
 801078e:	2b00      	cmp	r3, #0
 8010790:	f000 8264 	beq.w	8010c5c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801079a:	461a      	mov	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107a0:	4413      	add	r3, r2
 80107a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107a8:	4b84      	ldr	r3, [pc, #528]	; (80109bc <tcp_receive+0x26c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	1ad3      	subs	r3, r2, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	db1b      	blt.n	80107ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107b6:	4b81      	ldr	r3, [pc, #516]	; (80109bc <tcp_receive+0x26c>)
 80107b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d106      	bne.n	80107cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107c2:	4b7f      	ldr	r3, [pc, #508]	; (80109c0 <tcp_receive+0x270>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	db0e      	blt.n	80107ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80107d0:	4b7b      	ldr	r3, [pc, #492]	; (80109c0 <tcp_receive+0x270>)
 80107d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d125      	bne.n	8010824 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80107d8:	4b7a      	ldr	r3, [pc, #488]	; (80109c4 <tcp_receive+0x274>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	89db      	ldrh	r3, [r3, #14]
 80107de:	b29a      	uxth	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d91c      	bls.n	8010824 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80107ea:	4b76      	ldr	r3, [pc, #472]	; (80109c4 <tcp_receive+0x274>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	89db      	ldrh	r3, [r3, #14]
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010804:	429a      	cmp	r2, r3
 8010806:	d205      	bcs.n	8010814 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010814:	4b69      	ldr	r3, [pc, #420]	; (80109bc <tcp_receive+0x26c>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801081c:	4b68      	ldr	r3, [pc, #416]	; (80109c0 <tcp_receive+0x270>)
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010824:	4b66      	ldr	r3, [pc, #408]	; (80109c0 <tcp_receive+0x270>)
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	dc58      	bgt.n	80108e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010832:	4b65      	ldr	r3, [pc, #404]	; (80109c8 <tcp_receive+0x278>)
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d14b      	bne.n	80108d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010844:	4413      	add	r3, r2
 8010846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010848:	429a      	cmp	r2, r3
 801084a:	d142      	bne.n	80108d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010852:	2b00      	cmp	r3, #0
 8010854:	db3d      	blt.n	80108d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801085a:	4b59      	ldr	r3, [pc, #356]	; (80109c0 <tcp_receive+0x270>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	429a      	cmp	r2, r3
 8010860:	d137      	bne.n	80108d2 <tcp_receive+0x182>
              found_dupack = 1;
 8010862:	2301      	movs	r3, #1
 8010864:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801086c:	2bff      	cmp	r3, #255	; 0xff
 801086e:	d007      	beq.n	8010880 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010876:	3301      	adds	r3, #1
 8010878:	b2da      	uxtb	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010886:	2b03      	cmp	r3, #3
 8010888:	d91b      	bls.n	80108c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010894:	4413      	add	r3, r2
 8010896:	b29a      	uxth	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801089e:	429a      	cmp	r2, r3
 80108a0:	d30a      	bcc.n	80108b8 <tcp_receive+0x168>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108ac:	4413      	add	r3, r2
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108b6:	e004      	b.n	80108c2 <tcp_receive+0x172>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80108c8:	2b02      	cmp	r3, #2
 80108ca:	d902      	bls.n	80108d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f002 fb45 	bl	8012f5c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80108d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f040 8161 	bne.w	8010b9c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108e2:	e15b      	b.n	8010b9c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80108e4:	4b36      	ldr	r3, [pc, #216]	; (80109c0 <tcp_receive+0x270>)
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	3b01      	subs	r3, #1
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f2c0 814e 	blt.w	8010b92 <tcp_receive+0x442>
 80108f6:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <tcp_receive+0x270>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108fe:	1ad3      	subs	r3, r2, r3
 8010900:	2b00      	cmp	r3, #0
 8010902:	f300 8146 	bgt.w	8010b92 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	8b5b      	ldrh	r3, [r3, #26]
 801090a:	f003 0304 	and.w	r3, r3, #4
 801090e:	2b00      	cmp	r3, #0
 8010910:	d010      	beq.n	8010934 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	8b5b      	ldrh	r3, [r3, #26]
 8010916:	f023 0304 	bic.w	r3, r3, #4
 801091a:	b29a      	uxth	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010942:	10db      	asrs	r3, r3, #3
 8010944:	b21b      	sxth	r3, r3
 8010946:	b29a      	uxth	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801094e:	b29b      	uxth	r3, r3
 8010950:	4413      	add	r3, r2
 8010952:	b29b      	uxth	r3, r3
 8010954:	b21a      	sxth	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801095c:	4b18      	ldr	r3, [pc, #96]	; (80109c0 <tcp_receive+0x270>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	b29a      	uxth	r2, r3
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010966:	b29b      	uxth	r3, r3
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010974:	4b12      	ldr	r3, [pc, #72]	; (80109c0 <tcp_receive+0x270>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	7d1b      	ldrb	r3, [r3, #20]
 8010980:	2b03      	cmp	r3, #3
 8010982:	f240 8097 	bls.w	8010ab4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010992:	429a      	cmp	r2, r3
 8010994:	d245      	bcs.n	8010a22 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8b5b      	ldrh	r3, [r3, #26]
 801099a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d014      	beq.n	80109cc <tcp_receive+0x27c>
 80109a2:	2301      	movs	r3, #1
 80109a4:	e013      	b.n	80109ce <tcp_receive+0x27e>
 80109a6:	bf00      	nop
 80109a8:	0801bfd8 	.word	0x0801bfd8
 80109ac:	0801c308 	.word	0x0801c308
 80109b0:	0801c024 	.word	0x0801c024
 80109b4:	0801c324 	.word	0x0801c324
 80109b8:	200111e4 	.word	0x200111e4
 80109bc:	200111d8 	.word	0x200111d8
 80109c0:	200111dc 	.word	0x200111dc
 80109c4:	200111c8 	.word	0x200111c8
 80109c8:	200111e2 	.word	0x200111e2
 80109cc:	2302      	movs	r3, #2
 80109ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80109d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109dc:	fb12 f303 	smulbb	r3, r2, r3
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109e4:	4293      	cmp	r3, r2
 80109e6:	bf28      	it	cs
 80109e8:	4613      	movcs	r3, r2
 80109ea:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80109f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109f4:	4413      	add	r3, r2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d309      	bcc.n	8010a16 <tcp_receive+0x2c6>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a0a:	4413      	add	r3, r2
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a14:	e04e      	b.n	8010ab4 <tcp_receive+0x364>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a20:	e048      	b.n	8010ab4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a2a:	4413      	add	r3, r2
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d309      	bcc.n	8010a4c <tcp_receive+0x2fc>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a40:	4413      	add	r3, r2
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010a4a:	e004      	b.n	8010a56 <tcp_receive+0x306>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d326      	bcc.n	8010ab4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a72:	1ad3      	subs	r3, r2, r3
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a86:	4413      	add	r3, r2
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d30a      	bcc.n	8010aaa <tcp_receive+0x35a>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a9e:	4413      	add	r3, r2
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010aa8:	e004      	b.n	8010ab4 <tcp_receive+0x364>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ab0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010abc:	4a98      	ldr	r2, [pc, #608]	; (8010d20 <tcp_receive+0x5d0>)
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff fdca 	bl	8010658 <tcp_free_acked_segments>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ad2:	4a94      	ldr	r2, [pc, #592]	; (8010d24 <tcp_receive+0x5d4>)
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fdbf 	bl	8010658 <tcp_free_acked_segments>
 8010ada:	4602      	mov	r2, r0
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d104      	bne.n	8010af2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aee:	861a      	strh	r2, [r3, #48]	; 0x30
 8010af0:	e002      	b.n	8010af8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d103      	bne.n	8010b0e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010b14:	4b84      	ldr	r3, [pc, #528]	; (8010d28 <tcp_receive+0x5d8>)
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	4413      	add	r3, r2
 8010b1a:	b29a      	uxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8b5b      	ldrh	r3, [r3, #26]
 8010b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d035      	beq.n	8010b9a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d118      	bne.n	8010b68 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00c      	beq.n	8010b58 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fa fccb 	bl	800b4e6 <lwip_htonl>
 8010b50:	4603      	mov	r3, r0
 8010b52:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dc20      	bgt.n	8010b9a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	8b5b      	ldrh	r3, [r3, #26]
 8010b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b66:	e018      	b.n	8010b9a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fa fcb6 	bl	800b4e6 <lwip_htonl>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	1ae3      	subs	r3, r4, r3
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	dc0b      	bgt.n	8010b9a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8b5b      	ldrh	r3, [r3, #26]
 8010b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b90:	e003      	b.n	8010b9a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f002 fbce 	bl	8013334 <tcp_send_empty_ack>
 8010b98:	e000      	b.n	8010b9c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b9a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d05b      	beq.n	8010c5c <tcp_receive+0x50c>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ba8:	4b60      	ldr	r3, [pc, #384]	; (8010d2c <tcp_receive+0x5dc>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	da54      	bge.n	8010c5c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010bb2:	4b5f      	ldr	r3, [pc, #380]	; (8010d30 <tcp_receive+0x5e0>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010bc6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bd0:	10db      	asrs	r3, r3, #3
 8010bd2:	b21b      	sxth	r3, r3
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010bea:	4413      	add	r3, r2
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	b21a      	sxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010bf4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	da05      	bge.n	8010c08 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c00:	425b      	negs	r3, r3
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010c08:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c12:	109b      	asrs	r3, r3, #2
 8010c14:	b21b      	sxth	r3, r3
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010c2c:	4413      	add	r3, r2
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	b21a      	sxth	r2, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c3c:	10db      	asrs	r3, r3, #3
 8010c3e:	b21b      	sxth	r3, r3
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	4413      	add	r3, r2
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	b21a      	sxth	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010c5c:	4b35      	ldr	r3, [pc, #212]	; (8010d34 <tcp_receive+0x5e4>)
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 84e2 	beq.w	801162a <tcp_receive+0xeda>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7d1b      	ldrb	r3, [r3, #20]
 8010c6a:	2b06      	cmp	r3, #6
 8010c6c:	f200 84dd 	bhi.w	801162a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c74:	4b30      	ldr	r3, [pc, #192]	; (8010d38 <tcp_receive+0x5e8>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	3b01      	subs	r3, #1
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f2c0 808f 	blt.w	8010da0 <tcp_receive+0x650>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c86:	4b2b      	ldr	r3, [pc, #172]	; (8010d34 <tcp_receive+0x5e4>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4b2a      	ldr	r3, [pc, #168]	; (8010d38 <tcp_receive+0x5e8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	440b      	add	r3, r1
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	3301      	adds	r3, #1
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f300 8082 	bgt.w	8010da0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010c9c:	4b27      	ldr	r3, [pc, #156]	; (8010d3c <tcp_receive+0x5ec>)
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ca6:	4b24      	ldr	r3, [pc, #144]	; (8010d38 <tcp_receive+0x5e8>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010cae:	4b23      	ldr	r3, [pc, #140]	; (8010d3c <tcp_receive+0x5ec>)
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <tcp_receive+0x574>
 8010cb6:	4b22      	ldr	r3, [pc, #136]	; (8010d40 <tcp_receive+0x5f0>)
 8010cb8:	f240 5294 	movw	r2, #1428	; 0x594
 8010cbc:	4921      	ldr	r1, [pc, #132]	; (8010d44 <tcp_receive+0x5f4>)
 8010cbe:	4822      	ldr	r0, [pc, #136]	; (8010d48 <tcp_receive+0x5f8>)
 8010cc0:	f007 ff34 	bl	8018b2c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d906      	bls.n	8010cdc <tcp_receive+0x58c>
 8010cce:	4b1c      	ldr	r3, [pc, #112]	; (8010d40 <tcp_receive+0x5f0>)
 8010cd0:	f240 5295 	movw	r2, #1429	; 0x595
 8010cd4:	491d      	ldr	r1, [pc, #116]	; (8010d4c <tcp_receive+0x5fc>)
 8010cd6:	481c      	ldr	r0, [pc, #112]	; (8010d48 <tcp_receive+0x5f8>)
 8010cd8:	f007 ff28 	bl	8018b2c <iprintf>
      off = (u16_t)off32;
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ce2:	4b16      	ldr	r3, [pc, #88]	; (8010d3c <tcp_receive+0x5ec>)
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	891b      	ldrh	r3, [r3, #8]
 8010ce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d906      	bls.n	8010cfe <tcp_receive+0x5ae>
 8010cf0:	4b13      	ldr	r3, [pc, #76]	; (8010d40 <tcp_receive+0x5f0>)
 8010cf2:	f240 5297 	movw	r2, #1431	; 0x597
 8010cf6:	4916      	ldr	r1, [pc, #88]	; (8010d50 <tcp_receive+0x600>)
 8010cf8:	4813      	ldr	r0, [pc, #76]	; (8010d48 <tcp_receive+0x5f8>)
 8010cfa:	f007 ff17 	bl	8018b2c <iprintf>
      inseg.len -= off;
 8010cfe:	4b0f      	ldr	r3, [pc, #60]	; (8010d3c <tcp_receive+0x5ec>)
 8010d00:	891a      	ldrh	r2, [r3, #8]
 8010d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	4b0c      	ldr	r3, [pc, #48]	; (8010d3c <tcp_receive+0x5ec>)
 8010d0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010d0e:	4b0b      	ldr	r3, [pc, #44]	; (8010d3c <tcp_receive+0x5ec>)
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	891a      	ldrh	r2, [r3, #8]
 8010d14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010d1c:	e02a      	b.n	8010d74 <tcp_receive+0x624>
 8010d1e:	bf00      	nop
 8010d20:	0801c340 	.word	0x0801c340
 8010d24:	0801c348 	.word	0x0801c348
 8010d28:	200111e0 	.word	0x200111e0
 8010d2c:	200111dc 	.word	0x200111dc
 8010d30:	200111a0 	.word	0x200111a0
 8010d34:	200111e2 	.word	0x200111e2
 8010d38:	200111d8 	.word	0x200111d8
 8010d3c:	200111b8 	.word	0x200111b8
 8010d40:	0801bfd8 	.word	0x0801bfd8
 8010d44:	0801c350 	.word	0x0801c350
 8010d48:	0801c024 	.word	0x0801c024
 8010d4c:	0801c360 	.word	0x0801c360
 8010d50:	0801c370 	.word	0x0801c370
        off -= p->len;
 8010d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d56:	895b      	ldrh	r3, [r3, #10]
 8010d58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d76:	895b      	ldrh	r3, [r3, #10]
 8010d78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d8e9      	bhi.n	8010d54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d84:	4619      	mov	r1, r3
 8010d86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d88:	f7fb ff46 	bl	800cc18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d90:	4a91      	ldr	r2, [pc, #580]	; (8010fd8 <tcp_receive+0x888>)
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	4b91      	ldr	r3, [pc, #580]	; (8010fdc <tcp_receive+0x88c>)
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	4a8f      	ldr	r2, [pc, #572]	; (8010fd8 <tcp_receive+0x888>)
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d9e:	e00d      	b.n	8010dbc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010da0:	4b8d      	ldr	r3, [pc, #564]	; (8010fd8 <tcp_receive+0x888>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	da06      	bge.n	8010dbc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	8b5b      	ldrh	r3, [r3, #26]
 8010db2:	f043 0302 	orr.w	r3, r3, #2
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010dbc:	4b86      	ldr	r3, [pc, #536]	; (8010fd8 <tcp_receive+0x888>)
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f2c0 842a 	blt.w	8011620 <tcp_receive+0xed0>
 8010dcc:	4b82      	ldr	r3, [pc, #520]	; (8010fd8 <tcp_receive+0x888>)
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd4:	6879      	ldr	r1, [r7, #4]
 8010dd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010dd8:	440b      	add	r3, r1
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	3301      	adds	r3, #1
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f300 841e 	bgt.w	8011620 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010de8:	4b7b      	ldr	r3, [pc, #492]	; (8010fd8 <tcp_receive+0x888>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	f040 829a 	bne.w	8011326 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010df2:	4b7a      	ldr	r3, [pc, #488]	; (8010fdc <tcp_receive+0x88c>)
 8010df4:	891c      	ldrh	r4, [r3, #8]
 8010df6:	4b79      	ldr	r3, [pc, #484]	; (8010fdc <tcp_receive+0x88c>)
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	899b      	ldrh	r3, [r3, #12]
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fa fb5c 	bl	800b4bc <lwip_htons>
 8010e04:	4603      	mov	r3, r0
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	f003 0303 	and.w	r3, r3, #3
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <tcp_receive+0x6c4>
 8010e10:	2301      	movs	r3, #1
 8010e12:	e000      	b.n	8010e16 <tcp_receive+0x6c6>
 8010e14:	2300      	movs	r3, #0
 8010e16:	4423      	add	r3, r4
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	4b71      	ldr	r3, [pc, #452]	; (8010fe0 <tcp_receive+0x890>)
 8010e1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e22:	4b6f      	ldr	r3, [pc, #444]	; (8010fe0 <tcp_receive+0x890>)
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d275      	bcs.n	8010f16 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e2a:	4b6c      	ldr	r3, [pc, #432]	; (8010fdc <tcp_receive+0x88c>)
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	899b      	ldrh	r3, [r3, #12]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fa fb42 	bl	800b4bc <lwip_htons>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	f003 0301 	and.w	r3, r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d01f      	beq.n	8010e84 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010e44:	4b65      	ldr	r3, [pc, #404]	; (8010fdc <tcp_receive+0x88c>)
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	899b      	ldrh	r3, [r3, #12]
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	b21b      	sxth	r3, r3
 8010e4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e52:	b21c      	sxth	r4, r3
 8010e54:	4b61      	ldr	r3, [pc, #388]	; (8010fdc <tcp_receive+0x88c>)
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	899b      	ldrh	r3, [r3, #12]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fa fb2d 	bl	800b4bc <lwip_htons>
 8010e62:	4603      	mov	r3, r0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa fb24 	bl	800b4bc <lwip_htons>
 8010e74:	4603      	mov	r3, r0
 8010e76:	b21b      	sxth	r3, r3
 8010e78:	4323      	orrs	r3, r4
 8010e7a:	b21a      	sxth	r2, r3
 8010e7c:	4b57      	ldr	r3, [pc, #348]	; (8010fdc <tcp_receive+0x88c>)
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	b292      	uxth	r2, r2
 8010e82:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e88:	4b54      	ldr	r3, [pc, #336]	; (8010fdc <tcp_receive+0x88c>)
 8010e8a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e8c:	4b53      	ldr	r3, [pc, #332]	; (8010fdc <tcp_receive+0x88c>)
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	899b      	ldrh	r3, [r3, #12]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fa fb11 	bl	800b4bc <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0302 	and.w	r3, r3, #2
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <tcp_receive+0x762>
            inseg.len -= 1;
 8010ea6:	4b4d      	ldr	r3, [pc, #308]	; (8010fdc <tcp_receive+0x88c>)
 8010ea8:	891b      	ldrh	r3, [r3, #8]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	4b4b      	ldr	r3, [pc, #300]	; (8010fdc <tcp_receive+0x88c>)
 8010eb0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010eb2:	4b4a      	ldr	r3, [pc, #296]	; (8010fdc <tcp_receive+0x88c>)
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	4a49      	ldr	r2, [pc, #292]	; (8010fdc <tcp_receive+0x88c>)
 8010eb8:	8912      	ldrh	r2, [r2, #8]
 8010eba:	4611      	mov	r1, r2
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fb fdab 	bl	800ca18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010ec2:	4b46      	ldr	r3, [pc, #280]	; (8010fdc <tcp_receive+0x88c>)
 8010ec4:	891c      	ldrh	r4, [r3, #8]
 8010ec6:	4b45      	ldr	r3, [pc, #276]	; (8010fdc <tcp_receive+0x88c>)
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	899b      	ldrh	r3, [r3, #12]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fa faf4 	bl	800b4bc <lwip_htons>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	f003 0303 	and.w	r3, r3, #3
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d001      	beq.n	8010ee4 <tcp_receive+0x794>
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e000      	b.n	8010ee6 <tcp_receive+0x796>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4423      	add	r3, r4
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	4b3d      	ldr	r3, [pc, #244]	; (8010fe0 <tcp_receive+0x890>)
 8010eec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010eee:	4b3c      	ldr	r3, [pc, #240]	; (8010fe0 <tcp_receive+0x890>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4b38      	ldr	r3, [pc, #224]	; (8010fd8 <tcp_receive+0x888>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	441a      	add	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efe:	6879      	ldr	r1, [r7, #4]
 8010f00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f02:	440b      	add	r3, r1
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d006      	beq.n	8010f16 <tcp_receive+0x7c6>
 8010f08:	4b36      	ldr	r3, [pc, #216]	; (8010fe4 <tcp_receive+0x894>)
 8010f0a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010f0e:	4936      	ldr	r1, [pc, #216]	; (8010fe8 <tcp_receive+0x898>)
 8010f10:	4836      	ldr	r0, [pc, #216]	; (8010fec <tcp_receive+0x89c>)
 8010f12:	f007 fe0b 	bl	8018b2c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f000 80e7 	beq.w	80110ee <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f20:	4b2e      	ldr	r3, [pc, #184]	; (8010fdc <tcp_receive+0x88c>)
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	899b      	ldrh	r3, [r3, #12]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fa fac7 	bl	800b4bc <lwip_htons>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d010      	beq.n	8010f5c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010f3a:	e00a      	b.n	8010f52 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f40:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f7fd fca6 	bl	800e89e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1f0      	bne.n	8010f3c <tcp_receive+0x7ec>
 8010f5a:	e0c8      	b.n	80110ee <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010f62:	e052      	b.n	801100a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	899b      	ldrh	r3, [r3, #12]
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fa faa5 	bl	800b4bc <lwip_htons>
 8010f72:	4603      	mov	r3, r0
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d03d      	beq.n	8010ffa <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010f7e:	4b17      	ldr	r3, [pc, #92]	; (8010fdc <tcp_receive+0x88c>)
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	899b      	ldrh	r3, [r3, #12]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fa fa98 	bl	800b4bc <lwip_htons>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d130      	bne.n	8010ffa <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010f98:	4b10      	ldr	r3, [pc, #64]	; (8010fdc <tcp_receive+0x88c>)
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	899b      	ldrh	r3, [r3, #12]
 8010f9e:	b29c      	uxth	r4, r3
 8010fa0:	2001      	movs	r0, #1
 8010fa2:	f7fa fa8b 	bl	800b4bc <lwip_htons>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	461a      	mov	r2, r3
 8010faa:	4b0c      	ldr	r3, [pc, #48]	; (8010fdc <tcp_receive+0x88c>)
 8010fac:	68db      	ldr	r3, [r3, #12]
 8010fae:	4322      	orrs	r2, r4
 8010fb0:	b292      	uxth	r2, r2
 8010fb2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010fb4:	4b09      	ldr	r3, [pc, #36]	; (8010fdc <tcp_receive+0x88c>)
 8010fb6:	891c      	ldrh	r4, [r3, #8]
 8010fb8:	4b08      	ldr	r3, [pc, #32]	; (8010fdc <tcp_receive+0x88c>)
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	899b      	ldrh	r3, [r3, #12]
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7fa fa7b 	bl	800b4bc <lwip_htons>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	f003 0303 	and.w	r3, r3, #3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00e      	beq.n	8010ff0 <tcp_receive+0x8a0>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e00d      	b.n	8010ff2 <tcp_receive+0x8a2>
 8010fd6:	bf00      	nop
 8010fd8:	200111d8 	.word	0x200111d8
 8010fdc:	200111b8 	.word	0x200111b8
 8010fe0:	200111e2 	.word	0x200111e2
 8010fe4:	0801bfd8 	.word	0x0801bfd8
 8010fe8:	0801c380 	.word	0x0801c380
 8010fec:	0801c024 	.word	0x0801c024
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	4423      	add	r3, r4
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	4b98      	ldr	r3, [pc, #608]	; (8011258 <tcp_receive+0xb08>)
 8010ff8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ffc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011004:	6938      	ldr	r0, [r7, #16]
 8011006:	f7fd fc4a 	bl	800e89e <tcp_seg_free>
            while (next &&
 801100a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00e      	beq.n	801102e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011010:	4b91      	ldr	r3, [pc, #580]	; (8011258 <tcp_receive+0xb08>)
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	461a      	mov	r2, r3
 8011016:	4b91      	ldr	r3, [pc, #580]	; (801125c <tcp_receive+0xb0c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	441a      	add	r2, r3
 801101c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011024:	8909      	ldrh	r1, [r1, #8]
 8011026:	440b      	add	r3, r1
 8011028:	1ad3      	subs	r3, r2, r3
            while (next &&
 801102a:	2b00      	cmp	r3, #0
 801102c:	da9a      	bge.n	8010f64 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011030:	2b00      	cmp	r3, #0
 8011032:	d059      	beq.n	80110e8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011034:	4b88      	ldr	r3, [pc, #544]	; (8011258 <tcp_receive+0xb08>)
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	461a      	mov	r2, r3
 801103a:	4b88      	ldr	r3, [pc, #544]	; (801125c <tcp_receive+0xb0c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	441a      	add	r2, r3
 8011040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011048:	2b00      	cmp	r3, #0
 801104a:	dd4d      	ble.n	80110e8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801104c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	b29a      	uxth	r2, r3
 8011054:	4b81      	ldr	r3, [pc, #516]	; (801125c <tcp_receive+0xb0c>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	b29b      	uxth	r3, r3
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	b29a      	uxth	r2, r3
 801105e:	4b80      	ldr	r3, [pc, #512]	; (8011260 <tcp_receive+0xb10>)
 8011060:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011062:	4b7f      	ldr	r3, [pc, #508]	; (8011260 <tcp_receive+0xb10>)
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	899b      	ldrh	r3, [r3, #12]
 8011068:	b29b      	uxth	r3, r3
 801106a:	4618      	mov	r0, r3
 801106c:	f7fa fa26 	bl	800b4bc <lwip_htons>
 8011070:	4603      	mov	r3, r0
 8011072:	b2db      	uxtb	r3, r3
 8011074:	f003 0302 	and.w	r3, r3, #2
 8011078:	2b00      	cmp	r3, #0
 801107a:	d005      	beq.n	8011088 <tcp_receive+0x938>
                inseg.len -= 1;
 801107c:	4b78      	ldr	r3, [pc, #480]	; (8011260 <tcp_receive+0xb10>)
 801107e:	891b      	ldrh	r3, [r3, #8]
 8011080:	3b01      	subs	r3, #1
 8011082:	b29a      	uxth	r2, r3
 8011084:	4b76      	ldr	r3, [pc, #472]	; (8011260 <tcp_receive+0xb10>)
 8011086:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011088:	4b75      	ldr	r3, [pc, #468]	; (8011260 <tcp_receive+0xb10>)
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	4a74      	ldr	r2, [pc, #464]	; (8011260 <tcp_receive+0xb10>)
 801108e:	8912      	ldrh	r2, [r2, #8]
 8011090:	4611      	mov	r1, r2
 8011092:	4618      	mov	r0, r3
 8011094:	f7fb fcc0 	bl	800ca18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011098:	4b71      	ldr	r3, [pc, #452]	; (8011260 <tcp_receive+0xb10>)
 801109a:	891c      	ldrh	r4, [r3, #8]
 801109c:	4b70      	ldr	r3, [pc, #448]	; (8011260 <tcp_receive+0xb10>)
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	899b      	ldrh	r3, [r3, #12]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fa fa09 	bl	800b4bc <lwip_htons>
 80110aa:	4603      	mov	r3, r0
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	f003 0303 	and.w	r3, r3, #3
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <tcp_receive+0x96a>
 80110b6:	2301      	movs	r3, #1
 80110b8:	e000      	b.n	80110bc <tcp_receive+0x96c>
 80110ba:	2300      	movs	r3, #0
 80110bc:	4423      	add	r3, r4
 80110be:	b29a      	uxth	r2, r3
 80110c0:	4b65      	ldr	r3, [pc, #404]	; (8011258 <tcp_receive+0xb08>)
 80110c2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80110c4:	4b64      	ldr	r3, [pc, #400]	; (8011258 <tcp_receive+0xb08>)
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b64      	ldr	r3, [pc, #400]	; (801125c <tcp_receive+0xb0c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	441a      	add	r2, r3
 80110d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d006      	beq.n	80110e8 <tcp_receive+0x998>
 80110da:	4b62      	ldr	r3, [pc, #392]	; (8011264 <tcp_receive+0xb14>)
 80110dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80110e0:	4961      	ldr	r1, [pc, #388]	; (8011268 <tcp_receive+0xb18>)
 80110e2:	4862      	ldr	r0, [pc, #392]	; (801126c <tcp_receive+0xb1c>)
 80110e4:	f007 fd22 	bl	8018b2c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110ec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80110ee:	4b5a      	ldr	r3, [pc, #360]	; (8011258 <tcp_receive+0xb08>)
 80110f0:	881b      	ldrh	r3, [r3, #0]
 80110f2:	461a      	mov	r2, r3
 80110f4:	4b59      	ldr	r3, [pc, #356]	; (801125c <tcp_receive+0xb0c>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	441a      	add	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011102:	4b55      	ldr	r3, [pc, #340]	; (8011258 <tcp_receive+0xb08>)
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	429a      	cmp	r2, r3
 8011108:	d206      	bcs.n	8011118 <tcp_receive+0x9c8>
 801110a:	4b56      	ldr	r3, [pc, #344]	; (8011264 <tcp_receive+0xb14>)
 801110c:	f240 6207 	movw	r2, #1543	; 0x607
 8011110:	4957      	ldr	r1, [pc, #348]	; (8011270 <tcp_receive+0xb20>)
 8011112:	4856      	ldr	r0, [pc, #344]	; (801126c <tcp_receive+0xb1c>)
 8011114:	f007 fd0a 	bl	8018b2c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801111c:	4b4e      	ldr	r3, [pc, #312]	; (8011258 <tcp_receive+0xb08>)
 801111e:	881b      	ldrh	r3, [r3, #0]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	b29a      	uxth	r2, r3
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7fc fd7b 	bl	800dc24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801112e:	4b4c      	ldr	r3, [pc, #304]	; (8011260 <tcp_receive+0xb10>)
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	891b      	ldrh	r3, [r3, #8]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d006      	beq.n	8011146 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011138:	4b49      	ldr	r3, [pc, #292]	; (8011260 <tcp_receive+0xb10>)
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	4a4d      	ldr	r2, [pc, #308]	; (8011274 <tcp_receive+0xb24>)
 801113e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011140:	4b47      	ldr	r3, [pc, #284]	; (8011260 <tcp_receive+0xb10>)
 8011142:	2200      	movs	r2, #0
 8011144:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011146:	4b46      	ldr	r3, [pc, #280]	; (8011260 <tcp_receive+0xb10>)
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	899b      	ldrh	r3, [r3, #12]
 801114c:	b29b      	uxth	r3, r3
 801114e:	4618      	mov	r0, r3
 8011150:	f7fa f9b4 	bl	800b4bc <lwip_htons>
 8011154:	4603      	mov	r3, r0
 8011156:	b2db      	uxtb	r3, r3
 8011158:	f003 0301 	and.w	r3, r3, #1
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 80b8 	beq.w	80112d2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011162:	4b45      	ldr	r3, [pc, #276]	; (8011278 <tcp_receive+0xb28>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f043 0320 	orr.w	r3, r3, #32
 801116a:	b2da      	uxtb	r2, r3
 801116c:	4b42      	ldr	r3, [pc, #264]	; (8011278 <tcp_receive+0xb28>)
 801116e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011170:	e0af      	b.n	80112d2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011176:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	4a36      	ldr	r2, [pc, #216]	; (801125c <tcp_receive+0xb0c>)
 8011182:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	891b      	ldrh	r3, [r3, #8]
 8011188:	461c      	mov	r4, r3
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	899b      	ldrh	r3, [r3, #12]
 8011190:	b29b      	uxth	r3, r3
 8011192:	4618      	mov	r0, r3
 8011194:	f7fa f992 	bl	800b4bc <lwip_htons>
 8011198:	4603      	mov	r3, r0
 801119a:	b2db      	uxtb	r3, r3
 801119c:	f003 0303 	and.w	r3, r3, #3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d001      	beq.n	80111a8 <tcp_receive+0xa58>
 80111a4:	2301      	movs	r3, #1
 80111a6:	e000      	b.n	80111aa <tcp_receive+0xa5a>
 80111a8:	2300      	movs	r3, #0
 80111aa:	191a      	adds	r2, r3, r4
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b0:	441a      	add	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111ba:	461c      	mov	r4, r3
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	891b      	ldrh	r3, [r3, #8]
 80111c0:	461d      	mov	r5, r3
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	899b      	ldrh	r3, [r3, #12]
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fa f976 	bl	800b4bc <lwip_htons>
 80111d0:	4603      	mov	r3, r0
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	f003 0303 	and.w	r3, r3, #3
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <tcp_receive+0xa90>
 80111dc:	2301      	movs	r3, #1
 80111de:	e000      	b.n	80111e2 <tcp_receive+0xa92>
 80111e0:	2300      	movs	r3, #0
 80111e2:	442b      	add	r3, r5
 80111e4:	429c      	cmp	r4, r3
 80111e6:	d206      	bcs.n	80111f6 <tcp_receive+0xaa6>
 80111e8:	4b1e      	ldr	r3, [pc, #120]	; (8011264 <tcp_receive+0xb14>)
 80111ea:	f240 622b 	movw	r2, #1579	; 0x62b
 80111ee:	4923      	ldr	r1, [pc, #140]	; (801127c <tcp_receive+0xb2c>)
 80111f0:	481e      	ldr	r0, [pc, #120]	; (801126c <tcp_receive+0xb1c>)
 80111f2:	f007 fc9b 	bl	8018b2c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	891b      	ldrh	r3, [r3, #8]
 80111fa:	461c      	mov	r4, r3
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	899b      	ldrh	r3, [r3, #12]
 8011202:	b29b      	uxth	r3, r3
 8011204:	4618      	mov	r0, r3
 8011206:	f7fa f959 	bl	800b4bc <lwip_htons>
 801120a:	4603      	mov	r3, r0
 801120c:	b2db      	uxtb	r3, r3
 801120e:	f003 0303 	and.w	r3, r3, #3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <tcp_receive+0xaca>
 8011216:	2301      	movs	r3, #1
 8011218:	e000      	b.n	801121c <tcp_receive+0xacc>
 801121a:	2300      	movs	r3, #0
 801121c:	1919      	adds	r1, r3, r4
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011222:	b28b      	uxth	r3, r1
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	b29a      	uxth	r2, r3
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7fc fcf9 	bl	800dc24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	891b      	ldrh	r3, [r3, #8]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d028      	beq.n	801128e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801123c:	4b0d      	ldr	r3, [pc, #52]	; (8011274 <tcp_receive+0xb24>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d01d      	beq.n	8011280 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011244:	4b0b      	ldr	r3, [pc, #44]	; (8011274 <tcp_receive+0xb24>)
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	4619      	mov	r1, r3
 801124e:	4610      	mov	r0, r2
 8011250:	f7fb fe36 	bl	800cec0 <pbuf_cat>
 8011254:	e018      	b.n	8011288 <tcp_receive+0xb38>
 8011256:	bf00      	nop
 8011258:	200111e2 	.word	0x200111e2
 801125c:	200111d8 	.word	0x200111d8
 8011260:	200111b8 	.word	0x200111b8
 8011264:	0801bfd8 	.word	0x0801bfd8
 8011268:	0801c3b8 	.word	0x0801c3b8
 801126c:	0801c024 	.word	0x0801c024
 8011270:	0801c3f4 	.word	0x0801c3f4
 8011274:	200111e8 	.word	0x200111e8
 8011278:	200111e5 	.word	0x200111e5
 801127c:	0801c414 	.word	0x0801c414
            } else {
              recv_data = cseg->p;
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	4a70      	ldr	r2, [pc, #448]	; (8011448 <tcp_receive+0xcf8>)
 8011286:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2200      	movs	r2, #0
 801128c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	68db      	ldr	r3, [r3, #12]
 8011292:	899b      	ldrh	r3, [r3, #12]
 8011294:	b29b      	uxth	r3, r3
 8011296:	4618      	mov	r0, r3
 8011298:	f7fa f910 	bl	800b4bc <lwip_htons>
 801129c:	4603      	mov	r3, r0
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	f003 0301 	and.w	r3, r3, #1
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d00d      	beq.n	80112c4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80112a8:	4b68      	ldr	r3, [pc, #416]	; (801144c <tcp_receive+0xcfc>)
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	f043 0320 	orr.w	r3, r3, #32
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	4b66      	ldr	r3, [pc, #408]	; (801144c <tcp_receive+0xcfc>)
 80112b4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	2b04      	cmp	r3, #4
 80112bc:	d102      	bne.n	80112c4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2207      	movs	r2, #7
 80112c2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80112cc:	68b8      	ldr	r0, [r7, #8]
 80112ce:	f7fd fae6 	bl	800e89e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d008      	beq.n	80112ec <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	685a      	ldr	r2, [r3, #4]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80112e6:	429a      	cmp	r2, r3
 80112e8:	f43f af43 	beq.w	8011172 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	8b5b      	ldrh	r3, [r3, #26]
 80112f0:	f003 0301 	and.w	r3, r3, #1
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00e      	beq.n	8011316 <tcp_receive+0xbc6>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	8b5b      	ldrh	r3, [r3, #26]
 80112fc:	f023 0301 	bic.w	r3, r3, #1
 8011300:	b29a      	uxth	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	835a      	strh	r2, [r3, #26]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	8b5b      	ldrh	r3, [r3, #26]
 801130a:	f043 0302 	orr.w	r3, r3, #2
 801130e:	b29a      	uxth	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011314:	e188      	b.n	8011628 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	8b5b      	ldrh	r3, [r3, #26]
 801131a:	f043 0301 	orr.w	r3, r3, #1
 801131e:	b29a      	uxth	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011324:	e180      	b.n	8011628 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801132a:	2b00      	cmp	r3, #0
 801132c:	d106      	bne.n	801133c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801132e:	4848      	ldr	r0, [pc, #288]	; (8011450 <tcp_receive+0xd00>)
 8011330:	f7fd faec 	bl	800e90c <tcp_seg_copy>
 8011334:	4602      	mov	r2, r0
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	675a      	str	r2, [r3, #116]	; 0x74
 801133a:	e16d      	b.n	8011618 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801133c:	2300      	movs	r3, #0
 801133e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011344:	63bb      	str	r3, [r7, #56]	; 0x38
 8011346:	e157      	b.n	80115f8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	4b41      	ldr	r3, [pc, #260]	; (8011454 <tcp_receive+0xd04>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d11d      	bne.n	8011392 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011356:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <tcp_receive+0xd00>)
 8011358:	891a      	ldrh	r2, [r3, #8]
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	891b      	ldrh	r3, [r3, #8]
 801135e:	429a      	cmp	r2, r3
 8011360:	f240 814f 	bls.w	8011602 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011364:	483a      	ldr	r0, [pc, #232]	; (8011450 <tcp_receive+0xd00>)
 8011366:	f7fd fad1 	bl	800e90c <tcp_seg_copy>
 801136a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	f000 8149 	beq.w	8011606 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011376:	2b00      	cmp	r3, #0
 8011378:	d003      	beq.n	8011382 <tcp_receive+0xc32>
                    prev->next = cseg;
 801137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137c:	697a      	ldr	r2, [r7, #20]
 801137e:	601a      	str	r2, [r3, #0]
 8011380:	e002      	b.n	8011388 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	697a      	ldr	r2, [r7, #20]
 8011386:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801138a:	6978      	ldr	r0, [r7, #20]
 801138c:	f7ff f8dc 	bl	8010548 <tcp_oos_insert_segment>
                }
                break;
 8011390:	e139      	b.n	8011606 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011394:	2b00      	cmp	r3, #0
 8011396:	d117      	bne.n	80113c8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011398:	4b2e      	ldr	r3, [pc, #184]	; (8011454 <tcp_receive+0xd04>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	da57      	bge.n	8011458 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113a8:	4829      	ldr	r0, [pc, #164]	; (8011450 <tcp_receive+0xd00>)
 80113aa:	f7fd faaf 	bl	800e90c <tcp_seg_copy>
 80113ae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	f000 8129 	beq.w	801160a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	69ba      	ldr	r2, [r7, #24]
 80113bc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80113be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80113c0:	69b8      	ldr	r0, [r7, #24]
 80113c2:	f7ff f8c1 	bl	8010548 <tcp_oos_insert_segment>
                  }
                  break;
 80113c6:	e120      	b.n	801160a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80113c8:	4b22      	ldr	r3, [pc, #136]	; (8011454 <tcp_receive+0xd04>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	3b01      	subs	r3, #1
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	db3e      	blt.n	8011458 <tcp_receive+0xd08>
 80113da:	4b1e      	ldr	r3, [pc, #120]	; (8011454 <tcp_receive+0xd04>)
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	1ad3      	subs	r3, r2, r3
 80113e6:	3301      	adds	r3, #1
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	dc35      	bgt.n	8011458 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80113ec:	4818      	ldr	r0, [pc, #96]	; (8011450 <tcp_receive+0xd00>)
 80113ee:	f7fd fa8d 	bl	800e90c <tcp_seg_copy>
 80113f2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	f000 8109 	beq.w	801160e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80113fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011404:	8912      	ldrh	r2, [r2, #8]
 8011406:	441a      	add	r2, r3
 8011408:	4b12      	ldr	r3, [pc, #72]	; (8011454 <tcp_receive+0xd04>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	dd12      	ble.n	8011438 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <tcp_receive+0xd04>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	b29a      	uxth	r2, r3
 8011418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	b29b      	uxth	r3, r3
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	b29a      	uxth	r2, r3
 8011424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011426:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142a:	685a      	ldr	r2, [r3, #4]
 801142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142e:	891b      	ldrh	r3, [r3, #8]
 8011430:	4619      	mov	r1, r3
 8011432:	4610      	mov	r0, r2
 8011434:	f7fb faf0 	bl	800ca18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143a:	69fa      	ldr	r2, [r7, #28]
 801143c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801143e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011440:	69f8      	ldr	r0, [r7, #28]
 8011442:	f7ff f881 	bl	8010548 <tcp_oos_insert_segment>
                  }
                  break;
 8011446:	e0e2      	b.n	801160e <tcp_receive+0xebe>
 8011448:	200111e8 	.word	0x200111e8
 801144c:	200111e5 	.word	0x200111e5
 8011450:	200111b8 	.word	0x200111b8
 8011454:	200111d8 	.word	0x200111d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	f040 80c6 	bne.w	80115f2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011466:	4b80      	ldr	r3, [pc, #512]	; (8011668 <tcp_receive+0xf18>)
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011472:	2b00      	cmp	r3, #0
 8011474:	f340 80bd 	ble.w	80115f2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	899b      	ldrh	r3, [r3, #12]
 801147e:	b29b      	uxth	r3, r3
 8011480:	4618      	mov	r0, r3
 8011482:	f7fa f81b 	bl	800b4bc <lwip_htons>
 8011486:	4603      	mov	r3, r0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	2b00      	cmp	r3, #0
 8011490:	f040 80bf 	bne.w	8011612 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011494:	4875      	ldr	r0, [pc, #468]	; (801166c <tcp_receive+0xf1c>)
 8011496:	f7fd fa39 	bl	800e90c <tcp_seg_copy>
 801149a:	4602      	mov	r2, r0
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 80b6 	beq.w	8011616 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80114aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114b2:	8912      	ldrh	r2, [r2, #8]
 80114b4:	441a      	add	r2, r3
 80114b6:	4b6c      	ldr	r3, [pc, #432]	; (8011668 <tcp_receive+0xf18>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	dd12      	ble.n	80114e6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80114c0:	4b69      	ldr	r3, [pc, #420]	; (8011668 <tcp_receive+0xf18>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	685a      	ldr	r2, [r3, #4]
 80114da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114dc:	891b      	ldrh	r3, [r3, #8]
 80114de:	4619      	mov	r1, r3
 80114e0:	4610      	mov	r0, r2
 80114e2:	f7fb fa99 	bl	800ca18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80114e6:	4b62      	ldr	r3, [pc, #392]	; (8011670 <tcp_receive+0xf20>)
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	461a      	mov	r2, r3
 80114ec:	4b5e      	ldr	r3, [pc, #376]	; (8011668 <tcp_receive+0xf18>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	441a      	add	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f6:	6879      	ldr	r1, [r7, #4]
 80114f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114fa:	440b      	add	r3, r1
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f340 8089 	ble.w	8011616 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	899b      	ldrh	r3, [r3, #12]
 801150c:	b29b      	uxth	r3, r3
 801150e:	4618      	mov	r0, r3
 8011510:	f7f9 ffd4 	bl	800b4bc <lwip_htons>
 8011514:	4603      	mov	r3, r0
 8011516:	b2db      	uxtb	r3, r3
 8011518:	f003 0301 	and.w	r3, r3, #1
 801151c:	2b00      	cmp	r3, #0
 801151e:	d022      	beq.n	8011566 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	899b      	ldrh	r3, [r3, #12]
 8011528:	b29b      	uxth	r3, r3
 801152a:	b21b      	sxth	r3, r3
 801152c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011530:	b21c      	sxth	r4, r3
 8011532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7f9 ffbd 	bl	800b4bc <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	b29b      	uxth	r3, r3
 8011548:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801154c:	b29b      	uxth	r3, r3
 801154e:	4618      	mov	r0, r3
 8011550:	f7f9 ffb4 	bl	800b4bc <lwip_htons>
 8011554:	4603      	mov	r3, r0
 8011556:	b21b      	sxth	r3, r3
 8011558:	4323      	orrs	r3, r4
 801155a:	b21a      	sxth	r2, r3
 801155c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	b292      	uxth	r2, r2
 8011564:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801156a:	b29a      	uxth	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011570:	4413      	add	r3, r2
 8011572:	b299      	uxth	r1, r3
 8011574:	4b3c      	ldr	r3, [pc, #240]	; (8011668 <tcp_receive+0xf18>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	b29a      	uxth	r2, r3
 801157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	1a8a      	subs	r2, r1, r2
 8011580:	b292      	uxth	r2, r2
 8011582:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	891b      	ldrh	r3, [r3, #8]
 8011590:	4619      	mov	r1, r3
 8011592:	4610      	mov	r0, r2
 8011594:	f7fb fa40 	bl	800ca18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	891c      	ldrh	r4, [r3, #8]
 801159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	899b      	ldrh	r3, [r3, #12]
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7f9 ff87 	bl	800b4bc <lwip_htons>
 80115ae:	4603      	mov	r3, r0
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	f003 0303 	and.w	r3, r3, #3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d001      	beq.n	80115be <tcp_receive+0xe6e>
 80115ba:	2301      	movs	r3, #1
 80115bc:	e000      	b.n	80115c0 <tcp_receive+0xe70>
 80115be:	2300      	movs	r3, #0
 80115c0:	4423      	add	r3, r4
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	4b2a      	ldr	r3, [pc, #168]	; (8011670 <tcp_receive+0xf20>)
 80115c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80115c8:	4b29      	ldr	r3, [pc, #164]	; (8011670 <tcp_receive+0xf20>)
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	461a      	mov	r2, r3
 80115ce:	4b26      	ldr	r3, [pc, #152]	; (8011668 <tcp_receive+0xf18>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	441a      	add	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d8:	6879      	ldr	r1, [r7, #4]
 80115da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115dc:	440b      	add	r3, r1
 80115de:	429a      	cmp	r2, r3
 80115e0:	d019      	beq.n	8011616 <tcp_receive+0xec6>
 80115e2:	4b24      	ldr	r3, [pc, #144]	; (8011674 <tcp_receive+0xf24>)
 80115e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80115e8:	4923      	ldr	r1, [pc, #140]	; (8011678 <tcp_receive+0xf28>)
 80115ea:	4824      	ldr	r0, [pc, #144]	; (801167c <tcp_receive+0xf2c>)
 80115ec:	f007 fa9e 	bl	8018b2c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80115f0:	e011      	b.n	8011616 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80115f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80115f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f47f aea4 	bne.w	8011348 <tcp_receive+0xbf8>
 8011600:	e00a      	b.n	8011618 <tcp_receive+0xec8>
                break;
 8011602:	bf00      	nop
 8011604:	e008      	b.n	8011618 <tcp_receive+0xec8>
                break;
 8011606:	bf00      	nop
 8011608:	e006      	b.n	8011618 <tcp_receive+0xec8>
                  break;
 801160a:	bf00      	nop
 801160c:	e004      	b.n	8011618 <tcp_receive+0xec8>
                  break;
 801160e:	bf00      	nop
 8011610:	e002      	b.n	8011618 <tcp_receive+0xec8>
                  break;
 8011612:	bf00      	nop
 8011614:	e000      	b.n	8011618 <tcp_receive+0xec8>
                break;
 8011616:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f001 fe8b 	bl	8013334 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801161e:	e003      	b.n	8011628 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f001 fe87 	bl	8013334 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011626:	e01a      	b.n	801165e <tcp_receive+0xf0e>
 8011628:	e019      	b.n	801165e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801162a:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <tcp_receive+0xf18>)
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	db0a      	blt.n	801164e <tcp_receive+0xefe>
 8011638:	4b0b      	ldr	r3, [pc, #44]	; (8011668 <tcp_receive+0xf18>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011640:	6879      	ldr	r1, [r7, #4]
 8011642:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011644:	440b      	add	r3, r1
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	3301      	adds	r3, #1
 801164a:	2b00      	cmp	r3, #0
 801164c:	dd07      	ble.n	801165e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f043 0302 	orr.w	r3, r3, #2
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801165c:	e7ff      	b.n	801165e <tcp_receive+0xf0e>
 801165e:	bf00      	nop
 8011660:	3750      	adds	r7, #80	; 0x50
 8011662:	46bd      	mov	sp, r7
 8011664:	bdb0      	pop	{r4, r5, r7, pc}
 8011666:	bf00      	nop
 8011668:	200111d8 	.word	0x200111d8
 801166c:	200111b8 	.word	0x200111b8
 8011670:	200111e2 	.word	0x200111e2
 8011674:	0801bfd8 	.word	0x0801bfd8
 8011678:	0801c380 	.word	0x0801c380
 801167c:	0801c024 	.word	0x0801c024

08011680 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011686:	4b15      	ldr	r3, [pc, #84]	; (80116dc <tcp_get_next_optbyte+0x5c>)
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	b291      	uxth	r1, r2
 801168e:	4a13      	ldr	r2, [pc, #76]	; (80116dc <tcp_get_next_optbyte+0x5c>)
 8011690:	8011      	strh	r1, [r2, #0]
 8011692:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011694:	4b12      	ldr	r3, [pc, #72]	; (80116e0 <tcp_get_next_optbyte+0x60>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d004      	beq.n	80116a6 <tcp_get_next_optbyte+0x26>
 801169c:	4b11      	ldr	r3, [pc, #68]	; (80116e4 <tcp_get_next_optbyte+0x64>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	88fa      	ldrh	r2, [r7, #6]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d208      	bcs.n	80116b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80116a6:	4b10      	ldr	r3, [pc, #64]	; (80116e8 <tcp_get_next_optbyte+0x68>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	3314      	adds	r3, #20
 80116ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80116ae:	88fb      	ldrh	r3, [r7, #6]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	4413      	add	r3, r2
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	e00b      	b.n	80116d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80116b8:	88fb      	ldrh	r3, [r7, #6]
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	4b09      	ldr	r3, [pc, #36]	; (80116e4 <tcp_get_next_optbyte+0x64>)
 80116be:	881b      	ldrh	r3, [r3, #0]
 80116c0:	b2db      	uxtb	r3, r3
 80116c2:	1ad3      	subs	r3, r2, r3
 80116c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80116c6:	4b06      	ldr	r3, [pc, #24]	; (80116e0 <tcp_get_next_optbyte+0x60>)
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	797b      	ldrb	r3, [r7, #5]
 80116cc:	4413      	add	r3, r2
 80116ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	200111d4 	.word	0x200111d4
 80116e0:	200111d0 	.word	0x200111d0
 80116e4:	200111ce 	.word	0x200111ce
 80116e8:	200111c8 	.word	0x200111c8

080116ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d106      	bne.n	8011708 <tcp_parseopt+0x1c>
 80116fa:	4b32      	ldr	r3, [pc, #200]	; (80117c4 <tcp_parseopt+0xd8>)
 80116fc:	f240 727d 	movw	r2, #1917	; 0x77d
 8011700:	4931      	ldr	r1, [pc, #196]	; (80117c8 <tcp_parseopt+0xdc>)
 8011702:	4832      	ldr	r0, [pc, #200]	; (80117cc <tcp_parseopt+0xe0>)
 8011704:	f007 fa12 	bl	8018b2c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011708:	4b31      	ldr	r3, [pc, #196]	; (80117d0 <tcp_parseopt+0xe4>)
 801170a:	881b      	ldrh	r3, [r3, #0]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d055      	beq.n	80117bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011710:	4b30      	ldr	r3, [pc, #192]	; (80117d4 <tcp_parseopt+0xe8>)
 8011712:	2200      	movs	r2, #0
 8011714:	801a      	strh	r2, [r3, #0]
 8011716:	e045      	b.n	80117a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011718:	f7ff ffb2 	bl	8011680 <tcp_get_next_optbyte>
 801171c:	4603      	mov	r3, r0
 801171e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	2b02      	cmp	r3, #2
 8011724:	d006      	beq.n	8011734 <tcp_parseopt+0x48>
 8011726:	2b02      	cmp	r3, #2
 8011728:	dc2b      	bgt.n	8011782 <tcp_parseopt+0x96>
 801172a:	2b00      	cmp	r3, #0
 801172c:	d041      	beq.n	80117b2 <tcp_parseopt+0xc6>
 801172e:	2b01      	cmp	r3, #1
 8011730:	d127      	bne.n	8011782 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011732:	e037      	b.n	80117a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011734:	f7ff ffa4 	bl	8011680 <tcp_get_next_optbyte>
 8011738:	4603      	mov	r3, r0
 801173a:	2b04      	cmp	r3, #4
 801173c:	d13b      	bne.n	80117b6 <tcp_parseopt+0xca>
 801173e:	4b25      	ldr	r3, [pc, #148]	; (80117d4 <tcp_parseopt+0xe8>)
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	3301      	adds	r3, #1
 8011744:	4a22      	ldr	r2, [pc, #136]	; (80117d0 <tcp_parseopt+0xe4>)
 8011746:	8812      	ldrh	r2, [r2, #0]
 8011748:	4293      	cmp	r3, r2
 801174a:	da34      	bge.n	80117b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801174c:	f7ff ff98 	bl	8011680 <tcp_get_next_optbyte>
 8011750:	4603      	mov	r3, r0
 8011752:	b29b      	uxth	r3, r3
 8011754:	021b      	lsls	r3, r3, #8
 8011756:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011758:	f7ff ff92 	bl	8011680 <tcp_get_next_optbyte>
 801175c:	4603      	mov	r3, r0
 801175e:	b29a      	uxth	r2, r3
 8011760:	89bb      	ldrh	r3, [r7, #12]
 8011762:	4313      	orrs	r3, r2
 8011764:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011766:	89bb      	ldrh	r3, [r7, #12]
 8011768:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801176c:	d804      	bhi.n	8011778 <tcp_parseopt+0x8c>
 801176e:	89bb      	ldrh	r3, [r7, #12]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <tcp_parseopt+0x8c>
 8011774:	89ba      	ldrh	r2, [r7, #12]
 8011776:	e001      	b.n	801177c <tcp_parseopt+0x90>
 8011778:	f44f 7206 	mov.w	r2, #536	; 0x218
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011780:	e010      	b.n	80117a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011782:	f7ff ff7d 	bl	8011680 <tcp_get_next_optbyte>
 8011786:	4603      	mov	r3, r0
 8011788:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801178a:	7afb      	ldrb	r3, [r7, #11]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d914      	bls.n	80117ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011790:	7afb      	ldrb	r3, [r7, #11]
 8011792:	b29a      	uxth	r2, r3
 8011794:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <tcp_parseopt+0xe8>)
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	4413      	add	r3, r2
 801179a:	b29b      	uxth	r3, r3
 801179c:	3b02      	subs	r3, #2
 801179e:	b29a      	uxth	r2, r3
 80117a0:	4b0c      	ldr	r3, [pc, #48]	; (80117d4 <tcp_parseopt+0xe8>)
 80117a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117a4:	4b0b      	ldr	r3, [pc, #44]	; (80117d4 <tcp_parseopt+0xe8>)
 80117a6:	881a      	ldrh	r2, [r3, #0]
 80117a8:	4b09      	ldr	r3, [pc, #36]	; (80117d0 <tcp_parseopt+0xe4>)
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d3b3      	bcc.n	8011718 <tcp_parseopt+0x2c>
 80117b0:	e004      	b.n	80117bc <tcp_parseopt+0xd0>
          return;
 80117b2:	bf00      	nop
 80117b4:	e002      	b.n	80117bc <tcp_parseopt+0xd0>
            return;
 80117b6:	bf00      	nop
 80117b8:	e000      	b.n	80117bc <tcp_parseopt+0xd0>
            return;
 80117ba:	bf00      	nop
      }
    }
  }
}
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	0801bfd8 	.word	0x0801bfd8
 80117c8:	0801c43c 	.word	0x0801c43c
 80117cc:	0801c024 	.word	0x0801c024
 80117d0:	200111cc 	.word	0x200111cc
 80117d4:	200111d4 	.word	0x200111d4

080117d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80117d8:	b480      	push	{r7}
 80117da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80117dc:	4b05      	ldr	r3, [pc, #20]	; (80117f4 <tcp_trigger_input_pcb_close+0x1c>)
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	f043 0310 	orr.w	r3, r3, #16
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	4b03      	ldr	r3, [pc, #12]	; (80117f4 <tcp_trigger_input_pcb_close+0x1c>)
 80117e8:	701a      	strb	r2, [r3, #0]
}
 80117ea:	bf00      	nop
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr
 80117f4:	200111e5 	.word	0x200111e5

080117f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00a      	beq.n	8011820 <tcp_route+0x28>
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	7a1b      	ldrb	r3, [r3, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d006      	beq.n	8011820 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	7a1b      	ldrb	r3, [r3, #8]
 8011816:	4618      	mov	r0, r3
 8011818:	f7fa fef6 	bl	800c608 <netif_get_by_index>
 801181c:	4603      	mov	r3, r0
 801181e:	e003      	b.n	8011828 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f005 fca9 	bl	8017178 <ip4_route>
 8011826:	4603      	mov	r3, r0
  }
}
 8011828:	4618      	mov	r0, r3
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011830:	b590      	push	{r4, r7, lr}
 8011832:	b087      	sub	sp, #28
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	603b      	str	r3, [r7, #0]
 801183c:	4613      	mov	r3, r2
 801183e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d105      	bne.n	8011852 <tcp_create_segment+0x22>
 8011846:	4b44      	ldr	r3, [pc, #272]	; (8011958 <tcp_create_segment+0x128>)
 8011848:	22a3      	movs	r2, #163	; 0xa3
 801184a:	4944      	ldr	r1, [pc, #272]	; (801195c <tcp_create_segment+0x12c>)
 801184c:	4844      	ldr	r0, [pc, #272]	; (8011960 <tcp_create_segment+0x130>)
 801184e:	f007 f96d 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d105      	bne.n	8011864 <tcp_create_segment+0x34>
 8011858:	4b3f      	ldr	r3, [pc, #252]	; (8011958 <tcp_create_segment+0x128>)
 801185a:	22a4      	movs	r2, #164	; 0xa4
 801185c:	4941      	ldr	r1, [pc, #260]	; (8011964 <tcp_create_segment+0x134>)
 801185e:	4840      	ldr	r0, [pc, #256]	; (8011960 <tcp_create_segment+0x130>)
 8011860:	f007 f964 	bl	8018b2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	b2db      	uxtb	r3, r3
 801186c:	f003 0304 	and.w	r3, r3, #4
 8011870:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011872:	2003      	movs	r0, #3
 8011874:	f7fa fb30 	bl	800bed8 <memp_malloc>
 8011878:	6138      	str	r0, [r7, #16]
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d104      	bne.n	801188a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011880:	68b8      	ldr	r0, [r7, #8]
 8011882:	f7fb fa4f 	bl	800cd24 <pbuf_free>
    return NULL;
 8011886:	2300      	movs	r3, #0
 8011888:	e061      	b.n	801194e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011890:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	2200      	movs	r2, #0
 8011896:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	891a      	ldrh	r2, [r3, #8]
 80118a2:	7dfb      	ldrb	r3, [r7, #23]
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d205      	bcs.n	80118b6 <tcp_create_segment+0x86>
 80118aa:	4b2b      	ldr	r3, [pc, #172]	; (8011958 <tcp_create_segment+0x128>)
 80118ac:	22b0      	movs	r2, #176	; 0xb0
 80118ae:	492e      	ldr	r1, [pc, #184]	; (8011968 <tcp_create_segment+0x138>)
 80118b0:	482b      	ldr	r0, [pc, #172]	; (8011960 <tcp_create_segment+0x130>)
 80118b2:	f007 f93b 	bl	8018b2c <iprintf>
  seg->len = p->tot_len - optlen;
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	891a      	ldrh	r2, [r3, #8]
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80118c6:	2114      	movs	r1, #20
 80118c8:	68b8      	ldr	r0, [r7, #8]
 80118ca:	f7fb f995 	bl	800cbf8 <pbuf_add_header>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d004      	beq.n	80118de <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80118d4:	6938      	ldr	r0, [r7, #16]
 80118d6:	f7fc ffe2 	bl	800e89e <tcp_seg_free>
    return NULL;
 80118da:	2300      	movs	r3, #0
 80118dc:	e037      	b.n	801194e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	685a      	ldr	r2, [r3, #4]
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	8ada      	ldrh	r2, [r3, #22]
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	68dc      	ldr	r4, [r3, #12]
 80118f0:	4610      	mov	r0, r2
 80118f2:	f7f9 fde3 	bl	800b4bc <lwip_htons>
 80118f6:	4603      	mov	r3, r0
 80118f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	8b1a      	ldrh	r2, [r3, #24]
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	68dc      	ldr	r4, [r3, #12]
 8011902:	4610      	mov	r0, r2
 8011904:	f7f9 fdda 	bl	800b4bc <lwip_htons>
 8011908:	4603      	mov	r3, r0
 801190a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	68dc      	ldr	r4, [r3, #12]
 8011910:	6838      	ldr	r0, [r7, #0]
 8011912:	f7f9 fde8 	bl	800b4e6 <lwip_htonl>
 8011916:	4603      	mov	r3, r0
 8011918:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801191a:	7dfb      	ldrb	r3, [r7, #23]
 801191c:	089b      	lsrs	r3, r3, #2
 801191e:	b2db      	uxtb	r3, r3
 8011920:	b29b      	uxth	r3, r3
 8011922:	3305      	adds	r3, #5
 8011924:	b29b      	uxth	r3, r3
 8011926:	031b      	lsls	r3, r3, #12
 8011928:	b29a      	uxth	r2, r3
 801192a:	79fb      	ldrb	r3, [r7, #7]
 801192c:	b29b      	uxth	r3, r3
 801192e:	4313      	orrs	r3, r2
 8011930:	b29a      	uxth	r2, r3
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	68dc      	ldr	r4, [r3, #12]
 8011936:	4610      	mov	r0, r2
 8011938:	f7f9 fdc0 	bl	800b4bc <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	2200      	movs	r2, #0
 8011946:	749a      	strb	r2, [r3, #18]
 8011948:	2200      	movs	r2, #0
 801194a:	74da      	strb	r2, [r3, #19]
  return seg;
 801194c:	693b      	ldr	r3, [r7, #16]
}
 801194e:	4618      	mov	r0, r3
 8011950:	371c      	adds	r7, #28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
 8011956:	bf00      	nop
 8011958:	0801c458 	.word	0x0801c458
 801195c:	0801c48c 	.word	0x0801c48c
 8011960:	0801c4ac 	.word	0x0801c4ac
 8011964:	0801c4d4 	.word	0x0801c4d4
 8011968:	0801c4f8 	.word	0x0801c4f8

0801196c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
 8011972:	607b      	str	r3, [r7, #4]
 8011974:	4603      	mov	r3, r0
 8011976:	73fb      	strb	r3, [r7, #15]
 8011978:	460b      	mov	r3, r1
 801197a:	81bb      	strh	r3, [r7, #12]
 801197c:	4613      	mov	r3, r2
 801197e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011980:	89bb      	ldrh	r3, [r7, #12]
 8011982:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d105      	bne.n	8011996 <tcp_pbuf_prealloc+0x2a>
 801198a:	4b30      	ldr	r3, [pc, #192]	; (8011a4c <tcp_pbuf_prealloc+0xe0>)
 801198c:	22e8      	movs	r2, #232	; 0xe8
 801198e:	4930      	ldr	r1, [pc, #192]	; (8011a50 <tcp_pbuf_prealloc+0xe4>)
 8011990:	4830      	ldr	r0, [pc, #192]	; (8011a54 <tcp_pbuf_prealloc+0xe8>)
 8011992:	f007 f8cb 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d105      	bne.n	80119a8 <tcp_pbuf_prealloc+0x3c>
 801199c:	4b2b      	ldr	r3, [pc, #172]	; (8011a4c <tcp_pbuf_prealloc+0xe0>)
 801199e:	22e9      	movs	r2, #233	; 0xe9
 80119a0:	492d      	ldr	r1, [pc, #180]	; (8011a58 <tcp_pbuf_prealloc+0xec>)
 80119a2:	482c      	ldr	r0, [pc, #176]	; (8011a54 <tcp_pbuf_prealloc+0xe8>)
 80119a4:	f007 f8c2 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80119a8:	89ba      	ldrh	r2, [r7, #12]
 80119aa:	897b      	ldrh	r3, [r7, #10]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d221      	bcs.n	80119f4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80119b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80119b4:	f003 0302 	and.w	r3, r3, #2
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d111      	bne.n	80119e0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	8b5b      	ldrh	r3, [r3, #26]
 80119c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d115      	bne.n	80119f4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80119c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d007      	beq.n	80119e0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80119d0:	6a3b      	ldr	r3, [r7, #32]
 80119d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d103      	bne.n	80119e0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d009      	beq.n	80119f4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80119e0:	89bb      	ldrh	r3, [r7, #12]
 80119e2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80119e6:	f023 0203 	bic.w	r2, r3, #3
 80119ea:	897b      	ldrh	r3, [r7, #10]
 80119ec:	4293      	cmp	r3, r2
 80119ee:	bf28      	it	cs
 80119f0:	4613      	movcs	r3, r2
 80119f2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80119f4:	8af9      	ldrh	r1, [r7, #22]
 80119f6:	7bfb      	ldrb	r3, [r7, #15]
 80119f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fa fead 	bl	800c75c <pbuf_alloc>
 8011a02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d101      	bne.n	8011a0e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e019      	b.n	8011a42 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d006      	beq.n	8011a24 <tcp_pbuf_prealloc+0xb8>
 8011a16:	4b0d      	ldr	r3, [pc, #52]	; (8011a4c <tcp_pbuf_prealloc+0xe0>)
 8011a18:	f240 120b 	movw	r2, #267	; 0x10b
 8011a1c:	490f      	ldr	r1, [pc, #60]	; (8011a5c <tcp_pbuf_prealloc+0xf0>)
 8011a1e:	480d      	ldr	r0, [pc, #52]	; (8011a54 <tcp_pbuf_prealloc+0xe8>)
 8011a20:	f007 f884 	bl	8018b2c <iprintf>
  *oversize = p->len - length;
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	895a      	ldrh	r2, [r3, #10]
 8011a28:	89bb      	ldrh	r3, [r7, #12]
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	89ba      	ldrh	r2, [r7, #12]
 8011a36:	811a      	strh	r2, [r3, #8]
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	891a      	ldrh	r2, [r3, #8]
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	815a      	strh	r2, [r3, #10]
  return p;
 8011a40:	693b      	ldr	r3, [r7, #16]
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3718      	adds	r7, #24
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	0801c458 	.word	0x0801c458
 8011a50:	0801c510 	.word	0x0801c510
 8011a54:	0801c4ac 	.word	0x0801c4ac
 8011a58:	0801c534 	.word	0x0801c534
 8011a5c:	0801c554 	.word	0x0801c554

08011a60 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	460b      	mov	r3, r1
 8011a6a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d106      	bne.n	8011a80 <tcp_write_checks+0x20>
 8011a72:	4b33      	ldr	r3, [pc, #204]	; (8011b40 <tcp_write_checks+0xe0>)
 8011a74:	f240 1233 	movw	r2, #307	; 0x133
 8011a78:	4932      	ldr	r1, [pc, #200]	; (8011b44 <tcp_write_checks+0xe4>)
 8011a7a:	4833      	ldr	r0, [pc, #204]	; (8011b48 <tcp_write_checks+0xe8>)
 8011a7c:	f007 f856 	bl	8018b2c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7d1b      	ldrb	r3, [r3, #20]
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	d00e      	beq.n	8011aa6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011a8c:	2b07      	cmp	r3, #7
 8011a8e:	d00a      	beq.n	8011aa6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011a94:	2b02      	cmp	r3, #2
 8011a96:	d006      	beq.n	8011aa6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011a9c:	2b03      	cmp	r3, #3
 8011a9e:	d002      	beq.n	8011aa6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011aa0:	f06f 030a 	mvn.w	r3, #10
 8011aa4:	e048      	b.n	8011b38 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011aa6:	887b      	ldrh	r3, [r7, #2]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d101      	bne.n	8011ab0 <tcp_write_checks+0x50>
    return ERR_OK;
 8011aac:	2300      	movs	r3, #0
 8011aae:	e043      	b.n	8011b38 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ab6:	887a      	ldrh	r2, [r7, #2]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d909      	bls.n	8011ad0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8b5b      	ldrh	r3, [r3, #26]
 8011ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011aca:	f04f 33ff 	mov.w	r3, #4294967295
 8011ace:	e033      	b.n	8011b38 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ad6:	2b08      	cmp	r3, #8
 8011ad8:	d909      	bls.n	8011aee <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	8b5b      	ldrh	r3, [r3, #26]
 8011ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aec:	e024      	b.n	8011b38 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00f      	beq.n	8011b18 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d11a      	bne.n	8011b36 <tcp_write_checks+0xd6>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d116      	bne.n	8011b36 <tcp_write_checks+0xd6>
 8011b08:	4b0d      	ldr	r3, [pc, #52]	; (8011b40 <tcp_write_checks+0xe0>)
 8011b0a:	f240 1255 	movw	r2, #341	; 0x155
 8011b0e:	490f      	ldr	r1, [pc, #60]	; (8011b4c <tcp_write_checks+0xec>)
 8011b10:	480d      	ldr	r0, [pc, #52]	; (8011b48 <tcp_write_checks+0xe8>)
 8011b12:	f007 f80b 	bl	8018b2c <iprintf>
 8011b16:	e00e      	b.n	8011b36 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d103      	bne.n	8011b28 <tcp_write_checks+0xc8>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d006      	beq.n	8011b36 <tcp_write_checks+0xd6>
 8011b28:	4b05      	ldr	r3, [pc, #20]	; (8011b40 <tcp_write_checks+0xe0>)
 8011b2a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011b2e:	4908      	ldr	r1, [pc, #32]	; (8011b50 <tcp_write_checks+0xf0>)
 8011b30:	4805      	ldr	r0, [pc, #20]	; (8011b48 <tcp_write_checks+0xe8>)
 8011b32:	f006 fffb 	bl	8018b2c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011b36:	2300      	movs	r3, #0
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}
 8011b40:	0801c458 	.word	0x0801c458
 8011b44:	0801c568 	.word	0x0801c568
 8011b48:	0801c4ac 	.word	0x0801c4ac
 8011b4c:	0801c588 	.word	0x0801c588
 8011b50:	0801c5c4 	.word	0x0801c5c4

08011b54 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b09b      	sub	sp, #108	; 0x6c
 8011b58:	af04      	add	r7, sp, #16
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	4611      	mov	r1, r2
 8011b60:	461a      	mov	r2, r3
 8011b62:	460b      	mov	r3, r1
 8011b64:	80fb      	strh	r3, [r7, #6]
 8011b66:	4613      	mov	r3, r2
 8011b68:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	653b      	str	r3, [r7, #80]	; 0x50
 8011b72:	2300      	movs	r3, #0
 8011b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b76:	2300      	movs	r3, #0
 8011b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011b84:	2300      	movs	r3, #0
 8011b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d109      	bne.n	8011bb0 <tcp_write+0x5c>
 8011b9c:	4ba4      	ldr	r3, [pc, #656]	; (8011e30 <tcp_write+0x2dc>)
 8011b9e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011ba2:	49a4      	ldr	r1, [pc, #656]	; (8011e34 <tcp_write+0x2e0>)
 8011ba4:	48a4      	ldr	r0, [pc, #656]	; (8011e38 <tcp_write+0x2e4>)
 8011ba6:	f006 ffc1 	bl	8018b2c <iprintf>
 8011baa:	f06f 030f 	mvn.w	r3, #15
 8011bae:	e32a      	b.n	8012206 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bb6:	085b      	lsrs	r3, r3, #1
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	bf28      	it	cs
 8011bc2:	4613      	movcs	r3, r2
 8011bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d102      	bne.n	8011bd2 <tcp_write+0x7e>
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bd0:	e000      	b.n	8011bd4 <tcp_write+0x80>
 8011bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d109      	bne.n	8011bf0 <tcp_write+0x9c>
 8011bdc:	4b94      	ldr	r3, [pc, #592]	; (8011e30 <tcp_write+0x2dc>)
 8011bde:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011be2:	4996      	ldr	r1, [pc, #600]	; (8011e3c <tcp_write+0x2e8>)
 8011be4:	4894      	ldr	r0, [pc, #592]	; (8011e38 <tcp_write+0x2e4>)
 8011be6:	f006 ffa1 	bl	8018b2c <iprintf>
 8011bea:	f06f 030f 	mvn.w	r3, #15
 8011bee:	e30a      	b.n	8012206 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011bf0:	88fb      	ldrh	r3, [r7, #6]
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f7ff ff33 	bl	8011a60 <tcp_write_checks>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011c00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d002      	beq.n	8011c0e <tcp_write+0xba>
    return err;
 8011c08:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011c0c:	e2fb      	b.n	8012206 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c14:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c18:	2300      	movs	r3, #0
 8011c1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 80f6 	beq.w	8011e14 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c2e:	e002      	b.n	8011c36 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1f8      	bne.n	8011c30 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c40:	7a9b      	ldrb	r3, [r3, #10]
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	f003 0304 	and.w	r3, r3, #4
 8011c4a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011c4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c50:	891b      	ldrh	r3, [r3, #8]
 8011c52:	4619      	mov	r1, r3
 8011c54:	8c3b      	ldrh	r3, [r7, #32]
 8011c56:	440b      	add	r3, r1
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	da06      	bge.n	8011c6a <tcp_write+0x116>
 8011c5c:	4b74      	ldr	r3, [pc, #464]	; (8011e30 <tcp_write+0x2dc>)
 8011c5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011c62:	4977      	ldr	r1, [pc, #476]	; (8011e40 <tcp_write+0x2ec>)
 8011c64:	4874      	ldr	r0, [pc, #464]	; (8011e38 <tcp_write+0x2e4>)
 8011c66:	f006 ff61 	bl	8018b2c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c6c:	891a      	ldrh	r2, [r3, #8]
 8011c6e:	8c3b      	ldrh	r3, [r7, #32]
 8011c70:	4413      	add	r3, r2
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c80:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011c82:	8a7b      	ldrh	r3, [r7, #18]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d026      	beq.n	8011cd6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	d206      	bcs.n	8011c9e <tcp_write+0x14a>
 8011c90:	4b67      	ldr	r3, [pc, #412]	; (8011e30 <tcp_write+0x2dc>)
 8011c92:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011c96:	496b      	ldr	r1, [pc, #428]	; (8011e44 <tcp_write+0x2f0>)
 8011c98:	4867      	ldr	r0, [pc, #412]	; (8011e38 <tcp_write+0x2e4>)
 8011c9a:	f006 ff47 	bl	8018b2c <iprintf>
      seg = last_unsent;
 8011c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011ca2:	8a7b      	ldrh	r3, [r7, #18]
 8011ca4:	88fa      	ldrh	r2, [r7, #6]
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	bf28      	it	cs
 8011caa:	4613      	movcs	r3, r2
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	bf28      	it	cs
 8011cb4:	4613      	movcs	r3, r2
 8011cb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011cb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011cc4:	8a7a      	ldrh	r2, [r7, #18]
 8011cc6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011cce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011cd6:	8a7b      	ldrh	r3, [r7, #18]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <tcp_write+0x1a0>
 8011cdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ce0:	88fb      	ldrh	r3, [r7, #6]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d006      	beq.n	8011cf4 <tcp_write+0x1a0>
 8011ce6:	4b52      	ldr	r3, [pc, #328]	; (8011e30 <tcp_write+0x2dc>)
 8011ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cec:	4956      	ldr	r1, [pc, #344]	; (8011e48 <tcp_write+0x2f4>)
 8011cee:	4852      	ldr	r0, [pc, #328]	; (8011e38 <tcp_write+0x2e4>)
 8011cf0:	f006 ff1c 	bl	8018b2c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011cf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011cf8:	88fb      	ldrh	r3, [r7, #6]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	f080 8167 	bcs.w	8011fce <tcp_write+0x47a>
 8011d00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 8163 	beq.w	8011fce <tcp_write+0x47a>
 8011d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d0a:	891b      	ldrh	r3, [r3, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f000 815e 	beq.w	8011fce <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011d12:	88fa      	ldrh	r2, [r7, #6]
 8011d14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d18:	1ad2      	subs	r2, r2, r3
 8011d1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	bfa8      	it	ge
 8011d20:	4613      	movge	r3, r2
 8011d22:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d26:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011d28:	797b      	ldrb	r3, [r7, #5]
 8011d2a:	f003 0301 	and.w	r3, r3, #1
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d027      	beq.n	8011d82 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011d32:	f107 0012 	add.w	r0, r7, #18
 8011d36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d38:	8bf9      	ldrh	r1, [r7, #30]
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	9302      	str	r3, [sp, #8]
 8011d3e:	797b      	ldrb	r3, [r7, #5]
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	4603      	mov	r3, r0
 8011d48:	2000      	movs	r0, #0
 8011d4a:	f7ff fe0f 	bl	801196c <tcp_pbuf_prealloc>
 8011d4e:	6578      	str	r0, [r7, #84]	; 0x54
 8011d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 8225 	beq.w	80121a2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d5a:	6858      	ldr	r0, [r3, #4]
 8011d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	4413      	add	r3, r2
 8011d64:	8bfa      	ldrh	r2, [r7, #30]
 8011d66:	4619      	mov	r1, r3
 8011d68:	f007 f8e0 	bl	8018f2c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011d6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011d6e:	f7fb f867 	bl	800ce40 <pbuf_clen>
 8011d72:	4603      	mov	r3, r0
 8011d74:	461a      	mov	r2, r3
 8011d76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011d80:	e041      	b.n	8011e06 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	637b      	str	r3, [r7, #52]	; 0x34
 8011d88:	e002      	b.n	8011d90 <tcp_write+0x23c>
 8011d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8011d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1f8      	bne.n	8011d8a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d9a:	7b1b      	ldrb	r3, [r3, #12]
 8011d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d115      	bne.n	8011dd0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011daa:	8952      	ldrh	r2, [r2, #10]
 8011dac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d10d      	bne.n	8011dd0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011db4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d006      	beq.n	8011dca <tcp_write+0x276>
 8011dbc:	4b1c      	ldr	r3, [pc, #112]	; (8011e30 <tcp_write+0x2dc>)
 8011dbe:	f240 2231 	movw	r2, #561	; 0x231
 8011dc2:	4922      	ldr	r1, [pc, #136]	; (8011e4c <tcp_write+0x2f8>)
 8011dc4:	481c      	ldr	r0, [pc, #112]	; (8011e38 <tcp_write+0x2e4>)
 8011dc6:	f006 feb1 	bl	8018b2c <iprintf>
          extendlen = seglen;
 8011dca:	8bfb      	ldrh	r3, [r7, #30]
 8011dcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011dce:	e01a      	b.n	8011e06 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011dd0:	8bfb      	ldrh	r3, [r7, #30]
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	f7fa fcc0 	bl	800c75c <pbuf_alloc>
 8011ddc:	6578      	str	r0, [r7, #84]	; 0x54
 8011dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f000 81e0 	beq.w	80121a6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011de6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	441a      	add	r2, r3
 8011dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011df0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011df2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011df4:	f7fb f824 	bl	800ce40 <pbuf_clen>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e00:	4413      	add	r3, r2
 8011e02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011e06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e0a:	8bfb      	ldrh	r3, [r7, #30]
 8011e0c:	4413      	add	r3, r2
 8011e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011e12:	e0dc      	b.n	8011fce <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f000 80d7 	beq.w	8011fce <tcp_write+0x47a>
 8011e20:	4b03      	ldr	r3, [pc, #12]	; (8011e30 <tcp_write+0x2dc>)
 8011e22:	f240 224a 	movw	r2, #586	; 0x24a
 8011e26:	490a      	ldr	r1, [pc, #40]	; (8011e50 <tcp_write+0x2fc>)
 8011e28:	4803      	ldr	r0, [pc, #12]	; (8011e38 <tcp_write+0x2e4>)
 8011e2a:	f006 fe7f 	bl	8018b2c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011e2e:	e0ce      	b.n	8011fce <tcp_write+0x47a>
 8011e30:	0801c458 	.word	0x0801c458
 8011e34:	0801c5f8 	.word	0x0801c5f8
 8011e38:	0801c4ac 	.word	0x0801c4ac
 8011e3c:	0801c610 	.word	0x0801c610
 8011e40:	0801c644 	.word	0x0801c644
 8011e44:	0801c65c 	.word	0x0801c65c
 8011e48:	0801c67c 	.word	0x0801c67c
 8011e4c:	0801c69c 	.word	0x0801c69c
 8011e50:	0801c6c8 	.word	0x0801c6c8
    struct pbuf *p;
    u16_t left = len - pos;
 8011e54:	88fa      	ldrh	r2, [r7, #6]
 8011e56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011e5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011e6a:	8b7a      	ldrh	r2, [r7, #26]
 8011e6c:	8bbb      	ldrh	r3, [r7, #28]
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	bf28      	it	cs
 8011e72:	4613      	movcs	r3, r2
 8011e74:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011e76:	797b      	ldrb	r3, [r7, #5]
 8011e78:	f003 0301 	and.w	r3, r3, #1
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d036      	beq.n	8011eee <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011e80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	8b3b      	ldrh	r3, [r7, #24]
 8011e88:	4413      	add	r3, r2
 8011e8a:	b299      	uxth	r1, r3
 8011e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	bf0c      	ite	eq
 8011e92:	2301      	moveq	r3, #1
 8011e94:	2300      	movne	r3, #0
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f107 0012 	add.w	r0, r7, #18
 8011e9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e9e:	9302      	str	r3, [sp, #8]
 8011ea0:	797b      	ldrb	r3, [r7, #5]
 8011ea2:	9301      	str	r3, [sp, #4]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2036      	movs	r0, #54	; 0x36
 8011eac:	f7ff fd5e 	bl	801196c <tcp_pbuf_prealloc>
 8011eb0:	6338      	str	r0, [r7, #48]	; 0x30
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	f000 8178 	beq.w	80121aa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebc:	895b      	ldrh	r3, [r3, #10]
 8011ebe:	8b3a      	ldrh	r2, [r7, #24]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d906      	bls.n	8011ed2 <tcp_write+0x37e>
 8011ec4:	4b8c      	ldr	r3, [pc, #560]	; (80120f8 <tcp_write+0x5a4>)
 8011ec6:	f240 2266 	movw	r2, #614	; 0x266
 8011eca:	498c      	ldr	r1, [pc, #560]	; (80120fc <tcp_write+0x5a8>)
 8011ecc:	488c      	ldr	r0, [pc, #560]	; (8012100 <tcp_write+0x5ac>)
 8011ece:	f006 fe2d 	bl	8018b2c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed4:	685a      	ldr	r2, [r3, #4]
 8011ed6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011eda:	18d0      	adds	r0, r2, r3
 8011edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	8b3a      	ldrh	r2, [r7, #24]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	f007 f820 	bl	8018f2c <memcpy>
 8011eec:	e02f      	b.n	8011f4e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011eee:	8a7b      	ldrh	r3, [r7, #18]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d006      	beq.n	8011f02 <tcp_write+0x3ae>
 8011ef4:	4b80      	ldr	r3, [pc, #512]	; (80120f8 <tcp_write+0x5a4>)
 8011ef6:	f240 2271 	movw	r2, #625	; 0x271
 8011efa:	4982      	ldr	r1, [pc, #520]	; (8012104 <tcp_write+0x5b0>)
 8011efc:	4880      	ldr	r0, [pc, #512]	; (8012100 <tcp_write+0x5ac>)
 8011efe:	f006 fe15 	bl	8018b2c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011f02:	8b3b      	ldrh	r3, [r7, #24]
 8011f04:	2201      	movs	r2, #1
 8011f06:	4619      	mov	r1, r3
 8011f08:	2036      	movs	r0, #54	; 0x36
 8011f0a:	f7fa fc27 	bl	800c75c <pbuf_alloc>
 8011f0e:	6178      	str	r0, [r7, #20]
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f000 814b 	beq.w	80121ae <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011f18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	441a      	add	r2, r3
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f2e:	4619      	mov	r1, r3
 8011f30:	2036      	movs	r0, #54	; 0x36
 8011f32:	f7fa fc13 	bl	800c75c <pbuf_alloc>
 8011f36:	6338      	str	r0, [r7, #48]	; 0x30
 8011f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d103      	bne.n	8011f46 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011f3e:	6978      	ldr	r0, [r7, #20]
 8011f40:	f7fa fef0 	bl	800cd24 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011f44:	e136      	b.n	80121b4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011f46:	6979      	ldr	r1, [r7, #20]
 8011f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f4a:	f7fa ffb9 	bl	800cec0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f50:	f7fa ff76 	bl	800ce40 <pbuf_clen>
 8011f54:	4603      	mov	r3, r0
 8011f56:	461a      	mov	r2, r3
 8011f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f5c:	4413      	add	r3, r2
 8011f5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011f62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f66:	2b09      	cmp	r3, #9
 8011f68:	d903      	bls.n	8011f72 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f6c:	f7fa feda 	bl	800cd24 <pbuf_free>
      goto memerr;
 8011f70:	e120      	b.n	80121b4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f7a:	441a      	add	r2, r3
 8011f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	4613      	mov	r3, r2
 8011f84:	2200      	movs	r2, #0
 8011f86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f7ff fc51 	bl	8011830 <tcp_create_segment>
 8011f8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f000 810d 	beq.w	80121b2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d102      	bne.n	8011fa4 <tcp_write+0x450>
      queue = seg;
 8011f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8011fa2:	e00c      	b.n	8011fbe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d106      	bne.n	8011fb8 <tcp_write+0x464>
 8011faa:	4b53      	ldr	r3, [pc, #332]	; (80120f8 <tcp_write+0x5a4>)
 8011fac:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011fb0:	4955      	ldr	r1, [pc, #340]	; (8012108 <tcp_write+0x5b4>)
 8011fb2:	4853      	ldr	r0, [pc, #332]	; (8012100 <tcp_write+0x5ac>)
 8011fb4:	f006 fdba 	bl	8018b2c <iprintf>
      prev_seg->next = seg;
 8011fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011fbc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fc0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011fc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fc6:	8b3b      	ldrh	r3, [r7, #24]
 8011fc8:	4413      	add	r3, r2
 8011fca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011fce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fd2:	88fb      	ldrh	r3, [r7, #6]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	f4ff af3d 	bcc.w	8011e54 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011fda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d02c      	beq.n	801203a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fe6:	e01e      	b.n	8012026 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	891a      	ldrh	r2, [r3, #8]
 8011fec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fee:	4413      	add	r3, r2
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d110      	bne.n	8012020 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012004:	8952      	ldrh	r2, [r2, #10]
 8012006:	4413      	add	r3, r2
 8012008:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801200a:	68b9      	ldr	r1, [r7, #8]
 801200c:	4618      	mov	r0, r3
 801200e:	f006 ff8d 	bl	8018f2c <memcpy>
        p->len += oversize_used;
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	895a      	ldrh	r2, [r3, #10]
 8012016:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012018:	4413      	add	r3, r2
 801201a:	b29a      	uxth	r2, r3
 801201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012028:	2b00      	cmp	r3, #0
 801202a:	d1dd      	bne.n	8011fe8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801202c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801202e:	891a      	ldrh	r2, [r3, #8]
 8012030:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012032:	4413      	add	r3, r2
 8012034:	b29a      	uxth	r2, r3
 8012036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012038:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801203a:	8a7a      	ldrh	r2, [r7, #18]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012044:	2b00      	cmp	r3, #0
 8012046:	d018      	beq.n	801207a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_write+0x508>
 801204e:	4b2a      	ldr	r3, [pc, #168]	; (80120f8 <tcp_write+0x5a4>)
 8012050:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012054:	492d      	ldr	r1, [pc, #180]	; (801210c <tcp_write+0x5b8>)
 8012056:	482a      	ldr	r0, [pc, #168]	; (8012100 <tcp_write+0x5ac>)
 8012058:	f006 fd68 	bl	8018b2c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012062:	4618      	mov	r0, r3
 8012064:	f7fa ff2c 	bl	800cec0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801206a:	891a      	ldrh	r2, [r3, #8]
 801206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801206e:	891b      	ldrh	r3, [r3, #8]
 8012070:	4413      	add	r3, r2
 8012072:	b29a      	uxth	r2, r3
 8012074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012076:	811a      	strh	r2, [r3, #8]
 8012078:	e037      	b.n	80120ea <tcp_write+0x596>
  } else if (extendlen > 0) {
 801207a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d034      	beq.n	80120ea <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012082:	2b00      	cmp	r3, #0
 8012084:	d003      	beq.n	801208e <tcp_write+0x53a>
 8012086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <tcp_write+0x548>
 801208e:	4b1a      	ldr	r3, [pc, #104]	; (80120f8 <tcp_write+0x5a4>)
 8012090:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012094:	491e      	ldr	r1, [pc, #120]	; (8012110 <tcp_write+0x5bc>)
 8012096:	481a      	ldr	r0, [pc, #104]	; (8012100 <tcp_write+0x5ac>)
 8012098:	f006 fd48 	bl	8018b2c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80120a2:	e009      	b.n	80120b8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80120a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a6:	891a      	ldrh	r2, [r3, #8]
 80120a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120aa:	4413      	add	r3, r2
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1f1      	bne.n	80120a4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80120c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c2:	891a      	ldrh	r2, [r3, #8]
 80120c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120c6:	4413      	add	r3, r2
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	895a      	ldrh	r2, [r3, #10]
 80120d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120d4:	4413      	add	r3, r2
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120da:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80120dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120de:	891a      	ldrh	r2, [r3, #8]
 80120e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80120e2:	4413      	add	r3, r2
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120e8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80120ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d111      	bne.n	8012114 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80120f6:	e010      	b.n	801211a <tcp_write+0x5c6>
 80120f8:	0801c458 	.word	0x0801c458
 80120fc:	0801c6f8 	.word	0x0801c6f8
 8012100:	0801c4ac 	.word	0x0801c4ac
 8012104:	0801c738 	.word	0x0801c738
 8012108:	0801c748 	.word	0x0801c748
 801210c:	0801c75c 	.word	0x0801c75c
 8012110:	0801c794 	.word	0x0801c794
  } else {
    last_unsent->next = queue;
 8012114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012118:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801211e:	88fb      	ldrh	r3, [r7, #6]
 8012120:	441a      	add	r2, r3
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801212c:	88fb      	ldrh	r3, [r7, #6]
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	b29a      	uxth	r2, r3
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801213e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00e      	beq.n	801216a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10a      	bne.n	801216a <tcp_write+0x616>
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012158:	2b00      	cmp	r3, #0
 801215a:	d106      	bne.n	801216a <tcp_write+0x616>
 801215c:	4b2c      	ldr	r3, [pc, #176]	; (8012210 <tcp_write+0x6bc>)
 801215e:	f240 3212 	movw	r2, #786	; 0x312
 8012162:	492c      	ldr	r1, [pc, #176]	; (8012214 <tcp_write+0x6c0>)
 8012164:	482c      	ldr	r0, [pc, #176]	; (8012218 <tcp_write+0x6c4>)
 8012166:	f006 fce1 	bl	8018b2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801216c:	2b00      	cmp	r3, #0
 801216e:	d016      	beq.n	801219e <tcp_write+0x64a>
 8012170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d012      	beq.n	801219e <tcp_write+0x64a>
 8012178:	797b      	ldrb	r3, [r7, #5]
 801217a:	f003 0302 	and.w	r3, r3, #2
 801217e:	2b00      	cmp	r3, #0
 8012180:	d10d      	bne.n	801219e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	899b      	ldrh	r3, [r3, #12]
 8012188:	b29c      	uxth	r4, r3
 801218a:	2008      	movs	r0, #8
 801218c:	f7f9 f996 	bl	800b4bc <lwip_htons>
 8012190:	4603      	mov	r3, r0
 8012192:	461a      	mov	r2, r3
 8012194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	4322      	orrs	r2, r4
 801219a:	b292      	uxth	r2, r2
 801219c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801219e:	2300      	movs	r3, #0
 80121a0:	e031      	b.n	8012206 <tcp_write+0x6b2>
          goto memerr;
 80121a2:	bf00      	nop
 80121a4:	e006      	b.n	80121b4 <tcp_write+0x660>
            goto memerr;
 80121a6:	bf00      	nop
 80121a8:	e004      	b.n	80121b4 <tcp_write+0x660>
        goto memerr;
 80121aa:	bf00      	nop
 80121ac:	e002      	b.n	80121b4 <tcp_write+0x660>
        goto memerr;
 80121ae:	bf00      	nop
 80121b0:	e000      	b.n	80121b4 <tcp_write+0x660>
      goto memerr;
 80121b2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	8b5b      	ldrh	r3, [r3, #26]
 80121b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121bc:	b29a      	uxth	r2, r3
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80121c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d002      	beq.n	80121ce <tcp_write+0x67a>
    pbuf_free(concat_p);
 80121c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80121ca:	f7fa fdab 	bl	800cd24 <pbuf_free>
  }
  if (queue != NULL) {
 80121ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d002      	beq.n	80121da <tcp_write+0x686>
    tcp_segs_free(queue);
 80121d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80121d6:	f7fc fb4d 	bl	800e874 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00e      	beq.n	8012202 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10a      	bne.n	8012202 <tcp_write+0x6ae>
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d106      	bne.n	8012202 <tcp_write+0x6ae>
 80121f4:	4b06      	ldr	r3, [pc, #24]	; (8012210 <tcp_write+0x6bc>)
 80121f6:	f240 3227 	movw	r2, #807	; 0x327
 80121fa:	4906      	ldr	r1, [pc, #24]	; (8012214 <tcp_write+0x6c0>)
 80121fc:	4806      	ldr	r0, [pc, #24]	; (8012218 <tcp_write+0x6c4>)
 80121fe:	f006 fc95 	bl	8018b2c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012206:	4618      	mov	r0, r3
 8012208:	375c      	adds	r7, #92	; 0x5c
 801220a:	46bd      	mov	sp, r7
 801220c:	bd90      	pop	{r4, r7, pc}
 801220e:	bf00      	nop
 8012210:	0801c458 	.word	0x0801c458
 8012214:	0801c7cc 	.word	0x0801c7cc
 8012218:	0801c4ac 	.word	0x0801c4ac

0801221c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801221c:	b590      	push	{r4, r7, lr}
 801221e:	b08b      	sub	sp, #44	; 0x2c
 8012220:	af02      	add	r7, sp, #8
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	460b      	mov	r3, r1
 8012226:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012228:	2300      	movs	r3, #0
 801222a:	61fb      	str	r3, [r7, #28]
 801222c:	2300      	movs	r3, #0
 801222e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012230:	2300      	movs	r3, #0
 8012232:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_split_unsent_seg+0x2c>
 801223a:	4b95      	ldr	r3, [pc, #596]	; (8012490 <tcp_split_unsent_seg+0x274>)
 801223c:	f240 324b 	movw	r2, #843	; 0x34b
 8012240:	4994      	ldr	r1, [pc, #592]	; (8012494 <tcp_split_unsent_seg+0x278>)
 8012242:	4895      	ldr	r0, [pc, #596]	; (8012498 <tcp_split_unsent_seg+0x27c>)
 8012244:	f006 fc72 	bl	8018b2c <iprintf>

  useg = pcb->unsent;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801224c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d102      	bne.n	801225a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012254:	f04f 33ff 	mov.w	r3, #4294967295
 8012258:	e116      	b.n	8012488 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801225a:	887b      	ldrh	r3, [r7, #2]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d109      	bne.n	8012274 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012260:	4b8b      	ldr	r3, [pc, #556]	; (8012490 <tcp_split_unsent_seg+0x274>)
 8012262:	f240 3253 	movw	r2, #851	; 0x353
 8012266:	498d      	ldr	r1, [pc, #564]	; (801249c <tcp_split_unsent_seg+0x280>)
 8012268:	488b      	ldr	r0, [pc, #556]	; (8012498 <tcp_split_unsent_seg+0x27c>)
 801226a:	f006 fc5f 	bl	8018b2c <iprintf>
    return ERR_VAL;
 801226e:	f06f 0305 	mvn.w	r3, #5
 8012272:	e109      	b.n	8012488 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	891b      	ldrh	r3, [r3, #8]
 8012278:	887a      	ldrh	r2, [r7, #2]
 801227a:	429a      	cmp	r2, r3
 801227c:	d301      	bcc.n	8012282 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801227e:	2300      	movs	r3, #0
 8012280:	e102      	b.n	8012488 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012286:	887a      	ldrh	r2, [r7, #2]
 8012288:	429a      	cmp	r2, r3
 801228a:	d906      	bls.n	801229a <tcp_split_unsent_seg+0x7e>
 801228c:	4b80      	ldr	r3, [pc, #512]	; (8012490 <tcp_split_unsent_seg+0x274>)
 801228e:	f240 325b 	movw	r2, #859	; 0x35b
 8012292:	4983      	ldr	r1, [pc, #524]	; (80124a0 <tcp_split_unsent_seg+0x284>)
 8012294:	4880      	ldr	r0, [pc, #512]	; (8012498 <tcp_split_unsent_seg+0x27c>)
 8012296:	f006 fc49 	bl	8018b2c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	891b      	ldrh	r3, [r3, #8]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <tcp_split_unsent_seg+0x94>
 80122a2:	4b7b      	ldr	r3, [pc, #492]	; (8012490 <tcp_split_unsent_seg+0x274>)
 80122a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80122a8:	497e      	ldr	r1, [pc, #504]	; (80124a4 <tcp_split_unsent_seg+0x288>)
 80122aa:	487b      	ldr	r0, [pc, #492]	; (8012498 <tcp_split_unsent_seg+0x27c>)
 80122ac:	f006 fc3e 	bl	8018b2c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	7a9b      	ldrb	r3, [r3, #10]
 80122b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80122b6:	7bfb      	ldrb	r3, [r7, #15]
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	891a      	ldrh	r2, [r3, #8]
 80122c6:	887b      	ldrh	r3, [r7, #2]
 80122c8:	1ad3      	subs	r3, r2, r3
 80122ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80122cc:	7bbb      	ldrb	r3, [r7, #14]
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	89bb      	ldrh	r3, [r7, #12]
 80122d2:	4413      	add	r3, r2
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122da:	4619      	mov	r1, r3
 80122dc:	2036      	movs	r0, #54	; 0x36
 80122de:	f7fa fa3d 	bl	800c75c <pbuf_alloc>
 80122e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	f000 80b7 	beq.w	801245a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	891a      	ldrh	r2, [r3, #8]
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	891b      	ldrh	r3, [r3, #8]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	887b      	ldrh	r3, [r7, #2]
 80122fc:	4413      	add	r3, r2
 80122fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	6858      	ldr	r0, [r3, #4]
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	685a      	ldr	r2, [r3, #4]
 8012308:	7bbb      	ldrb	r3, [r7, #14]
 801230a:	18d1      	adds	r1, r2, r3
 801230c:	897b      	ldrh	r3, [r7, #10]
 801230e:	89ba      	ldrh	r2, [r7, #12]
 8012310:	f7fa ff0e 	bl	800d130 <pbuf_copy_partial>
 8012314:	4603      	mov	r3, r0
 8012316:	461a      	mov	r2, r3
 8012318:	89bb      	ldrh	r3, [r7, #12]
 801231a:	4293      	cmp	r3, r2
 801231c:	f040 809f 	bne.w	801245e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	899b      	ldrh	r3, [r3, #12]
 8012326:	b29b      	uxth	r3, r3
 8012328:	4618      	mov	r0, r3
 801232a:	f7f9 f8c7 	bl	800b4bc <lwip_htons>
 801232e:	4603      	mov	r3, r0
 8012330:	b2db      	uxtb	r3, r3
 8012332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012336:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012338:	2300      	movs	r3, #0
 801233a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801233c:	7efb      	ldrb	r3, [r7, #27]
 801233e:	f003 0308 	and.w	r3, r3, #8
 8012342:	2b00      	cmp	r3, #0
 8012344:	d007      	beq.n	8012356 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012346:	7efb      	ldrb	r3, [r7, #27]
 8012348:	f023 0308 	bic.w	r3, r3, #8
 801234c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801234e:	7ebb      	ldrb	r3, [r7, #26]
 8012350:	f043 0308 	orr.w	r3, r3, #8
 8012354:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012356:	7efb      	ldrb	r3, [r7, #27]
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d007      	beq.n	8012370 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012360:	7efb      	ldrb	r3, [r7, #27]
 8012362:	f023 0301 	bic.w	r3, r3, #1
 8012366:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012368:	7ebb      	ldrb	r3, [r7, #26]
 801236a:	f043 0301 	orr.w	r3, r3, #1
 801236e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7f9 f8b5 	bl	800b4e6 <lwip_htonl>
 801237c:	4602      	mov	r2, r0
 801237e:	887b      	ldrh	r3, [r7, #2]
 8012380:	18d1      	adds	r1, r2, r3
 8012382:	7eba      	ldrb	r2, [r7, #26]
 8012384:	7bfb      	ldrb	r3, [r7, #15]
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	460b      	mov	r3, r1
 801238a:	6939      	ldr	r1, [r7, #16]
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff fa4f 	bl	8011830 <tcp_create_segment>
 8012392:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d063      	beq.n	8012462 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fa fd4e 	bl	800ce40 <pbuf_clen>
 80123a4:	4603      	mov	r3, r0
 80123a6:	461a      	mov	r2, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123ae:	1a9b      	subs	r3, r3, r2
 80123b0:	b29a      	uxth	r2, r3
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	6858      	ldr	r0, [r3, #4]
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	891a      	ldrh	r2, [r3, #8]
 80123c2:	89bb      	ldrh	r3, [r7, #12]
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4619      	mov	r1, r3
 80123ca:	f7fa fb25 	bl	800ca18 <pbuf_realloc>
  useg->len -= remainder;
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	891a      	ldrh	r2, [r3, #8]
 80123d2:	89bb      	ldrh	r3, [r7, #12]
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	899b      	ldrh	r3, [r3, #12]
 80123e2:	b29c      	uxth	r4, r3
 80123e4:	7efb      	ldrb	r3, [r7, #27]
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f9 f867 	bl	800b4bc <lwip_htons>
 80123ee:	4603      	mov	r3, r0
 80123f0:	461a      	mov	r2, r3
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	4322      	orrs	r2, r4
 80123f8:	b292      	uxth	r2, r2
 80123fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	4618      	mov	r0, r3
 8012402:	f7fa fd1d 	bl	800ce40 <pbuf_clen>
 8012406:	4603      	mov	r3, r0
 8012408:	461a      	mov	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012410:	4413      	add	r3, r2
 8012412:	b29a      	uxth	r2, r3
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	4618      	mov	r0, r3
 8012420:	f7fa fd0e 	bl	800ce40 <pbuf_clen>
 8012424:	4603      	mov	r3, r0
 8012426:	461a      	mov	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801242e:	4413      	add	r3, r2
 8012430:	b29a      	uxth	r2, r3
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	69fa      	ldr	r2, [r7, #28]
 8012444:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d103      	bne.n	8012456 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	e016      	b.n	8012488 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801245a:	bf00      	nop
 801245c:	e002      	b.n	8012464 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801245e:	bf00      	nop
 8012460:	e000      	b.n	8012464 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012462:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d006      	beq.n	8012478 <tcp_split_unsent_seg+0x25c>
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <tcp_split_unsent_seg+0x274>)
 801246c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012470:	490d      	ldr	r1, [pc, #52]	; (80124a8 <tcp_split_unsent_seg+0x28c>)
 8012472:	4809      	ldr	r0, [pc, #36]	; (8012498 <tcp_split_unsent_seg+0x27c>)
 8012474:	f006 fb5a 	bl	8018b2c <iprintf>
  if (p != NULL) {
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d002      	beq.n	8012484 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801247e:	6938      	ldr	r0, [r7, #16]
 8012480:	f7fa fc50 	bl	800cd24 <pbuf_free>
  }

  return ERR_MEM;
 8012484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012488:	4618      	mov	r0, r3
 801248a:	3724      	adds	r7, #36	; 0x24
 801248c:	46bd      	mov	sp, r7
 801248e:	bd90      	pop	{r4, r7, pc}
 8012490:	0801c458 	.word	0x0801c458
 8012494:	0801c7ec 	.word	0x0801c7ec
 8012498:	0801c4ac 	.word	0x0801c4ac
 801249c:	0801c810 	.word	0x0801c810
 80124a0:	0801c834 	.word	0x0801c834
 80124a4:	0801c844 	.word	0x0801c844
 80124a8:	0801c854 	.word	0x0801c854

080124ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80124ac:	b590      	push	{r4, r7, lr}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <tcp_send_fin+0x1c>
 80124ba:	4b21      	ldr	r3, [pc, #132]	; (8012540 <tcp_send_fin+0x94>)
 80124bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80124c0:	4920      	ldr	r1, [pc, #128]	; (8012544 <tcp_send_fin+0x98>)
 80124c2:	4821      	ldr	r0, [pc, #132]	; (8012548 <tcp_send_fin+0x9c>)
 80124c4:	f006 fb32 	bl	8018b2c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d02e      	beq.n	801252e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	e002      	b.n	80124de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1f8      	bne.n	80124d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	899b      	ldrh	r3, [r3, #12]
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f8 ffe4 	bl	800b4bc <lwip_htons>
 80124f4:	4603      	mov	r3, r0
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	f003 0307 	and.w	r3, r3, #7
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d116      	bne.n	801252e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	899b      	ldrh	r3, [r3, #12]
 8012506:	b29c      	uxth	r4, r3
 8012508:	2001      	movs	r0, #1
 801250a:	f7f8 ffd7 	bl	800b4bc <lwip_htons>
 801250e:	4603      	mov	r3, r0
 8012510:	461a      	mov	r2, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	4322      	orrs	r2, r4
 8012518:	b292      	uxth	r2, r2
 801251a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	8b5b      	ldrh	r3, [r3, #26]
 8012520:	f043 0320 	orr.w	r3, r3, #32
 8012524:	b29a      	uxth	r2, r3
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801252a:	2300      	movs	r3, #0
 801252c:	e004      	b.n	8012538 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801252e:	2101      	movs	r1, #1
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f80b 	bl	801254c <tcp_enqueue_flags>
 8012536:	4603      	mov	r3, r0
}
 8012538:	4618      	mov	r0, r3
 801253a:	3714      	adds	r7, #20
 801253c:	46bd      	mov	sp, r7
 801253e:	bd90      	pop	{r4, r7, pc}
 8012540:	0801c458 	.word	0x0801c458
 8012544:	0801c860 	.word	0x0801c860
 8012548:	0801c4ac 	.word	0x0801c4ac

0801254c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b08a      	sub	sp, #40	; 0x28
 8012550:	af02      	add	r7, sp, #8
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801255c:	2300      	movs	r3, #0
 801255e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012560:	78fb      	ldrb	r3, [r7, #3]
 8012562:	f003 0303 	and.w	r3, r3, #3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <tcp_enqueue_flags+0x2c>
 801256a:	4b67      	ldr	r3, [pc, #412]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 801256c:	f240 4211 	movw	r2, #1041	; 0x411
 8012570:	4966      	ldr	r1, [pc, #408]	; (801270c <tcp_enqueue_flags+0x1c0>)
 8012572:	4867      	ldr	r0, [pc, #412]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 8012574:	f006 fada 	bl	8018b2c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d106      	bne.n	801258c <tcp_enqueue_flags+0x40>
 801257e:	4b62      	ldr	r3, [pc, #392]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 8012580:	f240 4213 	movw	r2, #1043	; 0x413
 8012584:	4963      	ldr	r1, [pc, #396]	; (8012714 <tcp_enqueue_flags+0x1c8>)
 8012586:	4862      	ldr	r0, [pc, #392]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 8012588:	f006 fad0 	bl	8018b2c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801258c:	78fb      	ldrb	r3, [r7, #3]
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012596:	2301      	movs	r3, #1
 8012598:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801259a:	7ffb      	ldrb	r3, [r7, #31]
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	f003 0304 	and.w	r3, r3, #4
 80125a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80125a6:	7dfb      	ldrb	r3, [r7, #23]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125ae:	4619      	mov	r1, r3
 80125b0:	2036      	movs	r0, #54	; 0x36
 80125b2:	f7fa f8d3 	bl	800c75c <pbuf_alloc>
 80125b6:	6138      	str	r0, [r7, #16]
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d109      	bne.n	80125d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	8b5b      	ldrh	r3, [r3, #26]
 80125c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125cc:	f04f 33ff 	mov.w	r3, #4294967295
 80125d0:	e095      	b.n	80126fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	895a      	ldrh	r2, [r3, #10]
 80125d6:	7dfb      	ldrb	r3, [r7, #23]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	429a      	cmp	r2, r3
 80125dc:	d206      	bcs.n	80125ec <tcp_enqueue_flags+0xa0>
 80125de:	4b4a      	ldr	r3, [pc, #296]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 80125e0:	f240 4239 	movw	r2, #1081	; 0x439
 80125e4:	494c      	ldr	r1, [pc, #304]	; (8012718 <tcp_enqueue_flags+0x1cc>)
 80125e6:	484a      	ldr	r0, [pc, #296]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 80125e8:	f006 faa0 	bl	8018b2c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80125f0:	78fa      	ldrb	r2, [r7, #3]
 80125f2:	7ffb      	ldrb	r3, [r7, #31]
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	460b      	mov	r3, r1
 80125f8:	6939      	ldr	r1, [r7, #16]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff f918 	bl	8011830 <tcp_create_segment>
 8012600:	60f8      	str	r0, [r7, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d109      	bne.n	801261c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	8b5b      	ldrh	r3, [r3, #26]
 801260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012610:	b29a      	uxth	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012616:	f04f 33ff 	mov.w	r3, #4294967295
 801261a:	e070      	b.n	80126fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	f003 0303 	and.w	r3, r3, #3
 8012624:	2b00      	cmp	r3, #0
 8012626:	d006      	beq.n	8012636 <tcp_enqueue_flags+0xea>
 8012628:	4b37      	ldr	r3, [pc, #220]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 801262a:	f240 4242 	movw	r2, #1090	; 0x442
 801262e:	493b      	ldr	r1, [pc, #236]	; (801271c <tcp_enqueue_flags+0x1d0>)
 8012630:	4837      	ldr	r0, [pc, #220]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 8012632:	f006 fa7b 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d006      	beq.n	801264c <tcp_enqueue_flags+0x100>
 801263e:	4b32      	ldr	r3, [pc, #200]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 8012640:	f240 4243 	movw	r2, #1091	; 0x443
 8012644:	4936      	ldr	r1, [pc, #216]	; (8012720 <tcp_enqueue_flags+0x1d4>)
 8012646:	4832      	ldr	r0, [pc, #200]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 8012648:	f006 fa70 	bl	8018b2c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d103      	bne.n	801265c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	68fa      	ldr	r2, [r7, #12]
 8012658:	66da      	str	r2, [r3, #108]	; 0x6c
 801265a:	e00d      	b.n	8012678 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	61bb      	str	r3, [r7, #24]
 8012662:	e002      	b.n	801266a <tcp_enqueue_flags+0x11e>
 8012664:	69bb      	ldr	r3, [r7, #24]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	61bb      	str	r3, [r7, #24]
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1f8      	bne.n	8012664 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	f003 0302 	and.w	r3, r3, #2
 8012686:	2b00      	cmp	r3, #0
 8012688:	d104      	bne.n	8012694 <tcp_enqueue_flags+0x148>
 801268a:	78fb      	ldrb	r3, [r7, #3]
 801268c:	f003 0301 	and.w	r3, r3, #1
 8012690:	2b00      	cmp	r3, #0
 8012692:	d004      	beq.n	801269e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012698:	1c5a      	adds	r2, r3, #1
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801269e:	78fb      	ldrb	r3, [r7, #3]
 80126a0:	f003 0301 	and.w	r3, r3, #1
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d006      	beq.n	80126b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	8b5b      	ldrh	r3, [r3, #26]
 80126ac:	f043 0320 	orr.w	r3, r3, #32
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fa fbc0 	bl	800ce40 <pbuf_clen>
 80126c0:	4603      	mov	r3, r0
 80126c2:	461a      	mov	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ca:	4413      	add	r3, r2
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00e      	beq.n	80126fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d10a      	bne.n	80126fc <tcp_enqueue_flags+0x1b0>
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <tcp_enqueue_flags+0x1b0>
 80126ee:	4b06      	ldr	r3, [pc, #24]	; (8012708 <tcp_enqueue_flags+0x1bc>)
 80126f0:	f240 4265 	movw	r2, #1125	; 0x465
 80126f4:	490b      	ldr	r1, [pc, #44]	; (8012724 <tcp_enqueue_flags+0x1d8>)
 80126f6:	4806      	ldr	r0, [pc, #24]	; (8012710 <tcp_enqueue_flags+0x1c4>)
 80126f8:	f006 fa18 	bl	8018b2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80126fc:	2300      	movs	r3, #0
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3720      	adds	r7, #32
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	0801c458 	.word	0x0801c458
 801270c:	0801c87c 	.word	0x0801c87c
 8012710:	0801c4ac 	.word	0x0801c4ac
 8012714:	0801c8d4 	.word	0x0801c8d4
 8012718:	0801c8f4 	.word	0x0801c8f4
 801271c:	0801c930 	.word	0x0801c930
 8012720:	0801c948 	.word	0x0801c948
 8012724:	0801c974 	.word	0x0801c974

08012728 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012728:	b5b0      	push	{r4, r5, r7, lr}
 801272a:	b08a      	sub	sp, #40	; 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d106      	bne.n	8012744 <tcp_output+0x1c>
 8012736:	4b8a      	ldr	r3, [pc, #552]	; (8012960 <tcp_output+0x238>)
 8012738:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801273c:	4989      	ldr	r1, [pc, #548]	; (8012964 <tcp_output+0x23c>)
 801273e:	488a      	ldr	r0, [pc, #552]	; (8012968 <tcp_output+0x240>)
 8012740:	f006 f9f4 	bl	8018b2c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	7d1b      	ldrb	r3, [r3, #20]
 8012748:	2b01      	cmp	r3, #1
 801274a:	d106      	bne.n	801275a <tcp_output+0x32>
 801274c:	4b84      	ldr	r3, [pc, #528]	; (8012960 <tcp_output+0x238>)
 801274e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012752:	4986      	ldr	r1, [pc, #536]	; (801296c <tcp_output+0x244>)
 8012754:	4884      	ldr	r0, [pc, #528]	; (8012968 <tcp_output+0x240>)
 8012756:	f006 f9e9 	bl	8018b2c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801275a:	4b85      	ldr	r3, [pc, #532]	; (8012970 <tcp_output+0x248>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	429a      	cmp	r2, r3
 8012762:	d101      	bne.n	8012768 <tcp_output+0x40>
    return ERR_OK;
 8012764:	2300      	movs	r3, #0
 8012766:	e1ce      	b.n	8012b06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012774:	4293      	cmp	r3, r2
 8012776:	bf28      	it	cs
 8012778:	4613      	movcs	r3, r2
 801277a:	b29b      	uxth	r3, r3
 801277c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012782:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012786:	2b00      	cmp	r3, #0
 8012788:	d10b      	bne.n	80127a2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	8b5b      	ldrh	r3, [r3, #26]
 801278e:	f003 0302 	and.w	r3, r3, #2
 8012792:	2b00      	cmp	r3, #0
 8012794:	f000 81aa 	beq.w	8012aec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fdcb 	bl	8013334 <tcp_send_empty_ack>
 801279e:	4603      	mov	r3, r0
 80127a0:	e1b1      	b.n	8012b06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80127a2:	6879      	ldr	r1, [r7, #4]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	3304      	adds	r3, #4
 80127a8:	461a      	mov	r2, r3
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7ff f824 	bl	80117f8 <tcp_route>
 80127b0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d102      	bne.n	80127be <tcp_output+0x96>
    return ERR_RTE;
 80127b8:	f06f 0303 	mvn.w	r3, #3
 80127bc:	e1a3      	b.n	8012b06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d003      	beq.n	80127cc <tcp_output+0xa4>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d111      	bne.n	80127f0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d002      	beq.n	80127d8 <tcp_output+0xb0>
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	3304      	adds	r3, #4
 80127d6:	e000      	b.n	80127da <tcp_output+0xb2>
 80127d8:	2300      	movs	r3, #0
 80127da:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d102      	bne.n	80127e8 <tcp_output+0xc0>
      return ERR_RTE;
 80127e2:	f06f 0303 	mvn.w	r3, #3
 80127e6:	e18e      	b.n	8012b06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80127f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7f8 fe75 	bl	800b4e6 <lwip_htonl>
 80127fc:	4602      	mov	r2, r0
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012806:	8912      	ldrh	r2, [r2, #8]
 8012808:	4413      	add	r3, r2
 801280a:	69ba      	ldr	r2, [r7, #24]
 801280c:	429a      	cmp	r2, r3
 801280e:	d227      	bcs.n	8012860 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012816:	461a      	mov	r2, r3
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	4293      	cmp	r3, r2
 801281c:	d114      	bne.n	8012848 <tcp_output+0x120>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012822:	2b00      	cmp	r3, #0
 8012824:	d110      	bne.n	8012848 <tcp_output+0x120>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801282c:	2b00      	cmp	r3, #0
 801282e:	d10b      	bne.n	8012848 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2200      	movs	r2, #0
 8012834:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2201      	movs	r2, #1
 801283c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	8b5b      	ldrh	r3, [r3, #26]
 801284c:	f003 0302 	and.w	r3, r3, #2
 8012850:	2b00      	cmp	r3, #0
 8012852:	f000 814d 	beq.w	8012af0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 fd6c 	bl	8013334 <tcp_send_empty_ack>
 801285c:	4603      	mov	r3, r0
 801285e:	e152      	b.n	8012b06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801286c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	2b00      	cmp	r3, #0
 8012872:	f000 811c 	beq.w	8012aae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012876:	e002      	b.n	801287e <tcp_output+0x156>
 8012878:	6a3b      	ldr	r3, [r7, #32]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	623b      	str	r3, [r7, #32]
 801287e:	6a3b      	ldr	r3, [r7, #32]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d1f8      	bne.n	8012878 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012886:	e112      	b.n	8012aae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	899b      	ldrh	r3, [r3, #12]
 801288e:	b29b      	uxth	r3, r3
 8012890:	4618      	mov	r0, r3
 8012892:	f7f8 fe13 	bl	800b4bc <lwip_htons>
 8012896:	4603      	mov	r3, r0
 8012898:	b2db      	uxtb	r3, r3
 801289a:	f003 0304 	and.w	r3, r3, #4
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d006      	beq.n	80128b0 <tcp_output+0x188>
 80128a2:	4b2f      	ldr	r3, [pc, #188]	; (8012960 <tcp_output+0x238>)
 80128a4:	f240 5236 	movw	r2, #1334	; 0x536
 80128a8:	4932      	ldr	r1, [pc, #200]	; (8012974 <tcp_output+0x24c>)
 80128aa:	482f      	ldr	r0, [pc, #188]	; (8012968 <tcp_output+0x240>)
 80128ac:	f006 f93e 	bl	8018b2c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d01f      	beq.n	80128f8 <tcp_output+0x1d0>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	8b5b      	ldrh	r3, [r3, #26]
 80128bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d119      	bne.n	80128f8 <tcp_output+0x1d0>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00b      	beq.n	80128e4 <tcp_output+0x1bc>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d110      	bne.n	80128f8 <tcp_output+0x1d0>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128da:	891a      	ldrh	r2, [r3, #8]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d209      	bcs.n	80128f8 <tcp_output+0x1d0>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d004      	beq.n	80128f8 <tcp_output+0x1d0>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128f4:	2b08      	cmp	r3, #8
 80128f6:	d901      	bls.n	80128fc <tcp_output+0x1d4>
 80128f8:	2301      	movs	r3, #1
 80128fa:	e000      	b.n	80128fe <tcp_output+0x1d6>
 80128fc:	2300      	movs	r3, #0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d106      	bne.n	8012910 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8b5b      	ldrh	r3, [r3, #26]
 8012906:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801290a:	2b00      	cmp	r3, #0
 801290c:	f000 80e4 	beq.w	8012ad8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7d1b      	ldrb	r3, [r3, #20]
 8012914:	2b02      	cmp	r3, #2
 8012916:	d00d      	beq.n	8012934 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	899b      	ldrh	r3, [r3, #12]
 801291e:	b29c      	uxth	r4, r3
 8012920:	2010      	movs	r0, #16
 8012922:	f7f8 fdcb 	bl	800b4bc <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
 801292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	4322      	orrs	r2, r4
 8012930:	b292      	uxth	r2, r2
 8012932:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012934:	697a      	ldr	r2, [r7, #20]
 8012936:	6879      	ldr	r1, [r7, #4]
 8012938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801293a:	f000 f909 	bl	8012b50 <tcp_output_segment>
 801293e:	4603      	mov	r3, r0
 8012940:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d016      	beq.n	8012978 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	8b5b      	ldrh	r3, [r3, #26]
 801294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012952:	b29a      	uxth	r2, r3
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	835a      	strh	r2, [r3, #26]
      return err;
 8012958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801295c:	e0d3      	b.n	8012b06 <tcp_output+0x3de>
 801295e:	bf00      	nop
 8012960:	0801c458 	.word	0x0801c458
 8012964:	0801c99c 	.word	0x0801c99c
 8012968:	0801c4ac 	.word	0x0801c4ac
 801296c:	0801c9b4 	.word	0x0801c9b4
 8012970:	200111ec 	.word	0x200111ec
 8012974:	0801c9dc 	.word	0x0801c9dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7d1b      	ldrb	r3, [r3, #20]
 8012984:	2b02      	cmp	r3, #2
 8012986:	d006      	beq.n	8012996 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8b5b      	ldrh	r3, [r3, #26]
 801298c:	f023 0303 	bic.w	r3, r3, #3
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	4618      	mov	r0, r3
 801299e:	f7f8 fda2 	bl	800b4e6 <lwip_htonl>
 80129a2:	4604      	mov	r4, r0
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	891b      	ldrh	r3, [r3, #8]
 80129a8:	461d      	mov	r5, r3
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	899b      	ldrh	r3, [r3, #12]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7f8 fd82 	bl	800b4bc <lwip_htons>
 80129b8:	4603      	mov	r3, r0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	f003 0303 	and.w	r3, r3, #3
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d001      	beq.n	80129c8 <tcp_output+0x2a0>
 80129c4:	2301      	movs	r3, #1
 80129c6:	e000      	b.n	80129ca <tcp_output+0x2a2>
 80129c8:	2300      	movs	r3, #0
 80129ca:	442b      	add	r3, r5
 80129cc:	4423      	add	r3, r4
 80129ce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	2b00      	cmp	r3, #0
 80129da:	da02      	bge.n	80129e2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68ba      	ldr	r2, [r7, #8]
 80129e0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80129e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e4:	891b      	ldrh	r3, [r3, #8]
 80129e6:	461c      	mov	r4, r3
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	899b      	ldrh	r3, [r3, #12]
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7f8 fd63 	bl	800b4bc <lwip_htons>
 80129f6:	4603      	mov	r3, r0
 80129f8:	b2db      	uxtb	r3, r3
 80129fa:	f003 0303 	and.w	r3, r3, #3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d001      	beq.n	8012a06 <tcp_output+0x2de>
 8012a02:	2301      	movs	r3, #1
 8012a04:	e000      	b.n	8012a08 <tcp_output+0x2e0>
 8012a06:	2300      	movs	r3, #0
 8012a08:	4423      	add	r3, r4
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d049      	beq.n	8012aa2 <tcp_output+0x37a>
      seg->next = NULL;
 8012a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a10:	2200      	movs	r2, #0
 8012a12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d105      	bne.n	8012a28 <tcp_output+0x300>
        pcb->unacked = seg;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	623b      	str	r3, [r7, #32]
 8012a26:	e03f      	b.n	8012aa8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7f8 fd59 	bl	800b4e6 <lwip_htonl>
 8012a34:	4604      	mov	r4, r0
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f8 fd52 	bl	800b4e6 <lwip_htonl>
 8012a42:	4603      	mov	r3, r0
 8012a44:	1ae3      	subs	r3, r4, r3
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	da24      	bge.n	8012a94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	3370      	adds	r3, #112	; 0x70
 8012a4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a50:	e002      	b.n	8012a58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d011      	beq.n	8012a84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f8 fd3c 	bl	800b4e6 <lwip_htonl>
 8012a6e:	4604      	mov	r4, r0
 8012a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f8 fd35 	bl	800b4e6 <lwip_htonl>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dbe6      	blt.n	8012a52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012a84:	69fb      	ldr	r3, [r7, #28]
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	e009      	b.n	8012aa8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012a94:	6a3b      	ldr	r3, [r7, #32]
 8012a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	623b      	str	r3, [r7, #32]
 8012aa0:	e002      	b.n	8012aa8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aa4:	f7fb fefb 	bl	800e89e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d012      	beq.n	8012ada <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7f8 fd13 	bl	800b4e6 <lwip_htonl>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ac6:	1ad3      	subs	r3, r2, r3
 8012ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aca:	8912      	ldrh	r2, [r2, #8]
 8012acc:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ace:	69ba      	ldr	r2, [r7, #24]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	f4bf aed9 	bcs.w	8012888 <tcp_output+0x160>
 8012ad6:	e000      	b.n	8012ada <tcp_output+0x3b2>
      break;
 8012ad8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d108      	bne.n	8012af4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012aea:	e004      	b.n	8012af6 <tcp_output+0x3ce>
    goto output_done;
 8012aec:	bf00      	nop
 8012aee:	e002      	b.n	8012af6 <tcp_output+0x3ce>
    goto output_done;
 8012af0:	bf00      	nop
 8012af2:	e000      	b.n	8012af6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012af4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	8b5b      	ldrh	r3, [r3, #26]
 8012afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012b04:	2300      	movs	r3, #0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3728      	adds	r7, #40	; 0x28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b0e:	bf00      	nop

08012b10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d106      	bne.n	8012b2c <tcp_output_segment_busy+0x1c>
 8012b1e:	4b09      	ldr	r3, [pc, #36]	; (8012b44 <tcp_output_segment_busy+0x34>)
 8012b20:	f240 529a 	movw	r2, #1434	; 0x59a
 8012b24:	4908      	ldr	r1, [pc, #32]	; (8012b48 <tcp_output_segment_busy+0x38>)
 8012b26:	4809      	ldr	r0, [pc, #36]	; (8012b4c <tcp_output_segment_busy+0x3c>)
 8012b28:	f006 f800 	bl	8018b2c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	7b9b      	ldrb	r3, [r3, #14]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d001      	beq.n	8012b3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012b36:	2301      	movs	r3, #1
 8012b38:	e000      	b.n	8012b3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	0801c458 	.word	0x0801c458
 8012b48:	0801c9f4 	.word	0x0801c9f4
 8012b4c:	0801c4ac 	.word	0x0801c4ac

08012b50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b50:	b5b0      	push	{r4, r5, r7, lr}
 8012b52:	b08c      	sub	sp, #48	; 0x30
 8012b54:	af04      	add	r7, sp, #16
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d106      	bne.n	8012b70 <tcp_output_segment+0x20>
 8012b62:	4b64      	ldr	r3, [pc, #400]	; (8012cf4 <tcp_output_segment+0x1a4>)
 8012b64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012b68:	4963      	ldr	r1, [pc, #396]	; (8012cf8 <tcp_output_segment+0x1a8>)
 8012b6a:	4864      	ldr	r0, [pc, #400]	; (8012cfc <tcp_output_segment+0x1ac>)
 8012b6c:	f005 ffde 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d106      	bne.n	8012b84 <tcp_output_segment+0x34>
 8012b76:	4b5f      	ldr	r3, [pc, #380]	; (8012cf4 <tcp_output_segment+0x1a4>)
 8012b78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012b7c:	4960      	ldr	r1, [pc, #384]	; (8012d00 <tcp_output_segment+0x1b0>)
 8012b7e:	485f      	ldr	r0, [pc, #380]	; (8012cfc <tcp_output_segment+0x1ac>)
 8012b80:	f005 ffd4 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d106      	bne.n	8012b98 <tcp_output_segment+0x48>
 8012b8a:	4b5a      	ldr	r3, [pc, #360]	; (8012cf4 <tcp_output_segment+0x1a4>)
 8012b8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012b90:	495c      	ldr	r1, [pc, #368]	; (8012d04 <tcp_output_segment+0x1b4>)
 8012b92:	485a      	ldr	r0, [pc, #360]	; (8012cfc <tcp_output_segment+0x1ac>)
 8012b94:	f005 ffca 	bl	8018b2c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f7ff ffb9 	bl	8012b10 <tcp_output_segment_busy>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	e0a1      	b.n	8012cec <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	68dc      	ldr	r4, [r3, #12]
 8012bb0:	4610      	mov	r0, r2
 8012bb2:	f7f8 fc98 	bl	800b4e6 <lwip_htonl>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	68dc      	ldr	r4, [r3, #12]
 8012bc2:	4610      	mov	r0, r2
 8012bc4:	f7f8 fc7a 	bl	800b4bc <lwip_htons>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012bd4:	441a      	add	r2, r3
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	3314      	adds	r3, #20
 8012be0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	7a9b      	ldrb	r3, [r3, #10]
 8012be6:	f003 0301 	and.w	r3, r3, #1
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d015      	beq.n	8012c1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	3304      	adds	r3, #4
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	6879      	ldr	r1, [r7, #4]
 8012bf6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012bfa:	f7fc fa33 	bl	800f064 <tcp_eff_send_mss_netif>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012c02:	8b7b      	ldrh	r3, [r7, #26]
 8012c04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f8 fc6c 	bl	800b4e6 <lwip_htonl>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	3304      	adds	r3, #4
 8012c18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	da02      	bge.n	8012c2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	2200      	movs	r2, #0
 8012c28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d10c      	bne.n	8012c4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012c32:	4b35      	ldr	r3, [pc, #212]	; (8012d08 <tcp_output_segment+0x1b8>)
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f8 fc50 	bl	800b4e6 <lwip_htonl>
 8012c46:	4602      	mov	r2, r0
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	68da      	ldr	r2, [r3, #12]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	1ad3      	subs	r3, r2, r3
 8012c58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	8959      	ldrh	r1, [r3, #10]
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	8b3a      	ldrh	r2, [r7, #24]
 8012c66:	1a8a      	subs	r2, r1, r2
 8012c68:	b292      	uxth	r2, r2
 8012c6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	8919      	ldrh	r1, [r3, #8]
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	8b3a      	ldrh	r2, [r7, #24]
 8012c78:	1a8a      	subs	r2, r1, r2
 8012c7a:	b292      	uxth	r2, r2
 8012c7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	68d2      	ldr	r2, [r2, #12]
 8012c86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	741a      	strb	r2, [r3, #16]
 8012c90:	2200      	movs	r2, #0
 8012c92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	68da      	ldr	r2, [r3, #12]
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	7a9b      	ldrb	r3, [r3, #10]
 8012c9c:	f003 0301 	and.w	r3, r3, #1
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d001      	beq.n	8012ca8 <tcp_output_segment+0x158>
 8012ca4:	2318      	movs	r3, #24
 8012ca6:	e000      	b.n	8012caa <tcp_output_segment+0x15a>
 8012ca8:	2314      	movs	r3, #20
 8012caa:	4413      	add	r3, r2
 8012cac:	69fa      	ldr	r2, [r7, #28]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d006      	beq.n	8012cc0 <tcp_output_segment+0x170>
 8012cb2:	4b10      	ldr	r3, [pc, #64]	; (8012cf4 <tcp_output_segment+0x1a4>)
 8012cb4:	f240 621c 	movw	r2, #1564	; 0x61c
 8012cb8:	4914      	ldr	r1, [pc, #80]	; (8012d0c <tcp_output_segment+0x1bc>)
 8012cba:	4810      	ldr	r0, [pc, #64]	; (8012cfc <tcp_output_segment+0x1ac>)
 8012cbc:	f005 ff36 	bl	8018b2c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	6858      	ldr	r0, [r3, #4]
 8012cc4:	68b9      	ldr	r1, [r7, #8]
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	1d1c      	adds	r4, r3, #4
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	7add      	ldrb	r5, [r3, #11]
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	7a9b      	ldrb	r3, [r3, #10]
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	9202      	str	r2, [sp, #8]
 8012cd6:	2206      	movs	r2, #6
 8012cd8:	9201      	str	r2, [sp, #4]
 8012cda:	9300      	str	r3, [sp, #0]
 8012cdc:	462b      	mov	r3, r5
 8012cde:	4622      	mov	r2, r4
 8012ce0:	f004 fc26 	bl	8017530 <ip4_output_if>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8012cf4:	0801c458 	.word	0x0801c458
 8012cf8:	0801ca1c 	.word	0x0801ca1c
 8012cfc:	0801c4ac 	.word	0x0801c4ac
 8012d00:	0801ca3c 	.word	0x0801ca3c
 8012d04:	0801ca5c 	.word	0x0801ca5c
 8012d08:	200111a0 	.word	0x200111a0
 8012d0c:	0801ca80 	.word	0x0801ca80

08012d10 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012d10:	b5b0      	push	{r4, r5, r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d106      	bne.n	8012d2c <tcp_rexmit_rto_prepare+0x1c>
 8012d1e:	4b31      	ldr	r3, [pc, #196]	; (8012de4 <tcp_rexmit_rto_prepare+0xd4>)
 8012d20:	f240 6263 	movw	r2, #1635	; 0x663
 8012d24:	4930      	ldr	r1, [pc, #192]	; (8012de8 <tcp_rexmit_rto_prepare+0xd8>)
 8012d26:	4831      	ldr	r0, [pc, #196]	; (8012dec <tcp_rexmit_rto_prepare+0xdc>)
 8012d28:	f005 ff00 	bl	8018b2c <iprintf>

  if (pcb->unacked == NULL) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d102      	bne.n	8012d3a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012d34:	f06f 0305 	mvn.w	r3, #5
 8012d38:	e050      	b.n	8012ddc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3e:	60fb      	str	r3, [r7, #12]
 8012d40:	e00b      	b.n	8012d5a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f7ff fee4 	bl	8012b10 <tcp_output_segment_busy>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d002      	beq.n	8012d54 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012d4e:	f06f 0305 	mvn.w	r3, #5
 8012d52:	e043      	b.n	8012ddc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	60fb      	str	r3, [r7, #12]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d1ef      	bne.n	8012d42 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	f7ff fed4 	bl	8012b10 <tcp_output_segment_busy>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d002      	beq.n	8012d74 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012d6e:	f06f 0305 	mvn.w	r3, #5
 8012d72:	e033      	b.n	8012ddc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8b5b      	ldrh	r3, [r3, #26]
 8012d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7f8 fba1 	bl	800b4e6 <lwip_htonl>
 8012da4:	4604      	mov	r4, r0
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	891b      	ldrh	r3, [r3, #8]
 8012daa:	461d      	mov	r5, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	899b      	ldrh	r3, [r3, #12]
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7f8 fb81 	bl	800b4bc <lwip_htons>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	f003 0303 	and.w	r3, r3, #3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <tcp_rexmit_rto_prepare+0xba>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e000      	b.n	8012dcc <tcp_rexmit_rto_prepare+0xbc>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	442b      	add	r3, r5
 8012dce:	18e2      	adds	r2, r4, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bdb0      	pop	{r4, r5, r7, pc}
 8012de4:	0801c458 	.word	0x0801c458
 8012de8:	0801ca94 	.word	0x0801ca94
 8012dec:	0801c4ac 	.word	0x0801c4ac

08012df0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_rexmit_rto_commit+0x1c>
 8012dfe:	4b0d      	ldr	r3, [pc, #52]	; (8012e34 <tcp_rexmit_rto_commit+0x44>)
 8012e00:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e04:	490c      	ldr	r1, [pc, #48]	; (8012e38 <tcp_rexmit_rto_commit+0x48>)
 8012e06:	480d      	ldr	r0, [pc, #52]	; (8012e3c <tcp_rexmit_rto_commit+0x4c>)
 8012e08:	f005 fe90 	bl	8018b2c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e12:	2bff      	cmp	r3, #255	; 0xff
 8012e14:	d007      	beq.n	8012e26 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	b2da      	uxtb	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7ff fc7e 	bl	8012728 <tcp_output>
}
 8012e2c:	bf00      	nop
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	0801c458 	.word	0x0801c458
 8012e38:	0801cab8 	.word	0x0801cab8
 8012e3c:	0801c4ac 	.word	0x0801c4ac

08012e40 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d106      	bne.n	8012e5c <tcp_rexmit_rto+0x1c>
 8012e4e:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <tcp_rexmit_rto+0x38>)
 8012e50:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012e54:	4909      	ldr	r1, [pc, #36]	; (8012e7c <tcp_rexmit_rto+0x3c>)
 8012e56:	480a      	ldr	r0, [pc, #40]	; (8012e80 <tcp_rexmit_rto+0x40>)
 8012e58:	f005 fe68 	bl	8018b2c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7ff ff57 	bl	8012d10 <tcp_rexmit_rto_prepare>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d102      	bne.n	8012e6e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7ff ffc1 	bl	8012df0 <tcp_rexmit_rto_commit>
  }
}
 8012e6e:	bf00      	nop
 8012e70:	3708      	adds	r7, #8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	0801c458 	.word	0x0801c458
 8012e7c:	0801cadc 	.word	0x0801cadc
 8012e80:	0801c4ac 	.word	0x0801c4ac

08012e84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e84:	b590      	push	{r4, r7, lr}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <tcp_rexmit+0x1c>
 8012e92:	4b2f      	ldr	r3, [pc, #188]	; (8012f50 <tcp_rexmit+0xcc>)
 8012e94:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012e98:	492e      	ldr	r1, [pc, #184]	; (8012f54 <tcp_rexmit+0xd0>)
 8012e9a:	482f      	ldr	r0, [pc, #188]	; (8012f58 <tcp_rexmit+0xd4>)
 8012e9c:	f005 fe46 	bl	8018b2c <iprintf>

  if (pcb->unacked == NULL) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d102      	bne.n	8012eae <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012ea8:	f06f 0305 	mvn.w	r3, #5
 8012eac:	e04c      	b.n	8012f48 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012eb2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012eb4:	68b8      	ldr	r0, [r7, #8]
 8012eb6:	f7ff fe2b 	bl	8012b10 <tcp_output_segment_busy>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d002      	beq.n	8012ec6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012ec0:	f06f 0305 	mvn.w	r3, #5
 8012ec4:	e040      	b.n	8012f48 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	681a      	ldr	r2, [r3, #0]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	336c      	adds	r3, #108	; 0x6c
 8012ed2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ed4:	e002      	b.n	8012edc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d011      	beq.n	8012f08 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f8 fafa 	bl	800b4e6 <lwip_htonl>
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f8 faf3 	bl	800b4e6 <lwip_htonl>
 8012f00:	4603      	mov	r3, r0
 8012f02:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	dbe6      	blt.n	8012ed6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	68ba      	ldr	r2, [r7, #8]
 8012f14:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d103      	bne.n	8012f26 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2200      	movs	r2, #0
 8012f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f2c:	2bff      	cmp	r3, #255	; 0xff
 8012f2e:	d007      	beq.n	8012f40 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f36:	3301      	adds	r3, #1
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012f46:	2300      	movs	r3, #0
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3714      	adds	r7, #20
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd90      	pop	{r4, r7, pc}
 8012f50:	0801c458 	.word	0x0801c458
 8012f54:	0801caf8 	.word	0x0801caf8
 8012f58:	0801c4ac 	.word	0x0801c4ac

08012f5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d106      	bne.n	8012f78 <tcp_rexmit_fast+0x1c>
 8012f6a:	4b2a      	ldr	r3, [pc, #168]	; (8013014 <tcp_rexmit_fast+0xb8>)
 8012f6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012f70:	4929      	ldr	r1, [pc, #164]	; (8013018 <tcp_rexmit_fast+0xbc>)
 8012f72:	482a      	ldr	r0, [pc, #168]	; (801301c <tcp_rexmit_fast+0xc0>)
 8012f74:	f005 fdda 	bl	8018b2c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d044      	beq.n	801300a <tcp_rexmit_fast+0xae>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	8b5b      	ldrh	r3, [r3, #26]
 8012f84:	f003 0304 	and.w	r3, r3, #4
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d13e      	bne.n	801300a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ff ff79 	bl	8012e84 <tcp_rexmit>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d138      	bne.n	801300a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012fa4:	4293      	cmp	r3, r2
 8012fa6:	bf28      	it	cs
 8012fa8:	4613      	movcs	r3, r2
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	0fda      	lsrs	r2, r3, #31
 8012fae:	4413      	add	r3, r2
 8012fb0:	105b      	asrs	r3, r3, #1
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fc6:	005b      	lsls	r3, r3, #1
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d206      	bcs.n	8012fda <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd0:	005b      	lsls	r3, r3, #1
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	0049      	lsls	r1, r1, #1
 8012fe8:	440b      	add	r3, r1
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	4413      	add	r3, r2
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	8b5b      	ldrh	r3, [r3, #26]
 8012ffa:	f043 0304 	orr.w	r3, r3, #4
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2200      	movs	r2, #0
 8013008:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801300a:	bf00      	nop
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	0801c458 	.word	0x0801c458
 8013018:	0801cb10 	.word	0x0801cb10
 801301c:	0801c4ac 	.word	0x0801c4ac

08013020 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b086      	sub	sp, #24
 8013024:	af00      	add	r7, sp, #0
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	607b      	str	r3, [r7, #4]
 801302a:	460b      	mov	r3, r1
 801302c:	817b      	strh	r3, [r7, #10]
 801302e:	4613      	mov	r3, r2
 8013030:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013032:	897a      	ldrh	r2, [r7, #10]
 8013034:	893b      	ldrh	r3, [r7, #8]
 8013036:	4413      	add	r3, r2
 8013038:	b29b      	uxth	r3, r3
 801303a:	3314      	adds	r3, #20
 801303c:	b29b      	uxth	r3, r3
 801303e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013042:	4619      	mov	r1, r3
 8013044:	2022      	movs	r0, #34	; 0x22
 8013046:	f7f9 fb89 	bl	800c75c <pbuf_alloc>
 801304a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d04d      	beq.n	80130ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013052:	897b      	ldrh	r3, [r7, #10]
 8013054:	3313      	adds	r3, #19
 8013056:	697a      	ldr	r2, [r7, #20]
 8013058:	8952      	ldrh	r2, [r2, #10]
 801305a:	4293      	cmp	r3, r2
 801305c:	db06      	blt.n	801306c <tcp_output_alloc_header_common+0x4c>
 801305e:	4b26      	ldr	r3, [pc, #152]	; (80130f8 <tcp_output_alloc_header_common+0xd8>)
 8013060:	f240 7223 	movw	r2, #1827	; 0x723
 8013064:	4925      	ldr	r1, [pc, #148]	; (80130fc <tcp_output_alloc_header_common+0xdc>)
 8013066:	4826      	ldr	r0, [pc, #152]	; (8013100 <tcp_output_alloc_header_common+0xe0>)
 8013068:	f005 fd60 	bl	8018b2c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013072:	8c3b      	ldrh	r3, [r7, #32]
 8013074:	4618      	mov	r0, r3
 8013076:	f7f8 fa21 	bl	800b4bc <lwip_htons>
 801307a:	4603      	mov	r3, r0
 801307c:	461a      	mov	r2, r3
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013084:	4618      	mov	r0, r3
 8013086:	f7f8 fa19 	bl	800b4bc <lwip_htons>
 801308a:	4603      	mov	r3, r0
 801308c:	461a      	mov	r2, r3
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f7f8 fa24 	bl	800b4e6 <lwip_htonl>
 801309e:	4602      	mov	r2, r0
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80130a4:	897b      	ldrh	r3, [r7, #10]
 80130a6:	089b      	lsrs	r3, r3, #2
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	3305      	adds	r3, #5
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	031b      	lsls	r3, r3, #12
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	4313      	orrs	r3, r2
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f8 f9fd 	bl	800b4bc <lwip_htons>
 80130c2:	4603      	mov	r3, r0
 80130c4:	461a      	mov	r2, r3
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80130ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7f8 f9f5 	bl	800b4bc <lwip_htons>
 80130d2:	4603      	mov	r3, r0
 80130d4:	461a      	mov	r2, r3
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	2200      	movs	r2, #0
 80130de:	741a      	strb	r2, [r3, #16]
 80130e0:	2200      	movs	r2, #0
 80130e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	2200      	movs	r2, #0
 80130e8:	749a      	strb	r2, [r3, #18]
 80130ea:	2200      	movs	r2, #0
 80130ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80130ee:	697b      	ldr	r3, [r7, #20]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3718      	adds	r7, #24
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	0801c458 	.word	0x0801c458
 80130fc:	0801cb30 	.word	0x0801cb30
 8013100:	0801c4ac 	.word	0x0801c4ac

08013104 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013104:	b5b0      	push	{r4, r5, r7, lr}
 8013106:	b08a      	sub	sp, #40	; 0x28
 8013108:	af04      	add	r7, sp, #16
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	607b      	str	r3, [r7, #4]
 801310e:	460b      	mov	r3, r1
 8013110:	817b      	strh	r3, [r7, #10]
 8013112:	4613      	mov	r3, r2
 8013114:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d106      	bne.n	801312a <tcp_output_alloc_header+0x26>
 801311c:	4b15      	ldr	r3, [pc, #84]	; (8013174 <tcp_output_alloc_header+0x70>)
 801311e:	f240 7242 	movw	r2, #1858	; 0x742
 8013122:	4915      	ldr	r1, [pc, #84]	; (8013178 <tcp_output_alloc_header+0x74>)
 8013124:	4815      	ldr	r0, [pc, #84]	; (801317c <tcp_output_alloc_header+0x78>)
 8013126:	f005 fd01 	bl	8018b2c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	8adb      	ldrh	r3, [r3, #22]
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	8b12      	ldrh	r2, [r2, #24]
 8013136:	68f9      	ldr	r1, [r7, #12]
 8013138:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801313a:	893d      	ldrh	r5, [r7, #8]
 801313c:	897c      	ldrh	r4, [r7, #10]
 801313e:	9103      	str	r1, [sp, #12]
 8013140:	2110      	movs	r1, #16
 8013142:	9102      	str	r1, [sp, #8]
 8013144:	9201      	str	r2, [sp, #4]
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	462a      	mov	r2, r5
 801314c:	4621      	mov	r1, r4
 801314e:	f7ff ff67 	bl	8013020 <tcp_output_alloc_header_common>
 8013152:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d006      	beq.n	8013168 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801315e:	68fa      	ldr	r2, [r7, #12]
 8013160:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013162:	441a      	add	r2, r3
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013168:	697b      	ldr	r3, [r7, #20]
}
 801316a:	4618      	mov	r0, r3
 801316c:	3718      	adds	r7, #24
 801316e:	46bd      	mov	sp, r7
 8013170:	bdb0      	pop	{r4, r5, r7, pc}
 8013172:	bf00      	nop
 8013174:	0801c458 	.word	0x0801c458
 8013178:	0801cb60 	.word	0x0801cb60
 801317c:	0801c4ac 	.word	0x0801c4ac

08013180 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b088      	sub	sp, #32
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	4611      	mov	r1, r2
 801318c:	461a      	mov	r2, r3
 801318e:	460b      	mov	r3, r1
 8013190:	71fb      	strb	r3, [r7, #7]
 8013192:	4613      	mov	r3, r2
 8013194:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013196:	2300      	movs	r3, #0
 8013198:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d106      	bne.n	80131ae <tcp_output_fill_options+0x2e>
 80131a0:	4b12      	ldr	r3, [pc, #72]	; (80131ec <tcp_output_fill_options+0x6c>)
 80131a2:	f240 7256 	movw	r2, #1878	; 0x756
 80131a6:	4912      	ldr	r1, [pc, #72]	; (80131f0 <tcp_output_fill_options+0x70>)
 80131a8:	4812      	ldr	r0, [pc, #72]	; (80131f4 <tcp_output_fill_options+0x74>)
 80131aa:	f005 fcbf 	bl	8018b2c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	3314      	adds	r3, #20
 80131b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80131ba:	8bfb      	ldrh	r3, [r7, #30]
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	461a      	mov	r2, r3
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	f003 0304 	and.w	r3, r3, #4
 80131c8:	4413      	add	r3, r2
 80131ca:	3314      	adds	r3, #20
 80131cc:	69ba      	ldr	r2, [r7, #24]
 80131ce:	4413      	add	r3, r2
 80131d0:	697a      	ldr	r2, [r7, #20]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d006      	beq.n	80131e4 <tcp_output_fill_options+0x64>
 80131d6:	4b05      	ldr	r3, [pc, #20]	; (80131ec <tcp_output_fill_options+0x6c>)
 80131d8:	f240 7275 	movw	r2, #1909	; 0x775
 80131dc:	4906      	ldr	r1, [pc, #24]	; (80131f8 <tcp_output_fill_options+0x78>)
 80131de:	4805      	ldr	r0, [pc, #20]	; (80131f4 <tcp_output_fill_options+0x74>)
 80131e0:	f005 fca4 	bl	8018b2c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80131e4:	bf00      	nop
 80131e6:	3720      	adds	r7, #32
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	0801c458 	.word	0x0801c458
 80131f0:	0801cb88 	.word	0x0801cb88
 80131f4:	0801c4ac 	.word	0x0801c4ac
 80131f8:	0801ca80 	.word	0x0801ca80

080131fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b08a      	sub	sp, #40	; 0x28
 8013200:	af04      	add	r7, sp, #16
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <tcp_output_control_segment+0x22>
 8013210:	4b1c      	ldr	r3, [pc, #112]	; (8013284 <tcp_output_control_segment+0x88>)
 8013212:	f240 7287 	movw	r2, #1927	; 0x787
 8013216:	491c      	ldr	r1, [pc, #112]	; (8013288 <tcp_output_control_segment+0x8c>)
 8013218:	481c      	ldr	r0, [pc, #112]	; (801328c <tcp_output_control_segment+0x90>)
 801321a:	f005 fc87 	bl	8018b2c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801321e:	683a      	ldr	r2, [r7, #0]
 8013220:	6879      	ldr	r1, [r7, #4]
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	f7fe fae8 	bl	80117f8 <tcp_route>
 8013228:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013230:	23fc      	movs	r3, #252	; 0xfc
 8013232:	75fb      	strb	r3, [r7, #23]
 8013234:	e01c      	b.n	8013270 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d006      	beq.n	801324a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	7adb      	ldrb	r3, [r3, #11]
 8013240:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	7a9b      	ldrb	r3, [r3, #10]
 8013246:	757b      	strb	r3, [r7, #21]
 8013248:	e003      	b.n	8013252 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801324a:	23ff      	movs	r3, #255	; 0xff
 801324c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013252:	7dba      	ldrb	r2, [r7, #22]
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	9302      	str	r3, [sp, #8]
 8013258:	2306      	movs	r3, #6
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	7d7b      	ldrb	r3, [r7, #21]
 801325e:	9300      	str	r3, [sp, #0]
 8013260:	4613      	mov	r3, r2
 8013262:	683a      	ldr	r2, [r7, #0]
 8013264:	6879      	ldr	r1, [r7, #4]
 8013266:	68b8      	ldr	r0, [r7, #8]
 8013268:	f004 f962 	bl	8017530 <ip4_output_if>
 801326c:	4603      	mov	r3, r0
 801326e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013270:	68b8      	ldr	r0, [r7, #8]
 8013272:	f7f9 fd57 	bl	800cd24 <pbuf_free>
  return err;
 8013276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801327a:	4618      	mov	r0, r3
 801327c:	3718      	adds	r7, #24
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	0801c458 	.word	0x0801c458
 8013288:	0801cbb0 	.word	0x0801cbb0
 801328c:	0801c4ac 	.word	0x0801c4ac

08013290 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b08b      	sub	sp, #44	; 0x2c
 8013294:	af04      	add	r7, sp, #16
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d106      	bne.n	80132b2 <tcp_rst+0x22>
 80132a4:	4b1f      	ldr	r3, [pc, #124]	; (8013324 <tcp_rst+0x94>)
 80132a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80132aa:	491f      	ldr	r1, [pc, #124]	; (8013328 <tcp_rst+0x98>)
 80132ac:	481f      	ldr	r0, [pc, #124]	; (801332c <tcp_rst+0x9c>)
 80132ae:	f005 fc3d 	bl	8018b2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80132b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d106      	bne.n	80132c6 <tcp_rst+0x36>
 80132b8:	4b1a      	ldr	r3, [pc, #104]	; (8013324 <tcp_rst+0x94>)
 80132ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80132be:	491c      	ldr	r1, [pc, #112]	; (8013330 <tcp_rst+0xa0>)
 80132c0:	481a      	ldr	r0, [pc, #104]	; (801332c <tcp_rst+0x9c>)
 80132c2:	f005 fc33 	bl	8018b2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132c6:	2300      	movs	r3, #0
 80132c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80132ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80132ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80132d0:	7dfb      	ldrb	r3, [r7, #23]
 80132d2:	b29c      	uxth	r4, r3
 80132d4:	68b8      	ldr	r0, [r7, #8]
 80132d6:	f7f8 f906 	bl	800b4e6 <lwip_htonl>
 80132da:	4602      	mov	r2, r0
 80132dc:	8abb      	ldrh	r3, [r7, #20]
 80132de:	9303      	str	r3, [sp, #12]
 80132e0:	2314      	movs	r3, #20
 80132e2:	9302      	str	r3, [sp, #8]
 80132e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80132e6:	9301      	str	r3, [sp, #4]
 80132e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	4613      	mov	r3, r2
 80132ee:	2200      	movs	r2, #0
 80132f0:	4621      	mov	r1, r4
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f7ff fe94 	bl	8013020 <tcp_output_alloc_header_common>
 80132f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00c      	beq.n	801331a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013300:	7dfb      	ldrb	r3, [r7, #23]
 8013302:	2200      	movs	r2, #0
 8013304:	6939      	ldr	r1, [r7, #16]
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f7ff ff3a 	bl	8013180 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330e:	683a      	ldr	r2, [r7, #0]
 8013310:	6939      	ldr	r1, [r7, #16]
 8013312:	68f8      	ldr	r0, [r7, #12]
 8013314:	f7ff ff72 	bl	80131fc <tcp_output_control_segment>
 8013318:	e000      	b.n	801331c <tcp_rst+0x8c>
    return;
 801331a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801331c:	371c      	adds	r7, #28
 801331e:	46bd      	mov	sp, r7
 8013320:	bd90      	pop	{r4, r7, pc}
 8013322:	bf00      	nop
 8013324:	0801c458 	.word	0x0801c458
 8013328:	0801cbdc 	.word	0x0801cbdc
 801332c:	0801c4ac 	.word	0x0801c4ac
 8013330:	0801cbf8 	.word	0x0801cbf8

08013334 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013334:	b590      	push	{r4, r7, lr}
 8013336:	b087      	sub	sp, #28
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801333c:	2300      	movs	r3, #0
 801333e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013340:	2300      	movs	r3, #0
 8013342:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d106      	bne.n	8013358 <tcp_send_empty_ack+0x24>
 801334a:	4b28      	ldr	r3, [pc, #160]	; (80133ec <tcp_send_empty_ack+0xb8>)
 801334c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013350:	4927      	ldr	r1, [pc, #156]	; (80133f0 <tcp_send_empty_ack+0xbc>)
 8013352:	4828      	ldr	r0, [pc, #160]	; (80133f4 <tcp_send_empty_ack+0xc0>)
 8013354:	f005 fbea 	bl	8018b2c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013358:	7dfb      	ldrb	r3, [r7, #23]
 801335a:	009b      	lsls	r3, r3, #2
 801335c:	b2db      	uxtb	r3, r3
 801335e:	f003 0304 	and.w	r3, r3, #4
 8013362:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013364:	7d7b      	ldrb	r3, [r7, #21]
 8013366:	b29c      	uxth	r4, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801336c:	4618      	mov	r0, r3
 801336e:	f7f8 f8ba 	bl	800b4e6 <lwip_htonl>
 8013372:	4603      	mov	r3, r0
 8013374:	2200      	movs	r2, #0
 8013376:	4621      	mov	r1, r4
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7ff fec3 	bl	8013104 <tcp_output_alloc_header>
 801337e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d109      	bne.n	801339a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	8b5b      	ldrh	r3, [r3, #26]
 801338a:	f043 0303 	orr.w	r3, r3, #3
 801338e:	b29a      	uxth	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013394:	f06f 0301 	mvn.w	r3, #1
 8013398:	e023      	b.n	80133e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801339a:	7dbb      	ldrb	r3, [r7, #22]
 801339c:	7dfa      	ldrb	r2, [r7, #23]
 801339e:	6939      	ldr	r1, [r7, #16]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff feed 	bl	8013180 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3304      	adds	r3, #4
 80133ac:	6939      	ldr	r1, [r7, #16]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff ff24 	bl	80131fc <tcp_output_control_segment>
 80133b4:	4603      	mov	r3, r0
 80133b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80133b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d007      	beq.n	80133d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	8b5b      	ldrh	r3, [r3, #26]
 80133c4:	f043 0303 	orr.w	r3, r3, #3
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	835a      	strh	r2, [r3, #26]
 80133ce:	e006      	b.n	80133de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f023 0303 	bic.w	r3, r3, #3
 80133d8:	b29a      	uxth	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80133de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133e2:	4618      	mov	r0, r3
 80133e4:	371c      	adds	r7, #28
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd90      	pop	{r4, r7, pc}
 80133ea:	bf00      	nop
 80133ec:	0801c458 	.word	0x0801c458
 80133f0:	0801cc14 	.word	0x0801cc14
 80133f4:	0801c4ac 	.word	0x0801c4ac

080133f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80133f8:	b590      	push	{r4, r7, lr}
 80133fa:	b087      	sub	sp, #28
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013400:	2300      	movs	r3, #0
 8013402:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d106      	bne.n	8013418 <tcp_keepalive+0x20>
 801340a:	4b18      	ldr	r3, [pc, #96]	; (801346c <tcp_keepalive+0x74>)
 801340c:	f640 0224 	movw	r2, #2084	; 0x824
 8013410:	4917      	ldr	r1, [pc, #92]	; (8013470 <tcp_keepalive+0x78>)
 8013412:	4818      	ldr	r0, [pc, #96]	; (8013474 <tcp_keepalive+0x7c>)
 8013414:	f005 fb8a 	bl	8018b2c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013418:	7dfb      	ldrb	r3, [r7, #23]
 801341a:	b29c      	uxth	r4, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013420:	3b01      	subs	r3, #1
 8013422:	4618      	mov	r0, r3
 8013424:	f7f8 f85f 	bl	800b4e6 <lwip_htonl>
 8013428:	4603      	mov	r3, r0
 801342a:	2200      	movs	r2, #0
 801342c:	4621      	mov	r1, r4
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f7ff fe68 	bl	8013104 <tcp_output_alloc_header>
 8013434:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d102      	bne.n	8013442 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801343c:	f04f 33ff 	mov.w	r3, #4294967295
 8013440:	e010      	b.n	8013464 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013442:	7dfb      	ldrb	r3, [r7, #23]
 8013444:	2200      	movs	r2, #0
 8013446:	6939      	ldr	r1, [r7, #16]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7ff fe99 	bl	8013180 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	3304      	adds	r3, #4
 8013454:	6939      	ldr	r1, [r7, #16]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7ff fed0 	bl	80131fc <tcp_output_control_segment>
 801345c:	4603      	mov	r3, r0
 801345e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013464:	4618      	mov	r0, r3
 8013466:	371c      	adds	r7, #28
 8013468:	46bd      	mov	sp, r7
 801346a:	bd90      	pop	{r4, r7, pc}
 801346c:	0801c458 	.word	0x0801c458
 8013470:	0801cc34 	.word	0x0801cc34
 8013474:	0801c4ac 	.word	0x0801c4ac

08013478 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013478:	b590      	push	{r4, r7, lr}
 801347a:	b08b      	sub	sp, #44	; 0x2c
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013480:	2300      	movs	r3, #0
 8013482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d106      	bne.n	801349a <tcp_zero_window_probe+0x22>
 801348c:	4b4c      	ldr	r3, [pc, #304]	; (80135c0 <tcp_zero_window_probe+0x148>)
 801348e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013492:	494c      	ldr	r1, [pc, #304]	; (80135c4 <tcp_zero_window_probe+0x14c>)
 8013494:	484c      	ldr	r0, [pc, #304]	; (80135c8 <tcp_zero_window_probe+0x150>)
 8013496:	f005 fb49 	bl	8018b2c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801349e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80134a0:	6a3b      	ldr	r3, [r7, #32]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d101      	bne.n	80134aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80134a6:	2300      	movs	r3, #0
 80134a8:	e086      	b.n	80135b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80134b0:	2bff      	cmp	r3, #255	; 0xff
 80134b2:	d007      	beq.n	80134c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80134ba:	3301      	adds	r3, #1
 80134bc:	b2da      	uxtb	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80134c4:	6a3b      	ldr	r3, [r7, #32]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	899b      	ldrh	r3, [r3, #12]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f7 fff5 	bl	800b4bc <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d005      	beq.n	80134ea <tcp_zero_window_probe+0x72>
 80134de:	6a3b      	ldr	r3, [r7, #32]
 80134e0:	891b      	ldrh	r3, [r3, #8]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d101      	bne.n	80134ea <tcp_zero_window_probe+0x72>
 80134e6:	2301      	movs	r3, #1
 80134e8:	e000      	b.n	80134ec <tcp_zero_window_probe+0x74>
 80134ea:	2300      	movs	r3, #0
 80134ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80134ee:	7ffb      	ldrb	r3, [r7, #31]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	bf0c      	ite	eq
 80134f4:	2301      	moveq	r3, #1
 80134f6:	2300      	movne	r3, #0
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80134fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013500:	b299      	uxth	r1, r3
 8013502:	6a3b      	ldr	r3, [r7, #32]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	8bba      	ldrh	r2, [r7, #28]
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7ff fdfa 	bl	8013104 <tcp_output_alloc_header>
 8013510:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013518:	f04f 33ff 	mov.w	r3, #4294967295
 801351c:	e04c      	b.n	80135b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013524:	7ffb      	ldrb	r3, [r7, #31]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d011      	beq.n	801354e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	899b      	ldrh	r3, [r3, #12]
 801352e:	b29b      	uxth	r3, r3
 8013530:	b21b      	sxth	r3, r3
 8013532:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013536:	b21c      	sxth	r4, r3
 8013538:	2011      	movs	r0, #17
 801353a:	f7f7 ffbf 	bl	800b4bc <lwip_htons>
 801353e:	4603      	mov	r3, r0
 8013540:	b21b      	sxth	r3, r3
 8013542:	4323      	orrs	r3, r4
 8013544:	b21b      	sxth	r3, r3
 8013546:	b29a      	uxth	r2, r3
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	819a      	strh	r2, [r3, #12]
 801354c:	e010      	b.n	8013570 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	3314      	adds	r3, #20
 8013554:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013556:	6a3b      	ldr	r3, [r7, #32]
 8013558:	6858      	ldr	r0, [r3, #4]
 801355a:	6a3b      	ldr	r3, [r7, #32]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	891a      	ldrh	r2, [r3, #8]
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	891b      	ldrh	r3, [r3, #8]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	b29b      	uxth	r3, r3
 8013568:	2201      	movs	r2, #1
 801356a:	6939      	ldr	r1, [r7, #16]
 801356c:	f7f9 fde0 	bl	800d130 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013570:	6a3b      	ldr	r3, [r7, #32]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	f7f7 ffb5 	bl	800b4e6 <lwip_htonl>
 801357c:	4603      	mov	r3, r0
 801357e:	3301      	adds	r3, #1
 8013580:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	2b00      	cmp	r3, #0
 801358c:	da02      	bge.n	8013594 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013598:	2200      	movs	r2, #0
 801359a:	69b9      	ldr	r1, [r7, #24]
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ff fdef 	bl	8013180 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	3304      	adds	r3, #4
 80135a8:	69b9      	ldr	r1, [r7, #24]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7ff fe26 	bl	80131fc <tcp_output_control_segment>
 80135b0:	4603      	mov	r3, r0
 80135b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80135b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	372c      	adds	r7, #44	; 0x2c
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd90      	pop	{r4, r7, pc}
 80135c0:	0801c458 	.word	0x0801c458
 80135c4:	0801cc50 	.word	0x0801cc50
 80135c8:	0801c4ac 	.word	0x0801c4ac

080135cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80135d4:	f7f9 fe9a 	bl	800d30c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80135d8:	4b0a      	ldr	r3, [pc, #40]	; (8013604 <tcpip_tcp_timer+0x38>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d103      	bne.n	80135e8 <tcpip_tcp_timer+0x1c>
 80135e0:	4b09      	ldr	r3, [pc, #36]	; (8013608 <tcpip_tcp_timer+0x3c>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d005      	beq.n	80135f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80135e8:	2200      	movs	r2, #0
 80135ea:	4908      	ldr	r1, [pc, #32]	; (801360c <tcpip_tcp_timer+0x40>)
 80135ec:	20fa      	movs	r0, #250	; 0xfa
 80135ee:	f000 f8f3 	bl	80137d8 <sys_timeout>
 80135f2:	e003      	b.n	80135fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80135f4:	4b06      	ldr	r3, [pc, #24]	; (8013610 <tcpip_tcp_timer+0x44>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	601a      	str	r2, [r3, #0]
  }
}
 80135fa:	bf00      	nop
 80135fc:	bf00      	nop
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	200111ac 	.word	0x200111ac
 8013608:	200111b0 	.word	0x200111b0
 801360c:	080135cd 	.word	0x080135cd
 8013610:	200111f8 	.word	0x200111f8

08013614 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013618:	4b0a      	ldr	r3, [pc, #40]	; (8013644 <tcp_timer_needed+0x30>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10f      	bne.n	8013640 <tcp_timer_needed+0x2c>
 8013620:	4b09      	ldr	r3, [pc, #36]	; (8013648 <tcp_timer_needed+0x34>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d103      	bne.n	8013630 <tcp_timer_needed+0x1c>
 8013628:	4b08      	ldr	r3, [pc, #32]	; (801364c <tcp_timer_needed+0x38>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d007      	beq.n	8013640 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013630:	4b04      	ldr	r3, [pc, #16]	; (8013644 <tcp_timer_needed+0x30>)
 8013632:	2201      	movs	r2, #1
 8013634:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013636:	2200      	movs	r2, #0
 8013638:	4905      	ldr	r1, [pc, #20]	; (8013650 <tcp_timer_needed+0x3c>)
 801363a:	20fa      	movs	r0, #250	; 0xfa
 801363c:	f000 f8cc 	bl	80137d8 <sys_timeout>
  }
}
 8013640:	bf00      	nop
 8013642:	bd80      	pop	{r7, pc}
 8013644:	200111f8 	.word	0x200111f8
 8013648:	200111ac 	.word	0x200111ac
 801364c:	200111b0 	.word	0x200111b0
 8013650:	080135cd 	.word	0x080135cd

08013654 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b086      	sub	sp, #24
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013660:	200a      	movs	r0, #10
 8013662:	f7f8 fc39 	bl	800bed8 <memp_malloc>
 8013666:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d109      	bne.n	8013682 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d151      	bne.n	8013718 <sys_timeout_abs+0xc4>
 8013674:	4b2a      	ldr	r3, [pc, #168]	; (8013720 <sys_timeout_abs+0xcc>)
 8013676:	22be      	movs	r2, #190	; 0xbe
 8013678:	492a      	ldr	r1, [pc, #168]	; (8013724 <sys_timeout_abs+0xd0>)
 801367a:	482b      	ldr	r0, [pc, #172]	; (8013728 <sys_timeout_abs+0xd4>)
 801367c:	f005 fa56 	bl	8018b2c <iprintf>
    return;
 8013680:	e04a      	b.n	8013718 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	2200      	movs	r2, #0
 8013686:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801369a:	4b24      	ldr	r3, [pc, #144]	; (801372c <sys_timeout_abs+0xd8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d103      	bne.n	80136aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80136a2:	4a22      	ldr	r2, [pc, #136]	; (801372c <sys_timeout_abs+0xd8>)
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	6013      	str	r3, [r2, #0]
    return;
 80136a8:	e037      	b.n	801371a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	685a      	ldr	r2, [r3, #4]
 80136ae:	4b1f      	ldr	r3, [pc, #124]	; (801372c <sys_timeout_abs+0xd8>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	0fdb      	lsrs	r3, r3, #31
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d007      	beq.n	80136d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80136c2:	4b1a      	ldr	r3, [pc, #104]	; (801372c <sys_timeout_abs+0xd8>)
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80136ca:	4a18      	ldr	r2, [pc, #96]	; (801372c <sys_timeout_abs+0xd8>)
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	6013      	str	r3, [r2, #0]
 80136d0:	e023      	b.n	801371a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80136d2:	4b16      	ldr	r3, [pc, #88]	; (801372c <sys_timeout_abs+0xd8>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	617b      	str	r3, [r7, #20]
 80136d8:	e01a      	b.n	8013710 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d00b      	beq.n	80136fa <sys_timeout_abs+0xa6>
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	685a      	ldr	r2, [r3, #4]
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	0fdb      	lsrs	r3, r3, #31
 80136f0:	f003 0301 	and.w	r3, r3, #1
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d007      	beq.n	801370a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	693a      	ldr	r2, [r7, #16]
 8013706:	601a      	str	r2, [r3, #0]
        break;
 8013708:	e007      	b.n	801371a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	617b      	str	r3, [r7, #20]
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1e1      	bne.n	80136da <sys_timeout_abs+0x86>
 8013716:	e000      	b.n	801371a <sys_timeout_abs+0xc6>
    return;
 8013718:	bf00      	nop
      }
    }
  }
}
 801371a:	3718      	adds	r7, #24
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	0801cc74 	.word	0x0801cc74
 8013724:	0801cca8 	.word	0x0801cca8
 8013728:	0801cce8 	.word	0x0801cce8
 801372c:	200111f0 	.word	0x200111f0

08013730 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	4798      	blx	r3

  now = sys_now();
 8013742:	f7f1 f9e9 	bl	8004b18 <sys_now>
 8013746:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	4b0f      	ldr	r3, [pc, #60]	; (801378c <lwip_cyclic_timer+0x5c>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	4413      	add	r3, r2
 8013752:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013754:	68fa      	ldr	r2, [r7, #12]
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	0fdb      	lsrs	r3, r3, #31
 801375c:	f003 0301 	and.w	r3, r3, #1
 8013760:	b2db      	uxtb	r3, r3
 8013762:	2b00      	cmp	r3, #0
 8013764:	d009      	beq.n	801377a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	4413      	add	r3, r2
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	4907      	ldr	r1, [pc, #28]	; (8013790 <lwip_cyclic_timer+0x60>)
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff ff6e 	bl	8013654 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013778:	e004      	b.n	8013784 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	4904      	ldr	r1, [pc, #16]	; (8013790 <lwip_cyclic_timer+0x60>)
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f7ff ff68 	bl	8013654 <sys_timeout_abs>
}
 8013784:	bf00      	nop
 8013786:	3718      	adds	r7, #24
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	200111f4 	.word	0x200111f4
 8013790:	08013731 	.word	0x08013731

08013794 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801379a:	2301      	movs	r3, #1
 801379c:	607b      	str	r3, [r7, #4]
 801379e:	e00e      	b.n	80137be <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80137a0:	4a0b      	ldr	r2, [pc, #44]	; (80137d0 <sys_timeouts_init+0x3c>)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	4a08      	ldr	r2, [pc, #32]	; (80137d0 <sys_timeouts_init+0x3c>)
 80137ae:	4413      	add	r3, r2
 80137b0:	461a      	mov	r2, r3
 80137b2:	4908      	ldr	r1, [pc, #32]	; (80137d4 <sys_timeouts_init+0x40>)
 80137b4:	f000 f810 	bl	80137d8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	3301      	adds	r3, #1
 80137bc:	607b      	str	r3, [r7, #4]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2b04      	cmp	r3, #4
 80137c2:	d9ed      	bls.n	80137a0 <sys_timeouts_init+0xc>
  }
}
 80137c4:	bf00      	nop
 80137c6:	bf00      	nop
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	08027d7c 	.word	0x08027d7c
 80137d4:	08013731 	.word	0x08013731

080137d8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b086      	sub	sp, #24
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137ea:	d306      	bcc.n	80137fa <sys_timeout+0x22>
 80137ec:	4b0a      	ldr	r3, [pc, #40]	; (8013818 <sys_timeout+0x40>)
 80137ee:	f240 1229 	movw	r2, #297	; 0x129
 80137f2:	490a      	ldr	r1, [pc, #40]	; (801381c <sys_timeout+0x44>)
 80137f4:	480a      	ldr	r0, [pc, #40]	; (8013820 <sys_timeout+0x48>)
 80137f6:	f005 f999 	bl	8018b2c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80137fa:	f7f1 f98d 	bl	8004b18 <sys_now>
 80137fe:	4602      	mov	r2, r0
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	4413      	add	r3, r2
 8013804:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	68b9      	ldr	r1, [r7, #8]
 801380a:	6978      	ldr	r0, [r7, #20]
 801380c:	f7ff ff22 	bl	8013654 <sys_timeout_abs>
#endif
}
 8013810:	bf00      	nop
 8013812:	3718      	adds	r7, #24
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	0801cc74 	.word	0x0801cc74
 801381c:	0801cd10 	.word	0x0801cd10
 8013820:	0801cce8 	.word	0x0801cce8

08013824 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801382a:	f7f1 f975 	bl	8004b18 <sys_now>
 801382e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013830:	4b17      	ldr	r3, [pc, #92]	; (8013890 <sys_check_timeouts+0x6c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d022      	beq.n	8013882 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	68fa      	ldr	r2, [r7, #12]
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	0fdb      	lsrs	r3, r3, #31
 8013846:	f003 0301 	and.w	r3, r3, #1
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b00      	cmp	r3, #0
 801384e:	d11a      	bne.n	8013886 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	4a0e      	ldr	r2, [pc, #56]	; (8013890 <sys_check_timeouts+0x6c>)
 8013856:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	689b      	ldr	r3, [r3, #8]
 801385c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	4a0a      	ldr	r2, [pc, #40]	; (8013894 <sys_check_timeouts+0x70>)
 801386a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801386c:	68b9      	ldr	r1, [r7, #8]
 801386e:	200a      	movs	r0, #10
 8013870:	f7f8 fba8 	bl	800bfc4 <memp_free>
    if (handler != NULL) {
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d0da      	beq.n	8013830 <sys_check_timeouts+0xc>
      handler(arg);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6838      	ldr	r0, [r7, #0]
 801387e:	4798      	blx	r3
  do {
 8013880:	e7d6      	b.n	8013830 <sys_check_timeouts+0xc>
      return;
 8013882:	bf00      	nop
 8013884:	e000      	b.n	8013888 <sys_check_timeouts+0x64>
      return;
 8013886:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	200111f0 	.word	0x200111f0
 8013894:	200111f4 	.word	0x200111f4

08013898 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801389e:	4b16      	ldr	r3, [pc, #88]	; (80138f8 <sys_timeouts_sleeptime+0x60>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d102      	bne.n	80138ac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80138a6:	f04f 33ff 	mov.w	r3, #4294967295
 80138aa:	e020      	b.n	80138ee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80138ac:	f7f1 f934 	bl	8004b18 <sys_now>
 80138b0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80138b2:	4b11      	ldr	r3, [pc, #68]	; (80138f8 <sys_timeouts_sleeptime+0x60>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	685a      	ldr	r2, [r3, #4]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	0fdb      	lsrs	r3, r3, #31
 80138be:	f003 0301 	and.w	r3, r3, #1
 80138c2:	b2db      	uxtb	r3, r3
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d001      	beq.n	80138cc <sys_timeouts_sleeptime+0x34>
    return 0;
 80138c8:	2300      	movs	r3, #0
 80138ca:	e010      	b.n	80138ee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80138cc:	4b0a      	ldr	r3, [pc, #40]	; (80138f8 <sys_timeouts_sleeptime+0x60>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	685a      	ldr	r2, [r3, #4]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	da06      	bge.n	80138ec <sys_timeouts_sleeptime+0x54>
 80138de:	4b07      	ldr	r3, [pc, #28]	; (80138fc <sys_timeouts_sleeptime+0x64>)
 80138e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80138e4:	4906      	ldr	r1, [pc, #24]	; (8013900 <sys_timeouts_sleeptime+0x68>)
 80138e6:	4807      	ldr	r0, [pc, #28]	; (8013904 <sys_timeouts_sleeptime+0x6c>)
 80138e8:	f005 f920 	bl	8018b2c <iprintf>
    return ret;
 80138ec:	683b      	ldr	r3, [r7, #0]
  }
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3708      	adds	r7, #8
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	200111f0 	.word	0x200111f0
 80138fc:	0801cc74 	.word	0x0801cc74
 8013900:	0801cd48 	.word	0x0801cd48
 8013904:	0801cce8 	.word	0x0801cce8

08013908 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801390c:	f005 f820 	bl	8018950 <rand>
 8013910:	4603      	mov	r3, r0
 8013912:	b29b      	uxth	r3, r3
 8013914:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013918:	b29b      	uxth	r3, r3
 801391a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801391e:	b29a      	uxth	r2, r3
 8013920:	4b01      	ldr	r3, [pc, #4]	; (8013928 <udp_init+0x20>)
 8013922:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013924:	bf00      	nop
 8013926:	bd80      	pop	{r7, pc}
 8013928:	2000002c 	.word	0x2000002c

0801392c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801392c:	b480      	push	{r7}
 801392e:	b083      	sub	sp, #12
 8013930:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013932:	2300      	movs	r3, #0
 8013934:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013936:	4b17      	ldr	r3, [pc, #92]	; (8013994 <udp_new_port+0x68>)
 8013938:	881b      	ldrh	r3, [r3, #0]
 801393a:	1c5a      	adds	r2, r3, #1
 801393c:	b291      	uxth	r1, r2
 801393e:	4a15      	ldr	r2, [pc, #84]	; (8013994 <udp_new_port+0x68>)
 8013940:	8011      	strh	r1, [r2, #0]
 8013942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013946:	4293      	cmp	r3, r2
 8013948:	d103      	bne.n	8013952 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801394a:	4b12      	ldr	r3, [pc, #72]	; (8013994 <udp_new_port+0x68>)
 801394c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013950:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013952:	4b11      	ldr	r3, [pc, #68]	; (8013998 <udp_new_port+0x6c>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	603b      	str	r3, [r7, #0]
 8013958:	e011      	b.n	801397e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	8a5a      	ldrh	r2, [r3, #18]
 801395e:	4b0d      	ldr	r3, [pc, #52]	; (8013994 <udp_new_port+0x68>)
 8013960:	881b      	ldrh	r3, [r3, #0]
 8013962:	429a      	cmp	r2, r3
 8013964:	d108      	bne.n	8013978 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013966:	88fb      	ldrh	r3, [r7, #6]
 8013968:	3301      	adds	r3, #1
 801396a:	80fb      	strh	r3, [r7, #6]
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013972:	d3e0      	bcc.n	8013936 <udp_new_port+0xa>
        return 0;
 8013974:	2300      	movs	r3, #0
 8013976:	e007      	b.n	8013988 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	603b      	str	r3, [r7, #0]
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1ea      	bne.n	801395a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013984:	4b03      	ldr	r3, [pc, #12]	; (8013994 <udp_new_port+0x68>)
 8013986:	881b      	ldrh	r3, [r3, #0]
}
 8013988:	4618      	mov	r0, r3
 801398a:	370c      	adds	r7, #12
 801398c:	46bd      	mov	sp, r7
 801398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013992:	4770      	bx	lr
 8013994:	2000002c 	.word	0x2000002c
 8013998:	200111fc 	.word	0x200111fc

0801399c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	4613      	mov	r3, r2
 80139a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d105      	bne.n	80139bc <udp_input_local_match+0x20>
 80139b0:	4b27      	ldr	r3, [pc, #156]	; (8013a50 <udp_input_local_match+0xb4>)
 80139b2:	2287      	movs	r2, #135	; 0x87
 80139b4:	4927      	ldr	r1, [pc, #156]	; (8013a54 <udp_input_local_match+0xb8>)
 80139b6:	4828      	ldr	r0, [pc, #160]	; (8013a58 <udp_input_local_match+0xbc>)
 80139b8:	f005 f8b8 	bl	8018b2c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d105      	bne.n	80139ce <udp_input_local_match+0x32>
 80139c2:	4b23      	ldr	r3, [pc, #140]	; (8013a50 <udp_input_local_match+0xb4>)
 80139c4:	2288      	movs	r2, #136	; 0x88
 80139c6:	4925      	ldr	r1, [pc, #148]	; (8013a5c <udp_input_local_match+0xc0>)
 80139c8:	4823      	ldr	r0, [pc, #140]	; (8013a58 <udp_input_local_match+0xbc>)
 80139ca:	f005 f8af 	bl	8018b2c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	7a1b      	ldrb	r3, [r3, #8]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00b      	beq.n	80139ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	7a1a      	ldrb	r2, [r3, #8]
 80139da:	4b21      	ldr	r3, [pc, #132]	; (8013a60 <udp_input_local_match+0xc4>)
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80139e2:	3301      	adds	r3, #1
 80139e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d001      	beq.n	80139ee <udp_input_local_match+0x52>
    return 0;
 80139ea:	2300      	movs	r3, #0
 80139ec:	e02b      	b.n	8013a46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80139ee:	79fb      	ldrb	r3, [r7, #7]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d018      	beq.n	8013a26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d013      	beq.n	8013a22 <udp_input_local_match+0x86>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00f      	beq.n	8013a22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a02:	4b17      	ldr	r3, [pc, #92]	; (8013a60 <udp_input_local_match+0xc4>)
 8013a04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a0a:	d00a      	beq.n	8013a22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	4b13      	ldr	r3, [pc, #76]	; (8013a60 <udp_input_local_match+0xc4>)
 8013a12:	695b      	ldr	r3, [r3, #20]
 8013a14:	405a      	eors	r2, r3
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	3308      	adds	r3, #8
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d110      	bne.n	8013a44 <udp_input_local_match+0xa8>
          return 1;
 8013a22:	2301      	movs	r3, #1
 8013a24:	e00f      	b.n	8013a46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d009      	beq.n	8013a40 <udp_input_local_match+0xa4>
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d005      	beq.n	8013a40 <udp_input_local_match+0xa4>
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	4b09      	ldr	r3, [pc, #36]	; (8013a60 <udp_input_local_match+0xc4>)
 8013a3a:	695b      	ldr	r3, [r3, #20]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d101      	bne.n	8013a44 <udp_input_local_match+0xa8>
        return 1;
 8013a40:	2301      	movs	r3, #1
 8013a42:	e000      	b.n	8013a46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013a44:	2300      	movs	r3, #0
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
 8013a4e:	bf00      	nop
 8013a50:	0801cd5c 	.word	0x0801cd5c
 8013a54:	0801cd8c 	.word	0x0801cd8c
 8013a58:	0801cdb0 	.word	0x0801cdb0
 8013a5c:	0801cdd8 	.word	0x0801cdd8
 8013a60:	2000da2c 	.word	0x2000da2c

08013a64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013a64:	b590      	push	{r4, r7, lr}
 8013a66:	b08d      	sub	sp, #52	; 0x34
 8013a68:	af02      	add	r7, sp, #8
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d105      	bne.n	8013a84 <udp_input+0x20>
 8013a78:	4b7c      	ldr	r3, [pc, #496]	; (8013c6c <udp_input+0x208>)
 8013a7a:	22cf      	movs	r2, #207	; 0xcf
 8013a7c:	497c      	ldr	r1, [pc, #496]	; (8013c70 <udp_input+0x20c>)
 8013a7e:	487d      	ldr	r0, [pc, #500]	; (8013c74 <udp_input+0x210>)
 8013a80:	f005 f854 	bl	8018b2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d105      	bne.n	8013a96 <udp_input+0x32>
 8013a8a:	4b78      	ldr	r3, [pc, #480]	; (8013c6c <udp_input+0x208>)
 8013a8c:	22d0      	movs	r2, #208	; 0xd0
 8013a8e:	497a      	ldr	r1, [pc, #488]	; (8013c78 <udp_input+0x214>)
 8013a90:	4878      	ldr	r0, [pc, #480]	; (8013c74 <udp_input+0x210>)
 8013a92:	f005 f84b 	bl	8018b2c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	895b      	ldrh	r3, [r3, #10]
 8013a9a:	2b07      	cmp	r3, #7
 8013a9c:	d803      	bhi.n	8013aa6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f7f9 f940 	bl	800cd24 <pbuf_free>
    goto end;
 8013aa4:	e0de      	b.n	8013c64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013aac:	4b73      	ldr	r3, [pc, #460]	; (8013c7c <udp_input+0x218>)
 8013aae:	695b      	ldr	r3, [r3, #20]
 8013ab0:	4a72      	ldr	r2, [pc, #456]	; (8013c7c <udp_input+0x218>)
 8013ab2:	6812      	ldr	r2, [r2, #0]
 8013ab4:	4611      	mov	r1, r2
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f003 fe12 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 8013abc:	4603      	mov	r3, r0
 8013abe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	881b      	ldrh	r3, [r3, #0]
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7f7 fcf8 	bl	800b4bc <lwip_htons>
 8013acc:	4603      	mov	r3, r0
 8013ace:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	885b      	ldrh	r3, [r3, #2]
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7f7 fcf0 	bl	800b4bc <lwip_htons>
 8013adc:	4603      	mov	r3, r0
 8013ade:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aec:	4b64      	ldr	r3, [pc, #400]	; (8013c80 <udp_input+0x21c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	627b      	str	r3, [r7, #36]	; 0x24
 8013af2:	e054      	b.n	8013b9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	8a5b      	ldrh	r3, [r3, #18]
 8013af8:	89fa      	ldrh	r2, [r7, #14]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d14a      	bne.n	8013b94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013afe:	7cfb      	ldrb	r3, [r7, #19]
 8013b00:	461a      	mov	r2, r3
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b06:	f7ff ff49 	bl	801399c <udp_input_local_match>
 8013b0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d041      	beq.n	8013b94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b12:	7c1b      	ldrb	r3, [r3, #16]
 8013b14:	f003 0304 	and.w	r3, r3, #4
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d11d      	bne.n	8013b58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d102      	bne.n	8013b28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b24:	61fb      	str	r3, [r7, #28]
 8013b26:	e017      	b.n	8013b58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013b28:	7cfb      	ldrb	r3, [r7, #19]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d014      	beq.n	8013b58 <udp_input+0xf4>
 8013b2e:	4b53      	ldr	r3, [pc, #332]	; (8013c7c <udp_input+0x218>)
 8013b30:	695b      	ldr	r3, [r3, #20]
 8013b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b36:	d10f      	bne.n	8013b58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	3304      	adds	r3, #4
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d008      	beq.n	8013b58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	3304      	adds	r3, #4
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d101      	bne.n	8013b58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5a:	8a9b      	ldrh	r3, [r3, #20]
 8013b5c:	8a3a      	ldrh	r2, [r7, #16]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d118      	bne.n	8013b94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d005      	beq.n	8013b76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6c:	685a      	ldr	r2, [r3, #4]
 8013b6e:	4b43      	ldr	r3, [pc, #268]	; (8013c7c <udp_input+0x218>)
 8013b70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d10e      	bne.n	8013b94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013b76:	6a3b      	ldr	r3, [r7, #32]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d014      	beq.n	8013ba6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7e:	68da      	ldr	r2, [r3, #12]
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013b84:	4b3e      	ldr	r3, [pc, #248]	; (8013c80 <udp_input+0x21c>)
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013b8c:	4a3c      	ldr	r2, [pc, #240]	; (8013c80 <udp_input+0x21c>)
 8013b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013b92:	e008      	b.n	8013ba6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8013b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d1a7      	bne.n	8013af4 <udp_input+0x90>
 8013ba4:	e000      	b.n	8013ba8 <udp_input+0x144>
        break;
 8013ba6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <udp_input+0x15a>
    for_us = 1;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	76fb      	strb	r3, [r7, #27]
 8013bbc:	e00a      	b.n	8013bd4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	3304      	adds	r3, #4
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	4b2d      	ldr	r3, [pc, #180]	; (8013c7c <udp_input+0x218>)
 8013bc6:	695b      	ldr	r3, [r3, #20]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	bf0c      	ite	eq
 8013bcc:	2301      	moveq	r3, #1
 8013bce:	2300      	movne	r3, #0
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013bd4:	7efb      	ldrb	r3, [r7, #27]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d041      	beq.n	8013c5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013bda:	2108      	movs	r1, #8
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7f9 f81b 	bl	800cc18 <pbuf_remove_header>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00a      	beq.n	8013bfe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013be8:	4b20      	ldr	r3, [pc, #128]	; (8013c6c <udp_input+0x208>)
 8013bea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013bee:	4925      	ldr	r1, [pc, #148]	; (8013c84 <udp_input+0x220>)
 8013bf0:	4820      	ldr	r0, [pc, #128]	; (8013c74 <udp_input+0x210>)
 8013bf2:	f004 ff9b 	bl	8018b2c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7f9 f894 	bl	800cd24 <pbuf_free>
      goto end;
 8013bfc:	e032      	b.n	8013c64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d012      	beq.n	8013c2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00a      	beq.n	8013c22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0e:	699c      	ldr	r4, [r3, #24]
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	69d8      	ldr	r0, [r3, #28]
 8013c14:	8a3b      	ldrh	r3, [r7, #16]
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	4b1b      	ldr	r3, [pc, #108]	; (8013c88 <udp_input+0x224>)
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013c20:	e021      	b.n	8013c66 <udp_input+0x202>
        pbuf_free(p);
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7f9 f87e 	bl	800cd24 <pbuf_free>
        goto end;
 8013c28:	e01c      	b.n	8013c64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c2a:	7cfb      	ldrb	r3, [r7, #19]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d112      	bne.n	8013c56 <udp_input+0x1f2>
 8013c30:	4b12      	ldr	r3, [pc, #72]	; (8013c7c <udp_input+0x218>)
 8013c32:	695b      	ldr	r3, [r3, #20]
 8013c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c38:	2be0      	cmp	r3, #224	; 0xe0
 8013c3a:	d00c      	beq.n	8013c56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013c3c:	4b0f      	ldr	r3, [pc, #60]	; (8013c7c <udp_input+0x218>)
 8013c3e:	899b      	ldrh	r3, [r3, #12]
 8013c40:	3308      	adds	r3, #8
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	b21b      	sxth	r3, r3
 8013c46:	4619      	mov	r1, r3
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7f9 f858 	bl	800ccfe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013c4e:	2103      	movs	r1, #3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f003 fa07 	bl	8017064 <icmp_dest_unreach>
      pbuf_free(p);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7f9 f864 	bl	800cd24 <pbuf_free>
  return;
 8013c5c:	e003      	b.n	8013c66 <udp_input+0x202>
    pbuf_free(p);
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f7f9 f860 	bl	800cd24 <pbuf_free>
  return;
 8013c64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013c66:	372c      	adds	r7, #44	; 0x2c
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd90      	pop	{r4, r7, pc}
 8013c6c:	0801cd5c 	.word	0x0801cd5c
 8013c70:	0801ce00 	.word	0x0801ce00
 8013c74:	0801cdb0 	.word	0x0801cdb0
 8013c78:	0801ce18 	.word	0x0801ce18
 8013c7c:	2000da2c 	.word	0x2000da2c
 8013c80:	200111fc 	.word	0x200111fc
 8013c84:	0801ce34 	.word	0x0801ce34
 8013c88:	2000da3c 	.word	0x2000da3c

08013c8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af02      	add	r7, sp, #8
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d109      	bne.n	8013cb4 <udp_sendto_if+0x28>
 8013ca0:	4b2e      	ldr	r3, [pc, #184]	; (8013d5c <udp_sendto_if+0xd0>)
 8013ca2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ca6:	492e      	ldr	r1, [pc, #184]	; (8013d60 <udp_sendto_if+0xd4>)
 8013ca8:	482e      	ldr	r0, [pc, #184]	; (8013d64 <udp_sendto_if+0xd8>)
 8013caa:	f004 ff3f 	bl	8018b2c <iprintf>
 8013cae:	f06f 030f 	mvn.w	r3, #15
 8013cb2:	e04f      	b.n	8013d54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d109      	bne.n	8013cce <udp_sendto_if+0x42>
 8013cba:	4b28      	ldr	r3, [pc, #160]	; (8013d5c <udp_sendto_if+0xd0>)
 8013cbc:	f240 2281 	movw	r2, #641	; 0x281
 8013cc0:	4929      	ldr	r1, [pc, #164]	; (8013d68 <udp_sendto_if+0xdc>)
 8013cc2:	4828      	ldr	r0, [pc, #160]	; (8013d64 <udp_sendto_if+0xd8>)
 8013cc4:	f004 ff32 	bl	8018b2c <iprintf>
 8013cc8:	f06f 030f 	mvn.w	r3, #15
 8013ccc:	e042      	b.n	8013d54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d109      	bne.n	8013ce8 <udp_sendto_if+0x5c>
 8013cd4:	4b21      	ldr	r3, [pc, #132]	; (8013d5c <udp_sendto_if+0xd0>)
 8013cd6:	f240 2282 	movw	r2, #642	; 0x282
 8013cda:	4924      	ldr	r1, [pc, #144]	; (8013d6c <udp_sendto_if+0xe0>)
 8013cdc:	4821      	ldr	r0, [pc, #132]	; (8013d64 <udp_sendto_if+0xd8>)
 8013cde:	f004 ff25 	bl	8018b2c <iprintf>
 8013ce2:	f06f 030f 	mvn.w	r3, #15
 8013ce6:	e035      	b.n	8013d54 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013ce8:	6a3b      	ldr	r3, [r7, #32]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d109      	bne.n	8013d02 <udp_sendto_if+0x76>
 8013cee:	4b1b      	ldr	r3, [pc, #108]	; (8013d5c <udp_sendto_if+0xd0>)
 8013cf0:	f240 2283 	movw	r2, #643	; 0x283
 8013cf4:	491e      	ldr	r1, [pc, #120]	; (8013d70 <udp_sendto_if+0xe4>)
 8013cf6:	481b      	ldr	r0, [pc, #108]	; (8013d64 <udp_sendto_if+0xd8>)
 8013cf8:	f004 ff18 	bl	8018b2c <iprintf>
 8013cfc:	f06f 030f 	mvn.w	r3, #15
 8013d00:	e028      	b.n	8013d54 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d009      	beq.n	8013d1c <udp_sendto_if+0x90>
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d005      	beq.n	8013d1c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d18:	2be0      	cmp	r3, #224	; 0xe0
 8013d1a:	d103      	bne.n	8013d24 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013d1c:	6a3b      	ldr	r3, [r7, #32]
 8013d1e:	3304      	adds	r3, #4
 8013d20:	617b      	str	r3, [r7, #20]
 8013d22:	e00b      	b.n	8013d3c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	6a3b      	ldr	r3, [r7, #32]
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d002      	beq.n	8013d38 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013d32:	f06f 0303 	mvn.w	r3, #3
 8013d36:	e00d      	b.n	8013d54 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013d3c:	887a      	ldrh	r2, [r7, #2]
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	9301      	str	r3, [sp, #4]
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	9300      	str	r3, [sp, #0]
 8013d46:	4613      	mov	r3, r2
 8013d48:	687a      	ldr	r2, [r7, #4]
 8013d4a:	68b9      	ldr	r1, [r7, #8]
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f000 f811 	bl	8013d74 <udp_sendto_if_src>
 8013d52:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3718      	adds	r7, #24
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	0801cd5c 	.word	0x0801cd5c
 8013d60:	0801ced0 	.word	0x0801ced0
 8013d64:	0801cdb0 	.word	0x0801cdb0
 8013d68:	0801ceec 	.word	0x0801ceec
 8013d6c:	0801cf08 	.word	0x0801cf08
 8013d70:	0801cf28 	.word	0x0801cf28

08013d74 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b08c      	sub	sp, #48	; 0x30
 8013d78:	af04      	add	r7, sp, #16
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	607a      	str	r2, [r7, #4]
 8013d80:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d109      	bne.n	8013d9c <udp_sendto_if_src+0x28>
 8013d88:	4b65      	ldr	r3, [pc, #404]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013d8a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013d8e:	4965      	ldr	r1, [pc, #404]	; (8013f24 <udp_sendto_if_src+0x1b0>)
 8013d90:	4865      	ldr	r0, [pc, #404]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013d92:	f004 fecb 	bl	8018b2c <iprintf>
 8013d96:	f06f 030f 	mvn.w	r3, #15
 8013d9a:	e0bc      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d109      	bne.n	8013db6 <udp_sendto_if_src+0x42>
 8013da2:	4b5f      	ldr	r3, [pc, #380]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013da4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013da8:	4960      	ldr	r1, [pc, #384]	; (8013f2c <udp_sendto_if_src+0x1b8>)
 8013daa:	485f      	ldr	r0, [pc, #380]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013dac:	f004 febe 	bl	8018b2c <iprintf>
 8013db0:	f06f 030f 	mvn.w	r3, #15
 8013db4:	e0af      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d109      	bne.n	8013dd0 <udp_sendto_if_src+0x5c>
 8013dbc:	4b58      	ldr	r3, [pc, #352]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013dbe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013dc2:	495b      	ldr	r1, [pc, #364]	; (8013f30 <udp_sendto_if_src+0x1bc>)
 8013dc4:	4858      	ldr	r0, [pc, #352]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013dc6:	f004 feb1 	bl	8018b2c <iprintf>
 8013dca:	f06f 030f 	mvn.w	r3, #15
 8013dce:	e0a2      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d109      	bne.n	8013dea <udp_sendto_if_src+0x76>
 8013dd6:	4b52      	ldr	r3, [pc, #328]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013dd8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013ddc:	4955      	ldr	r1, [pc, #340]	; (8013f34 <udp_sendto_if_src+0x1c0>)
 8013dde:	4852      	ldr	r0, [pc, #328]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013de0:	f004 fea4 	bl	8018b2c <iprintf>
 8013de4:	f06f 030f 	mvn.w	r3, #15
 8013de8:	e095      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d109      	bne.n	8013e04 <udp_sendto_if_src+0x90>
 8013df0:	4b4b      	ldr	r3, [pc, #300]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013df2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013df6:	4950      	ldr	r1, [pc, #320]	; (8013f38 <udp_sendto_if_src+0x1c4>)
 8013df8:	484b      	ldr	r0, [pc, #300]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013dfa:	f004 fe97 	bl	8018b2c <iprintf>
 8013dfe:	f06f 030f 	mvn.w	r3, #15
 8013e02:	e088      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	8a5b      	ldrh	r3, [r3, #18]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10f      	bne.n	8013e2c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013e0c:	68f9      	ldr	r1, [r7, #12]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	8a5b      	ldrh	r3, [r3, #18]
 8013e12:	461a      	mov	r2, r3
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f000 f893 	bl	8013f40 <udp_bind>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013e1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d002      	beq.n	8013e2c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013e26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e2a:	e074      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	891b      	ldrh	r3, [r3, #8]
 8013e30:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d902      	bls.n	8013e3e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013e38:	f04f 33ff 	mov.w	r3, #4294967295
 8013e3c:	e06b      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013e3e:	2108      	movs	r1, #8
 8013e40:	68b8      	ldr	r0, [r7, #8]
 8013e42:	f7f8 fed9 	bl	800cbf8 <pbuf_add_header>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d015      	beq.n	8013e78 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013e4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e50:	2108      	movs	r1, #8
 8013e52:	2022      	movs	r0, #34	; 0x22
 8013e54:	f7f8 fc82 	bl	800c75c <pbuf_alloc>
 8013e58:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d102      	bne.n	8013e66 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013e60:	f04f 33ff 	mov.w	r3, #4294967295
 8013e64:	e057      	b.n	8013f16 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	891b      	ldrh	r3, [r3, #8]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d006      	beq.n	8013e7c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013e6e:	68b9      	ldr	r1, [r7, #8]
 8013e70:	69f8      	ldr	r0, [r7, #28]
 8013e72:	f7f9 f87b 	bl	800cf6c <pbuf_chain>
 8013e76:	e001      	b.n	8013e7c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	895b      	ldrh	r3, [r3, #10]
 8013e80:	2b07      	cmp	r3, #7
 8013e82:	d806      	bhi.n	8013e92 <udp_sendto_if_src+0x11e>
 8013e84:	4b26      	ldr	r3, [pc, #152]	; (8013f20 <udp_sendto_if_src+0x1ac>)
 8013e86:	f240 320d 	movw	r2, #781	; 0x30d
 8013e8a:	492c      	ldr	r1, [pc, #176]	; (8013f3c <udp_sendto_if_src+0x1c8>)
 8013e8c:	4826      	ldr	r0, [pc, #152]	; (8013f28 <udp_sendto_if_src+0x1b4>)
 8013e8e:	f004 fe4d 	bl	8018b2c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	8a5b      	ldrh	r3, [r3, #18]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7f7 fb0d 	bl	800b4bc <lwip_htons>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013eaa:	887b      	ldrh	r3, [r7, #2]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f7 fb05 	bl	800b4bc <lwip_htons>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	719a      	strb	r2, [r3, #6]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	891b      	ldrh	r3, [r3, #8]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f7 faf7 	bl	800b4bc <lwip_htons>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013ed6:	2311      	movs	r3, #17
 8013ed8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	7adb      	ldrb	r3, [r3, #11]
 8013ede:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	7a9b      	ldrb	r3, [r3, #10]
 8013ee4:	7cb9      	ldrb	r1, [r7, #18]
 8013ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ee8:	9202      	str	r2, [sp, #8]
 8013eea:	7cfa      	ldrb	r2, [r7, #19]
 8013eec:	9201      	str	r2, [sp, #4]
 8013eee:	9300      	str	r3, [sp, #0]
 8013ef0:	460b      	mov	r3, r1
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ef6:	69f8      	ldr	r0, [r7, #28]
 8013ef8:	f003 fb44 	bl	8017584 <ip4_output_if_src>
 8013efc:	4603      	mov	r3, r0
 8013efe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013f00:	69fa      	ldr	r2, [r7, #28]
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d004      	beq.n	8013f12 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013f08:	69f8      	ldr	r0, [r7, #28]
 8013f0a:	f7f8 ff0b 	bl	800cd24 <pbuf_free>
    q = NULL;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013f12:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3720      	adds	r7, #32
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	0801cd5c 	.word	0x0801cd5c
 8013f24:	0801cf48 	.word	0x0801cf48
 8013f28:	0801cdb0 	.word	0x0801cdb0
 8013f2c:	0801cf68 	.word	0x0801cf68
 8013f30:	0801cf88 	.word	0x0801cf88
 8013f34:	0801cfac 	.word	0x0801cfac
 8013f38:	0801cfd0 	.word	0x0801cfd0
 8013f3c:	0801cff4 	.word	0x0801cff4

08013f40 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013f54:	4b39      	ldr	r3, [pc, #228]	; (801403c <udp_bind+0xfc>)
 8013f56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d109      	bne.n	8013f72 <udp_bind+0x32>
 8013f5e:	4b38      	ldr	r3, [pc, #224]	; (8014040 <udp_bind+0x100>)
 8013f60:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013f64:	4937      	ldr	r1, [pc, #220]	; (8014044 <udp_bind+0x104>)
 8013f66:	4838      	ldr	r0, [pc, #224]	; (8014048 <udp_bind+0x108>)
 8013f68:	f004 fde0 	bl	8018b2c <iprintf>
 8013f6c:	f06f 030f 	mvn.w	r3, #15
 8013f70:	e060      	b.n	8014034 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f76:	4b35      	ldr	r3, [pc, #212]	; (801404c <udp_bind+0x10c>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	617b      	str	r3, [r7, #20]
 8013f7c:	e009      	b.n	8013f92 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013f7e:	68fa      	ldr	r2, [r7, #12]
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d102      	bne.n	8013f8c <udp_bind+0x4c>
      rebind = 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	74fb      	strb	r3, [r7, #19]
      break;
 8013f8a:	e005      	b.n	8013f98 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	617b      	str	r3, [r7, #20]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d1f2      	bne.n	8013f7e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013f98:	88fb      	ldrh	r3, [r7, #6]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d109      	bne.n	8013fb2 <udp_bind+0x72>
    port = udp_new_port();
 8013f9e:	f7ff fcc5 	bl	801392c <udp_new_port>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013fa6:	88fb      	ldrh	r3, [r7, #6]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d12c      	bne.n	8014006 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013fac:	f06f 0307 	mvn.w	r3, #7
 8013fb0:	e040      	b.n	8014034 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fb2:	4b26      	ldr	r3, [pc, #152]	; (801404c <udp_bind+0x10c>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	617b      	str	r3, [r7, #20]
 8013fb8:	e022      	b.n	8014000 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d01b      	beq.n	8013ffa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	8a5b      	ldrh	r3, [r3, #18]
 8013fc6:	88fa      	ldrh	r2, [r7, #6]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d116      	bne.n	8013ffa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d00d      	beq.n	8013ff4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00a      	beq.n	8013ff4 <udp_bind+0xb4>
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d006      	beq.n	8013ff4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fe6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d003      	beq.n	8013ff4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d102      	bne.n	8013ffa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013ff4:	f06f 0307 	mvn.w	r3, #7
 8013ff8:	e01c      	b.n	8014034 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	617b      	str	r3, [r7, #20]
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1d9      	bne.n	8013fba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <udp_bind+0xd2>
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	e000      	b.n	8014014 <udp_bind+0xd4>
 8014012:	2300      	movs	r3, #0
 8014014:	68fa      	ldr	r2, [r7, #12]
 8014016:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	88fa      	ldrh	r2, [r7, #6]
 801401c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801401e:	7cfb      	ldrb	r3, [r7, #19]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014024:	4b09      	ldr	r3, [pc, #36]	; (801404c <udp_bind+0x10c>)
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801402c:	4a07      	ldr	r2, [pc, #28]	; (801404c <udp_bind+0x10c>)
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	3718      	adds	r7, #24
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	08027da4 	.word	0x08027da4
 8014040:	0801cd5c 	.word	0x0801cd5c
 8014044:	0801d024 	.word	0x0801d024
 8014048:	0801cdb0 	.word	0x0801cdb0
 801404c:	200111fc 	.word	0x200111fc

08014050 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	4613      	mov	r3, r2
 801405c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d109      	bne.n	8014078 <udp_connect+0x28>
 8014064:	4b2c      	ldr	r3, [pc, #176]	; (8014118 <udp_connect+0xc8>)
 8014066:	f240 4235 	movw	r2, #1077	; 0x435
 801406a:	492c      	ldr	r1, [pc, #176]	; (801411c <udp_connect+0xcc>)
 801406c:	482c      	ldr	r0, [pc, #176]	; (8014120 <udp_connect+0xd0>)
 801406e:	f004 fd5d 	bl	8018b2c <iprintf>
 8014072:	f06f 030f 	mvn.w	r3, #15
 8014076:	e04b      	b.n	8014110 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d109      	bne.n	8014092 <udp_connect+0x42>
 801407e:	4b26      	ldr	r3, [pc, #152]	; (8014118 <udp_connect+0xc8>)
 8014080:	f240 4236 	movw	r2, #1078	; 0x436
 8014084:	4927      	ldr	r1, [pc, #156]	; (8014124 <udp_connect+0xd4>)
 8014086:	4826      	ldr	r0, [pc, #152]	; (8014120 <udp_connect+0xd0>)
 8014088:	f004 fd50 	bl	8018b2c <iprintf>
 801408c:	f06f 030f 	mvn.w	r3, #15
 8014090:	e03e      	b.n	8014110 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	8a5b      	ldrh	r3, [r3, #18]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d10f      	bne.n	80140ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801409a:	68f9      	ldr	r1, [r7, #12]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	8a5b      	ldrh	r3, [r3, #18]
 80140a0:	461a      	mov	r2, r3
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f7ff ff4c 	bl	8013f40 <udp_bind>
 80140a8:	4603      	mov	r3, r0
 80140aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80140ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d002      	beq.n	80140ba <udp_connect+0x6a>
      return err;
 80140b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140b8:	e02a      	b.n	8014110 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <udp_connect+0x76>
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	e000      	b.n	80140c8 <udp_connect+0x78>
 80140c6:	2300      	movs	r3, #0
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	88fa      	ldrh	r2, [r7, #6]
 80140d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	7c1b      	ldrb	r3, [r3, #16]
 80140d6:	f043 0304 	orr.w	r3, r3, #4
 80140da:	b2da      	uxtb	r2, r3
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140e0:	4b11      	ldr	r3, [pc, #68]	; (8014128 <udp_connect+0xd8>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	617b      	str	r3, [r7, #20]
 80140e6:	e008      	b.n	80140fa <udp_connect+0xaa>
    if (pcb == ipcb) {
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d101      	bne.n	80140f4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80140f0:	2300      	movs	r3, #0
 80140f2:	e00d      	b.n	8014110 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	617b      	str	r3, [r7, #20]
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d1f3      	bne.n	80140e8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014100:	4b09      	ldr	r3, [pc, #36]	; (8014128 <udp_connect+0xd8>)
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014108:	4a07      	ldr	r2, [pc, #28]	; (8014128 <udp_connect+0xd8>)
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	3718      	adds	r7, #24
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	0801cd5c 	.word	0x0801cd5c
 801411c:	0801d03c 	.word	0x0801d03c
 8014120:	0801cdb0 	.word	0x0801cdb0
 8014124:	0801d058 	.word	0x0801d058
 8014128:	200111fc 	.word	0x200111fc

0801412c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d107      	bne.n	801414e <udp_recv+0x22>
 801413e:	4b08      	ldr	r3, [pc, #32]	; (8014160 <udp_recv+0x34>)
 8014140:	f240 428a 	movw	r2, #1162	; 0x48a
 8014144:	4907      	ldr	r1, [pc, #28]	; (8014164 <udp_recv+0x38>)
 8014146:	4808      	ldr	r0, [pc, #32]	; (8014168 <udp_recv+0x3c>)
 8014148:	f004 fcf0 	bl	8018b2c <iprintf>
 801414c:	e005      	b.n	801415a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	68ba      	ldr	r2, [r7, #8]
 8014152:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	61da      	str	r2, [r3, #28]
}
 801415a:	3710      	adds	r7, #16
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	0801cd5c 	.word	0x0801cd5c
 8014164:	0801d090 	.word	0x0801d090
 8014168:	0801cdb0 	.word	0x0801cdb0

0801416c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b084      	sub	sp, #16
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d107      	bne.n	801418a <udp_remove+0x1e>
 801417a:	4b19      	ldr	r3, [pc, #100]	; (80141e0 <udp_remove+0x74>)
 801417c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014180:	4918      	ldr	r1, [pc, #96]	; (80141e4 <udp_remove+0x78>)
 8014182:	4819      	ldr	r0, [pc, #100]	; (80141e8 <udp_remove+0x7c>)
 8014184:	f004 fcd2 	bl	8018b2c <iprintf>
 8014188:	e026      	b.n	80141d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801418a:	4b18      	ldr	r3, [pc, #96]	; (80141ec <udp_remove+0x80>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	429a      	cmp	r2, r3
 8014192:	d105      	bne.n	80141a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014194:	4b15      	ldr	r3, [pc, #84]	; (80141ec <udp_remove+0x80>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	4a14      	ldr	r2, [pc, #80]	; (80141ec <udp_remove+0x80>)
 801419c:	6013      	str	r3, [r2, #0]
 801419e:	e017      	b.n	80141d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141a0:	4b12      	ldr	r3, [pc, #72]	; (80141ec <udp_remove+0x80>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	60fb      	str	r3, [r7, #12]
 80141a6:	e010      	b.n	80141ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d009      	beq.n	80141c4 <udp_remove+0x58>
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d104      	bne.n	80141c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	68da      	ldr	r2, [r3, #12]
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	60da      	str	r2, [r3, #12]
        break;
 80141c2:	e005      	b.n	80141d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	60fb      	str	r3, [r7, #12]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1eb      	bne.n	80141a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80141d0:	6879      	ldr	r1, [r7, #4]
 80141d2:	2000      	movs	r0, #0
 80141d4:	f7f7 fef6 	bl	800bfc4 <memp_free>
}
 80141d8:	3710      	adds	r7, #16
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	0801cd5c 	.word	0x0801cd5c
 80141e4:	0801d0a8 	.word	0x0801d0a8
 80141e8:	0801cdb0 	.word	0x0801cdb0
 80141ec:	200111fc 	.word	0x200111fc

080141f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80141f6:	2000      	movs	r0, #0
 80141f8:	f7f7 fe6e 	bl	800bed8 <memp_malloc>
 80141fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d007      	beq.n	8014214 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014204:	2220      	movs	r2, #32
 8014206:	2100      	movs	r1, #0
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f004 fd2e 	bl	8018c6a <memset>
    pcb->ttl = UDP_TTL;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	22ff      	movs	r2, #255	; 0xff
 8014212:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014214:	687b      	ldr	r3, [r7, #4]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b084      	sub	sp, #16
 8014222:	af00      	add	r7, sp, #0
 8014224:	4603      	mov	r3, r0
 8014226:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014228:	f7ff ffe2 	bl	80141f0 <udp_new>
 801422c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801422e:	68fb      	ldr	r3, [r7, #12]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d01e      	beq.n	8014286 <udp_netif_ip_addr_changed+0x4e>
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d01a      	beq.n	8014286 <udp_netif_ip_addr_changed+0x4e>
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d017      	beq.n	8014286 <udp_netif_ip_addr_changed+0x4e>
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d013      	beq.n	8014286 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801425e:	4b0d      	ldr	r3, [pc, #52]	; (8014294 <udp_netif_ip_addr_changed+0x5c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	60fb      	str	r3, [r7, #12]
 8014264:	e00c      	b.n	8014280 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	429a      	cmp	r2, r3
 8014270:	d103      	bne.n	801427a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	68db      	ldr	r3, [r3, #12]
 801427e:	60fb      	str	r3, [r7, #12]
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1ef      	bne.n	8014266 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014286:	bf00      	nop
 8014288:	3714      	adds	r7, #20
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop
 8014294:	200111fc 	.word	0x200111fc

08014298 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801429c:	4b20      	ldr	r3, [pc, #128]	; (8014320 <dhcp_inc_pcb_refcount+0x88>)
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d133      	bne.n	801430c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80142a4:	4b1f      	ldr	r3, [pc, #124]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d005      	beq.n	80142b8 <dhcp_inc_pcb_refcount+0x20>
 80142ac:	4b1e      	ldr	r3, [pc, #120]	; (8014328 <dhcp_inc_pcb_refcount+0x90>)
 80142ae:	22e5      	movs	r2, #229	; 0xe5
 80142b0:	491e      	ldr	r1, [pc, #120]	; (801432c <dhcp_inc_pcb_refcount+0x94>)
 80142b2:	481f      	ldr	r0, [pc, #124]	; (8014330 <dhcp_inc_pcb_refcount+0x98>)
 80142b4:	f004 fc3a 	bl	8018b2c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80142b8:	f7ff ff9a 	bl	80141f0 <udp_new>
 80142bc:	4603      	mov	r3, r0
 80142be:	4a19      	ldr	r2, [pc, #100]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142c0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80142c2:	4b18      	ldr	r3, [pc, #96]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d102      	bne.n	80142d0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80142ca:	f04f 33ff 	mov.w	r3, #4294967295
 80142ce:	e024      	b.n	801431a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80142d0:	4b14      	ldr	r3, [pc, #80]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	7a5a      	ldrb	r2, [r3, #9]
 80142d6:	4b13      	ldr	r3, [pc, #76]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	f042 0220 	orr.w	r2, r2, #32
 80142de:	b2d2      	uxtb	r2, r2
 80142e0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80142e2:	4b10      	ldr	r3, [pc, #64]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	2244      	movs	r2, #68	; 0x44
 80142e8:	4912      	ldr	r1, [pc, #72]	; (8014334 <dhcp_inc_pcb_refcount+0x9c>)
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff fe28 	bl	8013f40 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80142f0:	4b0c      	ldr	r3, [pc, #48]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2243      	movs	r2, #67	; 0x43
 80142f6:	490f      	ldr	r1, [pc, #60]	; (8014334 <dhcp_inc_pcb_refcount+0x9c>)
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7ff fea9 	bl	8014050 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80142fe:	4b09      	ldr	r3, [pc, #36]	; (8014324 <dhcp_inc_pcb_refcount+0x8c>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	2200      	movs	r2, #0
 8014304:	490c      	ldr	r1, [pc, #48]	; (8014338 <dhcp_inc_pcb_refcount+0xa0>)
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff ff10 	bl	801412c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801430c:	4b04      	ldr	r3, [pc, #16]	; (8014320 <dhcp_inc_pcb_refcount+0x88>)
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	3301      	adds	r3, #1
 8014312:	b2da      	uxtb	r2, r3
 8014314:	4b02      	ldr	r3, [pc, #8]	; (8014320 <dhcp_inc_pcb_refcount+0x88>)
 8014316:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	bd80      	pop	{r7, pc}
 801431e:	bf00      	nop
 8014320:	2001122c 	.word	0x2001122c
 8014324:	20011228 	.word	0x20011228
 8014328:	0801d0c0 	.word	0x0801d0c0
 801432c:	0801d0f8 	.word	0x0801d0f8
 8014330:	0801d120 	.word	0x0801d120
 8014334:	08027da4 	.word	0x08027da4
 8014338:	08015bcd 	.word	0x08015bcd

0801433c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014340:	4b0e      	ldr	r3, [pc, #56]	; (801437c <dhcp_dec_pcb_refcount+0x40>)
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d105      	bne.n	8014354 <dhcp_dec_pcb_refcount+0x18>
 8014348:	4b0d      	ldr	r3, [pc, #52]	; (8014380 <dhcp_dec_pcb_refcount+0x44>)
 801434a:	22ff      	movs	r2, #255	; 0xff
 801434c:	490d      	ldr	r1, [pc, #52]	; (8014384 <dhcp_dec_pcb_refcount+0x48>)
 801434e:	480e      	ldr	r0, [pc, #56]	; (8014388 <dhcp_dec_pcb_refcount+0x4c>)
 8014350:	f004 fbec 	bl	8018b2c <iprintf>
  dhcp_pcb_refcount--;
 8014354:	4b09      	ldr	r3, [pc, #36]	; (801437c <dhcp_dec_pcb_refcount+0x40>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	3b01      	subs	r3, #1
 801435a:	b2da      	uxtb	r2, r3
 801435c:	4b07      	ldr	r3, [pc, #28]	; (801437c <dhcp_dec_pcb_refcount+0x40>)
 801435e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014360:	4b06      	ldr	r3, [pc, #24]	; (801437c <dhcp_dec_pcb_refcount+0x40>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d107      	bne.n	8014378 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014368:	4b08      	ldr	r3, [pc, #32]	; (801438c <dhcp_dec_pcb_refcount+0x50>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff fefd 	bl	801416c <udp_remove>
    dhcp_pcb = NULL;
 8014372:	4b06      	ldr	r3, [pc, #24]	; (801438c <dhcp_dec_pcb_refcount+0x50>)
 8014374:	2200      	movs	r2, #0
 8014376:	601a      	str	r2, [r3, #0]
  }
}
 8014378:	bf00      	nop
 801437a:	bd80      	pop	{r7, pc}
 801437c:	2001122c 	.word	0x2001122c
 8014380:	0801d0c0 	.word	0x0801d0c0
 8014384:	0801d148 	.word	0x0801d148
 8014388:	0801d120 	.word	0x0801d120
 801438c:	20011228 	.word	0x20011228

08014390 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801439e:	210c      	movs	r1, #12
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f001 f855 	bl	8015450 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80143a6:	4b06      	ldr	r3, [pc, #24]	; (80143c0 <dhcp_handle_nak+0x30>)
 80143a8:	4a05      	ldr	r2, [pc, #20]	; (80143c0 <dhcp_handle_nak+0x30>)
 80143aa:	4905      	ldr	r1, [pc, #20]	; (80143c0 <dhcp_handle_nak+0x30>)
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7f7 ffab 	bl	800c308 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f000 fc48 	bl	8014c48 <dhcp_discover>
}
 80143b8:	bf00      	nop
 80143ba:	3710      	adds	r7, #16
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	08027da4 	.word	0x08027da4

080143c4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80143d2:	2108      	movs	r1, #8
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f001 f83b 	bl	8015450 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	331c      	adds	r3, #28
 80143de:	2200      	movs	r2, #0
 80143e0:	4619      	mov	r1, r3
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f002 fb3c 	bl	8016a60 <etharp_query>
 80143e8:	4603      	mov	r3, r0
 80143ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	799b      	ldrb	r3, [r3, #6]
 80143f0:	2bff      	cmp	r3, #255	; 0xff
 80143f2:	d005      	beq.n	8014400 <dhcp_check+0x3c>
    dhcp->tries++;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	799b      	ldrb	r3, [r3, #6]
 80143f8:	3301      	adds	r3, #1
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014400:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014404:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014406:	893b      	ldrh	r3, [r7, #8]
 8014408:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801440c:	4a06      	ldr	r2, [pc, #24]	; (8014428 <dhcp_check+0x64>)
 801440e:	fb82 1203 	smull	r1, r2, r2, r3
 8014412:	1152      	asrs	r2, r2, #5
 8014414:	17db      	asrs	r3, r3, #31
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	b29a      	uxth	r2, r3
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801441e:	bf00      	nop
 8014420:	3710      	adds	r7, #16
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	10624dd3 	.word	0x10624dd3

0801442c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801443c:	4b0c      	ldr	r3, [pc, #48]	; (8014470 <dhcp_handle_offer+0x44>)
 801443e:	789b      	ldrb	r3, [r3, #2]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d011      	beq.n	8014468 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	2200      	movs	r2, #0
 8014448:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801444a:	4b0a      	ldr	r3, [pc, #40]	; (8014474 <dhcp_handle_offer+0x48>)
 801444c:	689b      	ldr	r3, [r3, #8]
 801444e:	4618      	mov	r0, r3
 8014450:	f7f7 f849 	bl	800b4e6 <lwip_htonl>
 8014454:	4602      	mov	r2, r0
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	691a      	ldr	r2, [r3, #16]
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 f808 	bl	8014478 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014468:	bf00      	nop
 801446a:	3710      	adds	r7, #16
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	20011220 	.word	0x20011220
 8014474:	20011200 	.word	0x20011200

08014478 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014478:	b5b0      	push	{r4, r5, r7, lr}
 801447a:	b08a      	sub	sp, #40	; 0x28
 801447c:	af02      	add	r7, sp, #8
 801447e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d109      	bne.n	801449a <dhcp_select+0x22>
 8014486:	4b71      	ldr	r3, [pc, #452]	; (801464c <dhcp_select+0x1d4>)
 8014488:	f240 1277 	movw	r2, #375	; 0x177
 801448c:	4970      	ldr	r1, [pc, #448]	; (8014650 <dhcp_select+0x1d8>)
 801448e:	4871      	ldr	r0, [pc, #452]	; (8014654 <dhcp_select+0x1dc>)
 8014490:	f004 fb4c 	bl	8018b2c <iprintf>
 8014494:	f06f 030f 	mvn.w	r3, #15
 8014498:	e0d3      	b.n	8014642 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801449e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d109      	bne.n	80144ba <dhcp_select+0x42>
 80144a6:	4b69      	ldr	r3, [pc, #420]	; (801464c <dhcp_select+0x1d4>)
 80144a8:	f240 1279 	movw	r2, #377	; 0x179
 80144ac:	496a      	ldr	r1, [pc, #424]	; (8014658 <dhcp_select+0x1e0>)
 80144ae:	4869      	ldr	r0, [pc, #420]	; (8014654 <dhcp_select+0x1dc>)
 80144b0:	f004 fb3c 	bl	8018b2c <iprintf>
 80144b4:	f06f 0305 	mvn.w	r3, #5
 80144b8:	e0c3      	b.n	8014642 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80144ba:	2101      	movs	r1, #1
 80144bc:	69b8      	ldr	r0, [r7, #24]
 80144be:	f000 ffc7 	bl	8015450 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80144c2:	f107 030c 	add.w	r3, r7, #12
 80144c6:	2203      	movs	r2, #3
 80144c8:	69b9      	ldr	r1, [r7, #24]
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f001 fc4c 	bl	8015d68 <dhcp_create_msg>
 80144d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f000 8085 	beq.w	80145e4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144e0:	89b8      	ldrh	r0, [r7, #12]
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144e8:	2302      	movs	r3, #2
 80144ea:	2239      	movs	r2, #57	; 0x39
 80144ec:	f000 ffca 	bl	8015484 <dhcp_option>
 80144f0:	4603      	mov	r3, r0
 80144f2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80144f4:	89b8      	ldrh	r0, [r7, #12]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014500:	461a      	mov	r2, r3
 8014502:	f001 f819 	bl	8015538 <dhcp_option_short>
 8014506:	4603      	mov	r3, r0
 8014508:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801450a:	89b8      	ldrh	r0, [r7, #12]
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014512:	2304      	movs	r3, #4
 8014514:	2232      	movs	r2, #50	; 0x32
 8014516:	f000 ffb5 	bl	8015484 <dhcp_option>
 801451a:	4603      	mov	r3, r0
 801451c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801451e:	89bc      	ldrh	r4, [r7, #12]
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	69db      	ldr	r3, [r3, #28]
 801452a:	4618      	mov	r0, r3
 801452c:	f7f6 ffdb 	bl	800b4e6 <lwip_htonl>
 8014530:	4603      	mov	r3, r0
 8014532:	461a      	mov	r2, r3
 8014534:	4629      	mov	r1, r5
 8014536:	4620      	mov	r0, r4
 8014538:	f001 f830 	bl	801559c <dhcp_option_long>
 801453c:	4603      	mov	r3, r0
 801453e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014540:	89b8      	ldrh	r0, [r7, #12]
 8014542:	693b      	ldr	r3, [r7, #16]
 8014544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014548:	2304      	movs	r3, #4
 801454a:	2236      	movs	r2, #54	; 0x36
 801454c:	f000 ff9a 	bl	8015484 <dhcp_option>
 8014550:	4603      	mov	r3, r0
 8014552:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014554:	89bc      	ldrh	r4, [r7, #12]
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801455c:	69bb      	ldr	r3, [r7, #24]
 801455e:	699b      	ldr	r3, [r3, #24]
 8014560:	4618      	mov	r0, r3
 8014562:	f7f6 ffc0 	bl	800b4e6 <lwip_htonl>
 8014566:	4603      	mov	r3, r0
 8014568:	461a      	mov	r2, r3
 801456a:	4629      	mov	r1, r5
 801456c:	4620      	mov	r0, r4
 801456e:	f001 f815 	bl	801559c <dhcp_option_long>
 8014572:	4603      	mov	r3, r0
 8014574:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014576:	89b8      	ldrh	r0, [r7, #12]
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801457e:	2303      	movs	r3, #3
 8014580:	2237      	movs	r2, #55	; 0x37
 8014582:	f000 ff7f 	bl	8015484 <dhcp_option>
 8014586:	4603      	mov	r3, r0
 8014588:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801458a:	2300      	movs	r3, #0
 801458c:	77bb      	strb	r3, [r7, #30]
 801458e:	e00e      	b.n	80145ae <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014590:	89b8      	ldrh	r0, [r7, #12]
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014598:	7fbb      	ldrb	r3, [r7, #30]
 801459a:	4a30      	ldr	r2, [pc, #192]	; (801465c <dhcp_select+0x1e4>)
 801459c:	5cd3      	ldrb	r3, [r2, r3]
 801459e:	461a      	mov	r2, r3
 80145a0:	f000 ffa4 	bl	80154ec <dhcp_option_byte>
 80145a4:	4603      	mov	r3, r0
 80145a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145a8:	7fbb      	ldrb	r3, [r7, #30]
 80145aa:	3301      	adds	r3, #1
 80145ac:	77bb      	strb	r3, [r7, #30]
 80145ae:	7fbb      	ldrb	r3, [r7, #30]
 80145b0:	2b02      	cmp	r3, #2
 80145b2:	d9ed      	bls.n	8014590 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145b4:	89b8      	ldrh	r0, [r7, #12]
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	33f0      	adds	r3, #240	; 0xf0
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	4619      	mov	r1, r3
 80145be:	f001 fca9 	bl	8015f14 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80145c2:	4b27      	ldr	r3, [pc, #156]	; (8014660 <dhcp_select+0x1e8>)
 80145c4:	6818      	ldr	r0, [r3, #0]
 80145c6:	4b27      	ldr	r3, [pc, #156]	; (8014664 <dhcp_select+0x1ec>)
 80145c8:	9301      	str	r3, [sp, #4]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	9300      	str	r3, [sp, #0]
 80145ce:	2343      	movs	r3, #67	; 0x43
 80145d0:	4a25      	ldr	r2, [pc, #148]	; (8014668 <dhcp_select+0x1f0>)
 80145d2:	6979      	ldr	r1, [r7, #20]
 80145d4:	f7ff fbce 	bl	8013d74 <udp_sendto_if_src>
 80145d8:	4603      	mov	r3, r0
 80145da:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80145dc:	6978      	ldr	r0, [r7, #20]
 80145de:	f7f8 fba1 	bl	800cd24 <pbuf_free>
 80145e2:	e001      	b.n	80145e8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80145e4:	23ff      	movs	r3, #255	; 0xff
 80145e6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	799b      	ldrb	r3, [r3, #6]
 80145ec:	2bff      	cmp	r3, #255	; 0xff
 80145ee:	d005      	beq.n	80145fc <dhcp_select+0x184>
    dhcp->tries++;
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	799b      	ldrb	r3, [r3, #6]
 80145f4:	3301      	adds	r3, #1
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80145fc:	69bb      	ldr	r3, [r7, #24]
 80145fe:	799b      	ldrb	r3, [r3, #6]
 8014600:	2b05      	cmp	r3, #5
 8014602:	d80d      	bhi.n	8014620 <dhcp_select+0x1a8>
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	799b      	ldrb	r3, [r3, #6]
 8014608:	461a      	mov	r2, r3
 801460a:	2301      	movs	r3, #1
 801460c:	4093      	lsls	r3, r2
 801460e:	b29b      	uxth	r3, r3
 8014610:	461a      	mov	r2, r3
 8014612:	0152      	lsls	r2, r2, #5
 8014614:	1ad2      	subs	r2, r2, r3
 8014616:	0092      	lsls	r2, r2, #2
 8014618:	4413      	add	r3, r2
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	b29b      	uxth	r3, r3
 801461e:	e001      	b.n	8014624 <dhcp_select+0x1ac>
 8014620:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014624:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014626:	89fb      	ldrh	r3, [r7, #14]
 8014628:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801462c:	4a0f      	ldr	r2, [pc, #60]	; (801466c <dhcp_select+0x1f4>)
 801462e:	fb82 1203 	smull	r1, r2, r2, r3
 8014632:	1152      	asrs	r2, r2, #5
 8014634:	17db      	asrs	r3, r3, #31
 8014636:	1ad3      	subs	r3, r2, r3
 8014638:	b29a      	uxth	r2, r3
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801463e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3720      	adds	r7, #32
 8014646:	46bd      	mov	sp, r7
 8014648:	bdb0      	pop	{r4, r5, r7, pc}
 801464a:	bf00      	nop
 801464c:	0801d0c0 	.word	0x0801d0c0
 8014650:	0801d16c 	.word	0x0801d16c
 8014654:	0801d120 	.word	0x0801d120
 8014658:	0801d188 	.word	0x0801d188
 801465c:	20000030 	.word	0x20000030
 8014660:	20011228 	.word	0x20011228
 8014664:	08027da4 	.word	0x08027da4
 8014668:	08027da8 	.word	0x08027da8
 801466c:	10624dd3 	.word	0x10624dd3

08014670 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014676:	4b27      	ldr	r3, [pc, #156]	; (8014714 <dhcp_coarse_tmr+0xa4>)
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	607b      	str	r3, [r7, #4]
 801467c:	e042      	b.n	8014704 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014682:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d039      	beq.n	80146fe <dhcp_coarse_tmr+0x8e>
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	795b      	ldrb	r3, [r3, #5]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d035      	beq.n	80146fe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	8a9b      	ldrh	r3, [r3, #20]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d012      	beq.n	80146c0 <dhcp_coarse_tmr+0x50>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	8a5b      	ldrh	r3, [r3, #18]
 801469e:	3301      	adds	r3, #1
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	825a      	strh	r2, [r3, #18]
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	8a5a      	ldrh	r2, [r3, #18]
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	8a9b      	ldrh	r3, [r3, #20]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d106      	bne.n	80146c0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f000 fe32 	bl	801531c <dhcp_release_and_stop>
        dhcp_start(netif);
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 f969 	bl	8014990 <dhcp_start>
 80146be:	e01e      	b.n	80146fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	8a1b      	ldrh	r3, [r3, #16]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d00b      	beq.n	80146e0 <dhcp_coarse_tmr+0x70>
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	8a1b      	ldrh	r3, [r3, #16]
 80146cc:	1e5a      	subs	r2, r3, #1
 80146ce:	b291      	uxth	r1, r2
 80146d0:	683a      	ldr	r2, [r7, #0]
 80146d2:	8211      	strh	r1, [r2, #16]
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d103      	bne.n	80146e0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 f8c6 	bl	801486a <dhcp_t2_timeout>
 80146de:	e00e      	b.n	80146fe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	89db      	ldrh	r3, [r3, #14]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d00a      	beq.n	80146fe <dhcp_coarse_tmr+0x8e>
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	89db      	ldrh	r3, [r3, #14]
 80146ec:	1e5a      	subs	r2, r3, #1
 80146ee:	b291      	uxth	r1, r2
 80146f0:	683a      	ldr	r2, [r7, #0]
 80146f2:	81d1      	strh	r1, [r2, #14]
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	d102      	bne.n	80146fe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 f888 	bl	801480e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	607b      	str	r3, [r7, #4]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d1b9      	bne.n	801467e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801470a:	bf00      	nop
 801470c:	bf00      	nop
 801470e:	3708      	adds	r7, #8
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	20011194 	.word	0x20011194

08014718 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801471e:	4b16      	ldr	r3, [pc, #88]	; (8014778 <dhcp_fine_tmr+0x60>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	607b      	str	r3, [r7, #4]
 8014724:	e020      	b.n	8014768 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d017      	beq.n	8014762 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	891b      	ldrh	r3, [r3, #8]
 8014736:	2b01      	cmp	r3, #1
 8014738:	d906      	bls.n	8014748 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	891b      	ldrh	r3, [r3, #8]
 801473e:	3b01      	subs	r3, #1
 8014740:	b29a      	uxth	r2, r3
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	811a      	strh	r2, [r3, #8]
 8014746:	e00c      	b.n	8014762 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	891b      	ldrh	r3, [r3, #8]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d108      	bne.n	8014762 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	891b      	ldrh	r3, [r3, #8]
 8014754:	3b01      	subs	r3, #1
 8014756:	b29a      	uxth	r2, r3
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 f80d 	bl	801477c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	607b      	str	r3, [r7, #4]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d1db      	bne.n	8014726 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801476e:	bf00      	nop
 8014770:	bf00      	nop
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	20011194 	.word	0x20011194

0801477c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014788:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	795b      	ldrb	r3, [r3, #5]
 801478e:	2b0c      	cmp	r3, #12
 8014790:	d003      	beq.n	801479a <dhcp_timeout+0x1e>
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	795b      	ldrb	r3, [r3, #5]
 8014796:	2b06      	cmp	r3, #6
 8014798:	d103      	bne.n	80147a2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fa54 	bl	8014c48 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80147a0:	e031      	b.n	8014806 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	795b      	ldrb	r3, [r3, #5]
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d10e      	bne.n	80147c8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	799b      	ldrb	r3, [r3, #6]
 80147ae:	2b05      	cmp	r3, #5
 80147b0:	d803      	bhi.n	80147ba <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7ff fe60 	bl	8014478 <dhcp_select>
}
 80147b8:	e025      	b.n	8014806 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 fdae 	bl	801531c <dhcp_release_and_stop>
      dhcp_start(netif);
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f000 f8e5 	bl	8014990 <dhcp_start>
}
 80147c6:	e01e      	b.n	8014806 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	795b      	ldrb	r3, [r3, #5]
 80147cc:	2b08      	cmp	r3, #8
 80147ce:	d10b      	bne.n	80147e8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	799b      	ldrb	r3, [r3, #6]
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d803      	bhi.n	80147e0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7ff fdf3 	bl	80143c4 <dhcp_check>
}
 80147de:	e012      	b.n	8014806 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f000 fad3 	bl	8014d8c <dhcp_bind>
}
 80147e6:	e00e      	b.n	8014806 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	795b      	ldrb	r3, [r3, #5]
 80147ec:	2b03      	cmp	r3, #3
 80147ee:	d10a      	bne.n	8014806 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	799b      	ldrb	r3, [r3, #6]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d803      	bhi.n	8014800 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f000 fcd9 	bl	80151b0 <dhcp_reboot>
}
 80147fe:	e002      	b.n	8014806 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 fa21 	bl	8014c48 <dhcp_discover>
}
 8014806:	bf00      	nop
 8014808:	3710      	adds	r7, #16
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}

0801480e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801480e:	b580      	push	{r7, lr}
 8014810:	b084      	sub	sp, #16
 8014812:	af00      	add	r7, sp, #0
 8014814:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801481a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	795b      	ldrb	r3, [r3, #5]
 8014820:	2b01      	cmp	r3, #1
 8014822:	d007      	beq.n	8014834 <dhcp_t1_timeout+0x26>
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	795b      	ldrb	r3, [r3, #5]
 8014828:	2b0a      	cmp	r3, #10
 801482a:	d003      	beq.n	8014834 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014830:	2b05      	cmp	r3, #5
 8014832:	d116      	bne.n	8014862 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f000 fb83 	bl	8014f40 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	899b      	ldrh	r3, [r3, #12]
 801483e:	461a      	mov	r2, r3
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	8a5b      	ldrh	r3, [r3, #18]
 8014844:	1ad3      	subs	r3, r2, r3
 8014846:	2b01      	cmp	r3, #1
 8014848:	dd0b      	ble.n	8014862 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	899b      	ldrh	r3, [r3, #12]
 801484e:	461a      	mov	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	8a5b      	ldrh	r3, [r3, #18]
 8014854:	1ad3      	subs	r3, r2, r3
 8014856:	0fda      	lsrs	r2, r3, #31
 8014858:	4413      	add	r3, r2
 801485a:	105b      	asrs	r3, r3, #1
 801485c:	b29a      	uxth	r2, r3
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014862:	bf00      	nop
 8014864:	3710      	adds	r7, #16
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}

0801486a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801486a:	b580      	push	{r7, lr}
 801486c:	b084      	sub	sp, #16
 801486e:	af00      	add	r7, sp, #0
 8014870:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014876:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	795b      	ldrb	r3, [r3, #5]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d00b      	beq.n	8014898 <dhcp_t2_timeout+0x2e>
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	795b      	ldrb	r3, [r3, #5]
 8014884:	2b0a      	cmp	r3, #10
 8014886:	d007      	beq.n	8014898 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801488c:	2b05      	cmp	r3, #5
 801488e:	d003      	beq.n	8014898 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	795b      	ldrb	r3, [r3, #5]
 8014894:	2b04      	cmp	r3, #4
 8014896:	d116      	bne.n	80148c6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 fbed 	bl	8015078 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	8a9b      	ldrh	r3, [r3, #20]
 80148a2:	461a      	mov	r2, r3
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	8a5b      	ldrh	r3, [r3, #18]
 80148a8:	1ad3      	subs	r3, r2, r3
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	dd0b      	ble.n	80148c6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	8a9b      	ldrh	r3, [r3, #20]
 80148b2:	461a      	mov	r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	8a5b      	ldrh	r3, [r3, #18]
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	0fda      	lsrs	r2, r3, #31
 80148bc:	4413      	add	r3, r2
 80148be:	105b      	asrs	r3, r3, #1
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80148c6:	bf00      	nop
 80148c8:	3710      	adds	r7, #16
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
	...

080148d0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148de:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2200      	movs	r2, #0
 80148e4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2200      	movs	r2, #0
 80148ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80148ec:	4b26      	ldr	r3, [pc, #152]	; (8014988 <dhcp_handle_ack+0xb8>)
 80148ee:	78db      	ldrb	r3, [r3, #3]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d003      	beq.n	80148fc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80148f4:	4b25      	ldr	r3, [pc, #148]	; (801498c <dhcp_handle_ack+0xbc>)
 80148f6:	68da      	ldr	r2, [r3, #12]
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80148fc:	4b22      	ldr	r3, [pc, #136]	; (8014988 <dhcp_handle_ack+0xb8>)
 80148fe:	791b      	ldrb	r3, [r3, #4]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d004      	beq.n	801490e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014904:	4b21      	ldr	r3, [pc, #132]	; (801498c <dhcp_handle_ack+0xbc>)
 8014906:	691a      	ldr	r2, [r3, #16]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	62da      	str	r2, [r3, #44]	; 0x2c
 801490c:	e004      	b.n	8014918 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014912:	085a      	lsrs	r2, r3, #1
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014918:	4b1b      	ldr	r3, [pc, #108]	; (8014988 <dhcp_handle_ack+0xb8>)
 801491a:	795b      	ldrb	r3, [r3, #5]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d004      	beq.n	801492a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014920:	4b1a      	ldr	r3, [pc, #104]	; (801498c <dhcp_handle_ack+0xbc>)
 8014922:	695a      	ldr	r2, [r3, #20]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	631a      	str	r2, [r3, #48]	; 0x30
 8014928:	e007      	b.n	801493a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801492e:	4613      	mov	r3, r2
 8014930:	00db      	lsls	r3, r3, #3
 8014932:	1a9b      	subs	r3, r3, r2
 8014934:	08da      	lsrs	r2, r3, #3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	691a      	ldr	r2, [r3, #16]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014942:	4b11      	ldr	r3, [pc, #68]	; (8014988 <dhcp_handle_ack+0xb8>)
 8014944:	799b      	ldrb	r3, [r3, #6]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00b      	beq.n	8014962 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801494a:	4b10      	ldr	r3, [pc, #64]	; (801498c <dhcp_handle_ack+0xbc>)
 801494c:	699b      	ldr	r3, [r3, #24]
 801494e:	4618      	mov	r0, r3
 8014950:	f7f6 fdc9 	bl	800b4e6 <lwip_htonl>
 8014954:	4602      	mov	r2, r0
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	2201      	movs	r2, #1
 801495e:	71da      	strb	r2, [r3, #7]
 8014960:	e002      	b.n	8014968 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2200      	movs	r2, #0
 8014966:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014968:	4b07      	ldr	r3, [pc, #28]	; (8014988 <dhcp_handle_ack+0xb8>)
 801496a:	79db      	ldrb	r3, [r3, #7]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d007      	beq.n	8014980 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014970:	4b06      	ldr	r3, [pc, #24]	; (801498c <dhcp_handle_ack+0xbc>)
 8014972:	69db      	ldr	r3, [r3, #28]
 8014974:	4618      	mov	r0, r3
 8014976:	f7f6 fdb6 	bl	800b4e6 <lwip_htonl>
 801497a:	4602      	mov	r2, r0
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014980:	bf00      	nop
 8014982:	3710      	adds	r7, #16
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	20011220 	.word	0x20011220
 801498c:	20011200 	.word	0x20011200

08014990 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d109      	bne.n	80149b2 <dhcp_start+0x22>
 801499e:	4b37      	ldr	r3, [pc, #220]	; (8014a7c <dhcp_start+0xec>)
 80149a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80149a4:	4936      	ldr	r1, [pc, #216]	; (8014a80 <dhcp_start+0xf0>)
 80149a6:	4837      	ldr	r0, [pc, #220]	; (8014a84 <dhcp_start+0xf4>)
 80149a8:	f004 f8c0 	bl	8018b2c <iprintf>
 80149ac:	f06f 030f 	mvn.w	r3, #15
 80149b0:	e060      	b.n	8014a74 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149b8:	f003 0301 	and.w	r3, r3, #1
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d109      	bne.n	80149d4 <dhcp_start+0x44>
 80149c0:	4b2e      	ldr	r3, [pc, #184]	; (8014a7c <dhcp_start+0xec>)
 80149c2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80149c6:	4930      	ldr	r1, [pc, #192]	; (8014a88 <dhcp_start+0xf8>)
 80149c8:	482e      	ldr	r0, [pc, #184]	; (8014a84 <dhcp_start+0xf4>)
 80149ca:	f004 f8af 	bl	8018b2c <iprintf>
 80149ce:	f06f 030f 	mvn.w	r3, #15
 80149d2:	e04f      	b.n	8014a74 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149de:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80149e2:	d202      	bcs.n	80149ea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80149e4:	f04f 33ff 	mov.w	r3, #4294967295
 80149e8:	e044      	b.n	8014a74 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d10d      	bne.n	8014a0c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80149f0:	2034      	movs	r0, #52	; 0x34
 80149f2:	f7f7 f8cd 	bl	800bb90 <mem_malloc>
 80149f6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d102      	bne.n	8014a04 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80149fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014a02:	e037      	b.n	8014a74 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	68fa      	ldr	r2, [r7, #12]
 8014a08:	625a      	str	r2, [r3, #36]	; 0x24
 8014a0a:	e005      	b.n	8014a18 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	791b      	ldrb	r3, [r3, #4]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d001      	beq.n	8014a18 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014a14:	f7ff fc92 	bl	801433c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014a18:	2234      	movs	r2, #52	; 0x34
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	68f8      	ldr	r0, [r7, #12]
 8014a1e:	f004 f924 	bl	8018c6a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014a22:	f7ff fc39 	bl	8014298 <dhcp_inc_pcb_refcount>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <dhcp_start+0xa2>
    return ERR_MEM;
 8014a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a30:	e020      	b.n	8014a74 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	2201      	movs	r2, #1
 8014a36:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014a3e:	f003 0304 	and.w	r3, r3, #4
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d105      	bne.n	8014a52 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014a46:	2102      	movs	r1, #2
 8014a48:	68f8      	ldr	r0, [r7, #12]
 8014a4a:	f000 fd01 	bl	8015450 <dhcp_set_state>
    return ERR_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e010      	b.n	8014a74 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f000 f8f8 	bl	8014c48 <dhcp_discover>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014a5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d005      	beq.n	8014a70 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 fc59 	bl	801531c <dhcp_release_and_stop>
    return ERR_MEM;
 8014a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a6e:	e001      	b.n	8014a74 <dhcp_start+0xe4>
  }
  return result;
 8014a70:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3710      	adds	r7, #16
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	0801d0c0 	.word	0x0801d0c0
 8014a80:	0801d1a4 	.word	0x0801d1a4
 8014a84:	0801d120 	.word	0x0801d120
 8014a88:	0801d1e8 	.word	0x0801d1e8

08014a8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a98:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d025      	beq.n	8014aec <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	795b      	ldrb	r3, [r3, #5]
 8014aa4:	2b0a      	cmp	r3, #10
 8014aa6:	d008      	beq.n	8014aba <dhcp_network_changed+0x2e>
 8014aa8:	2b0a      	cmp	r3, #10
 8014aaa:	dc0d      	bgt.n	8014ac8 <dhcp_network_changed+0x3c>
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d01f      	beq.n	8014af0 <dhcp_network_changed+0x64>
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	db09      	blt.n	8014ac8 <dhcp_network_changed+0x3c>
 8014ab4:	3b03      	subs	r3, #3
 8014ab6:	2b02      	cmp	r3, #2
 8014ab8:	d806      	bhi.n	8014ac8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2200      	movs	r2, #0
 8014abe:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f000 fb75 	bl	80151b0 <dhcp_reboot>
      break;
 8014ac6:	e014      	b.n	8014af2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	795b      	ldrb	r3, [r3, #5]
 8014acc:	2b0c      	cmp	r3, #12
 8014ace:	d906      	bls.n	8014ade <dhcp_network_changed+0x52>
 8014ad0:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <dhcp_network_changed+0x6c>)
 8014ad2:	f240 326d 	movw	r2, #877	; 0x36d
 8014ad6:	4909      	ldr	r1, [pc, #36]	; (8014afc <dhcp_network_changed+0x70>)
 8014ad8:	4809      	ldr	r0, [pc, #36]	; (8014b00 <dhcp_network_changed+0x74>)
 8014ada:	f004 f827 	bl	8018b2c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f000 f8af 	bl	8014c48 <dhcp_discover>
      break;
 8014aea:	e002      	b.n	8014af2 <dhcp_network_changed+0x66>
    return;
 8014aec:	bf00      	nop
 8014aee:	e000      	b.n	8014af2 <dhcp_network_changed+0x66>
      break;
 8014af0:	bf00      	nop
  }
}
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	0801d0c0 	.word	0x0801d0c0
 8014afc:	0801d20c 	.word	0x0801d20c
 8014b00:	0801d120 	.word	0x0801d120

08014b04 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d107      	bne.n	8014b24 <dhcp_arp_reply+0x20>
 8014b14:	4b0e      	ldr	r3, [pc, #56]	; (8014b50 <dhcp_arp_reply+0x4c>)
 8014b16:	f240 328b 	movw	r2, #907	; 0x38b
 8014b1a:	490e      	ldr	r1, [pc, #56]	; (8014b54 <dhcp_arp_reply+0x50>)
 8014b1c:	480e      	ldr	r0, [pc, #56]	; (8014b58 <dhcp_arp_reply+0x54>)
 8014b1e:	f004 f805 	bl	8018b2c <iprintf>
 8014b22:	e012      	b.n	8014b4a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b28:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d00c      	beq.n	8014b4a <dhcp_arp_reply+0x46>
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	795b      	ldrb	r3, [r3, #5]
 8014b34:	2b08      	cmp	r3, #8
 8014b36:	d108      	bne.n	8014b4a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	681a      	ldr	r2, [r3, #0]
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	69db      	ldr	r3, [r3, #28]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d102      	bne.n	8014b4a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f000 f809 	bl	8014b5c <dhcp_decline>
    }
  }
}
 8014b4a:	3710      	adds	r7, #16
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}
 8014b50:	0801d0c0 	.word	0x0801d0c0
 8014b54:	0801d1a4 	.word	0x0801d1a4
 8014b58:	0801d120 	.word	0x0801d120

08014b5c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014b5c:	b5b0      	push	{r4, r5, r7, lr}
 8014b5e:	b08a      	sub	sp, #40	; 0x28
 8014b60:	af02      	add	r7, sp, #8
 8014b62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b68:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014b6a:	210c      	movs	r1, #12
 8014b6c:	69b8      	ldr	r0, [r7, #24]
 8014b6e:	f000 fc6f 	bl	8015450 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014b72:	f107 030c 	add.w	r3, r7, #12
 8014b76:	2204      	movs	r2, #4
 8014b78:	69b9      	ldr	r1, [r7, #24]
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f001 f8f4 	bl	8015d68 <dhcp_create_msg>
 8014b80:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d035      	beq.n	8014bf4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014b8e:	89b8      	ldrh	r0, [r7, #12]
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b96:	2304      	movs	r3, #4
 8014b98:	2232      	movs	r2, #50	; 0x32
 8014b9a:	f000 fc73 	bl	8015484 <dhcp_option>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014ba2:	89bc      	ldrh	r4, [r7, #12]
 8014ba4:	693b      	ldr	r3, [r7, #16]
 8014ba6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	69db      	ldr	r3, [r3, #28]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7f6 fc99 	bl	800b4e6 <lwip_htonl>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f000 fcee 	bl	801559c <dhcp_option_long>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014bc4:	89b8      	ldrh	r0, [r7, #12]
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	33f0      	adds	r3, #240	; 0xf0
 8014bca:	697a      	ldr	r2, [r7, #20]
 8014bcc:	4619      	mov	r1, r3
 8014bce:	f001 f9a1 	bl	8015f14 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014bd2:	4b19      	ldr	r3, [pc, #100]	; (8014c38 <dhcp_decline+0xdc>)
 8014bd4:	6818      	ldr	r0, [r3, #0]
 8014bd6:	4b19      	ldr	r3, [pc, #100]	; (8014c3c <dhcp_decline+0xe0>)
 8014bd8:	9301      	str	r3, [sp, #4]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	2343      	movs	r3, #67	; 0x43
 8014be0:	4a17      	ldr	r2, [pc, #92]	; (8014c40 <dhcp_decline+0xe4>)
 8014be2:	6979      	ldr	r1, [r7, #20]
 8014be4:	f7ff f8c6 	bl	8013d74 <udp_sendto_if_src>
 8014be8:	4603      	mov	r3, r0
 8014bea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014bec:	6978      	ldr	r0, [r7, #20]
 8014bee:	f7f8 f899 	bl	800cd24 <pbuf_free>
 8014bf2:	e001      	b.n	8014bf8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014bf4:	23ff      	movs	r3, #255	; 0xff
 8014bf6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014bf8:	69bb      	ldr	r3, [r7, #24]
 8014bfa:	799b      	ldrb	r3, [r3, #6]
 8014bfc:	2bff      	cmp	r3, #255	; 0xff
 8014bfe:	d005      	beq.n	8014c0c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014c00:	69bb      	ldr	r3, [r7, #24]
 8014c02:	799b      	ldrb	r3, [r3, #6]
 8014c04:	3301      	adds	r3, #1
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014c0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014c10:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c12:	89fb      	ldrh	r3, [r7, #14]
 8014c14:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c18:	4a0a      	ldr	r2, [pc, #40]	; (8014c44 <dhcp_decline+0xe8>)
 8014c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8014c1e:	1152      	asrs	r2, r2, #5
 8014c20:	17db      	asrs	r3, r3, #31
 8014c22:	1ad3      	subs	r3, r2, r3
 8014c24:	b29a      	uxth	r2, r3
 8014c26:	69bb      	ldr	r3, [r7, #24]
 8014c28:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014c2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3720      	adds	r7, #32
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bdb0      	pop	{r4, r5, r7, pc}
 8014c36:	bf00      	nop
 8014c38:	20011228 	.word	0x20011228
 8014c3c:	08027da4 	.word	0x08027da4
 8014c40:	08027da8 	.word	0x08027da8
 8014c44:	10624dd3 	.word	0x10624dd3

08014c48 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b08a      	sub	sp, #40	; 0x28
 8014c4c:	af02      	add	r7, sp, #8
 8014c4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c54:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014c56:	2300      	movs	r3, #0
 8014c58:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014c60:	2106      	movs	r1, #6
 8014c62:	69b8      	ldr	r0, [r7, #24]
 8014c64:	f000 fbf4 	bl	8015450 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014c68:	f107 0308 	add.w	r3, r7, #8
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	69b9      	ldr	r1, [r7, #24]
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f001 f879 	bl	8015d68 <dhcp_create_msg>
 8014c76:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d04b      	beq.n	8014d16 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014c84:	8938      	ldrh	r0, [r7, #8]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c8c:	2302      	movs	r3, #2
 8014c8e:	2239      	movs	r2, #57	; 0x39
 8014c90:	f000 fbf8 	bl	8015484 <dhcp_option>
 8014c94:	4603      	mov	r3, r0
 8014c96:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014c98:	8938      	ldrh	r0, [r7, #8]
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	f000 fc47 	bl	8015538 <dhcp_option_short>
 8014caa:	4603      	mov	r3, r0
 8014cac:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014cae:	8938      	ldrh	r0, [r7, #8]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cb6:	2303      	movs	r3, #3
 8014cb8:	2237      	movs	r2, #55	; 0x37
 8014cba:	f000 fbe3 	bl	8015484 <dhcp_option>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	77fb      	strb	r3, [r7, #31]
 8014cc6:	e00e      	b.n	8014ce6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014cc8:	8938      	ldrh	r0, [r7, #8]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cd0:	7ffb      	ldrb	r3, [r7, #31]
 8014cd2:	4a29      	ldr	r2, [pc, #164]	; (8014d78 <dhcp_discover+0x130>)
 8014cd4:	5cd3      	ldrb	r3, [r2, r3]
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	f000 fc08 	bl	80154ec <dhcp_option_byte>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ce0:	7ffb      	ldrb	r3, [r7, #31]
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	77fb      	strb	r3, [r7, #31]
 8014ce6:	7ffb      	ldrb	r3, [r7, #31]
 8014ce8:	2b02      	cmp	r3, #2
 8014cea:	d9ed      	bls.n	8014cc8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014cec:	8938      	ldrh	r0, [r7, #8]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	33f0      	adds	r3, #240	; 0xf0
 8014cf2:	693a      	ldr	r2, [r7, #16]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	f001 f90d 	bl	8015f14 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014cfa:	4b20      	ldr	r3, [pc, #128]	; (8014d7c <dhcp_discover+0x134>)
 8014cfc:	6818      	ldr	r0, [r3, #0]
 8014cfe:	4b20      	ldr	r3, [pc, #128]	; (8014d80 <dhcp_discover+0x138>)
 8014d00:	9301      	str	r3, [sp, #4]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	9300      	str	r3, [sp, #0]
 8014d06:	2343      	movs	r3, #67	; 0x43
 8014d08:	4a1e      	ldr	r2, [pc, #120]	; (8014d84 <dhcp_discover+0x13c>)
 8014d0a:	6939      	ldr	r1, [r7, #16]
 8014d0c:	f7ff f832 	bl	8013d74 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014d10:	6938      	ldr	r0, [r7, #16]
 8014d12:	f7f8 f807 	bl	800cd24 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	799b      	ldrb	r3, [r3, #6]
 8014d1a:	2bff      	cmp	r3, #255	; 0xff
 8014d1c:	d005      	beq.n	8014d2a <dhcp_discover+0xe2>
    dhcp->tries++;
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	799b      	ldrb	r3, [r3, #6]
 8014d22:	3301      	adds	r3, #1
 8014d24:	b2da      	uxtb	r2, r3
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	799b      	ldrb	r3, [r3, #6]
 8014d2e:	2b05      	cmp	r3, #5
 8014d30:	d80d      	bhi.n	8014d4e <dhcp_discover+0x106>
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	799b      	ldrb	r3, [r3, #6]
 8014d36:	461a      	mov	r2, r3
 8014d38:	2301      	movs	r3, #1
 8014d3a:	4093      	lsls	r3, r2
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	461a      	mov	r2, r3
 8014d40:	0152      	lsls	r2, r2, #5
 8014d42:	1ad2      	subs	r2, r2, r3
 8014d44:	0092      	lsls	r2, r2, #2
 8014d46:	4413      	add	r3, r2
 8014d48:	00db      	lsls	r3, r3, #3
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	e001      	b.n	8014d52 <dhcp_discover+0x10a>
 8014d4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014d52:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d54:	897b      	ldrh	r3, [r7, #10]
 8014d56:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d5a:	4a0b      	ldr	r2, [pc, #44]	; (8014d88 <dhcp_discover+0x140>)
 8014d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8014d60:	1152      	asrs	r2, r2, #5
 8014d62:	17db      	asrs	r3, r3, #31
 8014d64:	1ad3      	subs	r3, r2, r3
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	69bb      	ldr	r3, [r7, #24]
 8014d6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3720      	adds	r7, #32
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20000030 	.word	0x20000030
 8014d7c:	20011228 	.word	0x20011228
 8014d80:	08027da4 	.word	0x08027da4
 8014d84:	08027da8 	.word	0x08027da8
 8014d88:	10624dd3 	.word	0x10624dd3

08014d8c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d107      	bne.n	8014daa <dhcp_bind+0x1e>
 8014d9a:	4b64      	ldr	r3, [pc, #400]	; (8014f2c <dhcp_bind+0x1a0>)
 8014d9c:	f240 4215 	movw	r2, #1045	; 0x415
 8014da0:	4963      	ldr	r1, [pc, #396]	; (8014f30 <dhcp_bind+0x1a4>)
 8014da2:	4864      	ldr	r0, [pc, #400]	; (8014f34 <dhcp_bind+0x1a8>)
 8014da4:	f003 fec2 	bl	8018b2c <iprintf>
 8014da8:	e0bc      	b.n	8014f24 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dae:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d107      	bne.n	8014dc6 <dhcp_bind+0x3a>
 8014db6:	4b5d      	ldr	r3, [pc, #372]	; (8014f2c <dhcp_bind+0x1a0>)
 8014db8:	f240 4217 	movw	r2, #1047	; 0x417
 8014dbc:	495e      	ldr	r1, [pc, #376]	; (8014f38 <dhcp_bind+0x1ac>)
 8014dbe:	485d      	ldr	r0, [pc, #372]	; (8014f34 <dhcp_bind+0x1a8>)
 8014dc0:	f003 feb4 	bl	8018b2c <iprintf>
 8014dc4:	e0ae      	b.n	8014f24 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014dc6:	69bb      	ldr	r3, [r7, #24]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dd4:	d019      	beq.n	8014e0a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dda:	331e      	adds	r3, #30
 8014ddc:	4a57      	ldr	r2, [pc, #348]	; (8014f3c <dhcp_bind+0x1b0>)
 8014dde:	fba2 2303 	umull	r2, r3, r2, r3
 8014de2:	095b      	lsrs	r3, r3, #5
 8014de4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dec:	d302      	bcc.n	8014df4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014df2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	8a9b      	ldrh	r3, [r3, #20]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d102      	bne.n	8014e0a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014e04:	69bb      	ldr	r3, [r7, #24]
 8014e06:	2201      	movs	r2, #1
 8014e08:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e12:	d01d      	beq.n	8014e50 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e18:	331e      	adds	r3, #30
 8014e1a:	4a48      	ldr	r2, [pc, #288]	; (8014f3c <dhcp_bind+0x1b0>)
 8014e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e20:	095b      	lsrs	r3, r3, #5
 8014e22:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e2a:	d302      	bcc.n	8014e32 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e30:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	b29a      	uxth	r2, r3
 8014e36:	69bb      	ldr	r3, [r7, #24]
 8014e38:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	895b      	ldrh	r3, [r3, #10]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d102      	bne.n	8014e48 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	2201      	movs	r2, #1
 8014e46:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	895a      	ldrh	r2, [r3, #10]
 8014e4c:	69bb      	ldr	r3, [r7, #24]
 8014e4e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014e50:	69bb      	ldr	r3, [r7, #24]
 8014e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e58:	d01d      	beq.n	8014e96 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e5e:	331e      	adds	r3, #30
 8014e60:	4a36      	ldr	r2, [pc, #216]	; (8014f3c <dhcp_bind+0x1b0>)
 8014e62:	fba2 2303 	umull	r2, r3, r2, r3
 8014e66:	095b      	lsrs	r3, r3, #5
 8014e68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014e6a:	69fb      	ldr	r3, [r7, #28]
 8014e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e70:	d302      	bcc.n	8014e78 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014e78:	69fb      	ldr	r3, [r7, #28]
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	899b      	ldrh	r3, [r3, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d102      	bne.n	8014e8e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014e8e:	69bb      	ldr	r3, [r7, #24]
 8014e90:	899a      	ldrh	r2, [r3, #12]
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	895a      	ldrh	r2, [r3, #10]
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	899b      	ldrh	r3, [r3, #12]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d306      	bcc.n	8014eb0 <dhcp_bind+0x124>
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	899b      	ldrh	r3, [r3, #12]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d002      	beq.n	8014eb0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	2200      	movs	r2, #0
 8014eae:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	79db      	ldrb	r3, [r3, #7]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d003      	beq.n	8014ec0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014eb8:	69bb      	ldr	r3, [r7, #24]
 8014eba:	6a1b      	ldr	r3, [r3, #32]
 8014ebc:	613b      	str	r3, [r7, #16]
 8014ebe:	e014      	b.n	8014eea <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014ec0:	69bb      	ldr	r3, [r7, #24]
 8014ec2:	331c      	adds	r3, #28
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	db02      	blt.n	8014ed6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014ed0:	23ff      	movs	r3, #255	; 0xff
 8014ed2:	613b      	str	r3, [r7, #16]
 8014ed4:	e009      	b.n	8014eea <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014ed6:	7dfb      	ldrb	r3, [r7, #23]
 8014ed8:	2bbf      	cmp	r3, #191	; 0xbf
 8014eda:	d903      	bls.n	8014ee4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014edc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014ee0:	613b      	str	r3, [r7, #16]
 8014ee2:	e002      	b.n	8014eea <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ee8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eee:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d108      	bne.n	8014f08 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014ef6:	69bb      	ldr	r3, [r7, #24]
 8014ef8:	69da      	ldr	r2, [r3, #28]
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	4013      	ands	r3, r2
 8014efe:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014f06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014f08:	210a      	movs	r1, #10
 8014f0a:	69b8      	ldr	r0, [r7, #24]
 8014f0c:	f000 faa0 	bl	8015450 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	f103 011c 	add.w	r1, r3, #28
 8014f16:	f107 030c 	add.w	r3, r7, #12
 8014f1a:	f107 0210 	add.w	r2, r7, #16
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7f7 f9f2 	bl	800c308 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014f24:	3720      	adds	r7, #32
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801d0c0 	.word	0x0801d0c0
 8014f30:	0801d220 	.word	0x0801d220
 8014f34:	0801d120 	.word	0x0801d120
 8014f38:	0801d23c 	.word	0x0801d23c
 8014f3c:	88888889 	.word	0x88888889

08014f40 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b08a      	sub	sp, #40	; 0x28
 8014f44:	af02      	add	r7, sp, #8
 8014f46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f4c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014f4e:	2105      	movs	r1, #5
 8014f50:	69b8      	ldr	r0, [r7, #24]
 8014f52:	f000 fa7d 	bl	8015450 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014f56:	f107 030c 	add.w	r3, r7, #12
 8014f5a:	2203      	movs	r2, #3
 8014f5c:	69b9      	ldr	r1, [r7, #24]
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 ff02 	bl	8015d68 <dhcp_create_msg>
 8014f64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d04e      	beq.n	801500a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014f72:	89b8      	ldrh	r0, [r7, #12]
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f7a:	2302      	movs	r3, #2
 8014f7c:	2239      	movs	r2, #57	; 0x39
 8014f7e:	f000 fa81 	bl	8015484 <dhcp_option>
 8014f82:	4603      	mov	r3, r0
 8014f84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014f86:	89b8      	ldrh	r0, [r7, #12]
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f92:	461a      	mov	r2, r3
 8014f94:	f000 fad0 	bl	8015538 <dhcp_option_short>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014f9c:	89b8      	ldrh	r0, [r7, #12]
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014fa4:	2303      	movs	r3, #3
 8014fa6:	2237      	movs	r2, #55	; 0x37
 8014fa8:	f000 fa6c 	bl	8015484 <dhcp_option>
 8014fac:	4603      	mov	r3, r0
 8014fae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	77bb      	strb	r3, [r7, #30]
 8014fb4:	e00e      	b.n	8014fd4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014fb6:	89b8      	ldrh	r0, [r7, #12]
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014fbe:	7fbb      	ldrb	r3, [r7, #30]
 8014fc0:	4a2a      	ldr	r2, [pc, #168]	; (801506c <dhcp_renew+0x12c>)
 8014fc2:	5cd3      	ldrb	r3, [r2, r3]
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	f000 fa91 	bl	80154ec <dhcp_option_byte>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014fce:	7fbb      	ldrb	r3, [r7, #30]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	77bb      	strb	r3, [r7, #30]
 8014fd4:	7fbb      	ldrb	r3, [r7, #30]
 8014fd6:	2b02      	cmp	r3, #2
 8014fd8:	d9ed      	bls.n	8014fb6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014fda:	89b8      	ldrh	r0, [r7, #12]
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	33f0      	adds	r3, #240	; 0xf0
 8014fe0:	697a      	ldr	r2, [r7, #20]
 8014fe2:	4619      	mov	r1, r3
 8014fe4:	f000 ff96 	bl	8015f14 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014fe8:	4b21      	ldr	r3, [pc, #132]	; (8015070 <dhcp_renew+0x130>)
 8014fea:	6818      	ldr	r0, [r3, #0]
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	f103 0218 	add.w	r2, r3, #24
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	2343      	movs	r3, #67	; 0x43
 8014ff8:	6979      	ldr	r1, [r7, #20]
 8014ffa:	f7fe fe47 	bl	8013c8c <udp_sendto_if>
 8014ffe:	4603      	mov	r3, r0
 8015000:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015002:	6978      	ldr	r0, [r7, #20]
 8015004:	f7f7 fe8e 	bl	800cd24 <pbuf_free>
 8015008:	e001      	b.n	801500e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801500a:	23ff      	movs	r3, #255	; 0xff
 801500c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	799b      	ldrb	r3, [r3, #6]
 8015012:	2bff      	cmp	r3, #255	; 0xff
 8015014:	d005      	beq.n	8015022 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	799b      	ldrb	r3, [r3, #6]
 801501a:	3301      	adds	r3, #1
 801501c:	b2da      	uxtb	r2, r3
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	799b      	ldrb	r3, [r3, #6]
 8015026:	2b09      	cmp	r3, #9
 8015028:	d80a      	bhi.n	8015040 <dhcp_renew+0x100>
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	799b      	ldrb	r3, [r3, #6]
 801502e:	b29b      	uxth	r3, r3
 8015030:	461a      	mov	r2, r3
 8015032:	0152      	lsls	r2, r2, #5
 8015034:	1ad2      	subs	r2, r2, r3
 8015036:	0092      	lsls	r2, r2, #2
 8015038:	4413      	add	r3, r2
 801503a:	011b      	lsls	r3, r3, #4
 801503c:	b29b      	uxth	r3, r3
 801503e:	e001      	b.n	8015044 <dhcp_renew+0x104>
 8015040:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015044:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015046:	89fb      	ldrh	r3, [r7, #14]
 8015048:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801504c:	4a09      	ldr	r2, [pc, #36]	; (8015074 <dhcp_renew+0x134>)
 801504e:	fb82 1203 	smull	r1, r2, r2, r3
 8015052:	1152      	asrs	r2, r2, #5
 8015054:	17db      	asrs	r3, r3, #31
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	b29a      	uxth	r2, r3
 801505a:	69bb      	ldr	r3, [r7, #24]
 801505c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801505e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015062:	4618      	mov	r0, r3
 8015064:	3720      	adds	r7, #32
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	20000030 	.word	0x20000030
 8015070:	20011228 	.word	0x20011228
 8015074:	10624dd3 	.word	0x10624dd3

08015078 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b08a      	sub	sp, #40	; 0x28
 801507c:	af02      	add	r7, sp, #8
 801507e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015084:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015086:	2104      	movs	r1, #4
 8015088:	69b8      	ldr	r0, [r7, #24]
 801508a:	f000 f9e1 	bl	8015450 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801508e:	f107 030c 	add.w	r3, r7, #12
 8015092:	2203      	movs	r2, #3
 8015094:	69b9      	ldr	r1, [r7, #24]
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f000 fe66 	bl	8015d68 <dhcp_create_msg>
 801509c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d04c      	beq.n	801513e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80150aa:	89b8      	ldrh	r0, [r7, #12]
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150b2:	2302      	movs	r3, #2
 80150b4:	2239      	movs	r2, #57	; 0x39
 80150b6:	f000 f9e5 	bl	8015484 <dhcp_option>
 80150ba:	4603      	mov	r3, r0
 80150bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80150be:	89b8      	ldrh	r0, [r7, #12]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150ca:	461a      	mov	r2, r3
 80150cc:	f000 fa34 	bl	8015538 <dhcp_option_short>
 80150d0:	4603      	mov	r3, r0
 80150d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150d4:	89b8      	ldrh	r0, [r7, #12]
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150dc:	2303      	movs	r3, #3
 80150de:	2237      	movs	r2, #55	; 0x37
 80150e0:	f000 f9d0 	bl	8015484 <dhcp_option>
 80150e4:	4603      	mov	r3, r0
 80150e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150e8:	2300      	movs	r3, #0
 80150ea:	77bb      	strb	r3, [r7, #30]
 80150ec:	e00e      	b.n	801510c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150ee:	89b8      	ldrh	r0, [r7, #12]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150f6:	7fbb      	ldrb	r3, [r7, #30]
 80150f8:	4a29      	ldr	r2, [pc, #164]	; (80151a0 <dhcp_rebind+0x128>)
 80150fa:	5cd3      	ldrb	r3, [r2, r3]
 80150fc:	461a      	mov	r2, r3
 80150fe:	f000 f9f5 	bl	80154ec <dhcp_option_byte>
 8015102:	4603      	mov	r3, r0
 8015104:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015106:	7fbb      	ldrb	r3, [r7, #30]
 8015108:	3301      	adds	r3, #1
 801510a:	77bb      	strb	r3, [r7, #30]
 801510c:	7fbb      	ldrb	r3, [r7, #30]
 801510e:	2b02      	cmp	r3, #2
 8015110:	d9ed      	bls.n	80150ee <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015112:	89b8      	ldrh	r0, [r7, #12]
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	33f0      	adds	r3, #240	; 0xf0
 8015118:	697a      	ldr	r2, [r7, #20]
 801511a:	4619      	mov	r1, r3
 801511c:	f000 fefa 	bl	8015f14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015120:	4b20      	ldr	r3, [pc, #128]	; (80151a4 <dhcp_rebind+0x12c>)
 8015122:	6818      	ldr	r0, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	2343      	movs	r3, #67	; 0x43
 801512a:	4a1f      	ldr	r2, [pc, #124]	; (80151a8 <dhcp_rebind+0x130>)
 801512c:	6979      	ldr	r1, [r7, #20]
 801512e:	f7fe fdad 	bl	8013c8c <udp_sendto_if>
 8015132:	4603      	mov	r3, r0
 8015134:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015136:	6978      	ldr	r0, [r7, #20]
 8015138:	f7f7 fdf4 	bl	800cd24 <pbuf_free>
 801513c:	e001      	b.n	8015142 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801513e:	23ff      	movs	r3, #255	; 0xff
 8015140:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015142:	69bb      	ldr	r3, [r7, #24]
 8015144:	799b      	ldrb	r3, [r3, #6]
 8015146:	2bff      	cmp	r3, #255	; 0xff
 8015148:	d005      	beq.n	8015156 <dhcp_rebind+0xde>
    dhcp->tries++;
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	799b      	ldrb	r3, [r3, #6]
 801514e:	3301      	adds	r3, #1
 8015150:	b2da      	uxtb	r2, r3
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	799b      	ldrb	r3, [r3, #6]
 801515a:	2b09      	cmp	r3, #9
 801515c:	d80a      	bhi.n	8015174 <dhcp_rebind+0xfc>
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	799b      	ldrb	r3, [r3, #6]
 8015162:	b29b      	uxth	r3, r3
 8015164:	461a      	mov	r2, r3
 8015166:	0152      	lsls	r2, r2, #5
 8015168:	1ad2      	subs	r2, r2, r3
 801516a:	0092      	lsls	r2, r2, #2
 801516c:	4413      	add	r3, r2
 801516e:	00db      	lsls	r3, r3, #3
 8015170:	b29b      	uxth	r3, r3
 8015172:	e001      	b.n	8015178 <dhcp_rebind+0x100>
 8015174:	f242 7310 	movw	r3, #10000	; 0x2710
 8015178:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801517a:	89fb      	ldrh	r3, [r7, #14]
 801517c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015180:	4a0a      	ldr	r2, [pc, #40]	; (80151ac <dhcp_rebind+0x134>)
 8015182:	fb82 1203 	smull	r1, r2, r2, r3
 8015186:	1152      	asrs	r2, r2, #5
 8015188:	17db      	asrs	r3, r3, #31
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	b29a      	uxth	r2, r3
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015192:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3720      	adds	r7, #32
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	20000030 	.word	0x20000030
 80151a4:	20011228 	.word	0x20011228
 80151a8:	08027da8 	.word	0x08027da8
 80151ac:	10624dd3 	.word	0x10624dd3

080151b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80151b0:	b5b0      	push	{r4, r5, r7, lr}
 80151b2:	b08a      	sub	sp, #40	; 0x28
 80151b4:	af02      	add	r7, sp, #8
 80151b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80151be:	2103      	movs	r1, #3
 80151c0:	69b8      	ldr	r0, [r7, #24]
 80151c2:	f000 f945 	bl	8015450 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80151c6:	f107 030c 	add.w	r3, r7, #12
 80151ca:	2203      	movs	r2, #3
 80151cc:	69b9      	ldr	r1, [r7, #24]
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f000 fdca 	bl	8015d68 <dhcp_create_msg>
 80151d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d066      	beq.n	80152aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151e2:	89b8      	ldrh	r0, [r7, #12]
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151ea:	2302      	movs	r3, #2
 80151ec:	2239      	movs	r2, #57	; 0x39
 80151ee:	f000 f949 	bl	8015484 <dhcp_option>
 80151f2:	4603      	mov	r3, r0
 80151f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80151f6:	89b8      	ldrh	r0, [r7, #12]
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	33f0      	adds	r3, #240	; 0xf0
 80151fc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015200:	4619      	mov	r1, r3
 8015202:	f000 f999 	bl	8015538 <dhcp_option_short>
 8015206:	4603      	mov	r3, r0
 8015208:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801520a:	89b8      	ldrh	r0, [r7, #12]
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015212:	2304      	movs	r3, #4
 8015214:	2232      	movs	r2, #50	; 0x32
 8015216:	f000 f935 	bl	8015484 <dhcp_option>
 801521a:	4603      	mov	r3, r0
 801521c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801521e:	89bc      	ldrh	r4, [r7, #12]
 8015220:	693b      	ldr	r3, [r7, #16]
 8015222:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	69db      	ldr	r3, [r3, #28]
 801522a:	4618      	mov	r0, r3
 801522c:	f7f6 f95b 	bl	800b4e6 <lwip_htonl>
 8015230:	4603      	mov	r3, r0
 8015232:	461a      	mov	r2, r3
 8015234:	4629      	mov	r1, r5
 8015236:	4620      	mov	r0, r4
 8015238:	f000 f9b0 	bl	801559c <dhcp_option_long>
 801523c:	4603      	mov	r3, r0
 801523e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015240:	89b8      	ldrh	r0, [r7, #12]
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015248:	2303      	movs	r3, #3
 801524a:	2237      	movs	r2, #55	; 0x37
 801524c:	f000 f91a 	bl	8015484 <dhcp_option>
 8015250:	4603      	mov	r3, r0
 8015252:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015254:	2300      	movs	r3, #0
 8015256:	77bb      	strb	r3, [r7, #30]
 8015258:	e00e      	b.n	8015278 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801525a:	89b8      	ldrh	r0, [r7, #12]
 801525c:	693b      	ldr	r3, [r7, #16]
 801525e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015262:	7fbb      	ldrb	r3, [r7, #30]
 8015264:	4a29      	ldr	r2, [pc, #164]	; (801530c <dhcp_reboot+0x15c>)
 8015266:	5cd3      	ldrb	r3, [r2, r3]
 8015268:	461a      	mov	r2, r3
 801526a:	f000 f93f 	bl	80154ec <dhcp_option_byte>
 801526e:	4603      	mov	r3, r0
 8015270:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015272:	7fbb      	ldrb	r3, [r7, #30]
 8015274:	3301      	adds	r3, #1
 8015276:	77bb      	strb	r3, [r7, #30]
 8015278:	7fbb      	ldrb	r3, [r7, #30]
 801527a:	2b02      	cmp	r3, #2
 801527c:	d9ed      	bls.n	801525a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801527e:	89b8      	ldrh	r0, [r7, #12]
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	33f0      	adds	r3, #240	; 0xf0
 8015284:	697a      	ldr	r2, [r7, #20]
 8015286:	4619      	mov	r1, r3
 8015288:	f000 fe44 	bl	8015f14 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801528c:	4b20      	ldr	r3, [pc, #128]	; (8015310 <dhcp_reboot+0x160>)
 801528e:	6818      	ldr	r0, [r3, #0]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	2343      	movs	r3, #67	; 0x43
 8015296:	4a1f      	ldr	r2, [pc, #124]	; (8015314 <dhcp_reboot+0x164>)
 8015298:	6979      	ldr	r1, [r7, #20]
 801529a:	f7fe fcf7 	bl	8013c8c <udp_sendto_if>
 801529e:	4603      	mov	r3, r0
 80152a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80152a2:	6978      	ldr	r0, [r7, #20]
 80152a4:	f7f7 fd3e 	bl	800cd24 <pbuf_free>
 80152a8:	e001      	b.n	80152ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80152aa:	23ff      	movs	r3, #255	; 0xff
 80152ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	799b      	ldrb	r3, [r3, #6]
 80152b2:	2bff      	cmp	r3, #255	; 0xff
 80152b4:	d005      	beq.n	80152c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80152b6:	69bb      	ldr	r3, [r7, #24]
 80152b8:	799b      	ldrb	r3, [r3, #6]
 80152ba:	3301      	adds	r3, #1
 80152bc:	b2da      	uxtb	r2, r3
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	799b      	ldrb	r3, [r3, #6]
 80152c6:	2b09      	cmp	r3, #9
 80152c8:	d80a      	bhi.n	80152e0 <dhcp_reboot+0x130>
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	799b      	ldrb	r3, [r3, #6]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	461a      	mov	r2, r3
 80152d2:	0152      	lsls	r2, r2, #5
 80152d4:	1ad2      	subs	r2, r2, r3
 80152d6:	0092      	lsls	r2, r2, #2
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	b29b      	uxth	r3, r3
 80152de:	e001      	b.n	80152e4 <dhcp_reboot+0x134>
 80152e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80152e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152e6:	89fb      	ldrh	r3, [r7, #14]
 80152e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80152ec:	4a0a      	ldr	r2, [pc, #40]	; (8015318 <dhcp_reboot+0x168>)
 80152ee:	fb82 1203 	smull	r1, r2, r2, r3
 80152f2:	1152      	asrs	r2, r2, #5
 80152f4:	17db      	asrs	r3, r3, #31
 80152f6:	1ad3      	subs	r3, r2, r3
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80152fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015302:	4618      	mov	r0, r3
 8015304:	3720      	adds	r7, #32
 8015306:	46bd      	mov	sp, r7
 8015308:	bdb0      	pop	{r4, r5, r7, pc}
 801530a:	bf00      	nop
 801530c:	20000030 	.word	0x20000030
 8015310:	20011228 	.word	0x20011228
 8015314:	08027da8 	.word	0x08027da8
 8015318:	10624dd3 	.word	0x10624dd3

0801531c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801531c:	b5b0      	push	{r4, r5, r7, lr}
 801531e:	b08a      	sub	sp, #40	; 0x28
 8015320:	af02      	add	r7, sp, #8
 8015322:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015328:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	2b00      	cmp	r3, #0
 801532e:	f000 8084 	beq.w	801543a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	795b      	ldrb	r3, [r3, #5]
 8015336:	2b00      	cmp	r3, #0
 8015338:	f000 8081 	beq.w	801543e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	699b      	ldr	r3, [r3, #24]
 8015340:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015342:	69fb      	ldr	r3, [r7, #28]
 8015344:	2200      	movs	r2, #0
 8015346:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	2200      	movs	r2, #0
 801534c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	2200      	movs	r2, #0
 8015352:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	2200      	movs	r2, #0
 8015358:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	2200      	movs	r2, #0
 801535e:	631a      	str	r2, [r3, #48]	; 0x30
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	62da      	str	r2, [r3, #44]	; 0x2c
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015370:	69fb      	ldr	r3, [r7, #28]
 8015372:	2200      	movs	r2, #0
 8015374:	829a      	strh	r2, [r3, #20]
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	8a9a      	ldrh	r2, [r3, #20]
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	825a      	strh	r2, [r3, #18]
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	8a5a      	ldrh	r2, [r3, #18]
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	821a      	strh	r2, [r3, #16]
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	8a1a      	ldrh	r2, [r3, #16]
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f000 fdee 	bl	8015f70 <dhcp_supplied_address>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	d03b      	beq.n	8015412 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801539a:	f107 030e 	add.w	r3, r7, #14
 801539e:	2207      	movs	r2, #7
 80153a0:	69f9      	ldr	r1, [r7, #28]
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f000 fce0 	bl	8015d68 <dhcp_create_msg>
 80153a8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d030      	beq.n	8015412 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	685b      	ldr	r3, [r3, #4]
 80153b4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80153b6:	89f8      	ldrh	r0, [r7, #14]
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153be:	2304      	movs	r3, #4
 80153c0:	2236      	movs	r2, #54	; 0x36
 80153c2:	f000 f85f 	bl	8015484 <dhcp_option>
 80153c6:	4603      	mov	r3, r0
 80153c8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80153ca:	89fc      	ldrh	r4, [r7, #14]
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7f6 f886 	bl	800b4e6 <lwip_htonl>
 80153da:	4603      	mov	r3, r0
 80153dc:	461a      	mov	r2, r3
 80153de:	4629      	mov	r1, r5
 80153e0:	4620      	mov	r0, r4
 80153e2:	f000 f8db 	bl	801559c <dhcp_option_long>
 80153e6:	4603      	mov	r3, r0
 80153e8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153ea:	89f8      	ldrh	r0, [r7, #14]
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	33f0      	adds	r3, #240	; 0xf0
 80153f0:	69ba      	ldr	r2, [r7, #24]
 80153f2:	4619      	mov	r1, r3
 80153f4:	f000 fd8e 	bl	8015f14 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80153f8:	4b13      	ldr	r3, [pc, #76]	; (8015448 <dhcp_release_and_stop+0x12c>)
 80153fa:	6818      	ldr	r0, [r3, #0]
 80153fc:	f107 0210 	add.w	r2, r7, #16
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	2343      	movs	r3, #67	; 0x43
 8015406:	69b9      	ldr	r1, [r7, #24]
 8015408:	f7fe fc40 	bl	8013c8c <udp_sendto_if>
      pbuf_free(p_out);
 801540c:	69b8      	ldr	r0, [r7, #24]
 801540e:	f7f7 fc89 	bl	800cd24 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015412:	4b0e      	ldr	r3, [pc, #56]	; (801544c <dhcp_release_and_stop+0x130>)
 8015414:	4a0d      	ldr	r2, [pc, #52]	; (801544c <dhcp_release_and_stop+0x130>)
 8015416:	490d      	ldr	r1, [pc, #52]	; (801544c <dhcp_release_and_stop+0x130>)
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7f6 ff75 	bl	800c308 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801541e:	2100      	movs	r1, #0
 8015420:	69f8      	ldr	r0, [r7, #28]
 8015422:	f000 f815 	bl	8015450 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	791b      	ldrb	r3, [r3, #4]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d008      	beq.n	8015440 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801542e:	f7fe ff85 	bl	801433c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015432:	69fb      	ldr	r3, [r7, #28]
 8015434:	2200      	movs	r2, #0
 8015436:	711a      	strb	r2, [r3, #4]
 8015438:	e002      	b.n	8015440 <dhcp_release_and_stop+0x124>
    return;
 801543a:	bf00      	nop
 801543c:	e000      	b.n	8015440 <dhcp_release_and_stop+0x124>
    return;
 801543e:	bf00      	nop
  }
}
 8015440:	3720      	adds	r7, #32
 8015442:	46bd      	mov	sp, r7
 8015444:	bdb0      	pop	{r4, r5, r7, pc}
 8015446:	bf00      	nop
 8015448:	20011228 	.word	0x20011228
 801544c:	08027da4 	.word	0x08027da4

08015450 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015450:	b480      	push	{r7}
 8015452:	b083      	sub	sp, #12
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	460b      	mov	r3, r1
 801545a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	795b      	ldrb	r3, [r3, #5]
 8015460:	78fa      	ldrb	r2, [r7, #3]
 8015462:	429a      	cmp	r2, r3
 8015464:	d008      	beq.n	8015478 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2200      	movs	r2, #0
 8015470:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2200      	movs	r2, #0
 8015476:	811a      	strh	r2, [r3, #8]
  }
}
 8015478:	bf00      	nop
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6039      	str	r1, [r7, #0]
 801548c:	4611      	mov	r1, r2
 801548e:	461a      	mov	r2, r3
 8015490:	4603      	mov	r3, r0
 8015492:	80fb      	strh	r3, [r7, #6]
 8015494:	460b      	mov	r3, r1
 8015496:	717b      	strb	r3, [r7, #5]
 8015498:	4613      	mov	r3, r2
 801549a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801549c:	88fa      	ldrh	r2, [r7, #6]
 801549e:	793b      	ldrb	r3, [r7, #4]
 80154a0:	4413      	add	r3, r2
 80154a2:	3302      	adds	r3, #2
 80154a4:	2b44      	cmp	r3, #68	; 0x44
 80154a6:	d906      	bls.n	80154b6 <dhcp_option+0x32>
 80154a8:	4b0d      	ldr	r3, [pc, #52]	; (80154e0 <dhcp_option+0x5c>)
 80154aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80154ae:	490d      	ldr	r1, [pc, #52]	; (80154e4 <dhcp_option+0x60>)
 80154b0:	480d      	ldr	r0, [pc, #52]	; (80154e8 <dhcp_option+0x64>)
 80154b2:	f003 fb3b 	bl	8018b2c <iprintf>
  options[options_out_len++] = option_type;
 80154b6:	88fb      	ldrh	r3, [r7, #6]
 80154b8:	1c5a      	adds	r2, r3, #1
 80154ba:	80fa      	strh	r2, [r7, #6]
 80154bc:	461a      	mov	r2, r3
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	4413      	add	r3, r2
 80154c2:	797a      	ldrb	r2, [r7, #5]
 80154c4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80154c6:	88fb      	ldrh	r3, [r7, #6]
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	80fa      	strh	r2, [r7, #6]
 80154cc:	461a      	mov	r2, r3
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	4413      	add	r3, r2
 80154d2:	793a      	ldrb	r2, [r7, #4]
 80154d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80154d6:	88fb      	ldrh	r3, [r7, #6]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3708      	adds	r7, #8
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	0801d0c0 	.word	0x0801d0c0
 80154e4:	0801d254 	.word	0x0801d254
 80154e8:	0801d120 	.word	0x0801d120

080154ec <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	4603      	mov	r3, r0
 80154f4:	6039      	str	r1, [r7, #0]
 80154f6:	80fb      	strh	r3, [r7, #6]
 80154f8:	4613      	mov	r3, r2
 80154fa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80154fc:	88fb      	ldrh	r3, [r7, #6]
 80154fe:	2b43      	cmp	r3, #67	; 0x43
 8015500:	d906      	bls.n	8015510 <dhcp_option_byte+0x24>
 8015502:	4b0a      	ldr	r3, [pc, #40]	; (801552c <dhcp_option_byte+0x40>)
 8015504:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015508:	4909      	ldr	r1, [pc, #36]	; (8015530 <dhcp_option_byte+0x44>)
 801550a:	480a      	ldr	r0, [pc, #40]	; (8015534 <dhcp_option_byte+0x48>)
 801550c:	f003 fb0e 	bl	8018b2c <iprintf>
  options[options_out_len++] = value;
 8015510:	88fb      	ldrh	r3, [r7, #6]
 8015512:	1c5a      	adds	r2, r3, #1
 8015514:	80fa      	strh	r2, [r7, #6]
 8015516:	461a      	mov	r2, r3
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	4413      	add	r3, r2
 801551c:	797a      	ldrb	r2, [r7, #5]
 801551e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015520:	88fb      	ldrh	r3, [r7, #6]
}
 8015522:	4618      	mov	r0, r3
 8015524:	3708      	adds	r7, #8
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}
 801552a:	bf00      	nop
 801552c:	0801d0c0 	.word	0x0801d0c0
 8015530:	0801d298 	.word	0x0801d298
 8015534:	0801d120 	.word	0x0801d120

08015538 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	4603      	mov	r3, r0
 8015540:	6039      	str	r1, [r7, #0]
 8015542:	80fb      	strh	r3, [r7, #6]
 8015544:	4613      	mov	r3, r2
 8015546:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015548:	88fb      	ldrh	r3, [r7, #6]
 801554a:	3302      	adds	r3, #2
 801554c:	2b44      	cmp	r3, #68	; 0x44
 801554e:	d906      	bls.n	801555e <dhcp_option_short+0x26>
 8015550:	4b0f      	ldr	r3, [pc, #60]	; (8015590 <dhcp_option_short+0x58>)
 8015552:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015556:	490f      	ldr	r1, [pc, #60]	; (8015594 <dhcp_option_short+0x5c>)
 8015558:	480f      	ldr	r0, [pc, #60]	; (8015598 <dhcp_option_short+0x60>)
 801555a:	f003 fae7 	bl	8018b2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801555e:	88bb      	ldrh	r3, [r7, #4]
 8015560:	0a1b      	lsrs	r3, r3, #8
 8015562:	b29a      	uxth	r2, r3
 8015564:	88fb      	ldrh	r3, [r7, #6]
 8015566:	1c59      	adds	r1, r3, #1
 8015568:	80f9      	strh	r1, [r7, #6]
 801556a:	4619      	mov	r1, r3
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	440b      	add	r3, r1
 8015570:	b2d2      	uxtb	r2, r2
 8015572:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015574:	88fb      	ldrh	r3, [r7, #6]
 8015576:	1c5a      	adds	r2, r3, #1
 8015578:	80fa      	strh	r2, [r7, #6]
 801557a:	461a      	mov	r2, r3
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	4413      	add	r3, r2
 8015580:	88ba      	ldrh	r2, [r7, #4]
 8015582:	b2d2      	uxtb	r2, r2
 8015584:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015586:	88fb      	ldrh	r3, [r7, #6]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0801d0c0 	.word	0x0801d0c0
 8015594:	0801d2d0 	.word	0x0801d2d0
 8015598:	0801d120 	.word	0x0801d120

0801559c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b084      	sub	sp, #16
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80155aa:	89fb      	ldrh	r3, [r7, #14]
 80155ac:	3304      	adds	r3, #4
 80155ae:	2b44      	cmp	r3, #68	; 0x44
 80155b0:	d906      	bls.n	80155c0 <dhcp_option_long+0x24>
 80155b2:	4b19      	ldr	r3, [pc, #100]	; (8015618 <dhcp_option_long+0x7c>)
 80155b4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80155b8:	4918      	ldr	r1, [pc, #96]	; (801561c <dhcp_option_long+0x80>)
 80155ba:	4819      	ldr	r0, [pc, #100]	; (8015620 <dhcp_option_long+0x84>)
 80155bc:	f003 fab6 	bl	8018b2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	0e1a      	lsrs	r2, r3, #24
 80155c4:	89fb      	ldrh	r3, [r7, #14]
 80155c6:	1c59      	adds	r1, r3, #1
 80155c8:	81f9      	strh	r1, [r7, #14]
 80155ca:	4619      	mov	r1, r3
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	440b      	add	r3, r1
 80155d0:	b2d2      	uxtb	r2, r2
 80155d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	0c1a      	lsrs	r2, r3, #16
 80155d8:	89fb      	ldrh	r3, [r7, #14]
 80155da:	1c59      	adds	r1, r3, #1
 80155dc:	81f9      	strh	r1, [r7, #14]
 80155de:	4619      	mov	r1, r3
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	440b      	add	r3, r1
 80155e4:	b2d2      	uxtb	r2, r2
 80155e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	0a1a      	lsrs	r2, r3, #8
 80155ec:	89fb      	ldrh	r3, [r7, #14]
 80155ee:	1c59      	adds	r1, r3, #1
 80155f0:	81f9      	strh	r1, [r7, #14]
 80155f2:	4619      	mov	r1, r3
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	440b      	add	r3, r1
 80155f8:	b2d2      	uxtb	r2, r2
 80155fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80155fc:	89fb      	ldrh	r3, [r7, #14]
 80155fe:	1c5a      	adds	r2, r3, #1
 8015600:	81fa      	strh	r2, [r7, #14]
 8015602:	461a      	mov	r2, r3
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	4413      	add	r3, r2
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	b2d2      	uxtb	r2, r2
 801560c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801560e:	89fb      	ldrh	r3, [r7, #14]
}
 8015610:	4618      	mov	r0, r3
 8015612:	3710      	adds	r7, #16
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	0801d0c0 	.word	0x0801d0c0
 801561c:	0801d30c 	.word	0x0801d30c
 8015620:	0801d120 	.word	0x0801d120

08015624 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b090      	sub	sp, #64	; 0x40
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801562e:	2300      	movs	r3, #0
 8015630:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015632:	2300      	movs	r3, #0
 8015634:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015636:	2208      	movs	r2, #8
 8015638:	2100      	movs	r1, #0
 801563a:	48b5      	ldr	r0, [pc, #724]	; (8015910 <dhcp_parse_reply+0x2ec>)
 801563c:	f003 fb15 	bl	8018c6a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	895b      	ldrh	r3, [r3, #10]
 8015644:	2b2b      	cmp	r3, #43	; 0x2b
 8015646:	d802      	bhi.n	801564e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015648:	f06f 0301 	mvn.w	r3, #1
 801564c:	e2a7      	b.n	8015b9e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015654:	23f0      	movs	r3, #240	; 0xf0
 8015656:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	891b      	ldrh	r3, [r3, #8]
 801565c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015662:	e00c      	b.n	801567e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015666:	895b      	ldrh	r3, [r3, #10]
 8015668:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801566a:	1ad3      	subs	r3, r2, r3
 801566c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015674:	1ad3      	subs	r3, r2, r3
 8015676:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015680:	2b00      	cmp	r3, #0
 8015682:	d004      	beq.n	801568e <dhcp_parse_reply+0x6a>
 8015684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015686:	895b      	ldrh	r3, [r3, #10]
 8015688:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801568a:	429a      	cmp	r2, r3
 801568c:	d2ea      	bcs.n	8015664 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015690:	2b00      	cmp	r3, #0
 8015692:	d102      	bne.n	801569a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015694:	f06f 0301 	mvn.w	r3, #1
 8015698:	e281      	b.n	8015b9e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801569a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801569c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801569e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80156a0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80156a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80156a8:	e239      	b.n	8015b1e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80156aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156ae:	4413      	add	r3, r2
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80156ba:	f04f 33ff 	mov.w	r3, #4294967295
 80156be:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80156c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156c2:	3302      	adds	r3, #2
 80156c4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80156c6:	8bfa      	ldrh	r2, [r7, #30]
 80156c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d202      	bcs.n	80156d4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80156ce:	f06f 0301 	mvn.w	r3, #1
 80156d2:	e264      	b.n	8015b9e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80156d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156d6:	3301      	adds	r3, #1
 80156d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156da:	8952      	ldrh	r2, [r2, #10]
 80156dc:	4293      	cmp	r3, r2
 80156de:	da07      	bge.n	80156f0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80156e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156e2:	3301      	adds	r3, #1
 80156e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156e6:	4413      	add	r3, r2
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156ee:	e00b      	b.n	8015708 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80156f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d004      	beq.n	8015702 <dhcp_parse_reply+0xde>
 80156f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	e000      	b.n	8015704 <dhcp_parse_reply+0xe0>
 8015702:	2300      	movs	r3, #0
 8015704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801570c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015710:	7dfb      	ldrb	r3, [r7, #23]
 8015712:	2b3b      	cmp	r3, #59	; 0x3b
 8015714:	f200 812c 	bhi.w	8015970 <dhcp_parse_reply+0x34c>
 8015718:	a201      	add	r2, pc, #4	; (adr r2, 8015720 <dhcp_parse_reply+0xfc>)
 801571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801571e:	bf00      	nop
 8015720:	08015811 	.word	0x08015811
 8015724:	08015821 	.word	0x08015821
 8015728:	08015971 	.word	0x08015971
 801572c:	08015843 	.word	0x08015843
 8015730:	08015971 	.word	0x08015971
 8015734:	08015971 	.word	0x08015971
 8015738:	08015971 	.word	0x08015971
 801573c:	08015971 	.word	0x08015971
 8015740:	08015971 	.word	0x08015971
 8015744:	08015971 	.word	0x08015971
 8015748:	08015971 	.word	0x08015971
 801574c:	08015971 	.word	0x08015971
 8015750:	08015971 	.word	0x08015971
 8015754:	08015971 	.word	0x08015971
 8015758:	08015971 	.word	0x08015971
 801575c:	08015971 	.word	0x08015971
 8015760:	08015971 	.word	0x08015971
 8015764:	08015971 	.word	0x08015971
 8015768:	08015971 	.word	0x08015971
 801576c:	08015971 	.word	0x08015971
 8015770:	08015971 	.word	0x08015971
 8015774:	08015971 	.word	0x08015971
 8015778:	08015971 	.word	0x08015971
 801577c:	08015971 	.word	0x08015971
 8015780:	08015971 	.word	0x08015971
 8015784:	08015971 	.word	0x08015971
 8015788:	08015971 	.word	0x08015971
 801578c:	08015971 	.word	0x08015971
 8015790:	08015971 	.word	0x08015971
 8015794:	08015971 	.word	0x08015971
 8015798:	08015971 	.word	0x08015971
 801579c:	08015971 	.word	0x08015971
 80157a0:	08015971 	.word	0x08015971
 80157a4:	08015971 	.word	0x08015971
 80157a8:	08015971 	.word	0x08015971
 80157ac:	08015971 	.word	0x08015971
 80157b0:	08015971 	.word	0x08015971
 80157b4:	08015971 	.word	0x08015971
 80157b8:	08015971 	.word	0x08015971
 80157bc:	08015971 	.word	0x08015971
 80157c0:	08015971 	.word	0x08015971
 80157c4:	08015971 	.word	0x08015971
 80157c8:	08015971 	.word	0x08015971
 80157cc:	08015971 	.word	0x08015971
 80157d0:	08015971 	.word	0x08015971
 80157d4:	08015971 	.word	0x08015971
 80157d8:	08015971 	.word	0x08015971
 80157dc:	08015971 	.word	0x08015971
 80157e0:	08015971 	.word	0x08015971
 80157e4:	08015971 	.word	0x08015971
 80157e8:	08015971 	.word	0x08015971
 80157ec:	0801586f 	.word	0x0801586f
 80157f0:	08015891 	.word	0x08015891
 80157f4:	080158cd 	.word	0x080158cd
 80157f8:	080158ef 	.word	0x080158ef
 80157fc:	08015971 	.word	0x08015971
 8015800:	08015971 	.word	0x08015971
 8015804:	08015971 	.word	0x08015971
 8015808:	0801592d 	.word	0x0801592d
 801580c:	0801594f 	.word	0x0801594f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015810:	2300      	movs	r3, #0
 8015812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801581a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801581e:	e0ab      	b.n	8015978 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015824:	2b04      	cmp	r3, #4
 8015826:	d009      	beq.n	801583c <dhcp_parse_reply+0x218>
 8015828:	4b3a      	ldr	r3, [pc, #232]	; (8015914 <dhcp_parse_reply+0x2f0>)
 801582a:	f240 622e 	movw	r2, #1582	; 0x62e
 801582e:	493a      	ldr	r1, [pc, #232]	; (8015918 <dhcp_parse_reply+0x2f4>)
 8015830:	483a      	ldr	r0, [pc, #232]	; (801591c <dhcp_parse_reply+0x2f8>)
 8015832:	f003 f97b 	bl	8018b2c <iprintf>
 8015836:	f06f 0305 	mvn.w	r3, #5
 801583a:	e1b0      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801583c:	2306      	movs	r3, #6
 801583e:	623b      	str	r3, [r7, #32]
        break;
 8015840:	e09a      	b.n	8015978 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015842:	2304      	movs	r3, #4
 8015844:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015848:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801584c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015850:	429a      	cmp	r2, r3
 8015852:	d209      	bcs.n	8015868 <dhcp_parse_reply+0x244>
 8015854:	4b2f      	ldr	r3, [pc, #188]	; (8015914 <dhcp_parse_reply+0x2f0>)
 8015856:	f240 6233 	movw	r2, #1587	; 0x633
 801585a:	4931      	ldr	r1, [pc, #196]	; (8015920 <dhcp_parse_reply+0x2fc>)
 801585c:	482f      	ldr	r0, [pc, #188]	; (801591c <dhcp_parse_reply+0x2f8>)
 801585e:	f003 f965 	bl	8018b2c <iprintf>
 8015862:	f06f 0305 	mvn.w	r3, #5
 8015866:	e19a      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015868:	2307      	movs	r3, #7
 801586a:	623b      	str	r3, [r7, #32]
        break;
 801586c:	e084      	b.n	8015978 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801586e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015872:	2b04      	cmp	r3, #4
 8015874:	d009      	beq.n	801588a <dhcp_parse_reply+0x266>
 8015876:	4b27      	ldr	r3, [pc, #156]	; (8015914 <dhcp_parse_reply+0x2f0>)
 8015878:	f240 6241 	movw	r2, #1601	; 0x641
 801587c:	4926      	ldr	r1, [pc, #152]	; (8015918 <dhcp_parse_reply+0x2f4>)
 801587e:	4827      	ldr	r0, [pc, #156]	; (801591c <dhcp_parse_reply+0x2f8>)
 8015880:	f003 f954 	bl	8018b2c <iprintf>
 8015884:	f06f 0305 	mvn.w	r3, #5
 8015888:	e189      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801588a:	2303      	movs	r3, #3
 801588c:	623b      	str	r3, [r7, #32]
        break;
 801588e:	e073      	b.n	8015978 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015894:	2b01      	cmp	r3, #1
 8015896:	d009      	beq.n	80158ac <dhcp_parse_reply+0x288>
 8015898:	4b1e      	ldr	r3, [pc, #120]	; (8015914 <dhcp_parse_reply+0x2f0>)
 801589a:	f240 624f 	movw	r2, #1615	; 0x64f
 801589e:	4921      	ldr	r1, [pc, #132]	; (8015924 <dhcp_parse_reply+0x300>)
 80158a0:	481e      	ldr	r0, [pc, #120]	; (801591c <dhcp_parse_reply+0x2f8>)
 80158a2:	f003 f943 	bl	8018b2c <iprintf>
 80158a6:	f06f 0305 	mvn.w	r3, #5
 80158aa:	e178      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80158ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80158ae:	2bf0      	cmp	r3, #240	; 0xf0
 80158b0:	d009      	beq.n	80158c6 <dhcp_parse_reply+0x2a2>
 80158b2:	4b18      	ldr	r3, [pc, #96]	; (8015914 <dhcp_parse_reply+0x2f0>)
 80158b4:	f240 6251 	movw	r2, #1617	; 0x651
 80158b8:	491b      	ldr	r1, [pc, #108]	; (8015928 <dhcp_parse_reply+0x304>)
 80158ba:	4818      	ldr	r0, [pc, #96]	; (801591c <dhcp_parse_reply+0x2f8>)
 80158bc:	f003 f936 	bl	8018b2c <iprintf>
 80158c0:	f06f 0305 	mvn.w	r3, #5
 80158c4:	e16b      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80158c6:	2300      	movs	r3, #0
 80158c8:	623b      	str	r3, [r7, #32]
        break;
 80158ca:	e055      	b.n	8015978 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80158cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d009      	beq.n	80158e8 <dhcp_parse_reply+0x2c4>
 80158d4:	4b0f      	ldr	r3, [pc, #60]	; (8015914 <dhcp_parse_reply+0x2f0>)
 80158d6:	f240 6255 	movw	r2, #1621	; 0x655
 80158da:	4912      	ldr	r1, [pc, #72]	; (8015924 <dhcp_parse_reply+0x300>)
 80158dc:	480f      	ldr	r0, [pc, #60]	; (801591c <dhcp_parse_reply+0x2f8>)
 80158de:	f003 f925 	bl	8018b2c <iprintf>
 80158e2:	f06f 0305 	mvn.w	r3, #5
 80158e6:	e15a      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80158e8:	2301      	movs	r3, #1
 80158ea:	623b      	str	r3, [r7, #32]
        break;
 80158ec:	e044      	b.n	8015978 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80158ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158f2:	2b04      	cmp	r3, #4
 80158f4:	d009      	beq.n	801590a <dhcp_parse_reply+0x2e6>
 80158f6:	4b07      	ldr	r3, [pc, #28]	; (8015914 <dhcp_parse_reply+0x2f0>)
 80158f8:	f240 6259 	movw	r2, #1625	; 0x659
 80158fc:	4906      	ldr	r1, [pc, #24]	; (8015918 <dhcp_parse_reply+0x2f4>)
 80158fe:	4807      	ldr	r0, [pc, #28]	; (801591c <dhcp_parse_reply+0x2f8>)
 8015900:	f003 f914 	bl	8018b2c <iprintf>
 8015904:	f06f 0305 	mvn.w	r3, #5
 8015908:	e149      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801590a:	2302      	movs	r3, #2
 801590c:	623b      	str	r3, [r7, #32]
        break;
 801590e:	e033      	b.n	8015978 <dhcp_parse_reply+0x354>
 8015910:	20011220 	.word	0x20011220
 8015914:	0801d0c0 	.word	0x0801d0c0
 8015918:	0801d348 	.word	0x0801d348
 801591c:	0801d120 	.word	0x0801d120
 8015920:	0801d354 	.word	0x0801d354
 8015924:	0801d368 	.word	0x0801d368
 8015928:	0801d374 	.word	0x0801d374
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801592c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015930:	2b04      	cmp	r3, #4
 8015932:	d009      	beq.n	8015948 <dhcp_parse_reply+0x324>
 8015934:	4b9c      	ldr	r3, [pc, #624]	; (8015ba8 <dhcp_parse_reply+0x584>)
 8015936:	f240 625d 	movw	r2, #1629	; 0x65d
 801593a:	499c      	ldr	r1, [pc, #624]	; (8015bac <dhcp_parse_reply+0x588>)
 801593c:	489c      	ldr	r0, [pc, #624]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 801593e:	f003 f8f5 	bl	8018b2c <iprintf>
 8015942:	f06f 0305 	mvn.w	r3, #5
 8015946:	e12a      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015948:	2304      	movs	r3, #4
 801594a:	623b      	str	r3, [r7, #32]
        break;
 801594c:	e014      	b.n	8015978 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801594e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015952:	2b04      	cmp	r3, #4
 8015954:	d009      	beq.n	801596a <dhcp_parse_reply+0x346>
 8015956:	4b94      	ldr	r3, [pc, #592]	; (8015ba8 <dhcp_parse_reply+0x584>)
 8015958:	f240 6261 	movw	r2, #1633	; 0x661
 801595c:	4993      	ldr	r1, [pc, #588]	; (8015bac <dhcp_parse_reply+0x588>)
 801595e:	4894      	ldr	r0, [pc, #592]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 8015960:	f003 f8e4 	bl	8018b2c <iprintf>
 8015964:	f06f 0305 	mvn.w	r3, #5
 8015968:	e119      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801596a:	2305      	movs	r3, #5
 801596c:	623b      	str	r3, [r7, #32]
        break;
 801596e:	e003      	b.n	8015978 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015970:	2300      	movs	r3, #0
 8015972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015976:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015978:	7dfb      	ldrb	r3, [r7, #23]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d103      	bne.n	8015986 <dhcp_parse_reply+0x362>
      offset++;
 801597e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015980:	3301      	adds	r3, #1
 8015982:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015984:	e0a1      	b.n	8015aca <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015986:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801598c:	4413      	add	r3, r2
 801598e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015992:	4293      	cmp	r3, r2
 8015994:	dd02      	ble.n	801599c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015996:	f06f 0301 	mvn.w	r3, #1
 801599a:	e100      	b.n	8015b9e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801599c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159a4:	4413      	add	r3, r2
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	3302      	adds	r3, #2
 80159aa:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80159ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	f000 808a 	beq.w	8015aca <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80159ba:	6a3b      	ldr	r3, [r7, #32]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	db02      	blt.n	80159c6 <dhcp_parse_reply+0x3a2>
 80159c0:	6a3b      	ldr	r3, [r7, #32]
 80159c2:	2b07      	cmp	r3, #7
 80159c4:	dd06      	ble.n	80159d4 <dhcp_parse_reply+0x3b0>
 80159c6:	4b78      	ldr	r3, [pc, #480]	; (8015ba8 <dhcp_parse_reply+0x584>)
 80159c8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80159cc:	4979      	ldr	r1, [pc, #484]	; (8015bb4 <dhcp_parse_reply+0x590>)
 80159ce:	4878      	ldr	r0, [pc, #480]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 80159d0:	f003 f8ac 	bl	8018b2c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80159d4:	4a78      	ldr	r2, [pc, #480]	; (8015bb8 <dhcp_parse_reply+0x594>)
 80159d6:	6a3b      	ldr	r3, [r7, #32]
 80159d8:	4413      	add	r3, r2
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d174      	bne.n	8015aca <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80159e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159e4:	2b04      	cmp	r3, #4
 80159e6:	bf28      	it	cs
 80159e8:	2304      	movcs	r3, #4
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80159ee:	8bfb      	ldrh	r3, [r7, #30]
 80159f0:	8aba      	ldrh	r2, [r7, #20]
 80159f2:	f107 0108 	add.w	r1, r7, #8
 80159f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159f8:	f7f7 fb9a 	bl	800d130 <pbuf_copy_partial>
 80159fc:	4603      	mov	r3, r0
 80159fe:	461a      	mov	r2, r3
 8015a00:	8abb      	ldrh	r3, [r7, #20]
 8015a02:	4293      	cmp	r3, r2
 8015a04:	d002      	beq.n	8015a0c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015a06:	f06f 0301 	mvn.w	r3, #1
 8015a0a:	e0c8      	b.n	8015b9e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a10:	2b04      	cmp	r3, #4
 8015a12:	d933      	bls.n	8015a7c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a18:	f003 0303 	and.w	r3, r3, #3
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d009      	beq.n	8015a36 <dhcp_parse_reply+0x412>
 8015a22:	4b61      	ldr	r3, [pc, #388]	; (8015ba8 <dhcp_parse_reply+0x584>)
 8015a24:	f240 6281 	movw	r2, #1665	; 0x681
 8015a28:	4964      	ldr	r1, [pc, #400]	; (8015bbc <dhcp_parse_reply+0x598>)
 8015a2a:	4861      	ldr	r0, [pc, #388]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 8015a2c:	f003 f87e 	bl	8018b2c <iprintf>
 8015a30:	f06f 0305 	mvn.w	r3, #5
 8015a34:	e0b3      	b.n	8015b9e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015a36:	4a60      	ldr	r2, [pc, #384]	; (8015bb8 <dhcp_parse_reply+0x594>)
 8015a38:	6a3b      	ldr	r3, [r7, #32]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	2201      	movs	r2, #1
 8015a3e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f5 fd4f 	bl	800b4e6 <lwip_htonl>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	495d      	ldr	r1, [pc, #372]	; (8015bc0 <dhcp_parse_reply+0x59c>)
 8015a4c:	6a3b      	ldr	r3, [r7, #32]
 8015a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015a52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a56:	3b04      	subs	r3, #4
 8015a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015a5c:	8bfb      	ldrh	r3, [r7, #30]
 8015a5e:	3304      	adds	r3, #4
 8015a60:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015a62:	8a7a      	ldrh	r2, [r7, #18]
 8015a64:	8bfb      	ldrh	r3, [r7, #30]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d202      	bcs.n	8015a70 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015a6a:	f06f 0301 	mvn.w	r3, #1
 8015a6e:	e096      	b.n	8015b9e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015a70:	8a7b      	ldrh	r3, [r7, #18]
 8015a72:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015a74:	6a3b      	ldr	r3, [r7, #32]
 8015a76:	3301      	adds	r3, #1
 8015a78:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015a7a:	e79e      	b.n	80159ba <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a80:	2b04      	cmp	r3, #4
 8015a82:	d106      	bne.n	8015a92 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f5 fd2d 	bl	800b4e6 <lwip_htonl>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	60bb      	str	r3, [r7, #8]
 8015a90:	e011      	b.n	8015ab6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d009      	beq.n	8015aae <dhcp_parse_reply+0x48a>
 8015a9a:	4b43      	ldr	r3, [pc, #268]	; (8015ba8 <dhcp_parse_reply+0x584>)
 8015a9c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015aa0:	4948      	ldr	r1, [pc, #288]	; (8015bc4 <dhcp_parse_reply+0x5a0>)
 8015aa2:	4843      	ldr	r0, [pc, #268]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 8015aa4:	f003 f842 	bl	8018b2c <iprintf>
 8015aa8:	f06f 0305 	mvn.w	r3, #5
 8015aac:	e077      	b.n	8015b9e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015aae:	f107 0308 	add.w	r3, r7, #8
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015ab6:	4a40      	ldr	r2, [pc, #256]	; (8015bb8 <dhcp_parse_reply+0x594>)
 8015ab8:	6a3b      	ldr	r3, [r7, #32]
 8015aba:	4413      	add	r3, r2
 8015abc:	2201      	movs	r2, #1
 8015abe:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015ac0:	68ba      	ldr	r2, [r7, #8]
 8015ac2:	493f      	ldr	r1, [pc, #252]	; (8015bc0 <dhcp_parse_reply+0x59c>)
 8015ac4:	6a3b      	ldr	r3, [r7, #32]
 8015ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015acc:	895b      	ldrh	r3, [r3, #10]
 8015ace:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d324      	bcc.n	8015b1e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad6:	895b      	ldrh	r3, [r3, #10]
 8015ad8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ada:	1ad3      	subs	r3, r2, r3
 8015adc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae0:	895b      	ldrh	r3, [r3, #10]
 8015ae2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015ae4:	1ad3      	subs	r3, r2, r3
 8015ae6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015ae8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015aea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d213      	bcs.n	8015b18 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d109      	bne.n	8015b10 <dhcp_parse_reply+0x4ec>
 8015afc:	4b2a      	ldr	r3, [pc, #168]	; (8015ba8 <dhcp_parse_reply+0x584>)
 8015afe:	f240 629d 	movw	r2, #1693	; 0x69d
 8015b02:	4931      	ldr	r1, [pc, #196]	; (8015bc8 <dhcp_parse_reply+0x5a4>)
 8015b04:	482a      	ldr	r0, [pc, #168]	; (8015bb0 <dhcp_parse_reply+0x58c>)
 8015b06:	f003 f811 	bl	8018b2c <iprintf>
 8015b0a:	f06f 0305 	mvn.w	r3, #5
 8015b0e:	e046      	b.n	8015b9e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b12:	685b      	ldr	r3, [r3, #4]
 8015b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015b16:	e002      	b.n	8015b1e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015b18:	f06f 0301 	mvn.w	r3, #1
 8015b1c:	e03f      	b.n	8015b9e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d00a      	beq.n	8015b3a <dhcp_parse_reply+0x516>
 8015b24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015b26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d206      	bcs.n	8015b3a <dhcp_parse_reply+0x516>
 8015b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b30:	4413      	add	r3, r2
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	2bff      	cmp	r3, #255	; 0xff
 8015b36:	f47f adb8 	bne.w	80156aa <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015b3a:	4b1f      	ldr	r3, [pc, #124]	; (8015bb8 <dhcp_parse_reply+0x594>)
 8015b3c:	781b      	ldrb	r3, [r3, #0]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d018      	beq.n	8015b74 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015b42:	4b1f      	ldr	r3, [pc, #124]	; (8015bc0 <dhcp_parse_reply+0x59c>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015b48:	4b1b      	ldr	r3, [pc, #108]	; (8015bb8 <dhcp_parse_reply+0x594>)
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	2b01      	cmp	r3, #1
 8015b52:	d102      	bne.n	8015b5a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015b54:	2301      	movs	r3, #1
 8015b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b58:	e00c      	b.n	8015b74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	2b02      	cmp	r3, #2
 8015b5e:	d102      	bne.n	8015b66 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015b60:	2301      	movs	r3, #1
 8015b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b64:	e006      	b.n	8015b74 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2b03      	cmp	r3, #3
 8015b6a:	d103      	bne.n	8015b74 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015b70:	2301      	movs	r3, #1
 8015b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d006      	beq.n	8015b88 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015b7e:	236c      	movs	r3, #108	; 0x6c
 8015b80:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015b82:	23ec      	movs	r3, #236	; 0xec
 8015b84:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015b86:	e56a      	b.n	801565e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d006      	beq.n	8015b9c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015b92:	232c      	movs	r3, #44	; 0x2c
 8015b94:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015b96:	236c      	movs	r3, #108	; 0x6c
 8015b98:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015b9a:	e560      	b.n	801565e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015b9c:	2300      	movs	r3, #0
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3740      	adds	r7, #64	; 0x40
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	0801d0c0 	.word	0x0801d0c0
 8015bac:	0801d348 	.word	0x0801d348
 8015bb0:	0801d120 	.word	0x0801d120
 8015bb4:	0801d38c 	.word	0x0801d38c
 8015bb8:	20011220 	.word	0x20011220
 8015bbc:	0801d3a0 	.word	0x0801d3a0
 8015bc0:	20011200 	.word	0x20011200
 8015bc4:	0801d3b8 	.word	0x0801d3b8
 8015bc8:	0801d3cc 	.word	0x0801d3cc

08015bcc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b08a      	sub	sp, #40	; 0x28
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	60f8      	str	r0, [r7, #12]
 8015bd4:	60b9      	str	r1, [r7, #8]
 8015bd6:	607a      	str	r2, [r7, #4]
 8015bd8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015bda:	4b60      	ldr	r3, [pc, #384]	; (8015d5c <dhcp_recv+0x190>)
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015bec:	69fb      	ldr	r3, [r7, #28]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	f000 809d 	beq.w	8015d2e <dhcp_recv+0x162>
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	791b      	ldrb	r3, [r3, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	f000 8098 	beq.w	8015d2e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	895b      	ldrh	r3, [r3, #10]
 8015c02:	2b2b      	cmp	r3, #43	; 0x2b
 8015c04:	f240 8095 	bls.w	8015d32 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	2b02      	cmp	r3, #2
 8015c0e:	f040 8092 	bne.w	8015d36 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015c12:	2300      	movs	r3, #0
 8015c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c18:	e012      	b.n	8015c40 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c1e:	6a3a      	ldr	r2, [r7, #32]
 8015c20:	4413      	add	r3, r2
 8015c22:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c2a:	69b9      	ldr	r1, [r7, #24]
 8015c2c:	440b      	add	r3, r1
 8015c2e:	7f1b      	ldrb	r3, [r3, #28]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	f040 8082 	bne.w	8015d3a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c40:	6a3b      	ldr	r3, [r7, #32]
 8015c42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d203      	bcs.n	8015c56 <dhcp_recv+0x8a>
 8015c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c52:	2b05      	cmp	r3, #5
 8015c54:	d9e1      	bls.n	8015c1a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7f5 fc43 	bl	800b4e6 <lwip_htonl>
 8015c60:	4602      	mov	r2, r0
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d169      	bne.n	8015d3e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015c6a:	69f9      	ldr	r1, [r7, #28]
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f7ff fcd9 	bl	8015624 <dhcp_parse_reply>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d164      	bne.n	8015d42 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015c78:	4b39      	ldr	r3, [pc, #228]	; (8015d60 <dhcp_recv+0x194>)
 8015c7a:	785b      	ldrb	r3, [r3, #1]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d062      	beq.n	8015d46 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015c86:	4b37      	ldr	r3, [pc, #220]	; (8015d64 <dhcp_recv+0x198>)
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015c8c:	7cfb      	ldrb	r3, [r7, #19]
 8015c8e:	2b05      	cmp	r3, #5
 8015c90:	d12a      	bne.n	8015ce8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	795b      	ldrb	r3, [r3, #5]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d112      	bne.n	8015cc0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015c9a:	6979      	ldr	r1, [r7, #20]
 8015c9c:	6a38      	ldr	r0, [r7, #32]
 8015c9e:	f7fe fe17 	bl	80148d0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015ca2:	6a3b      	ldr	r3, [r7, #32]
 8015ca4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ca8:	f003 0308 	and.w	r3, r3, #8
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d003      	beq.n	8015cb8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015cb0:	6a38      	ldr	r0, [r7, #32]
 8015cb2:	f7fe fb87 	bl	80143c4 <dhcp_check>
 8015cb6:	e049      	b.n	8015d4c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015cb8:	6a38      	ldr	r0, [r7, #32]
 8015cba:	f7ff f867 	bl	8014d8c <dhcp_bind>
 8015cbe:	e045      	b.n	8015d4c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	795b      	ldrb	r3, [r3, #5]
 8015cc4:	2b03      	cmp	r3, #3
 8015cc6:	d007      	beq.n	8015cd8 <dhcp_recv+0x10c>
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	795b      	ldrb	r3, [r3, #5]
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	d003      	beq.n	8015cd8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015cd4:	2b05      	cmp	r3, #5
 8015cd6:	d139      	bne.n	8015d4c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015cd8:	6979      	ldr	r1, [r7, #20]
 8015cda:	6a38      	ldr	r0, [r7, #32]
 8015cdc:	f7fe fdf8 	bl	80148d0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015ce0:	6a38      	ldr	r0, [r7, #32]
 8015ce2:	f7ff f853 	bl	8014d8c <dhcp_bind>
 8015ce6:	e031      	b.n	8015d4c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015ce8:	7cfb      	ldrb	r3, [r7, #19]
 8015cea:	2b06      	cmp	r3, #6
 8015cec:	d113      	bne.n	8015d16 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015cf2:	2b03      	cmp	r3, #3
 8015cf4:	d00b      	beq.n	8015d0e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	795b      	ldrb	r3, [r3, #5]
 8015cfa:	2b01      	cmp	r3, #1
 8015cfc:	d007      	beq.n	8015d0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015cfe:	69fb      	ldr	r3, [r7, #28]
 8015d00:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015d02:	2b04      	cmp	r3, #4
 8015d04:	d003      	beq.n	8015d0e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	795b      	ldrb	r3, [r3, #5]
 8015d0a:	2b05      	cmp	r3, #5
 8015d0c:	d103      	bne.n	8015d16 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015d0e:	6a38      	ldr	r0, [r7, #32]
 8015d10:	f7fe fb3e 	bl	8014390 <dhcp_handle_nak>
 8015d14:	e01a      	b.n	8015d4c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015d16:	7cfb      	ldrb	r3, [r7, #19]
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	d116      	bne.n	8015d4a <dhcp_recv+0x17e>
 8015d1c:	69fb      	ldr	r3, [r7, #28]
 8015d1e:	795b      	ldrb	r3, [r3, #5]
 8015d20:	2b06      	cmp	r3, #6
 8015d22:	d112      	bne.n	8015d4a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015d24:	6979      	ldr	r1, [r7, #20]
 8015d26:	6a38      	ldr	r0, [r7, #32]
 8015d28:	f7fe fb80 	bl	801442c <dhcp_handle_offer>
 8015d2c:	e00e      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d2e:	bf00      	nop
 8015d30:	e00c      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d32:	bf00      	nop
 8015d34:	e00a      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d36:	bf00      	nop
 8015d38:	e008      	b.n	8015d4c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015d3a:	bf00      	nop
 8015d3c:	e006      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d3e:	bf00      	nop
 8015d40:	e004      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d42:	bf00      	nop
 8015d44:	e002      	b.n	8015d4c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015d46:	bf00      	nop
 8015d48:	e000      	b.n	8015d4c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015d4a:	bf00      	nop
  pbuf_free(p);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7f6 ffe9 	bl	800cd24 <pbuf_free>
}
 8015d52:	bf00      	nop
 8015d54:	3728      	adds	r7, #40	; 0x28
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	2000da2c 	.word	0x2000da2c
 8015d60:	20011220 	.word	0x20011220
 8015d64:	20011200 	.word	0x20011200

08015d68 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b088      	sub	sp, #32
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	60f8      	str	r0, [r7, #12]
 8015d70:	60b9      	str	r1, [r7, #8]
 8015d72:	603b      	str	r3, [r7, #0]
 8015d74:	4613      	mov	r3, r2
 8015d76:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d108      	bne.n	8015d90 <dhcp_create_msg+0x28>
 8015d7e:	4b5f      	ldr	r3, [pc, #380]	; (8015efc <dhcp_create_msg+0x194>)
 8015d80:	f240 7269 	movw	r2, #1897	; 0x769
 8015d84:	495e      	ldr	r1, [pc, #376]	; (8015f00 <dhcp_create_msg+0x198>)
 8015d86:	485f      	ldr	r0, [pc, #380]	; (8015f04 <dhcp_create_msg+0x19c>)
 8015d88:	f002 fed0 	bl	8018b2c <iprintf>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	e0b1      	b.n	8015ef4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d108      	bne.n	8015da8 <dhcp_create_msg+0x40>
 8015d96:	4b59      	ldr	r3, [pc, #356]	; (8015efc <dhcp_create_msg+0x194>)
 8015d98:	f240 726a 	movw	r2, #1898	; 0x76a
 8015d9c:	495a      	ldr	r1, [pc, #360]	; (8015f08 <dhcp_create_msg+0x1a0>)
 8015d9e:	4859      	ldr	r0, [pc, #356]	; (8015f04 <dhcp_create_msg+0x19c>)
 8015da0:	f002 fec4 	bl	8018b2c <iprintf>
 8015da4:	2300      	movs	r3, #0
 8015da6:	e0a5      	b.n	8015ef4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015da8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dac:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015db0:	2036      	movs	r0, #54	; 0x36
 8015db2:	f7f6 fcd3 	bl	800c75c <pbuf_alloc>
 8015db6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015db8:	69bb      	ldr	r3, [r7, #24]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d101      	bne.n	8015dc2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	e098      	b.n	8015ef4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015dca:	d206      	bcs.n	8015dda <dhcp_create_msg+0x72>
 8015dcc:	4b4b      	ldr	r3, [pc, #300]	; (8015efc <dhcp_create_msg+0x194>)
 8015dce:	f240 7271 	movw	r2, #1905	; 0x771
 8015dd2:	494e      	ldr	r1, [pc, #312]	; (8015f0c <dhcp_create_msg+0x1a4>)
 8015dd4:	484b      	ldr	r0, [pc, #300]	; (8015f04 <dhcp_create_msg+0x19c>)
 8015dd6:	f002 fea9 	bl	8018b2c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015dda:	79fb      	ldrb	r3, [r7, #7]
 8015ddc:	2b03      	cmp	r3, #3
 8015dde:	d103      	bne.n	8015de8 <dhcp_create_msg+0x80>
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	795b      	ldrb	r3, [r3, #5]
 8015de4:	2b03      	cmp	r3, #3
 8015de6:	d10d      	bne.n	8015e04 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	799b      	ldrb	r3, [r3, #6]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d105      	bne.n	8015dfc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015df0:	f002 fdae 	bl	8018950 <rand>
 8015df4:	4603      	mov	r3, r0
 8015df6:	461a      	mov	r2, r3
 8015df8:	4b45      	ldr	r3, [pc, #276]	; (8015f10 <dhcp_create_msg+0x1a8>)
 8015dfa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015dfc:	4b44      	ldr	r3, [pc, #272]	; (8015f10 <dhcp_create_msg+0x1a8>)
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015e04:	69bb      	ldr	r3, [r7, #24]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015e0a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015e0e:	2100      	movs	r1, #0
 8015e10:	6978      	ldr	r0, [r7, #20]
 8015e12:	f002 ff2a 	bl	8018c6a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	2201      	movs	r2, #1
 8015e1a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f5 fb58 	bl	800b4e6 <lwip_htonl>
 8015e36:	4602      	mov	r2, r0
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015e3c:	79fb      	ldrb	r3, [r7, #7]
 8015e3e:	2b08      	cmp	r3, #8
 8015e40:	d010      	beq.n	8015e64 <dhcp_create_msg+0xfc>
 8015e42:	79fb      	ldrb	r3, [r7, #7]
 8015e44:	2b04      	cmp	r3, #4
 8015e46:	d00d      	beq.n	8015e64 <dhcp_create_msg+0xfc>
 8015e48:	79fb      	ldrb	r3, [r7, #7]
 8015e4a:	2b07      	cmp	r3, #7
 8015e4c:	d00a      	beq.n	8015e64 <dhcp_create_msg+0xfc>
 8015e4e:	79fb      	ldrb	r3, [r7, #7]
 8015e50:	2b03      	cmp	r3, #3
 8015e52:	d10c      	bne.n	8015e6e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015e58:	2b05      	cmp	r3, #5
 8015e5a:	d003      	beq.n	8015e64 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	795b      	ldrb	r3, [r3, #5]
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	d104      	bne.n	8015e6e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	3304      	adds	r3, #4
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e6e:	2300      	movs	r3, #0
 8015e70:	83fb      	strh	r3, [r7, #30]
 8015e72:	e00c      	b.n	8015e8e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015e74:	8bfa      	ldrh	r2, [r7, #30]
 8015e76:	8bfb      	ldrh	r3, [r7, #30]
 8015e78:	68f9      	ldr	r1, [r7, #12]
 8015e7a:	440a      	add	r2, r1
 8015e7c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015e80:	697a      	ldr	r2, [r7, #20]
 8015e82:	4413      	add	r3, r2
 8015e84:	460a      	mov	r2, r1
 8015e86:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015e88:	8bfb      	ldrh	r3, [r7, #30]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	83fb      	strh	r3, [r7, #30]
 8015e8e:	8bfb      	ldrh	r3, [r7, #30]
 8015e90:	2b05      	cmp	r3, #5
 8015e92:	d9ef      	bls.n	8015e74 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	2200      	movs	r2, #0
 8015e98:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015e9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015ea6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015eb0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015eba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	2235      	movs	r2, #53	; 0x35
 8015ec8:	2000      	movs	r0, #0
 8015eca:	f7ff fadb 	bl	8015484 <dhcp_option>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ed8:	79fa      	ldrb	r2, [r7, #7]
 8015eda:	8a7b      	ldrh	r3, [r7, #18]
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7ff fb05 	bl	80154ec <dhcp_option_byte>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d002      	beq.n	8015ef2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	8a7a      	ldrh	r2, [r7, #18]
 8015ef0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015ef2:	69bb      	ldr	r3, [r7, #24]
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3720      	adds	r7, #32
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	0801d0c0 	.word	0x0801d0c0
 8015f00:	0801d3e0 	.word	0x0801d3e0
 8015f04:	0801d120 	.word	0x0801d120
 8015f08:	0801d400 	.word	0x0801d400
 8015f0c:	0801d420 	.word	0x0801d420
 8015f10:	20011230 	.word	0x20011230

08015f14 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	607a      	str	r2, [r7, #4]
 8015f20:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015f22:	89fb      	ldrh	r3, [r7, #14]
 8015f24:	1c5a      	adds	r2, r3, #1
 8015f26:	81fa      	strh	r2, [r7, #14]
 8015f28:	461a      	mov	r2, r3
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	22ff      	movs	r2, #255	; 0xff
 8015f30:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015f32:	e007      	b.n	8015f44 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015f34:	89fb      	ldrh	r3, [r7, #14]
 8015f36:	1c5a      	adds	r2, r3, #1
 8015f38:	81fa      	strh	r2, [r7, #14]
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	4413      	add	r3, r2
 8015f40:	2200      	movs	r2, #0
 8015f42:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015f44:	89fb      	ldrh	r3, [r7, #14]
 8015f46:	2b43      	cmp	r3, #67	; 0x43
 8015f48:	d904      	bls.n	8015f54 <dhcp_option_trailer+0x40>
 8015f4a:	89fb      	ldrh	r3, [r7, #14]
 8015f4c:	f003 0303 	and.w	r3, r3, #3
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d002      	beq.n	8015f5a <dhcp_option_trailer+0x46>
 8015f54:	89fb      	ldrh	r3, [r7, #14]
 8015f56:	2b43      	cmp	r3, #67	; 0x43
 8015f58:	d9ec      	bls.n	8015f34 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015f5a:	89fb      	ldrh	r3, [r7, #14]
 8015f5c:	33f0      	adds	r3, #240	; 0xf0
 8015f5e:	b29b      	uxth	r3, r3
 8015f60:	4619      	mov	r1, r3
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7f6 fd58 	bl	800ca18 <pbuf_realloc>
}
 8015f68:	bf00      	nop
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015f70:	b480      	push	{r7}
 8015f72:	b085      	sub	sp, #20
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d017      	beq.n	8015fae <dhcp_supplied_address+0x3e>
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d013      	beq.n	8015fae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f8a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	795b      	ldrb	r3, [r3, #5]
 8015f90:	2b0a      	cmp	r3, #10
 8015f92:	d007      	beq.n	8015fa4 <dhcp_supplied_address+0x34>
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	795b      	ldrb	r3, [r3, #5]
 8015f98:	2b05      	cmp	r3, #5
 8015f9a:	d003      	beq.n	8015fa4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015fa0:	2b04      	cmp	r3, #4
 8015fa2:	d101      	bne.n	8015fa8 <dhcp_supplied_address+0x38>
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e000      	b.n	8015faa <dhcp_supplied_address+0x3a>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	e000      	b.n	8015fb0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3714      	adds	r7, #20
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr

08015fbc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015fc4:	4915      	ldr	r1, [pc, #84]	; (801601c <etharp_free_entry+0x60>)
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	4613      	mov	r3, r2
 8015fca:	005b      	lsls	r3, r3, #1
 8015fcc:	4413      	add	r3, r2
 8015fce:	00db      	lsls	r3, r3, #3
 8015fd0:	440b      	add	r3, r1
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d013      	beq.n	8016000 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015fd8:	4910      	ldr	r1, [pc, #64]	; (801601c <etharp_free_entry+0x60>)
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	4613      	mov	r3, r2
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	4413      	add	r3, r2
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	440b      	add	r3, r1
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f6 fe9b 	bl	800cd24 <pbuf_free>
    arp_table[i].q = NULL;
 8015fee:	490b      	ldr	r1, [pc, #44]	; (801601c <etharp_free_entry+0x60>)
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	4613      	mov	r3, r2
 8015ff4:	005b      	lsls	r3, r3, #1
 8015ff6:	4413      	add	r3, r2
 8015ff8:	00db      	lsls	r3, r3, #3
 8015ffa:	440b      	add	r3, r1
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016000:	4906      	ldr	r1, [pc, #24]	; (801601c <etharp_free_entry+0x60>)
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	4613      	mov	r3, r2
 8016006:	005b      	lsls	r3, r3, #1
 8016008:	4413      	add	r3, r2
 801600a:	00db      	lsls	r3, r3, #3
 801600c:	440b      	add	r3, r1
 801600e:	3314      	adds	r3, #20
 8016010:	2200      	movs	r2, #0
 8016012:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016014:	bf00      	nop
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	20011234 	.word	0x20011234

08016020 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016026:	2300      	movs	r3, #0
 8016028:	607b      	str	r3, [r7, #4]
 801602a:	e096      	b.n	801615a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801602c:	494f      	ldr	r1, [pc, #316]	; (801616c <etharp_tmr+0x14c>)
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	4613      	mov	r3, r2
 8016032:	005b      	lsls	r3, r3, #1
 8016034:	4413      	add	r3, r2
 8016036:	00db      	lsls	r3, r3, #3
 8016038:	440b      	add	r3, r1
 801603a:	3314      	adds	r3, #20
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016040:	78fb      	ldrb	r3, [r7, #3]
 8016042:	2b00      	cmp	r3, #0
 8016044:	f000 8086 	beq.w	8016154 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016048:	4948      	ldr	r1, [pc, #288]	; (801616c <etharp_tmr+0x14c>)
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	4613      	mov	r3, r2
 801604e:	005b      	lsls	r3, r3, #1
 8016050:	4413      	add	r3, r2
 8016052:	00db      	lsls	r3, r3, #3
 8016054:	440b      	add	r3, r1
 8016056:	3312      	adds	r3, #18
 8016058:	881b      	ldrh	r3, [r3, #0]
 801605a:	3301      	adds	r3, #1
 801605c:	b298      	uxth	r0, r3
 801605e:	4943      	ldr	r1, [pc, #268]	; (801616c <etharp_tmr+0x14c>)
 8016060:	687a      	ldr	r2, [r7, #4]
 8016062:	4613      	mov	r3, r2
 8016064:	005b      	lsls	r3, r3, #1
 8016066:	4413      	add	r3, r2
 8016068:	00db      	lsls	r3, r3, #3
 801606a:	440b      	add	r3, r1
 801606c:	3312      	adds	r3, #18
 801606e:	4602      	mov	r2, r0
 8016070:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016072:	493e      	ldr	r1, [pc, #248]	; (801616c <etharp_tmr+0x14c>)
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	4613      	mov	r3, r2
 8016078:	005b      	lsls	r3, r3, #1
 801607a:	4413      	add	r3, r2
 801607c:	00db      	lsls	r3, r3, #3
 801607e:	440b      	add	r3, r1
 8016080:	3312      	adds	r3, #18
 8016082:	881b      	ldrh	r3, [r3, #0]
 8016084:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016088:	d215      	bcs.n	80160b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801608a:	4938      	ldr	r1, [pc, #224]	; (801616c <etharp_tmr+0x14c>)
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	4613      	mov	r3, r2
 8016090:	005b      	lsls	r3, r3, #1
 8016092:	4413      	add	r3, r2
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	440b      	add	r3, r1
 8016098:	3314      	adds	r3, #20
 801609a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801609c:	2b01      	cmp	r3, #1
 801609e:	d10e      	bne.n	80160be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80160a0:	4932      	ldr	r1, [pc, #200]	; (801616c <etharp_tmr+0x14c>)
 80160a2:	687a      	ldr	r2, [r7, #4]
 80160a4:	4613      	mov	r3, r2
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	4413      	add	r3, r2
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	440b      	add	r3, r1
 80160ae:	3312      	adds	r3, #18
 80160b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160b2:	2b04      	cmp	r3, #4
 80160b4:	d903      	bls.n	80160be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7ff ff80 	bl	8015fbc <etharp_free_entry>
 80160bc:	e04a      	b.n	8016154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80160be:	492b      	ldr	r1, [pc, #172]	; (801616c <etharp_tmr+0x14c>)
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	4613      	mov	r3, r2
 80160c4:	005b      	lsls	r3, r3, #1
 80160c6:	4413      	add	r3, r2
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	440b      	add	r3, r1
 80160cc:	3314      	adds	r3, #20
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	2b03      	cmp	r3, #3
 80160d2:	d10a      	bne.n	80160ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80160d4:	4925      	ldr	r1, [pc, #148]	; (801616c <etharp_tmr+0x14c>)
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	4613      	mov	r3, r2
 80160da:	005b      	lsls	r3, r3, #1
 80160dc:	4413      	add	r3, r2
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	440b      	add	r3, r1
 80160e2:	3314      	adds	r3, #20
 80160e4:	2204      	movs	r2, #4
 80160e6:	701a      	strb	r2, [r3, #0]
 80160e8:	e034      	b.n	8016154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80160ea:	4920      	ldr	r1, [pc, #128]	; (801616c <etharp_tmr+0x14c>)
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	4613      	mov	r3, r2
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	4413      	add	r3, r2
 80160f4:	00db      	lsls	r3, r3, #3
 80160f6:	440b      	add	r3, r1
 80160f8:	3314      	adds	r3, #20
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b04      	cmp	r3, #4
 80160fe:	d10a      	bne.n	8016116 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016100:	491a      	ldr	r1, [pc, #104]	; (801616c <etharp_tmr+0x14c>)
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	3314      	adds	r3, #20
 8016110:	2202      	movs	r2, #2
 8016112:	701a      	strb	r2, [r3, #0]
 8016114:	e01e      	b.n	8016154 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016116:	4915      	ldr	r1, [pc, #84]	; (801616c <etharp_tmr+0x14c>)
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	4613      	mov	r3, r2
 801611c:	005b      	lsls	r3, r3, #1
 801611e:	4413      	add	r3, r2
 8016120:	00db      	lsls	r3, r3, #3
 8016122:	440b      	add	r3, r1
 8016124:	3314      	adds	r3, #20
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	2b01      	cmp	r3, #1
 801612a:	d113      	bne.n	8016154 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801612c:	490f      	ldr	r1, [pc, #60]	; (801616c <etharp_tmr+0x14c>)
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	4613      	mov	r3, r2
 8016132:	005b      	lsls	r3, r3, #1
 8016134:	4413      	add	r3, r2
 8016136:	00db      	lsls	r3, r3, #3
 8016138:	440b      	add	r3, r1
 801613a:	3308      	adds	r3, #8
 801613c:	6818      	ldr	r0, [r3, #0]
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	4613      	mov	r3, r2
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	4413      	add	r3, r2
 8016146:	00db      	lsls	r3, r3, #3
 8016148:	4a08      	ldr	r2, [pc, #32]	; (801616c <etharp_tmr+0x14c>)
 801614a:	4413      	add	r3, r2
 801614c:	3304      	adds	r3, #4
 801614e:	4619      	mov	r1, r3
 8016150:	f000 fe72 	bl	8016e38 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	3301      	adds	r3, #1
 8016158:	607b      	str	r3, [r7, #4]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2b09      	cmp	r3, #9
 801615e:	f77f af65 	ble.w	801602c <etharp_tmr+0xc>
      }
    }
  }
}
 8016162:	bf00      	nop
 8016164:	bf00      	nop
 8016166:	3708      	adds	r7, #8
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	20011234 	.word	0x20011234

08016170 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b08a      	sub	sp, #40	; 0x28
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	460b      	mov	r3, r1
 801617a:	607a      	str	r2, [r7, #4]
 801617c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801617e:	230a      	movs	r3, #10
 8016180:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016182:	230a      	movs	r3, #10
 8016184:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016186:	230a      	movs	r3, #10
 8016188:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801618a:	2300      	movs	r3, #0
 801618c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801618e:	230a      	movs	r3, #10
 8016190:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016192:	2300      	movs	r3, #0
 8016194:	83bb      	strh	r3, [r7, #28]
 8016196:	2300      	movs	r3, #0
 8016198:	837b      	strh	r3, [r7, #26]
 801619a:	2300      	movs	r3, #0
 801619c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801619e:	2300      	movs	r3, #0
 80161a0:	843b      	strh	r3, [r7, #32]
 80161a2:	e0ae      	b.n	8016302 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80161a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161a8:	49a6      	ldr	r1, [pc, #664]	; (8016444 <etharp_find_entry+0x2d4>)
 80161aa:	4613      	mov	r3, r2
 80161ac:	005b      	lsls	r3, r3, #1
 80161ae:	4413      	add	r3, r2
 80161b0:	00db      	lsls	r3, r3, #3
 80161b2:	440b      	add	r3, r1
 80161b4:	3314      	adds	r3, #20
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80161ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161be:	2b0a      	cmp	r3, #10
 80161c0:	d105      	bne.n	80161ce <etharp_find_entry+0x5e>
 80161c2:	7dfb      	ldrb	r3, [r7, #23]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d102      	bne.n	80161ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80161c8:	8c3b      	ldrh	r3, [r7, #32]
 80161ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80161cc:	e095      	b.n	80162fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80161ce:	7dfb      	ldrb	r3, [r7, #23]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	f000 8092 	beq.w	80162fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80161d6:	7dfb      	ldrb	r3, [r7, #23]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d009      	beq.n	80161f0 <etharp_find_entry+0x80>
 80161dc:	7dfb      	ldrb	r3, [r7, #23]
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d806      	bhi.n	80161f0 <etharp_find_entry+0x80>
 80161e2:	4b99      	ldr	r3, [pc, #612]	; (8016448 <etharp_find_entry+0x2d8>)
 80161e4:	f240 1223 	movw	r2, #291	; 0x123
 80161e8:	4998      	ldr	r1, [pc, #608]	; (801644c <etharp_find_entry+0x2dc>)
 80161ea:	4899      	ldr	r0, [pc, #612]	; (8016450 <etharp_find_entry+0x2e0>)
 80161ec:	f002 fc9e 	bl	8018b2c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d020      	beq.n	8016238 <etharp_find_entry+0xc8>
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	6819      	ldr	r1, [r3, #0]
 80161fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161fe:	4891      	ldr	r0, [pc, #580]	; (8016444 <etharp_find_entry+0x2d4>)
 8016200:	4613      	mov	r3, r2
 8016202:	005b      	lsls	r3, r3, #1
 8016204:	4413      	add	r3, r2
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	4403      	add	r3, r0
 801620a:	3304      	adds	r3, #4
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	4299      	cmp	r1, r3
 8016210:	d112      	bne.n	8016238 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00c      	beq.n	8016232 <etharp_find_entry+0xc2>
 8016218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801621c:	4989      	ldr	r1, [pc, #548]	; (8016444 <etharp_find_entry+0x2d4>)
 801621e:	4613      	mov	r3, r2
 8016220:	005b      	lsls	r3, r3, #1
 8016222:	4413      	add	r3, r2
 8016224:	00db      	lsls	r3, r3, #3
 8016226:	440b      	add	r3, r1
 8016228:	3308      	adds	r3, #8
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	687a      	ldr	r2, [r7, #4]
 801622e:	429a      	cmp	r2, r3
 8016230:	d102      	bne.n	8016238 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016232:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016236:	e100      	b.n	801643a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016238:	7dfb      	ldrb	r3, [r7, #23]
 801623a:	2b01      	cmp	r3, #1
 801623c:	d140      	bne.n	80162c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801623e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016242:	4980      	ldr	r1, [pc, #512]	; (8016444 <etharp_find_entry+0x2d4>)
 8016244:	4613      	mov	r3, r2
 8016246:	005b      	lsls	r3, r3, #1
 8016248:	4413      	add	r3, r2
 801624a:	00db      	lsls	r3, r3, #3
 801624c:	440b      	add	r3, r1
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01a      	beq.n	801628a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016254:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016258:	497a      	ldr	r1, [pc, #488]	; (8016444 <etharp_find_entry+0x2d4>)
 801625a:	4613      	mov	r3, r2
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	4413      	add	r3, r2
 8016260:	00db      	lsls	r3, r3, #3
 8016262:	440b      	add	r3, r1
 8016264:	3312      	adds	r3, #18
 8016266:	881b      	ldrh	r3, [r3, #0]
 8016268:	8bba      	ldrh	r2, [r7, #28]
 801626a:	429a      	cmp	r2, r3
 801626c:	d845      	bhi.n	80162fa <etharp_find_entry+0x18a>
            old_queue = i;
 801626e:	8c3b      	ldrh	r3, [r7, #32]
 8016270:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016272:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016276:	4973      	ldr	r1, [pc, #460]	; (8016444 <etharp_find_entry+0x2d4>)
 8016278:	4613      	mov	r3, r2
 801627a:	005b      	lsls	r3, r3, #1
 801627c:	4413      	add	r3, r2
 801627e:	00db      	lsls	r3, r3, #3
 8016280:	440b      	add	r3, r1
 8016282:	3312      	adds	r3, #18
 8016284:	881b      	ldrh	r3, [r3, #0]
 8016286:	83bb      	strh	r3, [r7, #28]
 8016288:	e037      	b.n	80162fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801628a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801628e:	496d      	ldr	r1, [pc, #436]	; (8016444 <etharp_find_entry+0x2d4>)
 8016290:	4613      	mov	r3, r2
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	4413      	add	r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	440b      	add	r3, r1
 801629a:	3312      	adds	r3, #18
 801629c:	881b      	ldrh	r3, [r3, #0]
 801629e:	8b7a      	ldrh	r2, [r7, #26]
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d82a      	bhi.n	80162fa <etharp_find_entry+0x18a>
            old_pending = i;
 80162a4:	8c3b      	ldrh	r3, [r7, #32]
 80162a6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80162a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ac:	4965      	ldr	r1, [pc, #404]	; (8016444 <etharp_find_entry+0x2d4>)
 80162ae:	4613      	mov	r3, r2
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	4413      	add	r3, r2
 80162b4:	00db      	lsls	r3, r3, #3
 80162b6:	440b      	add	r3, r1
 80162b8:	3312      	adds	r3, #18
 80162ba:	881b      	ldrh	r3, [r3, #0]
 80162bc:	837b      	strh	r3, [r7, #26]
 80162be:	e01c      	b.n	80162fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162c0:	7dfb      	ldrb	r3, [r7, #23]
 80162c2:	2b01      	cmp	r3, #1
 80162c4:	d919      	bls.n	80162fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ca:	495e      	ldr	r1, [pc, #376]	; (8016444 <etharp_find_entry+0x2d4>)
 80162cc:	4613      	mov	r3, r2
 80162ce:	005b      	lsls	r3, r3, #1
 80162d0:	4413      	add	r3, r2
 80162d2:	00db      	lsls	r3, r3, #3
 80162d4:	440b      	add	r3, r1
 80162d6:	3312      	adds	r3, #18
 80162d8:	881b      	ldrh	r3, [r3, #0]
 80162da:	8b3a      	ldrh	r2, [r7, #24]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d80c      	bhi.n	80162fa <etharp_find_entry+0x18a>
            old_stable = i;
 80162e0:	8c3b      	ldrh	r3, [r7, #32]
 80162e2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80162e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162e8:	4956      	ldr	r1, [pc, #344]	; (8016444 <etharp_find_entry+0x2d4>)
 80162ea:	4613      	mov	r3, r2
 80162ec:	005b      	lsls	r3, r3, #1
 80162ee:	4413      	add	r3, r2
 80162f0:	00db      	lsls	r3, r3, #3
 80162f2:	440b      	add	r3, r1
 80162f4:	3312      	adds	r3, #18
 80162f6:	881b      	ldrh	r3, [r3, #0]
 80162f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162fa:	8c3b      	ldrh	r3, [r7, #32]
 80162fc:	3301      	adds	r3, #1
 80162fe:	b29b      	uxth	r3, r3
 8016300:	843b      	strh	r3, [r7, #32]
 8016302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016306:	2b09      	cmp	r3, #9
 8016308:	f77f af4c 	ble.w	80161a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801630c:	7afb      	ldrb	r3, [r7, #11]
 801630e:	f003 0302 	and.w	r3, r3, #2
 8016312:	2b00      	cmp	r3, #0
 8016314:	d108      	bne.n	8016328 <etharp_find_entry+0x1b8>
 8016316:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801631a:	2b0a      	cmp	r3, #10
 801631c:	d107      	bne.n	801632e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801631e:	7afb      	ldrb	r3, [r7, #11]
 8016320:	f003 0301 	and.w	r3, r3, #1
 8016324:	2b00      	cmp	r3, #0
 8016326:	d102      	bne.n	801632e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016328:	f04f 33ff 	mov.w	r3, #4294967295
 801632c:	e085      	b.n	801643a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801632e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016332:	2b09      	cmp	r3, #9
 8016334:	dc02      	bgt.n	801633c <etharp_find_entry+0x1cc>
    i = empty;
 8016336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016338:	843b      	strh	r3, [r7, #32]
 801633a:	e039      	b.n	80163b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801633c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016340:	2b09      	cmp	r3, #9
 8016342:	dc14      	bgt.n	801636e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016344:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016346:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801634c:	493d      	ldr	r1, [pc, #244]	; (8016444 <etharp_find_entry+0x2d4>)
 801634e:	4613      	mov	r3, r2
 8016350:	005b      	lsls	r3, r3, #1
 8016352:	4413      	add	r3, r2
 8016354:	00db      	lsls	r3, r3, #3
 8016356:	440b      	add	r3, r1
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d018      	beq.n	8016390 <etharp_find_entry+0x220>
 801635e:	4b3a      	ldr	r3, [pc, #232]	; (8016448 <etharp_find_entry+0x2d8>)
 8016360:	f240 126d 	movw	r2, #365	; 0x16d
 8016364:	493b      	ldr	r1, [pc, #236]	; (8016454 <etharp_find_entry+0x2e4>)
 8016366:	483a      	ldr	r0, [pc, #232]	; (8016450 <etharp_find_entry+0x2e0>)
 8016368:	f002 fbe0 	bl	8018b2c <iprintf>
 801636c:	e010      	b.n	8016390 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801636e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016372:	2b09      	cmp	r3, #9
 8016374:	dc02      	bgt.n	801637c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016376:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016378:	843b      	strh	r3, [r7, #32]
 801637a:	e009      	b.n	8016390 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801637c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016380:	2b09      	cmp	r3, #9
 8016382:	dc02      	bgt.n	801638a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016384:	8bfb      	ldrh	r3, [r7, #30]
 8016386:	843b      	strh	r3, [r7, #32]
 8016388:	e002      	b.n	8016390 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801638a:	f04f 33ff 	mov.w	r3, #4294967295
 801638e:	e054      	b.n	801643a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016390:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016394:	2b09      	cmp	r3, #9
 8016396:	dd06      	ble.n	80163a6 <etharp_find_entry+0x236>
 8016398:	4b2b      	ldr	r3, [pc, #172]	; (8016448 <etharp_find_entry+0x2d8>)
 801639a:	f240 127f 	movw	r2, #383	; 0x17f
 801639e:	492e      	ldr	r1, [pc, #184]	; (8016458 <etharp_find_entry+0x2e8>)
 80163a0:	482b      	ldr	r0, [pc, #172]	; (8016450 <etharp_find_entry+0x2e0>)
 80163a2:	f002 fbc3 	bl	8018b2c <iprintf>
    etharp_free_entry(i);
 80163a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7ff fe06 	bl	8015fbc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163b4:	2b09      	cmp	r3, #9
 80163b6:	dd06      	ble.n	80163c6 <etharp_find_entry+0x256>
 80163b8:	4b23      	ldr	r3, [pc, #140]	; (8016448 <etharp_find_entry+0x2d8>)
 80163ba:	f240 1283 	movw	r2, #387	; 0x183
 80163be:	4926      	ldr	r1, [pc, #152]	; (8016458 <etharp_find_entry+0x2e8>)
 80163c0:	4823      	ldr	r0, [pc, #140]	; (8016450 <etharp_find_entry+0x2e0>)
 80163c2:	f002 fbb3 	bl	8018b2c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ca:	491e      	ldr	r1, [pc, #120]	; (8016444 <etharp_find_entry+0x2d4>)
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3314      	adds	r3, #20
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d006      	beq.n	80163ec <etharp_find_entry+0x27c>
 80163de:	4b1a      	ldr	r3, [pc, #104]	; (8016448 <etharp_find_entry+0x2d8>)
 80163e0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80163e4:	491d      	ldr	r1, [pc, #116]	; (801645c <etharp_find_entry+0x2ec>)
 80163e6:	481a      	ldr	r0, [pc, #104]	; (8016450 <etharp_find_entry+0x2e0>)
 80163e8:	f002 fba0 	bl	8018b2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d00b      	beq.n	801640a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80163f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6819      	ldr	r1, [r3, #0]
 80163fa:	4812      	ldr	r0, [pc, #72]	; (8016444 <etharp_find_entry+0x2d4>)
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	00db      	lsls	r3, r3, #3
 8016404:	4403      	add	r3, r0
 8016406:	3304      	adds	r3, #4
 8016408:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801640a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801640e:	490d      	ldr	r1, [pc, #52]	; (8016444 <etharp_find_entry+0x2d4>)
 8016410:	4613      	mov	r3, r2
 8016412:	005b      	lsls	r3, r3, #1
 8016414:	4413      	add	r3, r2
 8016416:	00db      	lsls	r3, r3, #3
 8016418:	440b      	add	r3, r1
 801641a:	3312      	adds	r3, #18
 801641c:	2200      	movs	r2, #0
 801641e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016424:	4907      	ldr	r1, [pc, #28]	; (8016444 <etharp_find_entry+0x2d4>)
 8016426:	4613      	mov	r3, r2
 8016428:	005b      	lsls	r3, r3, #1
 801642a:	4413      	add	r3, r2
 801642c:	00db      	lsls	r3, r3, #3
 801642e:	440b      	add	r3, r1
 8016430:	3308      	adds	r3, #8
 8016432:	687a      	ldr	r2, [r7, #4]
 8016434:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016436:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801643a:	4618      	mov	r0, r3
 801643c:	3728      	adds	r7, #40	; 0x28
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
 8016442:	bf00      	nop
 8016444:	20011234 	.word	0x20011234
 8016448:	0801d460 	.word	0x0801d460
 801644c:	0801d498 	.word	0x0801d498
 8016450:	0801d4d8 	.word	0x0801d4d8
 8016454:	0801d500 	.word	0x0801d500
 8016458:	0801d518 	.word	0x0801d518
 801645c:	0801d52c 	.word	0x0801d52c

08016460 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b088      	sub	sp, #32
 8016464:	af02      	add	r7, sp, #8
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	60b9      	str	r1, [r7, #8]
 801646a:	607a      	str	r2, [r7, #4]
 801646c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016474:	2b06      	cmp	r3, #6
 8016476:	d006      	beq.n	8016486 <etharp_update_arp_entry+0x26>
 8016478:	4b48      	ldr	r3, [pc, #288]	; (801659c <etharp_update_arp_entry+0x13c>)
 801647a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801647e:	4948      	ldr	r1, [pc, #288]	; (80165a0 <etharp_update_arp_entry+0x140>)
 8016480:	4848      	ldr	r0, [pc, #288]	; (80165a4 <etharp_update_arp_entry+0x144>)
 8016482:	f002 fb53 	bl	8018b2c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d012      	beq.n	80164b2 <etharp_update_arp_entry+0x52>
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d00e      	beq.n	80164b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	68f9      	ldr	r1, [r7, #12]
 801649a:	4618      	mov	r0, r3
 801649c:	f001 f920 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 80164a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d105      	bne.n	80164b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164ae:	2be0      	cmp	r3, #224	; 0xe0
 80164b0:	d102      	bne.n	80164b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164b2:	f06f 030f 	mvn.w	r3, #15
 80164b6:	e06c      	b.n	8016592 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80164b8:	78fb      	ldrb	r3, [r7, #3]
 80164ba:	68fa      	ldr	r2, [r7, #12]
 80164bc:	4619      	mov	r1, r3
 80164be:	68b8      	ldr	r0, [r7, #8]
 80164c0:	f7ff fe56 	bl	8016170 <etharp_find_entry>
 80164c4:	4603      	mov	r3, r0
 80164c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80164c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	da02      	bge.n	80164d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80164d0:	8afb      	ldrh	r3, [r7, #22]
 80164d2:	b25b      	sxtb	r3, r3
 80164d4:	e05d      	b.n	8016592 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80164d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164da:	4933      	ldr	r1, [pc, #204]	; (80165a8 <etharp_update_arp_entry+0x148>)
 80164dc:	4613      	mov	r3, r2
 80164de:	005b      	lsls	r3, r3, #1
 80164e0:	4413      	add	r3, r2
 80164e2:	00db      	lsls	r3, r3, #3
 80164e4:	440b      	add	r3, r1
 80164e6:	3314      	adds	r3, #20
 80164e8:	2202      	movs	r2, #2
 80164ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80164ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164f0:	492d      	ldr	r1, [pc, #180]	; (80165a8 <etharp_update_arp_entry+0x148>)
 80164f2:	4613      	mov	r3, r2
 80164f4:	005b      	lsls	r3, r3, #1
 80164f6:	4413      	add	r3, r2
 80164f8:	00db      	lsls	r3, r3, #3
 80164fa:	440b      	add	r3, r1
 80164fc:	3308      	adds	r3, #8
 80164fe:	68fa      	ldr	r2, [r7, #12]
 8016500:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016502:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016506:	4613      	mov	r3, r2
 8016508:	005b      	lsls	r3, r3, #1
 801650a:	4413      	add	r3, r2
 801650c:	00db      	lsls	r3, r3, #3
 801650e:	3308      	adds	r3, #8
 8016510:	4a25      	ldr	r2, [pc, #148]	; (80165a8 <etharp_update_arp_entry+0x148>)
 8016512:	4413      	add	r3, r2
 8016514:	3304      	adds	r3, #4
 8016516:	2206      	movs	r2, #6
 8016518:	6879      	ldr	r1, [r7, #4]
 801651a:	4618      	mov	r0, r3
 801651c:	f002 fd06 	bl	8018f2c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016524:	4920      	ldr	r1, [pc, #128]	; (80165a8 <etharp_update_arp_entry+0x148>)
 8016526:	4613      	mov	r3, r2
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	4413      	add	r3, r2
 801652c:	00db      	lsls	r3, r3, #3
 801652e:	440b      	add	r3, r1
 8016530:	3312      	adds	r3, #18
 8016532:	2200      	movs	r2, #0
 8016534:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801653a:	491b      	ldr	r1, [pc, #108]	; (80165a8 <etharp_update_arp_entry+0x148>)
 801653c:	4613      	mov	r3, r2
 801653e:	005b      	lsls	r3, r3, #1
 8016540:	4413      	add	r3, r2
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	440b      	add	r3, r1
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d021      	beq.n	8016590 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801654c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016550:	4915      	ldr	r1, [pc, #84]	; (80165a8 <etharp_update_arp_entry+0x148>)
 8016552:	4613      	mov	r3, r2
 8016554:	005b      	lsls	r3, r3, #1
 8016556:	4413      	add	r3, r2
 8016558:	00db      	lsls	r3, r3, #3
 801655a:	440b      	add	r3, r1
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016564:	4910      	ldr	r1, [pc, #64]	; (80165a8 <etharp_update_arp_entry+0x148>)
 8016566:	4613      	mov	r3, r2
 8016568:	005b      	lsls	r3, r3, #1
 801656a:	4413      	add	r3, r2
 801656c:	00db      	lsls	r3, r3, #3
 801656e:	440b      	add	r3, r1
 8016570:	2200      	movs	r2, #0
 8016572:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801657a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801657e:	9300      	str	r3, [sp, #0]
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6939      	ldr	r1, [r7, #16]
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f001 ffb9 	bl	80184fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801658a:	6938      	ldr	r0, [r7, #16]
 801658c:	f7f6 fbca 	bl	800cd24 <pbuf_free>
  }
  return ERR_OK;
 8016590:	2300      	movs	r3, #0
}
 8016592:	4618      	mov	r0, r3
 8016594:	3718      	adds	r7, #24
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	0801d460 	.word	0x0801d460
 80165a0:	0801d558 	.word	0x0801d558
 80165a4:	0801d4d8 	.word	0x0801d4d8
 80165a8:	20011234 	.word	0x20011234

080165ac <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b084      	sub	sp, #16
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165b4:	2300      	movs	r3, #0
 80165b6:	60fb      	str	r3, [r7, #12]
 80165b8:	e01e      	b.n	80165f8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80165ba:	4913      	ldr	r1, [pc, #76]	; (8016608 <etharp_cleanup_netif+0x5c>)
 80165bc:	68fa      	ldr	r2, [r7, #12]
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	440b      	add	r3, r1
 80165c8:	3314      	adds	r3, #20
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80165ce:	7afb      	ldrb	r3, [r7, #11]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00e      	beq.n	80165f2 <etharp_cleanup_netif+0x46>
 80165d4:	490c      	ldr	r1, [pc, #48]	; (8016608 <etharp_cleanup_netif+0x5c>)
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	4613      	mov	r3, r2
 80165da:	005b      	lsls	r3, r3, #1
 80165dc:	4413      	add	r3, r2
 80165de:	00db      	lsls	r3, r3, #3
 80165e0:	440b      	add	r3, r1
 80165e2:	3308      	adds	r3, #8
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d102      	bne.n	80165f2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f7ff fce5 	bl	8015fbc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	3301      	adds	r3, #1
 80165f6:	60fb      	str	r3, [r7, #12]
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2b09      	cmp	r3, #9
 80165fc:	dddd      	ble.n	80165ba <etharp_cleanup_netif+0xe>
    }
  }
}
 80165fe:	bf00      	nop
 8016600:	bf00      	nop
 8016602:	3710      	adds	r7, #16
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	20011234 	.word	0x20011234

0801660c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801660c:	b5b0      	push	{r4, r5, r7, lr}
 801660e:	b08a      	sub	sp, #40	; 0x28
 8016610:	af04      	add	r7, sp, #16
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d107      	bne.n	801662c <etharp_input+0x20>
 801661c:	4b3f      	ldr	r3, [pc, #252]	; (801671c <etharp_input+0x110>)
 801661e:	f240 228a 	movw	r2, #650	; 0x28a
 8016622:	493f      	ldr	r1, [pc, #252]	; (8016720 <etharp_input+0x114>)
 8016624:	483f      	ldr	r0, [pc, #252]	; (8016724 <etharp_input+0x118>)
 8016626:	f002 fa81 	bl	8018b2c <iprintf>
 801662a:	e074      	b.n	8016716 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	685b      	ldr	r3, [r3, #4]
 8016630:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016632:	693b      	ldr	r3, [r7, #16]
 8016634:	881b      	ldrh	r3, [r3, #0]
 8016636:	b29b      	uxth	r3, r3
 8016638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801663c:	d10c      	bne.n	8016658 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016642:	2b06      	cmp	r3, #6
 8016644:	d108      	bne.n	8016658 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801664a:	2b04      	cmp	r3, #4
 801664c:	d104      	bne.n	8016658 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	885b      	ldrh	r3, [r3, #2]
 8016652:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016654:	2b08      	cmp	r3, #8
 8016656:	d003      	beq.n	8016660 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f7f6 fb63 	bl	800cd24 <pbuf_free>
    return;
 801665e:	e05a      	b.n	8016716 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	330e      	adds	r3, #14
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	3318      	adds	r3, #24
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	3304      	adds	r3, #4
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d102      	bne.n	8016680 <etharp_input+0x74>
    for_us = 0;
 801667a:	2300      	movs	r3, #0
 801667c:	75fb      	strb	r3, [r7, #23]
 801667e:	e009      	b.n	8016694 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016680:	68ba      	ldr	r2, [r7, #8]
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	3304      	adds	r3, #4
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	429a      	cmp	r2, r3
 801668a:	bf0c      	ite	eq
 801668c:	2301      	moveq	r3, #1
 801668e:	2300      	movne	r3, #0
 8016690:	b2db      	uxtb	r3, r3
 8016692:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	f103 0208 	add.w	r2, r3, #8
 801669a:	7dfb      	ldrb	r3, [r7, #23]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d001      	beq.n	80166a4 <etharp_input+0x98>
 80166a0:	2301      	movs	r3, #1
 80166a2:	e000      	b.n	80166a6 <etharp_input+0x9a>
 80166a4:	2302      	movs	r3, #2
 80166a6:	f107 010c 	add.w	r1, r7, #12
 80166aa:	6838      	ldr	r0, [r7, #0]
 80166ac:	f7ff fed8 	bl	8016460 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	88db      	ldrh	r3, [r3, #6]
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166ba:	d003      	beq.n	80166c4 <etharp_input+0xb8>
 80166bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166c0:	d01e      	beq.n	8016700 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80166c2:	e025      	b.n	8016710 <etharp_input+0x104>
      if (for_us) {
 80166c4:	7dfb      	ldrb	r3, [r7, #23]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d021      	beq.n	801670e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80166e0:	693a      	ldr	r2, [r7, #16]
 80166e2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80166e4:	2102      	movs	r1, #2
 80166e6:	9103      	str	r1, [sp, #12]
 80166e8:	f107 010c 	add.w	r1, r7, #12
 80166ec:	9102      	str	r1, [sp, #8]
 80166ee:	9201      	str	r2, [sp, #4]
 80166f0:	9300      	str	r3, [sp, #0]
 80166f2:	462b      	mov	r3, r5
 80166f4:	4622      	mov	r2, r4
 80166f6:	4601      	mov	r1, r0
 80166f8:	6838      	ldr	r0, [r7, #0]
 80166fa:	f000 faef 	bl	8016cdc <etharp_raw>
      break;
 80166fe:	e006      	b.n	801670e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016700:	f107 030c 	add.w	r3, r7, #12
 8016704:	4619      	mov	r1, r3
 8016706:	6838      	ldr	r0, [r7, #0]
 8016708:	f7fe f9fc 	bl	8014b04 <dhcp_arp_reply>
      break;
 801670c:	e000      	b.n	8016710 <etharp_input+0x104>
      break;
 801670e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f7f6 fb07 	bl	800cd24 <pbuf_free>
}
 8016716:	3718      	adds	r7, #24
 8016718:	46bd      	mov	sp, r7
 801671a:	bdb0      	pop	{r4, r5, r7, pc}
 801671c:	0801d460 	.word	0x0801d460
 8016720:	0801d5b0 	.word	0x0801d5b0
 8016724:	0801d4d8 	.word	0x0801d4d8

08016728 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af02      	add	r7, sp, #8
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	60b9      	str	r1, [r7, #8]
 8016732:	4613      	mov	r3, r2
 8016734:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016736:	79fa      	ldrb	r2, [r7, #7]
 8016738:	4944      	ldr	r1, [pc, #272]	; (801684c <etharp_output_to_arp_index+0x124>)
 801673a:	4613      	mov	r3, r2
 801673c:	005b      	lsls	r3, r3, #1
 801673e:	4413      	add	r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	440b      	add	r3, r1
 8016744:	3314      	adds	r3, #20
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	2b01      	cmp	r3, #1
 801674a:	d806      	bhi.n	801675a <etharp_output_to_arp_index+0x32>
 801674c:	4b40      	ldr	r3, [pc, #256]	; (8016850 <etharp_output_to_arp_index+0x128>)
 801674e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016752:	4940      	ldr	r1, [pc, #256]	; (8016854 <etharp_output_to_arp_index+0x12c>)
 8016754:	4840      	ldr	r0, [pc, #256]	; (8016858 <etharp_output_to_arp_index+0x130>)
 8016756:	f002 f9e9 	bl	8018b2c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801675a:	79fa      	ldrb	r2, [r7, #7]
 801675c:	493b      	ldr	r1, [pc, #236]	; (801684c <etharp_output_to_arp_index+0x124>)
 801675e:	4613      	mov	r3, r2
 8016760:	005b      	lsls	r3, r3, #1
 8016762:	4413      	add	r3, r2
 8016764:	00db      	lsls	r3, r3, #3
 8016766:	440b      	add	r3, r1
 8016768:	3314      	adds	r3, #20
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	2b02      	cmp	r3, #2
 801676e:	d153      	bne.n	8016818 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016770:	79fa      	ldrb	r2, [r7, #7]
 8016772:	4936      	ldr	r1, [pc, #216]	; (801684c <etharp_output_to_arp_index+0x124>)
 8016774:	4613      	mov	r3, r2
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	4413      	add	r3, r2
 801677a:	00db      	lsls	r3, r3, #3
 801677c:	440b      	add	r3, r1
 801677e:	3312      	adds	r3, #18
 8016780:	881b      	ldrh	r3, [r3, #0]
 8016782:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016786:	d919      	bls.n	80167bc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016788:	79fa      	ldrb	r2, [r7, #7]
 801678a:	4613      	mov	r3, r2
 801678c:	005b      	lsls	r3, r3, #1
 801678e:	4413      	add	r3, r2
 8016790:	00db      	lsls	r3, r3, #3
 8016792:	4a2e      	ldr	r2, [pc, #184]	; (801684c <etharp_output_to_arp_index+0x124>)
 8016794:	4413      	add	r3, r2
 8016796:	3304      	adds	r3, #4
 8016798:	4619      	mov	r1, r3
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f000 fb4c 	bl	8016e38 <etharp_request>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d138      	bne.n	8016818 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167a6:	79fa      	ldrb	r2, [r7, #7]
 80167a8:	4928      	ldr	r1, [pc, #160]	; (801684c <etharp_output_to_arp_index+0x124>)
 80167aa:	4613      	mov	r3, r2
 80167ac:	005b      	lsls	r3, r3, #1
 80167ae:	4413      	add	r3, r2
 80167b0:	00db      	lsls	r3, r3, #3
 80167b2:	440b      	add	r3, r1
 80167b4:	3314      	adds	r3, #20
 80167b6:	2203      	movs	r2, #3
 80167b8:	701a      	strb	r2, [r3, #0]
 80167ba:	e02d      	b.n	8016818 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167bc:	79fa      	ldrb	r2, [r7, #7]
 80167be:	4923      	ldr	r1, [pc, #140]	; (801684c <etharp_output_to_arp_index+0x124>)
 80167c0:	4613      	mov	r3, r2
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	4413      	add	r3, r2
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	440b      	add	r3, r1
 80167ca:	3312      	adds	r3, #18
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80167d2:	d321      	bcc.n	8016818 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80167d4:	79fa      	ldrb	r2, [r7, #7]
 80167d6:	4613      	mov	r3, r2
 80167d8:	005b      	lsls	r3, r3, #1
 80167da:	4413      	add	r3, r2
 80167dc:	00db      	lsls	r3, r3, #3
 80167de:	4a1b      	ldr	r2, [pc, #108]	; (801684c <etharp_output_to_arp_index+0x124>)
 80167e0:	4413      	add	r3, r2
 80167e2:	1d19      	adds	r1, r3, #4
 80167e4:	79fa      	ldrb	r2, [r7, #7]
 80167e6:	4613      	mov	r3, r2
 80167e8:	005b      	lsls	r3, r3, #1
 80167ea:	4413      	add	r3, r2
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	3308      	adds	r3, #8
 80167f0:	4a16      	ldr	r2, [pc, #88]	; (801684c <etharp_output_to_arp_index+0x124>)
 80167f2:	4413      	add	r3, r2
 80167f4:	3304      	adds	r3, #4
 80167f6:	461a      	mov	r2, r3
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	f000 fafb 	bl	8016df4 <etharp_request_dst>
 80167fe:	4603      	mov	r3, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d109      	bne.n	8016818 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016804:	79fa      	ldrb	r2, [r7, #7]
 8016806:	4911      	ldr	r1, [pc, #68]	; (801684c <etharp_output_to_arp_index+0x124>)
 8016808:	4613      	mov	r3, r2
 801680a:	005b      	lsls	r3, r3, #1
 801680c:	4413      	add	r3, r2
 801680e:	00db      	lsls	r3, r3, #3
 8016810:	440b      	add	r3, r1
 8016812:	3314      	adds	r3, #20
 8016814:	2203      	movs	r2, #3
 8016816:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801681e:	79fa      	ldrb	r2, [r7, #7]
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	3308      	adds	r3, #8
 801682a:	4a08      	ldr	r2, [pc, #32]	; (801684c <etharp_output_to_arp_index+0x124>)
 801682c:	4413      	add	r3, r2
 801682e:	3304      	adds	r3, #4
 8016830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016834:	9200      	str	r2, [sp, #0]
 8016836:	460a      	mov	r2, r1
 8016838:	68b9      	ldr	r1, [r7, #8]
 801683a:	68f8      	ldr	r0, [r7, #12]
 801683c:	f001 fe5e 	bl	80184fc <ethernet_output>
 8016840:	4603      	mov	r3, r0
}
 8016842:	4618      	mov	r0, r3
 8016844:	3710      	adds	r7, #16
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}
 801684a:	bf00      	nop
 801684c:	20011234 	.word	0x20011234
 8016850:	0801d460 	.word	0x0801d460
 8016854:	0801d5d0 	.word	0x0801d5d0
 8016858:	0801d4d8 	.word	0x0801d4d8

0801685c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b08a      	sub	sp, #40	; 0x28
 8016860:	af02      	add	r7, sp, #8
 8016862:	60f8      	str	r0, [r7, #12]
 8016864:	60b9      	str	r1, [r7, #8]
 8016866:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d106      	bne.n	8016880 <etharp_output+0x24>
 8016872:	4b73      	ldr	r3, [pc, #460]	; (8016a40 <etharp_output+0x1e4>)
 8016874:	f240 321e 	movw	r2, #798	; 0x31e
 8016878:	4972      	ldr	r1, [pc, #456]	; (8016a44 <etharp_output+0x1e8>)
 801687a:	4873      	ldr	r0, [pc, #460]	; (8016a48 <etharp_output+0x1ec>)
 801687c:	f002 f956 	bl	8018b2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d106      	bne.n	8016894 <etharp_output+0x38>
 8016886:	4b6e      	ldr	r3, [pc, #440]	; (8016a40 <etharp_output+0x1e4>)
 8016888:	f240 321f 	movw	r2, #799	; 0x31f
 801688c:	496f      	ldr	r1, [pc, #444]	; (8016a4c <etharp_output+0x1f0>)
 801688e:	486e      	ldr	r0, [pc, #440]	; (8016a48 <etharp_output+0x1ec>)
 8016890:	f002 f94c 	bl	8018b2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d106      	bne.n	80168a8 <etharp_output+0x4c>
 801689a:	4b69      	ldr	r3, [pc, #420]	; (8016a40 <etharp_output+0x1e4>)
 801689c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80168a0:	496b      	ldr	r1, [pc, #428]	; (8016a50 <etharp_output+0x1f4>)
 80168a2:	4869      	ldr	r0, [pc, #420]	; (8016a48 <etharp_output+0x1ec>)
 80168a4:	f002 f942 	bl	8018b2c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	68f9      	ldr	r1, [r7, #12]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f000 ff16 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 80168b4:	4603      	mov	r3, r0
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d002      	beq.n	80168c0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80168ba:	4b66      	ldr	r3, [pc, #408]	; (8016a54 <etharp_output+0x1f8>)
 80168bc:	61fb      	str	r3, [r7, #28]
 80168be:	e0af      	b.n	8016a20 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168c8:	2be0      	cmp	r3, #224	; 0xe0
 80168ca:	d118      	bne.n	80168fe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80168cc:	2301      	movs	r3, #1
 80168ce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80168d0:	2300      	movs	r3, #0
 80168d2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80168d4:	235e      	movs	r3, #94	; 0x5e
 80168d6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	3301      	adds	r3, #1
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	3302      	adds	r3, #2
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	3303      	adds	r3, #3
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80168f6:	f107 0310 	add.w	r3, r7, #16
 80168fa:	61fb      	str	r3, [r7, #28]
 80168fc:	e090      	b.n	8016a20 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	3304      	adds	r3, #4
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	405a      	eors	r2, r3
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	3308      	adds	r3, #8
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	4013      	ands	r3, r2
 8016912:	2b00      	cmp	r3, #0
 8016914:	d012      	beq.n	801693c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801691c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016920:	4293      	cmp	r3, r2
 8016922:	d00b      	beq.n	801693c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	330c      	adds	r3, #12
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d003      	beq.n	8016936 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	330c      	adds	r3, #12
 8016932:	61bb      	str	r3, [r7, #24]
 8016934:	e002      	b.n	801693c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016936:	f06f 0303 	mvn.w	r3, #3
 801693a:	e07d      	b.n	8016a38 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801693c:	4b46      	ldr	r3, [pc, #280]	; (8016a58 <etharp_output+0x1fc>)
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	4619      	mov	r1, r3
 8016942:	4a46      	ldr	r2, [pc, #280]	; (8016a5c <etharp_output+0x200>)
 8016944:	460b      	mov	r3, r1
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	440b      	add	r3, r1
 801694a:	00db      	lsls	r3, r3, #3
 801694c:	4413      	add	r3, r2
 801694e:	3314      	adds	r3, #20
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	2b01      	cmp	r3, #1
 8016954:	d925      	bls.n	80169a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016956:	4b40      	ldr	r3, [pc, #256]	; (8016a58 <etharp_output+0x1fc>)
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	4619      	mov	r1, r3
 801695c:	4a3f      	ldr	r2, [pc, #252]	; (8016a5c <etharp_output+0x200>)
 801695e:	460b      	mov	r3, r1
 8016960:	005b      	lsls	r3, r3, #1
 8016962:	440b      	add	r3, r1
 8016964:	00db      	lsls	r3, r3, #3
 8016966:	4413      	add	r3, r2
 8016968:	3308      	adds	r3, #8
 801696a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801696c:	68fa      	ldr	r2, [r7, #12]
 801696e:	429a      	cmp	r2, r3
 8016970:	d117      	bne.n	80169a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	681a      	ldr	r2, [r3, #0]
 8016976:	4b38      	ldr	r3, [pc, #224]	; (8016a58 <etharp_output+0x1fc>)
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	4618      	mov	r0, r3
 801697c:	4937      	ldr	r1, [pc, #220]	; (8016a5c <etharp_output+0x200>)
 801697e:	4603      	mov	r3, r0
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4403      	add	r3, r0
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	440b      	add	r3, r1
 8016988:	3304      	adds	r3, #4
 801698a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801698c:	429a      	cmp	r2, r3
 801698e:	d108      	bne.n	80169a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016990:	4b31      	ldr	r3, [pc, #196]	; (8016a58 <etharp_output+0x1fc>)
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	461a      	mov	r2, r3
 8016996:	68b9      	ldr	r1, [r7, #8]
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f7ff fec5 	bl	8016728 <etharp_output_to_arp_index>
 801699e:	4603      	mov	r3, r0
 80169a0:	e04a      	b.n	8016a38 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80169a2:	2300      	movs	r3, #0
 80169a4:	75fb      	strb	r3, [r7, #23]
 80169a6:	e031      	b.n	8016a0c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169a8:	7dfa      	ldrb	r2, [r7, #23]
 80169aa:	492c      	ldr	r1, [pc, #176]	; (8016a5c <etharp_output+0x200>)
 80169ac:	4613      	mov	r3, r2
 80169ae:	005b      	lsls	r3, r3, #1
 80169b0:	4413      	add	r3, r2
 80169b2:	00db      	lsls	r3, r3, #3
 80169b4:	440b      	add	r3, r1
 80169b6:	3314      	adds	r3, #20
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	d923      	bls.n	8016a06 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80169be:	7dfa      	ldrb	r2, [r7, #23]
 80169c0:	4926      	ldr	r1, [pc, #152]	; (8016a5c <etharp_output+0x200>)
 80169c2:	4613      	mov	r3, r2
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	4413      	add	r3, r2
 80169c8:	00db      	lsls	r3, r3, #3
 80169ca:	440b      	add	r3, r1
 80169cc:	3308      	adds	r3, #8
 80169ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169d0:	68fa      	ldr	r2, [r7, #12]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d117      	bne.n	8016a06 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80169d6:	69bb      	ldr	r3, [r7, #24]
 80169d8:	6819      	ldr	r1, [r3, #0]
 80169da:	7dfa      	ldrb	r2, [r7, #23]
 80169dc:	481f      	ldr	r0, [pc, #124]	; (8016a5c <etharp_output+0x200>)
 80169de:	4613      	mov	r3, r2
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4413      	add	r3, r2
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	4403      	add	r3, r0
 80169e8:	3304      	adds	r3, #4
 80169ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80169ec:	4299      	cmp	r1, r3
 80169ee:	d10a      	bne.n	8016a06 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80169f0:	4a19      	ldr	r2, [pc, #100]	; (8016a58 <etharp_output+0x1fc>)
 80169f2:	7dfb      	ldrb	r3, [r7, #23]
 80169f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80169f6:	7dfb      	ldrb	r3, [r7, #23]
 80169f8:	461a      	mov	r2, r3
 80169fa:	68b9      	ldr	r1, [r7, #8]
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	f7ff fe93 	bl	8016728 <etharp_output_to_arp_index>
 8016a02:	4603      	mov	r3, r0
 8016a04:	e018      	b.n	8016a38 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a06:	7dfb      	ldrb	r3, [r7, #23]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	75fb      	strb	r3, [r7, #23]
 8016a0c:	7dfb      	ldrb	r3, [r7, #23]
 8016a0e:	2b09      	cmp	r3, #9
 8016a10:	d9ca      	bls.n	80169a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a12:	68ba      	ldr	r2, [r7, #8]
 8016a14:	69b9      	ldr	r1, [r7, #24]
 8016a16:	68f8      	ldr	r0, [r7, #12]
 8016a18:	f000 f822 	bl	8016a60 <etharp_query>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	e00b      	b.n	8016a38 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	69fb      	ldr	r3, [r7, #28]
 8016a2e:	68b9      	ldr	r1, [r7, #8]
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f001 fd63 	bl	80184fc <ethernet_output>
 8016a36:	4603      	mov	r3, r0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3720      	adds	r7, #32
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	0801d460 	.word	0x0801d460
 8016a44:	0801d5b0 	.word	0x0801d5b0
 8016a48:	0801d4d8 	.word	0x0801d4d8
 8016a4c:	0801d600 	.word	0x0801d600
 8016a50:	0801d5a0 	.word	0x0801d5a0
 8016a54:	08027dac 	.word	0x08027dac
 8016a58:	20011324 	.word	0x20011324
 8016a5c:	20011234 	.word	0x20011234

08016a60 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b08c      	sub	sp, #48	; 0x30
 8016a64:	af02      	add	r7, sp, #8
 8016a66:	60f8      	str	r0, [r7, #12]
 8016a68:	60b9      	str	r1, [r7, #8]
 8016a6a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	332a      	adds	r3, #42	; 0x2a
 8016a70:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016a72:	23ff      	movs	r3, #255	; 0xff
 8016a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	68f9      	ldr	r1, [r7, #12]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f000 fe2c 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d10c      	bne.n	8016aa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a96:	2be0      	cmp	r3, #224	; 0xe0
 8016a98:	d006      	beq.n	8016aa8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d003      	beq.n	8016aa8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d102      	bne.n	8016aae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016aa8:	f06f 030f 	mvn.w	r3, #15
 8016aac:	e101      	b.n	8016cb2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	2101      	movs	r1, #1
 8016ab2:	68b8      	ldr	r0, [r7, #8]
 8016ab4:	f7ff fb5c 	bl	8016170 <etharp_find_entry>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016abc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	da02      	bge.n	8016aca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016ac4:	8a7b      	ldrh	r3, [r7, #18]
 8016ac6:	b25b      	sxtb	r3, r3
 8016ac8:	e0f3      	b.n	8016cb2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016aca:	8a7b      	ldrh	r3, [r7, #18]
 8016acc:	2b7e      	cmp	r3, #126	; 0x7e
 8016ace:	d906      	bls.n	8016ade <etharp_query+0x7e>
 8016ad0:	4b7a      	ldr	r3, [pc, #488]	; (8016cbc <etharp_query+0x25c>)
 8016ad2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016ad6:	497a      	ldr	r1, [pc, #488]	; (8016cc0 <etharp_query+0x260>)
 8016ad8:	487a      	ldr	r0, [pc, #488]	; (8016cc4 <etharp_query+0x264>)
 8016ada:	f002 f827 	bl	8018b2c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016ade:	8a7b      	ldrh	r3, [r7, #18]
 8016ae0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016ae2:	7c7a      	ldrb	r2, [r7, #17]
 8016ae4:	4978      	ldr	r1, [pc, #480]	; (8016cc8 <etharp_query+0x268>)
 8016ae6:	4613      	mov	r3, r2
 8016ae8:	005b      	lsls	r3, r3, #1
 8016aea:	4413      	add	r3, r2
 8016aec:	00db      	lsls	r3, r3, #3
 8016aee:	440b      	add	r3, r1
 8016af0:	3314      	adds	r3, #20
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d115      	bne.n	8016b24 <etharp_query+0xc4>
    is_new_entry = 1;
 8016af8:	2301      	movs	r3, #1
 8016afa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016afc:	7c7a      	ldrb	r2, [r7, #17]
 8016afe:	4972      	ldr	r1, [pc, #456]	; (8016cc8 <etharp_query+0x268>)
 8016b00:	4613      	mov	r3, r2
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	4413      	add	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	440b      	add	r3, r1
 8016b0a:	3314      	adds	r3, #20
 8016b0c:	2201      	movs	r2, #1
 8016b0e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b10:	7c7a      	ldrb	r2, [r7, #17]
 8016b12:	496d      	ldr	r1, [pc, #436]	; (8016cc8 <etharp_query+0x268>)
 8016b14:	4613      	mov	r3, r2
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	4413      	add	r3, r2
 8016b1a:	00db      	lsls	r3, r3, #3
 8016b1c:	440b      	add	r3, r1
 8016b1e:	3308      	adds	r3, #8
 8016b20:	68fa      	ldr	r2, [r7, #12]
 8016b22:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b24:	7c7a      	ldrb	r2, [r7, #17]
 8016b26:	4968      	ldr	r1, [pc, #416]	; (8016cc8 <etharp_query+0x268>)
 8016b28:	4613      	mov	r3, r2
 8016b2a:	005b      	lsls	r3, r3, #1
 8016b2c:	4413      	add	r3, r2
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	440b      	add	r3, r1
 8016b32:	3314      	adds	r3, #20
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	2b01      	cmp	r3, #1
 8016b38:	d011      	beq.n	8016b5e <etharp_query+0xfe>
 8016b3a:	7c7a      	ldrb	r2, [r7, #17]
 8016b3c:	4962      	ldr	r1, [pc, #392]	; (8016cc8 <etharp_query+0x268>)
 8016b3e:	4613      	mov	r3, r2
 8016b40:	005b      	lsls	r3, r3, #1
 8016b42:	4413      	add	r3, r2
 8016b44:	00db      	lsls	r3, r3, #3
 8016b46:	440b      	add	r3, r1
 8016b48:	3314      	adds	r3, #20
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d806      	bhi.n	8016b5e <etharp_query+0xfe>
 8016b50:	4b5a      	ldr	r3, [pc, #360]	; (8016cbc <etharp_query+0x25c>)
 8016b52:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016b56:	495d      	ldr	r1, [pc, #372]	; (8016ccc <etharp_query+0x26c>)
 8016b58:	485a      	ldr	r0, [pc, #360]	; (8016cc4 <etharp_query+0x264>)
 8016b5a:	f001 ffe7 	bl	8018b2c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016b5e:	6a3b      	ldr	r3, [r7, #32]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d102      	bne.n	8016b6a <etharp_query+0x10a>
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d10c      	bne.n	8016b84 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016b6a:	68b9      	ldr	r1, [r7, #8]
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	f000 f963 	bl	8016e38 <etharp_request>
 8016b72:	4603      	mov	r3, r0
 8016b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d102      	bne.n	8016b84 <etharp_query+0x124>
      return result;
 8016b7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b82:	e096      	b.n	8016cb2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <etharp_query+0x138>
 8016b8a:	4b4c      	ldr	r3, [pc, #304]	; (8016cbc <etharp_query+0x25c>)
 8016b8c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016b90:	494f      	ldr	r1, [pc, #316]	; (8016cd0 <etharp_query+0x270>)
 8016b92:	484c      	ldr	r0, [pc, #304]	; (8016cc4 <etharp_query+0x264>)
 8016b94:	f001 ffca 	bl	8018b2c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016b98:	7c7a      	ldrb	r2, [r7, #17]
 8016b9a:	494b      	ldr	r1, [pc, #300]	; (8016cc8 <etharp_query+0x268>)
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	005b      	lsls	r3, r3, #1
 8016ba0:	4413      	add	r3, r2
 8016ba2:	00db      	lsls	r3, r3, #3
 8016ba4:	440b      	add	r3, r1
 8016ba6:	3314      	adds	r3, #20
 8016ba8:	781b      	ldrb	r3, [r3, #0]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d917      	bls.n	8016bde <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016bae:	4a49      	ldr	r2, [pc, #292]	; (8016cd4 <etharp_query+0x274>)
 8016bb0:	7c7b      	ldrb	r3, [r7, #17]
 8016bb2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016bb4:	7c7a      	ldrb	r2, [r7, #17]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	005b      	lsls	r3, r3, #1
 8016bba:	4413      	add	r3, r2
 8016bbc:	00db      	lsls	r3, r3, #3
 8016bbe:	3308      	adds	r3, #8
 8016bc0:	4a41      	ldr	r2, [pc, #260]	; (8016cc8 <etharp_query+0x268>)
 8016bc2:	4413      	add	r3, r2
 8016bc4:	3304      	adds	r3, #4
 8016bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bca:	9200      	str	r2, [sp, #0]
 8016bcc:	697a      	ldr	r2, [r7, #20]
 8016bce:	6879      	ldr	r1, [r7, #4]
 8016bd0:	68f8      	ldr	r0, [r7, #12]
 8016bd2:	f001 fc93 	bl	80184fc <ethernet_output>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bdc:	e067      	b.n	8016cae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016bde:	7c7a      	ldrb	r2, [r7, #17]
 8016be0:	4939      	ldr	r1, [pc, #228]	; (8016cc8 <etharp_query+0x268>)
 8016be2:	4613      	mov	r3, r2
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4413      	add	r3, r2
 8016be8:	00db      	lsls	r3, r3, #3
 8016bea:	440b      	add	r3, r1
 8016bec:	3314      	adds	r3, #20
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	d15c      	bne.n	8016cae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016bfc:	e01c      	b.n	8016c38 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	895a      	ldrh	r2, [r3, #10]
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	891b      	ldrh	r3, [r3, #8]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d10a      	bne.n	8016c20 <etharp_query+0x1c0>
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d006      	beq.n	8016c20 <etharp_query+0x1c0>
 8016c12:	4b2a      	ldr	r3, [pc, #168]	; (8016cbc <etharp_query+0x25c>)
 8016c14:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016c18:	492f      	ldr	r1, [pc, #188]	; (8016cd8 <etharp_query+0x278>)
 8016c1a:	482a      	ldr	r0, [pc, #168]	; (8016cc4 <etharp_query+0x264>)
 8016c1c:	f001 ff86 	bl	8018b2c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c20:	69fb      	ldr	r3, [r7, #28]
 8016c22:	7b1b      	ldrb	r3, [r3, #12]
 8016c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d002      	beq.n	8016c32 <etharp_query+0x1d2>
        copy_needed = 1;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	61bb      	str	r3, [r7, #24]
        break;
 8016c30:	e005      	b.n	8016c3e <etharp_query+0x1de>
      }
      p = p->next;
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1df      	bne.n	8016bfe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c3e:	69bb      	ldr	r3, [r7, #24]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d007      	beq.n	8016c54 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016c4a:	200e      	movs	r0, #14
 8016c4c:	f7f6 fae2 	bl	800d214 <pbuf_clone>
 8016c50:	61f8      	str	r0, [r7, #28]
 8016c52:	e004      	b.n	8016c5e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016c58:	69f8      	ldr	r0, [r7, #28]
 8016c5a:	f7f6 f909 	bl	800ce70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d021      	beq.n	8016ca8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016c64:	7c7a      	ldrb	r2, [r7, #17]
 8016c66:	4918      	ldr	r1, [pc, #96]	; (8016cc8 <etharp_query+0x268>)
 8016c68:	4613      	mov	r3, r2
 8016c6a:	005b      	lsls	r3, r3, #1
 8016c6c:	4413      	add	r3, r2
 8016c6e:	00db      	lsls	r3, r3, #3
 8016c70:	440b      	add	r3, r1
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d00a      	beq.n	8016c8e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016c78:	7c7a      	ldrb	r2, [r7, #17]
 8016c7a:	4913      	ldr	r1, [pc, #76]	; (8016cc8 <etharp_query+0x268>)
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	440b      	add	r3, r1
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7f6 f84b 	bl	800cd24 <pbuf_free>
      }
      arp_table[i].q = p;
 8016c8e:	7c7a      	ldrb	r2, [r7, #17]
 8016c90:	490d      	ldr	r1, [pc, #52]	; (8016cc8 <etharp_query+0x268>)
 8016c92:	4613      	mov	r3, r2
 8016c94:	005b      	lsls	r3, r3, #1
 8016c96:	4413      	add	r3, r2
 8016c98:	00db      	lsls	r3, r3, #3
 8016c9a:	440b      	add	r3, r1
 8016c9c:	69fa      	ldr	r2, [r7, #28]
 8016c9e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ca6:	e002      	b.n	8016cae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016ca8:	23ff      	movs	r3, #255	; 0xff
 8016caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016cae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3728      	adds	r7, #40	; 0x28
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	0801d460 	.word	0x0801d460
 8016cc0:	0801d60c 	.word	0x0801d60c
 8016cc4:	0801d4d8 	.word	0x0801d4d8
 8016cc8:	20011234 	.word	0x20011234
 8016ccc:	0801d61c 	.word	0x0801d61c
 8016cd0:	0801d600 	.word	0x0801d600
 8016cd4:	20011324 	.word	0x20011324
 8016cd8:	0801d644 	.word	0x0801d644

08016cdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b08a      	sub	sp, #40	; 0x28
 8016ce0:	af02      	add	r7, sp, #8
 8016ce2:	60f8      	str	r0, [r7, #12]
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
 8016ce8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016cea:	2300      	movs	r3, #0
 8016cec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d106      	bne.n	8016d02 <etharp_raw+0x26>
 8016cf4:	4b3a      	ldr	r3, [pc, #232]	; (8016de0 <etharp_raw+0x104>)
 8016cf6:	f240 4257 	movw	r2, #1111	; 0x457
 8016cfa:	493a      	ldr	r1, [pc, #232]	; (8016de4 <etharp_raw+0x108>)
 8016cfc:	483a      	ldr	r0, [pc, #232]	; (8016de8 <etharp_raw+0x10c>)
 8016cfe:	f001 ff15 	bl	8018b2c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016d02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d06:	211c      	movs	r1, #28
 8016d08:	200e      	movs	r0, #14
 8016d0a:	f7f5 fd27 	bl	800c75c <pbuf_alloc>
 8016d0e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d102      	bne.n	8016d1c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d16:	f04f 33ff 	mov.w	r3, #4294967295
 8016d1a:	e05d      	b.n	8016dd8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	895b      	ldrh	r3, [r3, #10]
 8016d20:	2b1b      	cmp	r3, #27
 8016d22:	d806      	bhi.n	8016d32 <etharp_raw+0x56>
 8016d24:	4b2e      	ldr	r3, [pc, #184]	; (8016de0 <etharp_raw+0x104>)
 8016d26:	f240 4262 	movw	r2, #1122	; 0x462
 8016d2a:	4930      	ldr	r1, [pc, #192]	; (8016dec <etharp_raw+0x110>)
 8016d2c:	482e      	ldr	r0, [pc, #184]	; (8016de8 <etharp_raw+0x10c>)
 8016d2e:	f001 fefd 	bl	8018b2c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d32:	69bb      	ldr	r3, [r7, #24]
 8016d34:	685b      	ldr	r3, [r3, #4]
 8016d36:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7f4 fbbe 	bl	800b4bc <lwip_htons>
 8016d40:	4603      	mov	r3, r0
 8016d42:	461a      	mov	r2, r3
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d4e:	2b06      	cmp	r3, #6
 8016d50:	d006      	beq.n	8016d60 <etharp_raw+0x84>
 8016d52:	4b23      	ldr	r3, [pc, #140]	; (8016de0 <etharp_raw+0x104>)
 8016d54:	f240 4269 	movw	r2, #1129	; 0x469
 8016d58:	4925      	ldr	r1, [pc, #148]	; (8016df0 <etharp_raw+0x114>)
 8016d5a:	4823      	ldr	r0, [pc, #140]	; (8016de8 <etharp_raw+0x10c>)
 8016d5c:	f001 fee6 	bl	8018b2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016d60:	697b      	ldr	r3, [r7, #20]
 8016d62:	3308      	adds	r3, #8
 8016d64:	2206      	movs	r2, #6
 8016d66:	6839      	ldr	r1, [r7, #0]
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f002 f8df 	bl	8018f2c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	3312      	adds	r3, #18
 8016d72:	2206      	movs	r2, #6
 8016d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d76:	4618      	mov	r0, r3
 8016d78:	f002 f8d8 	bl	8018f2c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	330e      	adds	r3, #14
 8016d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d82:	6812      	ldr	r2, [r2, #0]
 8016d84:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016d86:	697b      	ldr	r3, [r7, #20]
 8016d88:	3318      	adds	r3, #24
 8016d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d8c:	6812      	ldr	r2, [r2, #0]
 8016d8e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	2200      	movs	r2, #0
 8016d94:	701a      	strb	r2, [r3, #0]
 8016d96:	2200      	movs	r2, #0
 8016d98:	f042 0201 	orr.w	r2, r2, #1
 8016d9c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	2200      	movs	r2, #0
 8016da2:	f042 0208 	orr.w	r2, r2, #8
 8016da6:	709a      	strb	r2, [r3, #2]
 8016da8:	2200      	movs	r2, #0
 8016daa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	2206      	movs	r2, #6
 8016db0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	2204      	movs	r2, #4
 8016db6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016db8:	f640 0306 	movw	r3, #2054	; 0x806
 8016dbc:	9300      	str	r3, [sp, #0]
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	68ba      	ldr	r2, [r7, #8]
 8016dc2:	69b9      	ldr	r1, [r7, #24]
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f001 fb99 	bl	80184fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016dca:	69b8      	ldr	r0, [r7, #24]
 8016dcc:	f7f5 ffaa 	bl	800cd24 <pbuf_free>
  p = NULL;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016dd8:	4618      	mov	r0, r3
 8016dda:	3720      	adds	r7, #32
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}
 8016de0:	0801d460 	.word	0x0801d460
 8016de4:	0801d5b0 	.word	0x0801d5b0
 8016de8:	0801d4d8 	.word	0x0801d4d8
 8016dec:	0801d660 	.word	0x0801d660
 8016df0:	0801d694 	.word	0x0801d694

08016df4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b088      	sub	sp, #32
 8016df8:	af04      	add	r7, sp, #16
 8016dfa:	60f8      	str	r0, [r7, #12]
 8016dfc:	60b9      	str	r1, [r7, #8]
 8016dfe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e10:	2201      	movs	r2, #1
 8016e12:	9203      	str	r2, [sp, #12]
 8016e14:	68ba      	ldr	r2, [r7, #8]
 8016e16:	9202      	str	r2, [sp, #8]
 8016e18:	4a06      	ldr	r2, [pc, #24]	; (8016e34 <etharp_request_dst+0x40>)
 8016e1a:	9201      	str	r2, [sp, #4]
 8016e1c:	9300      	str	r3, [sp, #0]
 8016e1e:	4603      	mov	r3, r0
 8016e20:	687a      	ldr	r2, [r7, #4]
 8016e22:	68f8      	ldr	r0, [r7, #12]
 8016e24:	f7ff ff5a 	bl	8016cdc <etharp_raw>
 8016e28:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3710      	adds	r7, #16
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}
 8016e32:	bf00      	nop
 8016e34:	08027db4 	.word	0x08027db4

08016e38 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016e42:	4a05      	ldr	r2, [pc, #20]	; (8016e58 <etharp_request+0x20>)
 8016e44:	6839      	ldr	r1, [r7, #0]
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f7ff ffd4 	bl	8016df4 <etharp_request_dst>
 8016e4c:	4603      	mov	r3, r0
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3708      	adds	r7, #8
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	08027dac 	.word	0x08027dac

08016e5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b08e      	sub	sp, #56	; 0x38
 8016e60:	af04      	add	r7, sp, #16
 8016e62:	6078      	str	r0, [r7, #4]
 8016e64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016e66:	4b79      	ldr	r3, [pc, #484]	; (801704c <icmp_input+0x1f0>)
 8016e68:	689b      	ldr	r3, [r3, #8]
 8016e6a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	f003 030f 	and.w	r3, r3, #15
 8016e74:	b2db      	uxtb	r3, r3
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e7e:	2b13      	cmp	r3, #19
 8016e80:	f240 80cd 	bls.w	801701e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	895b      	ldrh	r3, [r3, #10]
 8016e88:	2b03      	cmp	r3, #3
 8016e8a:	f240 80ca 	bls.w	8017022 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	781b      	ldrb	r3, [r3, #0]
 8016e94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016e98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	f000 80b7 	beq.w	8017010 <icmp_input+0x1b4>
 8016ea2:	2b08      	cmp	r3, #8
 8016ea4:	f040 80b7 	bne.w	8017016 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016ea8:	4b69      	ldr	r3, [pc, #420]	; (8017050 <icmp_input+0x1f4>)
 8016eaa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016eac:	4b67      	ldr	r3, [pc, #412]	; (801704c <icmp_input+0x1f0>)
 8016eae:	695b      	ldr	r3, [r3, #20]
 8016eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016eb4:	2be0      	cmp	r3, #224	; 0xe0
 8016eb6:	f000 80bb 	beq.w	8017030 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016eba:	4b64      	ldr	r3, [pc, #400]	; (801704c <icmp_input+0x1f0>)
 8016ebc:	695b      	ldr	r3, [r3, #20]
 8016ebe:	4a63      	ldr	r2, [pc, #396]	; (801704c <icmp_input+0x1f0>)
 8016ec0:	6812      	ldr	r2, [r2, #0]
 8016ec2:	4611      	mov	r1, r2
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f000 fc0b 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f040 80b1 	bne.w	8017034 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	891b      	ldrh	r3, [r3, #8]
 8016ed6:	2b07      	cmp	r3, #7
 8016ed8:	f240 80a5 	bls.w	8017026 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016edc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ede:	330e      	adds	r3, #14
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f7f5 fe88 	bl	800cbf8 <pbuf_add_header>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d04b      	beq.n	8016f86 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	891a      	ldrh	r2, [r3, #8]
 8016ef2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ef4:	4413      	add	r3, r2
 8016ef6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	891b      	ldrh	r3, [r3, #8]
 8016efc:	8b7a      	ldrh	r2, [r7, #26]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	f0c0 809a 	bcc.w	8017038 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f04:	8b7b      	ldrh	r3, [r7, #26]
 8016f06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	200e      	movs	r0, #14
 8016f0e:	f7f5 fc25 	bl	800c75c <pbuf_alloc>
 8016f12:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	f000 8090 	beq.w	801703c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f1c:	697b      	ldr	r3, [r7, #20]
 8016f1e:	895b      	ldrh	r3, [r3, #10]
 8016f20:	461a      	mov	r2, r3
 8016f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f24:	3308      	adds	r3, #8
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d203      	bcs.n	8016f32 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f2a:	6978      	ldr	r0, [r7, #20]
 8016f2c:	f7f5 fefa 	bl	800cd24 <pbuf_free>
          goto icmperr;
 8016f30:	e085      	b.n	801703e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016f32:	697b      	ldr	r3, [r7, #20]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f001 fff6 	bl	8018f2c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f42:	4619      	mov	r1, r3
 8016f44:	6978      	ldr	r0, [r7, #20]
 8016f46:	f7f5 fe67 	bl	800cc18 <pbuf_remove_header>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d009      	beq.n	8016f64 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016f50:	4b40      	ldr	r3, [pc, #256]	; (8017054 <icmp_input+0x1f8>)
 8016f52:	22b6      	movs	r2, #182	; 0xb6
 8016f54:	4940      	ldr	r1, [pc, #256]	; (8017058 <icmp_input+0x1fc>)
 8016f56:	4841      	ldr	r0, [pc, #260]	; (801705c <icmp_input+0x200>)
 8016f58:	f001 fde8 	bl	8018b2c <iprintf>
          pbuf_free(r);
 8016f5c:	6978      	ldr	r0, [r7, #20]
 8016f5e:	f7f5 fee1 	bl	800cd24 <pbuf_free>
          goto icmperr;
 8016f62:	e06c      	b.n	801703e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016f64:	6879      	ldr	r1, [r7, #4]
 8016f66:	6978      	ldr	r0, [r7, #20]
 8016f68:	f7f6 f810 	bl	800cf8c <pbuf_copy>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d003      	beq.n	8016f7a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016f72:	6978      	ldr	r0, [r7, #20]
 8016f74:	f7f5 fed6 	bl	800cd24 <pbuf_free>
          goto icmperr;
 8016f78:	e061      	b.n	801703e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f7f5 fed2 	bl	800cd24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016f80:	697b      	ldr	r3, [r7, #20]
 8016f82:	607b      	str	r3, [r7, #4]
 8016f84:	e00f      	b.n	8016fa6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f88:	330e      	adds	r3, #14
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f7f5 fe43 	bl	800cc18 <pbuf_remove_header>
 8016f92:	4603      	mov	r3, r0
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d006      	beq.n	8016fa6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016f98:	4b2e      	ldr	r3, [pc, #184]	; (8017054 <icmp_input+0x1f8>)
 8016f9a:	22c7      	movs	r2, #199	; 0xc7
 8016f9c:	4930      	ldr	r1, [pc, #192]	; (8017060 <icmp_input+0x204>)
 8016f9e:	482f      	ldr	r0, [pc, #188]	; (801705c <icmp_input+0x200>)
 8016fa0:	f001 fdc4 	bl	8018b2c <iprintf>
          goto icmperr;
 8016fa4:	e04b      	b.n	801703e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fae:	4619      	mov	r1, r3
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f7f5 fe21 	bl	800cbf8 <pbuf_add_header>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d12b      	bne.n	8017014 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	681a      	ldr	r2, [r3, #0]
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016fca:	4b20      	ldr	r3, [pc, #128]	; (801704c <icmp_input+0x1f0>)
 8016fcc:	691a      	ldr	r2, [r3, #16]
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	709a      	strb	r2, [r3, #2]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	22ff      	movs	r2, #255	; 0xff
 8016fe6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	2200      	movs	r2, #0
 8016fec:	729a      	strb	r2, [r3, #10]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	9302      	str	r3, [sp, #8]
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	9301      	str	r3, [sp, #4]
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	23ff      	movs	r3, #255	; 0xff
 8017000:	2200      	movs	r2, #0
 8017002:	69f9      	ldr	r1, [r7, #28]
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 fa93 	bl	8017530 <ip4_output_if>
 801700a:	4603      	mov	r3, r0
 801700c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801700e:	e001      	b.n	8017014 <icmp_input+0x1b8>
      break;
 8017010:	bf00      	nop
 8017012:	e000      	b.n	8017016 <icmp_input+0x1ba>
      break;
 8017014:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f7f5 fe84 	bl	800cd24 <pbuf_free>
  return;
 801701c:	e013      	b.n	8017046 <icmp_input+0x1ea>
    goto lenerr;
 801701e:	bf00      	nop
 8017020:	e002      	b.n	8017028 <icmp_input+0x1cc>
    goto lenerr;
 8017022:	bf00      	nop
 8017024:	e000      	b.n	8017028 <icmp_input+0x1cc>
        goto lenerr;
 8017026:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f7f5 fe7b 	bl	800cd24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801702e:	e00a      	b.n	8017046 <icmp_input+0x1ea>
        goto icmperr;
 8017030:	bf00      	nop
 8017032:	e004      	b.n	801703e <icmp_input+0x1e2>
        goto icmperr;
 8017034:	bf00      	nop
 8017036:	e002      	b.n	801703e <icmp_input+0x1e2>
          goto icmperr;
 8017038:	bf00      	nop
 801703a:	e000      	b.n	801703e <icmp_input+0x1e2>
          goto icmperr;
 801703c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f7f5 fe70 	bl	800cd24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017044:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017046:	3728      	adds	r7, #40	; 0x28
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	2000da2c 	.word	0x2000da2c
 8017050:	2000da40 	.word	0x2000da40
 8017054:	0801d6d8 	.word	0x0801d6d8
 8017058:	0801d710 	.word	0x0801d710
 801705c:	0801d748 	.word	0x0801d748
 8017060:	0801d770 	.word	0x0801d770

08017064 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	460b      	mov	r3, r1
 801706e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017070:	78fb      	ldrb	r3, [r7, #3]
 8017072:	461a      	mov	r2, r3
 8017074:	2103      	movs	r1, #3
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f000 f814 	bl	80170a4 <icmp_send_response>
}
 801707c:	bf00      	nop
 801707e:	3708      	adds	r7, #8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	460b      	mov	r3, r1
 801708e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017090:	78fb      	ldrb	r3, [r7, #3]
 8017092:	461a      	mov	r2, r3
 8017094:	210b      	movs	r1, #11
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f000 f804 	bl	80170a4 <icmp_send_response>
}
 801709c:	bf00      	nop
 801709e:	3708      	adds	r7, #8
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}

080170a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b08c      	sub	sp, #48	; 0x30
 80170a8:	af04      	add	r7, sp, #16
 80170aa:	6078      	str	r0, [r7, #4]
 80170ac:	460b      	mov	r3, r1
 80170ae:	70fb      	strb	r3, [r7, #3]
 80170b0:	4613      	mov	r3, r2
 80170b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80170b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170b8:	2124      	movs	r1, #36	; 0x24
 80170ba:	2022      	movs	r0, #34	; 0x22
 80170bc:	f7f5 fb4e 	bl	800c75c <pbuf_alloc>
 80170c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80170c2:	69fb      	ldr	r3, [r7, #28]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d04c      	beq.n	8017162 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	895b      	ldrh	r3, [r3, #10]
 80170cc:	2b23      	cmp	r3, #35	; 0x23
 80170ce:	d806      	bhi.n	80170de <icmp_send_response+0x3a>
 80170d0:	4b26      	ldr	r3, [pc, #152]	; (801716c <icmp_send_response+0xc8>)
 80170d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80170d6:	4926      	ldr	r1, [pc, #152]	; (8017170 <icmp_send_response+0xcc>)
 80170d8:	4826      	ldr	r0, [pc, #152]	; (8017174 <icmp_send_response+0xd0>)
 80170da:	f001 fd27 	bl	8018b2c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80170e4:	69fb      	ldr	r3, [r7, #28]
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	78fa      	ldrb	r2, [r7, #3]
 80170ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	78ba      	ldrb	r2, [r7, #2]
 80170f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	2200      	movs	r2, #0
 80170fa:	711a      	strb	r2, [r3, #4]
 80170fc:	2200      	movs	r2, #0
 80170fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	2200      	movs	r2, #0
 8017104:	719a      	strb	r2, [r3, #6]
 8017106:	2200      	movs	r2, #0
 8017108:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	f103 0008 	add.w	r0, r3, #8
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	221c      	movs	r2, #28
 8017118:	4619      	mov	r1, r3
 801711a:	f001 ff07 	bl	8018f2c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017124:	f107 030c 	add.w	r3, r7, #12
 8017128:	4618      	mov	r0, r3
 801712a:	f000 f825 	bl	8017178 <ip4_route>
 801712e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017130:	693b      	ldr	r3, [r7, #16]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d011      	beq.n	801715a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	2200      	movs	r2, #0
 801713a:	709a      	strb	r2, [r3, #2]
 801713c:	2200      	movs	r2, #0
 801713e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017140:	f107 020c 	add.w	r2, r7, #12
 8017144:	693b      	ldr	r3, [r7, #16]
 8017146:	9302      	str	r3, [sp, #8]
 8017148:	2301      	movs	r3, #1
 801714a:	9301      	str	r3, [sp, #4]
 801714c:	2300      	movs	r3, #0
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	23ff      	movs	r3, #255	; 0xff
 8017152:	2100      	movs	r1, #0
 8017154:	69f8      	ldr	r0, [r7, #28]
 8017156:	f000 f9eb 	bl	8017530 <ip4_output_if>
  }
  pbuf_free(q);
 801715a:	69f8      	ldr	r0, [r7, #28]
 801715c:	f7f5 fde2 	bl	800cd24 <pbuf_free>
 8017160:	e000      	b.n	8017164 <icmp_send_response+0xc0>
    return;
 8017162:	bf00      	nop
}
 8017164:	3720      	adds	r7, #32
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	0801d6d8 	.word	0x0801d6d8
 8017170:	0801d7a4 	.word	0x0801d7a4
 8017174:	0801d748 	.word	0x0801d748

08017178 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017178:	b480      	push	{r7}
 801717a:	b085      	sub	sp, #20
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017180:	4b33      	ldr	r3, [pc, #204]	; (8017250 <ip4_route+0xd8>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	60fb      	str	r3, [r7, #12]
 8017186:	e036      	b.n	80171f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801718e:	f003 0301 	and.w	r3, r3, #1
 8017192:	b2db      	uxtb	r3, r3
 8017194:	2b00      	cmp	r3, #0
 8017196:	d02b      	beq.n	80171f0 <ip4_route+0x78>
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801719e:	089b      	lsrs	r3, r3, #2
 80171a0:	f003 0301 	and.w	r3, r3, #1
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d022      	beq.n	80171f0 <ip4_route+0x78>
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	3304      	adds	r3, #4
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d01d      	beq.n	80171f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	3304      	adds	r3, #4
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	405a      	eors	r2, r3
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	3308      	adds	r3, #8
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	4013      	ands	r3, r2
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d101      	bne.n	80171d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	e038      	b.n	8017242 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80171d6:	f003 0302 	and.w	r3, r3, #2
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d108      	bne.n	80171f0 <ip4_route+0x78>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681a      	ldr	r2, [r3, #0]
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	330c      	adds	r3, #12
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	429a      	cmp	r2, r3
 80171ea:	d101      	bne.n	80171f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	e028      	b.n	8017242 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d1c5      	bne.n	8017188 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80171fc:	4b15      	ldr	r3, [pc, #84]	; (8017254 <ip4_route+0xdc>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d01a      	beq.n	801723a <ip4_route+0xc2>
 8017204:	4b13      	ldr	r3, [pc, #76]	; (8017254 <ip4_route+0xdc>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801720c:	f003 0301 	and.w	r3, r3, #1
 8017210:	2b00      	cmp	r3, #0
 8017212:	d012      	beq.n	801723a <ip4_route+0xc2>
 8017214:	4b0f      	ldr	r3, [pc, #60]	; (8017254 <ip4_route+0xdc>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801721c:	f003 0304 	and.w	r3, r3, #4
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00a      	beq.n	801723a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017224:	4b0b      	ldr	r3, [pc, #44]	; (8017254 <ip4_route+0xdc>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	3304      	adds	r3, #4
 801722a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801722c:	2b00      	cmp	r3, #0
 801722e:	d004      	beq.n	801723a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b7f      	cmp	r3, #127	; 0x7f
 8017238:	d101      	bne.n	801723e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801723a:	2300      	movs	r3, #0
 801723c:	e001      	b.n	8017242 <ip4_route+0xca>
  }

  return netif_default;
 801723e:	4b05      	ldr	r3, [pc, #20]	; (8017254 <ip4_route+0xdc>)
 8017240:	681b      	ldr	r3, [r3, #0]
}
 8017242:	4618      	mov	r0, r3
 8017244:	3714      	adds	r7, #20
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop
 8017250:	20011194 	.word	0x20011194
 8017254:	20011198 	.word	0x20011198

08017258 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b082      	sub	sp, #8
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017266:	f003 0301 	and.w	r3, r3, #1
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2b00      	cmp	r3, #0
 801726e:	d016      	beq.n	801729e <ip4_input_accept+0x46>
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	3304      	adds	r3, #4
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d011      	beq.n	801729e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801727a:	4b0b      	ldr	r3, [pc, #44]	; (80172a8 <ip4_input_accept+0x50>)
 801727c:	695a      	ldr	r2, [r3, #20]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	3304      	adds	r3, #4
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	429a      	cmp	r2, r3
 8017286:	d008      	beq.n	801729a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017288:	4b07      	ldr	r3, [pc, #28]	; (80172a8 <ip4_input_accept+0x50>)
 801728a:	695b      	ldr	r3, [r3, #20]
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	4618      	mov	r0, r3
 8017290:	f000 fa26 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 8017294:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017296:	2b00      	cmp	r3, #0
 8017298:	d001      	beq.n	801729e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801729a:	2301      	movs	r3, #1
 801729c:	e000      	b.n	80172a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801729e:	2300      	movs	r3, #0
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3708      	adds	r7, #8
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	2000da2c 	.word	0x2000da2c

080172ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b088      	sub	sp, #32
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80172b6:	2301      	movs	r3, #1
 80172b8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80172c0:	69fb      	ldr	r3, [r7, #28]
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	091b      	lsrs	r3, r3, #4
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	2b04      	cmp	r3, #4
 80172ca:	d004      	beq.n	80172d6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f7f5 fd29 	bl	800cd24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80172d2:	2300      	movs	r3, #0
 80172d4:	e123      	b.n	801751e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80172d6:	69fb      	ldr	r3, [r7, #28]
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	f003 030f 	and.w	r3, r3, #15
 80172de:	b2db      	uxtb	r3, r3
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	b2db      	uxtb	r3, r3
 80172e4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80172e6:	69fb      	ldr	r3, [r7, #28]
 80172e8:	885b      	ldrh	r3, [r3, #2]
 80172ea:	b29b      	uxth	r3, r3
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7f4 f8e5 	bl	800b4bc <lwip_htons>
 80172f2:	4603      	mov	r3, r0
 80172f4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	891b      	ldrh	r3, [r3, #8]
 80172fa:	8a3a      	ldrh	r2, [r7, #16]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d204      	bcs.n	801730a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017300:	8a3b      	ldrh	r3, [r7, #16]
 8017302:	4619      	mov	r1, r3
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7f5 fb87 	bl	800ca18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	895b      	ldrh	r3, [r3, #10]
 801730e:	8a7a      	ldrh	r2, [r7, #18]
 8017310:	429a      	cmp	r2, r3
 8017312:	d807      	bhi.n	8017324 <ip4_input+0x78>
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	891b      	ldrh	r3, [r3, #8]
 8017318:	8a3a      	ldrh	r2, [r7, #16]
 801731a:	429a      	cmp	r2, r3
 801731c:	d802      	bhi.n	8017324 <ip4_input+0x78>
 801731e:	8a7b      	ldrh	r3, [r7, #18]
 8017320:	2b13      	cmp	r3, #19
 8017322:	d804      	bhi.n	801732e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f7f5 fcfd 	bl	800cd24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801732a:	2300      	movs	r3, #0
 801732c:	e0f7      	b.n	801751e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801732e:	69fb      	ldr	r3, [r7, #28]
 8017330:	691b      	ldr	r3, [r3, #16]
 8017332:	4a7d      	ldr	r2, [pc, #500]	; (8017528 <ip4_input+0x27c>)
 8017334:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017336:	69fb      	ldr	r3, [r7, #28]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	4a7b      	ldr	r2, [pc, #492]	; (8017528 <ip4_input+0x27c>)
 801733c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801733e:	4b7a      	ldr	r3, [pc, #488]	; (8017528 <ip4_input+0x27c>)
 8017340:	695b      	ldr	r3, [r3, #20]
 8017342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017346:	2be0      	cmp	r3, #224	; 0xe0
 8017348:	d112      	bne.n	8017370 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017350:	f003 0301 	and.w	r3, r3, #1
 8017354:	b2db      	uxtb	r3, r3
 8017356:	2b00      	cmp	r3, #0
 8017358:	d007      	beq.n	801736a <ip4_input+0xbe>
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	3304      	adds	r3, #4
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d002      	beq.n	801736a <ip4_input+0xbe>
      netif = inp;
 8017364:	683b      	ldr	r3, [r7, #0]
 8017366:	61bb      	str	r3, [r7, #24]
 8017368:	e02a      	b.n	80173c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801736a:	2300      	movs	r3, #0
 801736c:	61bb      	str	r3, [r7, #24]
 801736e:	e027      	b.n	80173c0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017370:	6838      	ldr	r0, [r7, #0]
 8017372:	f7ff ff71 	bl	8017258 <ip4_input_accept>
 8017376:	4603      	mov	r3, r0
 8017378:	2b00      	cmp	r3, #0
 801737a:	d002      	beq.n	8017382 <ip4_input+0xd6>
      netif = inp;
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	61bb      	str	r3, [r7, #24]
 8017380:	e01e      	b.n	80173c0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017382:	2300      	movs	r3, #0
 8017384:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017386:	4b68      	ldr	r3, [pc, #416]	; (8017528 <ip4_input+0x27c>)
 8017388:	695b      	ldr	r3, [r3, #20]
 801738a:	b2db      	uxtb	r3, r3
 801738c:	2b7f      	cmp	r3, #127	; 0x7f
 801738e:	d017      	beq.n	80173c0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017390:	4b66      	ldr	r3, [pc, #408]	; (801752c <ip4_input+0x280>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	61bb      	str	r3, [r7, #24]
 8017396:	e00e      	b.n	80173b6 <ip4_input+0x10a>
          if (netif == inp) {
 8017398:	69ba      	ldr	r2, [r7, #24]
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	429a      	cmp	r2, r3
 801739e:	d006      	beq.n	80173ae <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80173a0:	69b8      	ldr	r0, [r7, #24]
 80173a2:	f7ff ff59 	bl	8017258 <ip4_input_accept>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d108      	bne.n	80173be <ip4_input+0x112>
 80173ac:	e000      	b.n	80173b0 <ip4_input+0x104>
            continue;
 80173ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 80173b0:	69bb      	ldr	r3, [r7, #24]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	61bb      	str	r3, [r7, #24]
 80173b6:	69bb      	ldr	r3, [r7, #24]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d1ed      	bne.n	8017398 <ip4_input+0xec>
 80173bc:	e000      	b.n	80173c0 <ip4_input+0x114>
            break;
 80173be:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80173c0:	69bb      	ldr	r3, [r7, #24]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d111      	bne.n	80173ea <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	7a5b      	ldrb	r3, [r3, #9]
 80173ca:	2b11      	cmp	r3, #17
 80173cc:	d10d      	bne.n	80173ea <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80173ce:	8a7b      	ldrh	r3, [r7, #18]
 80173d0:	69fa      	ldr	r2, [r7, #28]
 80173d2:	4413      	add	r3, r2
 80173d4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	885b      	ldrh	r3, [r3, #2]
 80173da:	b29b      	uxth	r3, r3
 80173dc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80173e0:	d103      	bne.n	80173ea <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80173e6:	2300      	movs	r3, #0
 80173e8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d017      	beq.n	8017420 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80173f0:	4b4d      	ldr	r3, [pc, #308]	; (8017528 <ip4_input+0x27c>)
 80173f2:	691b      	ldr	r3, [r3, #16]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d013      	beq.n	8017420 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80173f8:	4b4b      	ldr	r3, [pc, #300]	; (8017528 <ip4_input+0x27c>)
 80173fa:	691b      	ldr	r3, [r3, #16]
 80173fc:	6839      	ldr	r1, [r7, #0]
 80173fe:	4618      	mov	r0, r3
 8017400:	f000 f96e 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 8017404:	4603      	mov	r3, r0
 8017406:	2b00      	cmp	r3, #0
 8017408:	d105      	bne.n	8017416 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801740a:	4b47      	ldr	r3, [pc, #284]	; (8017528 <ip4_input+0x27c>)
 801740c:	691b      	ldr	r3, [r3, #16]
 801740e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017412:	2be0      	cmp	r3, #224	; 0xe0
 8017414:	d104      	bne.n	8017420 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f7f5 fc84 	bl	800cd24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801741c:	2300      	movs	r3, #0
 801741e:	e07e      	b.n	801751e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017420:	69bb      	ldr	r3, [r7, #24]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d104      	bne.n	8017430 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f7f5 fc7c 	bl	800cd24 <pbuf_free>
    return ERR_OK;
 801742c:	2300      	movs	r3, #0
 801742e:	e076      	b.n	801751e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017430:	69fb      	ldr	r3, [r7, #28]
 8017432:	88db      	ldrh	r3, [r3, #6]
 8017434:	b29b      	uxth	r3, r3
 8017436:	461a      	mov	r2, r3
 8017438:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801743c:	4013      	ands	r3, r2
 801743e:	2b00      	cmp	r3, #0
 8017440:	d00b      	beq.n	801745a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f000 fc92 	bl	8017d6c <ip4_reass>
 8017448:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <ip4_input+0x1a8>
      return ERR_OK;
 8017450:	2300      	movs	r3, #0
 8017452:	e064      	b.n	801751e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801745a:	4a33      	ldr	r2, [pc, #204]	; (8017528 <ip4_input+0x27c>)
 801745c:	69bb      	ldr	r3, [r7, #24]
 801745e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017460:	4a31      	ldr	r2, [pc, #196]	; (8017528 <ip4_input+0x27c>)
 8017462:	683b      	ldr	r3, [r7, #0]
 8017464:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017466:	4a30      	ldr	r2, [pc, #192]	; (8017528 <ip4_input+0x27c>)
 8017468:	69fb      	ldr	r3, [r7, #28]
 801746a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801746c:	69fb      	ldr	r3, [r7, #28]
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	f003 030f 	and.w	r3, r3, #15
 8017474:	b2db      	uxtb	r3, r3
 8017476:	009b      	lsls	r3, r3, #2
 8017478:	b2db      	uxtb	r3, r3
 801747a:	b29a      	uxth	r2, r3
 801747c:	4b2a      	ldr	r3, [pc, #168]	; (8017528 <ip4_input+0x27c>)
 801747e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017480:	8a7b      	ldrh	r3, [r7, #18]
 8017482:	4619      	mov	r1, r3
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7f5 fbc7 	bl	800cc18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	7a5b      	ldrb	r3, [r3, #9]
 801748e:	2b11      	cmp	r3, #17
 8017490:	d006      	beq.n	80174a0 <ip4_input+0x1f4>
 8017492:	2b11      	cmp	r3, #17
 8017494:	dc13      	bgt.n	80174be <ip4_input+0x212>
 8017496:	2b01      	cmp	r3, #1
 8017498:	d00c      	beq.n	80174b4 <ip4_input+0x208>
 801749a:	2b06      	cmp	r3, #6
 801749c:	d005      	beq.n	80174aa <ip4_input+0x1fe>
 801749e:	e00e      	b.n	80174be <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80174a0:	6839      	ldr	r1, [r7, #0]
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7fc fade 	bl	8013a64 <udp_input>
        break;
 80174a8:	e026      	b.n	80174f8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80174aa:	6839      	ldr	r1, [r7, #0]
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f7f7 fe97 	bl	800f1e0 <tcp_input>
        break;
 80174b2:	e021      	b.n	80174f8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80174b4:	6839      	ldr	r1, [r7, #0]
 80174b6:	6878      	ldr	r0, [r7, #4]
 80174b8:	f7ff fcd0 	bl	8016e5c <icmp_input>
        break;
 80174bc:	e01c      	b.n	80174f8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174be:	4b1a      	ldr	r3, [pc, #104]	; (8017528 <ip4_input+0x27c>)
 80174c0:	695b      	ldr	r3, [r3, #20]
 80174c2:	69b9      	ldr	r1, [r7, #24]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f000 f90b 	bl	80176e0 <ip4_addr_isbroadcast_u32>
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d10f      	bne.n	80174f0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80174d0:	4b15      	ldr	r3, [pc, #84]	; (8017528 <ip4_input+0x27c>)
 80174d2:	695b      	ldr	r3, [r3, #20]
 80174d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174d8:	2be0      	cmp	r3, #224	; 0xe0
 80174da:	d009      	beq.n	80174f0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80174dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80174e0:	4619      	mov	r1, r3
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f7f5 fc0b 	bl	800ccfe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80174e8:	2102      	movs	r1, #2
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f7ff fdba 	bl	8017064 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7f5 fc17 	bl	800cd24 <pbuf_free>
        break;
 80174f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80174f8:	4b0b      	ldr	r3, [pc, #44]	; (8017528 <ip4_input+0x27c>)
 80174fa:	2200      	movs	r2, #0
 80174fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80174fe:	4b0a      	ldr	r3, [pc, #40]	; (8017528 <ip4_input+0x27c>)
 8017500:	2200      	movs	r2, #0
 8017502:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017504:	4b08      	ldr	r3, [pc, #32]	; (8017528 <ip4_input+0x27c>)
 8017506:	2200      	movs	r2, #0
 8017508:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801750a:	4b07      	ldr	r3, [pc, #28]	; (8017528 <ip4_input+0x27c>)
 801750c:	2200      	movs	r2, #0
 801750e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017510:	4b05      	ldr	r3, [pc, #20]	; (8017528 <ip4_input+0x27c>)
 8017512:	2200      	movs	r2, #0
 8017514:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017516:	4b04      	ldr	r3, [pc, #16]	; (8017528 <ip4_input+0x27c>)
 8017518:	2200      	movs	r2, #0
 801751a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801751c:	2300      	movs	r3, #0
}
 801751e:	4618      	mov	r0, r3
 8017520:	3720      	adds	r7, #32
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
 8017526:	bf00      	nop
 8017528:	2000da2c 	.word	0x2000da2c
 801752c:	20011194 	.word	0x20011194

08017530 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b08a      	sub	sp, #40	; 0x28
 8017534:	af04      	add	r7, sp, #16
 8017536:	60f8      	str	r0, [r7, #12]
 8017538:	60b9      	str	r1, [r7, #8]
 801753a:	607a      	str	r2, [r7, #4]
 801753c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d009      	beq.n	801755c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d003      	beq.n	8017556 <ip4_output_if+0x26>
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d102      	bne.n	801755c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017558:	3304      	adds	r3, #4
 801755a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801755c:	78fa      	ldrb	r2, [r7, #3]
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	9302      	str	r3, [sp, #8]
 8017562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017566:	9301      	str	r3, [sp, #4]
 8017568:	f897 3020 	ldrb.w	r3, [r7, #32]
 801756c:	9300      	str	r3, [sp, #0]
 801756e:	4613      	mov	r3, r2
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	6979      	ldr	r1, [r7, #20]
 8017574:	68f8      	ldr	r0, [r7, #12]
 8017576:	f000 f805 	bl	8017584 <ip4_output_if_src>
 801757a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801757c:	4618      	mov	r0, r3
 801757e:	3718      	adds	r7, #24
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b088      	sub	sp, #32
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
 8017590:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	7b9b      	ldrb	r3, [r3, #14]
 8017596:	2b01      	cmp	r3, #1
 8017598:	d006      	beq.n	80175a8 <ip4_output_if_src+0x24>
 801759a:	4b4b      	ldr	r3, [pc, #300]	; (80176c8 <ip4_output_if_src+0x144>)
 801759c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80175a0:	494a      	ldr	r1, [pc, #296]	; (80176cc <ip4_output_if_src+0x148>)
 80175a2:	484b      	ldr	r0, [pc, #300]	; (80176d0 <ip4_output_if_src+0x14c>)
 80175a4:	f001 fac2 	bl	8018b2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d060      	beq.n	8017670 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80175ae:	2314      	movs	r3, #20
 80175b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80175b2:	2114      	movs	r1, #20
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f7f5 fb1f 	bl	800cbf8 <pbuf_add_header>
 80175ba:	4603      	mov	r3, r0
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d002      	beq.n	80175c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80175c0:	f06f 0301 	mvn.w	r3, #1
 80175c4:	e07c      	b.n	80176c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	895b      	ldrh	r3, [r3, #10]
 80175d0:	2b13      	cmp	r3, #19
 80175d2:	d806      	bhi.n	80175e2 <ip4_output_if_src+0x5e>
 80175d4:	4b3c      	ldr	r3, [pc, #240]	; (80176c8 <ip4_output_if_src+0x144>)
 80175d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80175da:	493e      	ldr	r1, [pc, #248]	; (80176d4 <ip4_output_if_src+0x150>)
 80175dc:	483c      	ldr	r0, [pc, #240]	; (80176d0 <ip4_output_if_src+0x14c>)
 80175de:	f001 faa5 	bl	8018b2c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	78fa      	ldrb	r2, [r7, #3]
 80175e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80175ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681a      	ldr	r2, [r3, #0]
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80175f8:	8b7b      	ldrh	r3, [r7, #26]
 80175fa:	089b      	lsrs	r3, r3, #2
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	b2db      	uxtb	r3, r3
 8017600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017604:	b2da      	uxtb	r2, r3
 8017606:	69fb      	ldr	r3, [r7, #28]
 8017608:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017610:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	891b      	ldrh	r3, [r3, #8]
 8017616:	4618      	mov	r0, r3
 8017618:	f7f3 ff50 	bl	800b4bc <lwip_htons>
 801761c:	4603      	mov	r3, r0
 801761e:	461a      	mov	r2, r3
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	2200      	movs	r2, #0
 8017628:	719a      	strb	r2, [r3, #6]
 801762a:	2200      	movs	r2, #0
 801762c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801762e:	4b2a      	ldr	r3, [pc, #168]	; (80176d8 <ip4_output_if_src+0x154>)
 8017630:	881b      	ldrh	r3, [r3, #0]
 8017632:	4618      	mov	r0, r3
 8017634:	f7f3 ff42 	bl	800b4bc <lwip_htons>
 8017638:	4603      	mov	r3, r0
 801763a:	461a      	mov	r2, r3
 801763c:	69fb      	ldr	r3, [r7, #28]
 801763e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017640:	4b25      	ldr	r3, [pc, #148]	; (80176d8 <ip4_output_if_src+0x154>)
 8017642:	881b      	ldrh	r3, [r3, #0]
 8017644:	3301      	adds	r3, #1
 8017646:	b29a      	uxth	r2, r3
 8017648:	4b23      	ldr	r3, [pc, #140]	; (80176d8 <ip4_output_if_src+0x154>)
 801764a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801764c:	68bb      	ldr	r3, [r7, #8]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d104      	bne.n	801765c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017652:	4b22      	ldr	r3, [pc, #136]	; (80176dc <ip4_output_if_src+0x158>)
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	69fb      	ldr	r3, [r7, #28]
 8017658:	60da      	str	r2, [r3, #12]
 801765a:	e003      	b.n	8017664 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	681a      	ldr	r2, [r3, #0]
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017664:	69fb      	ldr	r3, [r7, #28]
 8017666:	2200      	movs	r2, #0
 8017668:	729a      	strb	r2, [r3, #10]
 801766a:	2200      	movs	r2, #0
 801766c:	72da      	strb	r2, [r3, #11]
 801766e:	e00f      	b.n	8017690 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	895b      	ldrh	r3, [r3, #10]
 8017674:	2b13      	cmp	r3, #19
 8017676:	d802      	bhi.n	801767e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017678:	f06f 0301 	mvn.w	r3, #1
 801767c:	e020      	b.n	80176c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017684:	69fb      	ldr	r3, [r7, #28]
 8017686:	691b      	ldr	r3, [r3, #16]
 8017688:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801768a:	f107 0314 	add.w	r3, r7, #20
 801768e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017694:	2b00      	cmp	r3, #0
 8017696:	d00c      	beq.n	80176b2 <ip4_output_if_src+0x12e>
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	891a      	ldrh	r2, [r3, #8]
 801769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d906      	bls.n	80176b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80176a4:	687a      	ldr	r2, [r7, #4]
 80176a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80176a8:	68f8      	ldr	r0, [r7, #12]
 80176aa:	f000 fd53 	bl	8018154 <ip4_frag>
 80176ae:	4603      	mov	r3, r0
 80176b0:	e006      	b.n	80176c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80176b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b4:	695b      	ldr	r3, [r3, #20]
 80176b6:	687a      	ldr	r2, [r7, #4]
 80176b8:	68f9      	ldr	r1, [r7, #12]
 80176ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176bc:	4798      	blx	r3
 80176be:	4603      	mov	r3, r0
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	3720      	adds	r7, #32
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}
 80176c8:	0801d7d0 	.word	0x0801d7d0
 80176cc:	0801d804 	.word	0x0801d804
 80176d0:	0801d810 	.word	0x0801d810
 80176d4:	0801d838 	.word	0x0801d838
 80176d8:	20011326 	.word	0x20011326
 80176dc:	08027da4 	.word	0x08027da4

080176e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80176e0:	b480      	push	{r7}
 80176e2:	b085      	sub	sp, #20
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176f4:	d002      	beq.n	80176fc <ip4_addr_isbroadcast_u32+0x1c>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d101      	bne.n	8017700 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80176fc:	2301      	movs	r3, #1
 80176fe:	e02a      	b.n	8017756 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017700:	683b      	ldr	r3, [r7, #0]
 8017702:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017706:	f003 0302 	and.w	r3, r3, #2
 801770a:	2b00      	cmp	r3, #0
 801770c:	d101      	bne.n	8017712 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801770e:	2300      	movs	r3, #0
 8017710:	e021      	b.n	8017756 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	3304      	adds	r3, #4
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	687a      	ldr	r2, [r7, #4]
 801771a:	429a      	cmp	r2, r3
 801771c:	d101      	bne.n	8017722 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801771e:	2300      	movs	r3, #0
 8017720:	e019      	b.n	8017756 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017722:	68fa      	ldr	r2, [r7, #12]
 8017724:	683b      	ldr	r3, [r7, #0]
 8017726:	3304      	adds	r3, #4
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	405a      	eors	r2, r3
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	3308      	adds	r3, #8
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	4013      	ands	r3, r2
 8017734:	2b00      	cmp	r3, #0
 8017736:	d10d      	bne.n	8017754 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	3308      	adds	r3, #8
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	43da      	mvns	r2, r3
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	3308      	adds	r3, #8
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801774c:	429a      	cmp	r2, r3
 801774e:	d101      	bne.n	8017754 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017750:	2301      	movs	r3, #1
 8017752:	e000      	b.n	8017756 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017754:	2300      	movs	r3, #0
  }
}
 8017756:	4618      	mov	r0, r3
 8017758:	3714      	adds	r7, #20
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr
	...

08017764 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b084      	sub	sp, #16
 8017768:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801776a:	2300      	movs	r3, #0
 801776c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801776e:	4b12      	ldr	r3, [pc, #72]	; (80177b8 <ip_reass_tmr+0x54>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017774:	e018      	b.n	80177a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	7fdb      	ldrb	r3, [r3, #31]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d00b      	beq.n	8017796 <ip_reass_tmr+0x32>
      r->timer--;
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	7fdb      	ldrb	r3, [r3, #31]
 8017782:	3b01      	subs	r3, #1
 8017784:	b2da      	uxtb	r2, r3
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	60fb      	str	r3, [r7, #12]
 8017794:	e008      	b.n	80177a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177a0:	68b9      	ldr	r1, [r7, #8]
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 f80a 	bl	80177bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d1e3      	bne.n	8017776 <ip_reass_tmr+0x12>
    }
  }
}
 80177ae:	bf00      	nop
 80177b0:	bf00      	nop
 80177b2:	3710      	adds	r7, #16
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}
 80177b8:	20011328 	.word	0x20011328

080177bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b088      	sub	sp, #32
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
 80177c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80177c6:	2300      	movs	r3, #0
 80177c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80177ca:	683a      	ldr	r2, [r7, #0]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d105      	bne.n	80177de <ip_reass_free_complete_datagram+0x22>
 80177d2:	4b45      	ldr	r3, [pc, #276]	; (80178e8 <ip_reass_free_complete_datagram+0x12c>)
 80177d4:	22ab      	movs	r2, #171	; 0xab
 80177d6:	4945      	ldr	r1, [pc, #276]	; (80178ec <ip_reass_free_complete_datagram+0x130>)
 80177d8:	4845      	ldr	r0, [pc, #276]	; (80178f0 <ip_reass_free_complete_datagram+0x134>)
 80177da:	f001 f9a7 	bl	8018b2c <iprintf>
  if (prev != NULL) {
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d00a      	beq.n	80177fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	687a      	ldr	r2, [r7, #4]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d005      	beq.n	80177fa <ip_reass_free_complete_datagram+0x3e>
 80177ee:	4b3e      	ldr	r3, [pc, #248]	; (80178e8 <ip_reass_free_complete_datagram+0x12c>)
 80177f0:	22ad      	movs	r2, #173	; 0xad
 80177f2:	4940      	ldr	r1, [pc, #256]	; (80178f4 <ip_reass_free_complete_datagram+0x138>)
 80177f4:	483e      	ldr	r0, [pc, #248]	; (80178f0 <ip_reass_free_complete_datagram+0x134>)
 80177f6:	f001 f999 	bl	8018b2c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	685b      	ldr	r3, [r3, #4]
 8017800:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017802:	697b      	ldr	r3, [r7, #20]
 8017804:	889b      	ldrh	r3, [r3, #4]
 8017806:	b29b      	uxth	r3, r3
 8017808:	2b00      	cmp	r3, #0
 801780a:	d12a      	bne.n	8017862 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	6858      	ldr	r0, [r3, #4]
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	3308      	adds	r3, #8
 8017822:	2214      	movs	r2, #20
 8017824:	4619      	mov	r1, r3
 8017826:	f001 fb81 	bl	8018f2c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801782a:	2101      	movs	r1, #1
 801782c:	69b8      	ldr	r0, [r7, #24]
 801782e:	f7ff fc29 	bl	8017084 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017832:	69b8      	ldr	r0, [r7, #24]
 8017834:	f7f5 fb04 	bl	800ce40 <pbuf_clen>
 8017838:	4603      	mov	r3, r0
 801783a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801783c:	8bfa      	ldrh	r2, [r7, #30]
 801783e:	8a7b      	ldrh	r3, [r7, #18]
 8017840:	4413      	add	r3, r2
 8017842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017846:	db05      	blt.n	8017854 <ip_reass_free_complete_datagram+0x98>
 8017848:	4b27      	ldr	r3, [pc, #156]	; (80178e8 <ip_reass_free_complete_datagram+0x12c>)
 801784a:	22bc      	movs	r2, #188	; 0xbc
 801784c:	492a      	ldr	r1, [pc, #168]	; (80178f8 <ip_reass_free_complete_datagram+0x13c>)
 801784e:	4828      	ldr	r0, [pc, #160]	; (80178f0 <ip_reass_free_complete_datagram+0x134>)
 8017850:	f001 f96c 	bl	8018b2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017854:	8bfa      	ldrh	r2, [r7, #30]
 8017856:	8a7b      	ldrh	r3, [r7, #18]
 8017858:	4413      	add	r3, r2
 801785a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801785c:	69b8      	ldr	r0, [r7, #24]
 801785e:	f7f5 fa61 	bl	800cd24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017868:	e01f      	b.n	80178aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017870:	69bb      	ldr	r3, [r7, #24]
 8017872:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801787a:	68f8      	ldr	r0, [r7, #12]
 801787c:	f7f5 fae0 	bl	800ce40 <pbuf_clen>
 8017880:	4603      	mov	r3, r0
 8017882:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017884:	8bfa      	ldrh	r2, [r7, #30]
 8017886:	8a7b      	ldrh	r3, [r7, #18]
 8017888:	4413      	add	r3, r2
 801788a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801788e:	db05      	blt.n	801789c <ip_reass_free_complete_datagram+0xe0>
 8017890:	4b15      	ldr	r3, [pc, #84]	; (80178e8 <ip_reass_free_complete_datagram+0x12c>)
 8017892:	22cc      	movs	r2, #204	; 0xcc
 8017894:	4918      	ldr	r1, [pc, #96]	; (80178f8 <ip_reass_free_complete_datagram+0x13c>)
 8017896:	4816      	ldr	r0, [pc, #88]	; (80178f0 <ip_reass_free_complete_datagram+0x134>)
 8017898:	f001 f948 	bl	8018b2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801789c:	8bfa      	ldrh	r2, [r7, #30]
 801789e:	8a7b      	ldrh	r3, [r7, #18]
 80178a0:	4413      	add	r3, r2
 80178a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178a4:	68f8      	ldr	r0, [r7, #12]
 80178a6:	f7f5 fa3d 	bl	800cd24 <pbuf_free>
  while (p != NULL) {
 80178aa:	69bb      	ldr	r3, [r7, #24]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d1dc      	bne.n	801786a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178b0:	6839      	ldr	r1, [r7, #0]
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 f8c2 	bl	8017a3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178b8:	4b10      	ldr	r3, [pc, #64]	; (80178fc <ip_reass_free_complete_datagram+0x140>)
 80178ba:	881b      	ldrh	r3, [r3, #0]
 80178bc:	8bfa      	ldrh	r2, [r7, #30]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d905      	bls.n	80178ce <ip_reass_free_complete_datagram+0x112>
 80178c2:	4b09      	ldr	r3, [pc, #36]	; (80178e8 <ip_reass_free_complete_datagram+0x12c>)
 80178c4:	22d2      	movs	r2, #210	; 0xd2
 80178c6:	490e      	ldr	r1, [pc, #56]	; (8017900 <ip_reass_free_complete_datagram+0x144>)
 80178c8:	4809      	ldr	r0, [pc, #36]	; (80178f0 <ip_reass_free_complete_datagram+0x134>)
 80178ca:	f001 f92f 	bl	8018b2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80178ce:	4b0b      	ldr	r3, [pc, #44]	; (80178fc <ip_reass_free_complete_datagram+0x140>)
 80178d0:	881a      	ldrh	r2, [r3, #0]
 80178d2:	8bfb      	ldrh	r3, [r7, #30]
 80178d4:	1ad3      	subs	r3, r2, r3
 80178d6:	b29a      	uxth	r2, r3
 80178d8:	4b08      	ldr	r3, [pc, #32]	; (80178fc <ip_reass_free_complete_datagram+0x140>)
 80178da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80178dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80178de:	4618      	mov	r0, r3
 80178e0:	3720      	adds	r7, #32
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	0801d868 	.word	0x0801d868
 80178ec:	0801d8a4 	.word	0x0801d8a4
 80178f0:	0801d8b0 	.word	0x0801d8b0
 80178f4:	0801d8d8 	.word	0x0801d8d8
 80178f8:	0801d8ec 	.word	0x0801d8ec
 80178fc:	2001132c 	.word	0x2001132c
 8017900:	0801d90c 	.word	0x0801d90c

08017904 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b08a      	sub	sp, #40	; 0x28
 8017908:	af00      	add	r7, sp, #0
 801790a:	6078      	str	r0, [r7, #4]
 801790c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801790e:	2300      	movs	r3, #0
 8017910:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017912:	2300      	movs	r3, #0
 8017914:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017916:	2300      	movs	r3, #0
 8017918:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801791a:	2300      	movs	r3, #0
 801791c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801791e:	2300      	movs	r3, #0
 8017920:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017922:	4b28      	ldr	r3, [pc, #160]	; (80179c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017928:	e030      	b.n	801798c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801792c:	695a      	ldr	r2, [r3, #20]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68db      	ldr	r3, [r3, #12]
 8017932:	429a      	cmp	r2, r3
 8017934:	d10c      	bne.n	8017950 <ip_reass_remove_oldest_datagram+0x4c>
 8017936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017938:	699a      	ldr	r2, [r3, #24]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	691b      	ldr	r3, [r3, #16]
 801793e:	429a      	cmp	r2, r3
 8017940:	d106      	bne.n	8017950 <ip_reass_remove_oldest_datagram+0x4c>
 8017942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017944:	899a      	ldrh	r2, [r3, #12]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	889b      	ldrh	r3, [r3, #4]
 801794a:	b29b      	uxth	r3, r3
 801794c:	429a      	cmp	r2, r3
 801794e:	d014      	beq.n	801797a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017950:	693b      	ldr	r3, [r7, #16]
 8017952:	3301      	adds	r3, #1
 8017954:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017956:	6a3b      	ldr	r3, [r7, #32]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d104      	bne.n	8017966 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017960:	69fb      	ldr	r3, [r7, #28]
 8017962:	61bb      	str	r3, [r7, #24]
 8017964:	e009      	b.n	801797a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017968:	7fda      	ldrb	r2, [r3, #31]
 801796a:	6a3b      	ldr	r3, [r7, #32]
 801796c:	7fdb      	ldrb	r3, [r3, #31]
 801796e:	429a      	cmp	r2, r3
 8017970:	d803      	bhi.n	801797a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017974:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017976:	69fb      	ldr	r3, [r7, #28]
 8017978:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017984:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798e:	2b00      	cmp	r3, #0
 8017990:	d1cb      	bne.n	801792a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017992:	6a3b      	ldr	r3, [r7, #32]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d008      	beq.n	80179aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017998:	69b9      	ldr	r1, [r7, #24]
 801799a:	6a38      	ldr	r0, [r7, #32]
 801799c:	f7ff ff0e 	bl	80177bc <ip_reass_free_complete_datagram>
 80179a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179a2:	697a      	ldr	r2, [r7, #20]
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	4413      	add	r3, r2
 80179a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179aa:	697a      	ldr	r2, [r7, #20]
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	da02      	bge.n	80179b8 <ip_reass_remove_oldest_datagram+0xb4>
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	2b01      	cmp	r3, #1
 80179b6:	dcac      	bgt.n	8017912 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179b8:	697b      	ldr	r3, [r7, #20]
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3728      	adds	r7, #40	; 0x28
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	20011328 	.word	0x20011328

080179c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b084      	sub	sp, #16
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179d2:	2004      	movs	r0, #4
 80179d4:	f7f4 fa80 	bl	800bed8 <memp_malloc>
 80179d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d110      	bne.n	8017a02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80179e0:	6839      	ldr	r1, [r7, #0]
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f7ff ff8e 	bl	8017904 <ip_reass_remove_oldest_datagram>
 80179e8:	4602      	mov	r2, r0
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	4293      	cmp	r3, r2
 80179ee:	dc03      	bgt.n	80179f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179f0:	2004      	movs	r0, #4
 80179f2:	f7f4 fa71 	bl	800bed8 <memp_malloc>
 80179f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d101      	bne.n	8017a02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80179fe:	2300      	movs	r3, #0
 8017a00:	e016      	b.n	8017a30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a02:	2220      	movs	r2, #32
 8017a04:	2100      	movs	r1, #0
 8017a06:	68f8      	ldr	r0, [r7, #12]
 8017a08:	f001 f92f 	bl	8018c6a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	220f      	movs	r2, #15
 8017a10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a12:	4b09      	ldr	r3, [pc, #36]	; (8017a38 <ip_reass_enqueue_new_datagram+0x70>)
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a1a:	4a07      	ldr	r2, [pc, #28]	; (8017a38 <ip_reass_enqueue_new_datagram+0x70>)
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	3308      	adds	r3, #8
 8017a24:	2214      	movs	r2, #20
 8017a26:	6879      	ldr	r1, [r7, #4]
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f001 fa7f 	bl	8018f2c <memcpy>
  return ipr;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3710      	adds	r7, #16
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}
 8017a38:	20011328 	.word	0x20011328

08017a3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b082      	sub	sp, #8
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a46:	4b10      	ldr	r3, [pc, #64]	; (8017a88 <ip_reass_dequeue_datagram+0x4c>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	687a      	ldr	r2, [r7, #4]
 8017a4c:	429a      	cmp	r2, r3
 8017a4e:	d104      	bne.n	8017a5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4a0c      	ldr	r2, [pc, #48]	; (8017a88 <ip_reass_dequeue_datagram+0x4c>)
 8017a56:	6013      	str	r3, [r2, #0]
 8017a58:	e00d      	b.n	8017a76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d106      	bne.n	8017a6e <ip_reass_dequeue_datagram+0x32>
 8017a60:	4b0a      	ldr	r3, [pc, #40]	; (8017a8c <ip_reass_dequeue_datagram+0x50>)
 8017a62:	f240 1245 	movw	r2, #325	; 0x145
 8017a66:	490a      	ldr	r1, [pc, #40]	; (8017a90 <ip_reass_dequeue_datagram+0x54>)
 8017a68:	480a      	ldr	r0, [pc, #40]	; (8017a94 <ip_reass_dequeue_datagram+0x58>)
 8017a6a:	f001 f85f 	bl	8018b2c <iprintf>
    prev->next = ipr->next;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681a      	ldr	r2, [r3, #0]
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017a76:	6879      	ldr	r1, [r7, #4]
 8017a78:	2004      	movs	r0, #4
 8017a7a:	f7f4 faa3 	bl	800bfc4 <memp_free>
}
 8017a7e:	bf00      	nop
 8017a80:	3708      	adds	r7, #8
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}
 8017a86:	bf00      	nop
 8017a88:	20011328 	.word	0x20011328
 8017a8c:	0801d868 	.word	0x0801d868
 8017a90:	0801d930 	.word	0x0801d930
 8017a94:	0801d8b0 	.word	0x0801d8b0

08017a98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b08c      	sub	sp, #48	; 0x30
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	60b9      	str	r1, [r7, #8]
 8017aa2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	685b      	ldr	r3, [r3, #4]
 8017ab0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	885b      	ldrh	r3, [r3, #2]
 8017ab6:	b29b      	uxth	r3, r3
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7f3 fcff 	bl	800b4bc <lwip_htons>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017ac2:	69fb      	ldr	r3, [r7, #28]
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	f003 030f 	and.w	r3, r3, #15
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	009b      	lsls	r3, r3, #2
 8017ace:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017ad0:	7e7b      	ldrb	r3, [r7, #25]
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	8b7a      	ldrh	r2, [r7, #26]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d202      	bcs.n	8017ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ada:	f04f 33ff 	mov.w	r3, #4294967295
 8017ade:	e135      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017ae0:	7e7b      	ldrb	r3, [r7, #25]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	8b7a      	ldrh	r2, [r7, #26]
 8017ae6:	1ad3      	subs	r3, r2, r3
 8017ae8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	88db      	ldrh	r3, [r3, #6]
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	4618      	mov	r0, r3
 8017af2:	f7f3 fce3 	bl	800b4bc <lwip_htons>
 8017af6:	4603      	mov	r3, r0
 8017af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	685b      	ldr	r3, [r3, #4]
 8017b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	701a      	strb	r2, [r3, #0]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	705a      	strb	r2, [r3, #1]
 8017b12:	2200      	movs	r2, #0
 8017b14:	709a      	strb	r2, [r3, #2]
 8017b16:	2200      	movs	r2, #0
 8017b18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1c:	8afa      	ldrh	r2, [r7, #22]
 8017b1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b20:	8afa      	ldrh	r2, [r7, #22]
 8017b22:	8b7b      	ldrh	r3, [r7, #26]
 8017b24:	4413      	add	r3, r2
 8017b26:	b29a      	uxth	r2, r3
 8017b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2e:	88db      	ldrh	r3, [r3, #6]
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	8afa      	ldrh	r2, [r7, #22]
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d902      	bls.n	8017b3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b38:	f04f 33ff 	mov.w	r3, #4294967295
 8017b3c:	e106      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	685b      	ldr	r3, [r3, #4]
 8017b42:	627b      	str	r3, [r7, #36]	; 0x24
 8017b44:	e068      	b.n	8017c18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b48:	685b      	ldr	r3, [r3, #4]
 8017b4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4e:	889b      	ldrh	r3, [r3, #4]
 8017b50:	b29a      	uxth	r2, r3
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	889b      	ldrh	r3, [r3, #4]
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d235      	bcs.n	8017bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017b60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d020      	beq.n	8017baa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6a:	889b      	ldrh	r3, [r3, #4]
 8017b6c:	b29a      	uxth	r2, r3
 8017b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b70:	88db      	ldrh	r3, [r3, #6]
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d307      	bcc.n	8017b88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7a:	88db      	ldrh	r3, [r3, #6]
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	889b      	ldrh	r3, [r3, #4]
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d902      	bls.n	8017b8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b88:	f04f 33ff 	mov.w	r3, #4294967295
 8017b8c:	e0de      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b90:	68ba      	ldr	r2, [r7, #8]
 8017b92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b96:	88db      	ldrh	r3, [r3, #6]
 8017b98:	b29a      	uxth	r2, r3
 8017b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9c:	889b      	ldrh	r3, [r3, #4]
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d03d      	beq.n	8017c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017ba8:	e03a      	b.n	8017c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bac:	88db      	ldrh	r3, [r3, #6]
 8017bae:	b29a      	uxth	r2, r3
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	889b      	ldrh	r3, [r3, #4]
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d902      	bls.n	8017bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bba:	f04f 33ff 	mov.w	r3, #4294967295
 8017bbe:	e0c5      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	68ba      	ldr	r2, [r7, #8]
 8017bc4:	605a      	str	r2, [r3, #4]
      break;
 8017bc6:	e02b      	b.n	8017c20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bca:	889b      	ldrh	r3, [r3, #4]
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	693b      	ldr	r3, [r7, #16]
 8017bd0:	889b      	ldrh	r3, [r3, #4]
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d102      	bne.n	8017bde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bdc:	e0b6      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017be0:	889b      	ldrh	r3, [r3, #4]
 8017be2:	b29a      	uxth	r2, r3
 8017be4:	693b      	ldr	r3, [r7, #16]
 8017be6:	88db      	ldrh	r3, [r3, #6]
 8017be8:	b29b      	uxth	r3, r3
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d202      	bcs.n	8017bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bee:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf2:	e0ab      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d009      	beq.n	8017c0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bfc:	88db      	ldrh	r3, [r3, #6]
 8017bfe:	b29a      	uxth	r2, r3
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	889b      	ldrh	r3, [r3, #4]
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d001      	beq.n	8017c0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d193      	bne.n	8017b46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c1e:	e000      	b.n	8017c22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d12d      	bne.n	8017c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d01c      	beq.n	8017c68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c30:	88db      	ldrh	r3, [r3, #6]
 8017c32:	b29a      	uxth	r2, r3
 8017c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c36:	889b      	ldrh	r3, [r3, #4]
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	429a      	cmp	r2, r3
 8017c3c:	d906      	bls.n	8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c3e:	4b45      	ldr	r3, [pc, #276]	; (8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017c44:	4944      	ldr	r1, [pc, #272]	; (8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c46:	4845      	ldr	r0, [pc, #276]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c48:	f000 ff70 	bl	8018b2c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4e:	68ba      	ldr	r2, [r7, #8]
 8017c50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c54:	88db      	ldrh	r3, [r3, #6]
 8017c56:	b29a      	uxth	r2, r3
 8017c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5a:	889b      	ldrh	r3, [r3, #4]
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d010      	beq.n	8017c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017c62:	2300      	movs	r3, #0
 8017c64:	623b      	str	r3, [r7, #32]
 8017c66:	e00d      	b.n	8017c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d006      	beq.n	8017c7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017c70:	4b38      	ldr	r3, [pc, #224]	; (8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017c76:	493a      	ldr	r1, [pc, #232]	; (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017c78:	4838      	ldr	r0, [pc, #224]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c7a:	f000 ff57 	bl	8018b2c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	68ba      	ldr	r2, [r7, #8]
 8017c82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d105      	bne.n	8017c96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	7f9b      	ldrb	r3, [r3, #30]
 8017c8e:	f003 0301 	and.w	r3, r3, #1
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d059      	beq.n	8017d4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017c96:	6a3b      	ldr	r3, [r7, #32]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d04f      	beq.n	8017d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d006      	beq.n	8017cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	685b      	ldr	r3, [r3, #4]
 8017ca8:	685b      	ldr	r3, [r3, #4]
 8017caa:	889b      	ldrh	r3, [r3, #4]
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d002      	beq.n	8017cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	623b      	str	r3, [r7, #32]
 8017cb6:	e041      	b.n	8017d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cc2:	e012      	b.n	8017cea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc6:	685b      	ldr	r3, [r3, #4]
 8017cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ccc:	88db      	ldrh	r3, [r3, #6]
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd2:	889b      	ldrh	r3, [r3, #4]
 8017cd4:	b29b      	uxth	r3, r3
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d002      	beq.n	8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	623b      	str	r3, [r7, #32]
            break;
 8017cde:	e007      	b.n	8017cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d1e9      	bne.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017cf0:	6a3b      	ldr	r3, [r7, #32]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d022      	beq.n	8017d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	685b      	ldr	r3, [r3, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d106      	bne.n	8017d0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017cfe:	4b15      	ldr	r3, [pc, #84]	; (8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d00:	f240 12df 	movw	r2, #479	; 0x1df
 8017d04:	4917      	ldr	r1, [pc, #92]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d06:	4815      	ldr	r0, [pc, #84]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d08:	f000 ff10 	bl	8018b2c <iprintf>
          LWIP_ASSERT("sanity check",
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	685b      	ldr	r3, [r3, #4]
 8017d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d106      	bne.n	8017d26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d18:	4b0e      	ldr	r3, [pc, #56]	; (8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017d1e:	4911      	ldr	r1, [pc, #68]	; (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d20:	480e      	ldr	r0, [pc, #56]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d22:	f000 ff03 	bl	8018b2c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d006      	beq.n	8017d3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d2e:	4b09      	ldr	r3, [pc, #36]	; (8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017d34:	490c      	ldr	r1, [pc, #48]	; (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d36:	4809      	ldr	r0, [pc, #36]	; (8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d38:	f000 fef8 	bl	8018b2c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d3c:	6a3b      	ldr	r3, [r7, #32]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	bf14      	ite	ne
 8017d42:	2301      	movne	r3, #1
 8017d44:	2300      	moveq	r3, #0
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	e000      	b.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d4a:	2300      	movs	r3, #0
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3730      	adds	r7, #48	; 0x30
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	0801d868 	.word	0x0801d868
 8017d58:	0801d94c 	.word	0x0801d94c
 8017d5c:	0801d8b0 	.word	0x0801d8b0
 8017d60:	0801d96c 	.word	0x0801d96c
 8017d64:	0801d9a4 	.word	0x0801d9a4
 8017d68:	0801d9b4 	.word	0x0801d9b4

08017d6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b08e      	sub	sp, #56	; 0x38
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	685b      	ldr	r3, [r3, #4]
 8017d78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7c:	781b      	ldrb	r3, [r3, #0]
 8017d7e:	f003 030f 	and.w	r3, r3, #15
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	2b14      	cmp	r3, #20
 8017d8a:	f040 8171 	bne.w	8018070 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d90:	88db      	ldrh	r3, [r3, #6]
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7f3 fb91 	bl	800b4bc <lwip_htons>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017da0:	b29b      	uxth	r3, r3
 8017da2:	00db      	lsls	r3, r3, #3
 8017da4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da8:	885b      	ldrh	r3, [r3, #2]
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	4618      	mov	r0, r3
 8017dae:	f7f3 fb85 	bl	800b4bc <lwip_htons>
 8017db2:	4603      	mov	r3, r0
 8017db4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db8:	781b      	ldrb	r3, [r3, #0]
 8017dba:	f003 030f 	and.w	r3, r3, #15
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	009b      	lsls	r3, r3, #2
 8017dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017dca:	b29b      	uxth	r3, r3
 8017dcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	f0c0 8150 	bcc.w	8018074 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ddc:	1ad3      	subs	r3, r2, r3
 8017dde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f7f5 f82d 	bl	800ce40 <pbuf_clen>
 8017de6:	4603      	mov	r3, r0
 8017de8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017dea:	4b8c      	ldr	r3, [pc, #560]	; (801801c <ip4_reass+0x2b0>)
 8017dec:	881b      	ldrh	r3, [r3, #0]
 8017dee:	461a      	mov	r2, r3
 8017df0:	8c3b      	ldrh	r3, [r7, #32]
 8017df2:	4413      	add	r3, r2
 8017df4:	2b0a      	cmp	r3, #10
 8017df6:	dd10      	ble.n	8017e1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017df8:	8c3b      	ldrh	r3, [r7, #32]
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dfe:	f7ff fd81 	bl	8017904 <ip_reass_remove_oldest_datagram>
 8017e02:	4603      	mov	r3, r0
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	f000 8137 	beq.w	8018078 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e0a:	4b84      	ldr	r3, [pc, #528]	; (801801c <ip4_reass+0x2b0>)
 8017e0c:	881b      	ldrh	r3, [r3, #0]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	8c3b      	ldrh	r3, [r7, #32]
 8017e12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e14:	2b0a      	cmp	r3, #10
 8017e16:	f300 812f 	bgt.w	8018078 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e1a:	4b81      	ldr	r3, [pc, #516]	; (8018020 <ip4_reass+0x2b4>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e20:	e015      	b.n	8017e4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e24:	695a      	ldr	r2, [r3, #20]
 8017e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e28:	68db      	ldr	r3, [r3, #12]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	d10c      	bne.n	8017e48 <ip4_reass+0xdc>
 8017e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e30:	699a      	ldr	r2, [r3, #24]
 8017e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e34:	691b      	ldr	r3, [r3, #16]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d106      	bne.n	8017e48 <ip4_reass+0xdc>
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3c:	899a      	ldrh	r2, [r3, #12]
 8017e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e40:	889b      	ldrh	r3, [r3, #4]
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d006      	beq.n	8017e56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8017e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d1e6      	bne.n	8017e22 <ip4_reass+0xb6>
 8017e54:	e000      	b.n	8017e58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017e56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d109      	bne.n	8017e72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017e5e:	8c3b      	ldrh	r3, [r7, #32]
 8017e60:	4619      	mov	r1, r3
 8017e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e64:	f7ff fdb0 	bl	80179c8 <ip_reass_enqueue_new_datagram>
 8017e68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d11c      	bne.n	8017eaa <ip4_reass+0x13e>
      goto nullreturn;
 8017e70:	e105      	b.n	801807e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e74:	88db      	ldrh	r3, [r3, #6]
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7f3 fb1f 	bl	800b4bc <lwip_htons>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d110      	bne.n	8017eaa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8a:	89db      	ldrh	r3, [r3, #14]
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7f3 fb15 	bl	800b4bc <lwip_htons>
 8017e92:	4603      	mov	r3, r0
 8017e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d006      	beq.n	8017eaa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9e:	3308      	adds	r3, #8
 8017ea0:	2214      	movs	r2, #20
 8017ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 f841 	bl	8018f2c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eac:	88db      	ldrh	r3, [r3, #6]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	f003 0320 	and.w	r3, r3, #32
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	bf0c      	ite	eq
 8017eb8:	2301      	moveq	r3, #1
 8017eba:	2300      	movne	r3, #0
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ec0:	69fb      	ldr	r3, [r7, #28]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d00e      	beq.n	8017ee4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017ec6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017eca:	4413      	add	r3, r2
 8017ecc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017ece:	8b7a      	ldrh	r2, [r7, #26]
 8017ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	f0c0 80a0 	bcc.w	8018018 <ip4_reass+0x2ac>
 8017ed8:	8b7b      	ldrh	r3, [r7, #26]
 8017eda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017ede:	4293      	cmp	r3, r2
 8017ee0:	f200 809a 	bhi.w	8018018 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ee4:	69fa      	ldr	r2, [r7, #28]
 8017ee6:	6879      	ldr	r1, [r7, #4]
 8017ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017eea:	f7ff fdd5 	bl	8017a98 <ip_reass_chain_frag_into_datagram_and_validate>
 8017eee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ef6:	f000 809b 	beq.w	8018030 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017efa:	4b48      	ldr	r3, [pc, #288]	; (801801c <ip4_reass+0x2b0>)
 8017efc:	881a      	ldrh	r2, [r3, #0]
 8017efe:	8c3b      	ldrh	r3, [r7, #32]
 8017f00:	4413      	add	r3, r2
 8017f02:	b29a      	uxth	r2, r3
 8017f04:	4b45      	ldr	r3, [pc, #276]	; (801801c <ip4_reass+0x2b0>)
 8017f06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f08:	69fb      	ldr	r3, [r7, #28]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d00d      	beq.n	8017f2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f12:	4413      	add	r3, r2
 8017f14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	8a7a      	ldrh	r2, [r7, #18]
 8017f1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1e:	7f9b      	ldrb	r3, [r3, #30]
 8017f20:	f043 0301 	orr.w	r3, r3, #1
 8017f24:	b2da      	uxtb	r2, r3
 8017f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	2b01      	cmp	r3, #1
 8017f2e:	d171      	bne.n	8018014 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f32:	8b9b      	ldrh	r3, [r3, #28]
 8017f34:	3314      	adds	r3, #20
 8017f36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	685b      	ldr	r3, [r3, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f44:	685b      	ldr	r3, [r3, #4]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4c:	3308      	adds	r3, #8
 8017f4e:	2214      	movs	r2, #20
 8017f50:	4619      	mov	r1, r3
 8017f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f54:	f000 ffea 	bl	8018f2c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017f58:	8a3b      	ldrh	r3, [r7, #16]
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7f3 faae 	bl	800b4bc <lwip_htons>
 8017f60:	4603      	mov	r3, r0
 8017f62:	461a      	mov	r2, r3
 8017f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	719a      	strb	r2, [r3, #6]
 8017f6e:	2200      	movs	r2, #0
 8017f70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f74:	2200      	movs	r2, #0
 8017f76:	729a      	strb	r2, [r3, #10]
 8017f78:	2200      	movs	r2, #0
 8017f7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7e:	685b      	ldr	r3, [r3, #4]
 8017f80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017f82:	e00d      	b.n	8017fa0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017f8a:	2114      	movs	r1, #20
 8017f8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017f8e:	f7f4 fe43 	bl	800cc18 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017f92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017f94:	6878      	ldr	r0, [r7, #4]
 8017f96:	f7f4 ff93 	bl	800cec0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d1ee      	bne.n	8017f84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017fa6:	4b1e      	ldr	r3, [pc, #120]	; (8018020 <ip4_reass+0x2b4>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fac:	429a      	cmp	r2, r3
 8017fae:	d102      	bne.n	8017fb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fb4:	e010      	b.n	8017fd8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fb6:	4b1a      	ldr	r3, [pc, #104]	; (8018020 <ip4_reass+0x2b4>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fbc:	e007      	b.n	8017fce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d006      	beq.n	8017fd6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d1f4      	bne.n	8017fbe <ip4_reass+0x252>
 8017fd4:	e000      	b.n	8017fd8 <ip4_reass+0x26c>
          break;
 8017fd6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017fd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fdc:	f7ff fd2e 	bl	8017a3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017fe0:	6878      	ldr	r0, [r7, #4]
 8017fe2:	f7f4 ff2d 	bl	800ce40 <pbuf_clen>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017fea:	4b0c      	ldr	r3, [pc, #48]	; (801801c <ip4_reass+0x2b0>)
 8017fec:	881b      	ldrh	r3, [r3, #0]
 8017fee:	8c3a      	ldrh	r2, [r7, #32]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d906      	bls.n	8018002 <ip4_reass+0x296>
 8017ff4:	4b0b      	ldr	r3, [pc, #44]	; (8018024 <ip4_reass+0x2b8>)
 8017ff6:	f240 229b 	movw	r2, #667	; 0x29b
 8017ffa:	490b      	ldr	r1, [pc, #44]	; (8018028 <ip4_reass+0x2bc>)
 8017ffc:	480b      	ldr	r0, [pc, #44]	; (801802c <ip4_reass+0x2c0>)
 8017ffe:	f000 fd95 	bl	8018b2c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018002:	4b06      	ldr	r3, [pc, #24]	; (801801c <ip4_reass+0x2b0>)
 8018004:	881a      	ldrh	r2, [r3, #0]
 8018006:	8c3b      	ldrh	r3, [r7, #32]
 8018008:	1ad3      	subs	r3, r2, r3
 801800a:	b29a      	uxth	r2, r3
 801800c:	4b03      	ldr	r3, [pc, #12]	; (801801c <ip4_reass+0x2b0>)
 801800e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	e038      	b.n	8018086 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018014:	2300      	movs	r3, #0
 8018016:	e036      	b.n	8018086 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018018:	bf00      	nop
 801801a:	e00a      	b.n	8018032 <ip4_reass+0x2c6>
 801801c:	2001132c 	.word	0x2001132c
 8018020:	20011328 	.word	0x20011328
 8018024:	0801d868 	.word	0x0801d868
 8018028:	0801d9d8 	.word	0x0801d9d8
 801802c:	0801d8b0 	.word	0x0801d8b0
    goto nullreturn_ipr;
 8018030:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018034:	2b00      	cmp	r3, #0
 8018036:	d106      	bne.n	8018046 <ip4_reass+0x2da>
 8018038:	4b15      	ldr	r3, [pc, #84]	; (8018090 <ip4_reass+0x324>)
 801803a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801803e:	4915      	ldr	r1, [pc, #84]	; (8018094 <ip4_reass+0x328>)
 8018040:	4815      	ldr	r0, [pc, #84]	; (8018098 <ip4_reass+0x32c>)
 8018042:	f000 fd73 	bl	8018b2c <iprintf>
  if (ipr->p == NULL) {
 8018046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d116      	bne.n	801807c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801804e:	4b13      	ldr	r3, [pc, #76]	; (801809c <ip4_reass+0x330>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018054:	429a      	cmp	r2, r3
 8018056:	d006      	beq.n	8018066 <ip4_reass+0x2fa>
 8018058:	4b0d      	ldr	r3, [pc, #52]	; (8018090 <ip4_reass+0x324>)
 801805a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801805e:	4910      	ldr	r1, [pc, #64]	; (80180a0 <ip4_reass+0x334>)
 8018060:	480d      	ldr	r0, [pc, #52]	; (8018098 <ip4_reass+0x32c>)
 8018062:	f000 fd63 	bl	8018b2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018066:	2100      	movs	r1, #0
 8018068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801806a:	f7ff fce7 	bl	8017a3c <ip_reass_dequeue_datagram>
 801806e:	e006      	b.n	801807e <ip4_reass+0x312>
    goto nullreturn;
 8018070:	bf00      	nop
 8018072:	e004      	b.n	801807e <ip4_reass+0x312>
    goto nullreturn;
 8018074:	bf00      	nop
 8018076:	e002      	b.n	801807e <ip4_reass+0x312>
      goto nullreturn;
 8018078:	bf00      	nop
 801807a:	e000      	b.n	801807e <ip4_reass+0x312>
  }

nullreturn:
 801807c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f7f4 fe50 	bl	800cd24 <pbuf_free>
  return NULL;
 8018084:	2300      	movs	r3, #0
}
 8018086:	4618      	mov	r0, r3
 8018088:	3738      	adds	r7, #56	; 0x38
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
 801808e:	bf00      	nop
 8018090:	0801d868 	.word	0x0801d868
 8018094:	0801d9f4 	.word	0x0801d9f4
 8018098:	0801d8b0 	.word	0x0801d8b0
 801809c:	20011328 	.word	0x20011328
 80180a0:	0801da00 	.word	0x0801da00

080180a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80180a8:	2005      	movs	r0, #5
 80180aa:	f7f3 ff15 	bl	800bed8 <memp_malloc>
 80180ae:	4603      	mov	r3, r0
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d106      	bne.n	80180d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80180c2:	4b07      	ldr	r3, [pc, #28]	; (80180e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80180c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80180c8:	4906      	ldr	r1, [pc, #24]	; (80180e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80180ca:	4807      	ldr	r0, [pc, #28]	; (80180e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80180cc:	f000 fd2e 	bl	8018b2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80180d0:	6879      	ldr	r1, [r7, #4]
 80180d2:	2005      	movs	r0, #5
 80180d4:	f7f3 ff76 	bl	800bfc4 <memp_free>
}
 80180d8:	bf00      	nop
 80180da:	3708      	adds	r7, #8
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	0801d868 	.word	0x0801d868
 80180e4:	0801da20 	.word	0x0801da20
 80180e8:	0801d8b0 	.word	0x0801d8b0

080180ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d106      	bne.n	801810c <ipfrag_free_pbuf_custom+0x20>
 80180fe:	4b11      	ldr	r3, [pc, #68]	; (8018144 <ipfrag_free_pbuf_custom+0x58>)
 8018100:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018104:	4910      	ldr	r1, [pc, #64]	; (8018148 <ipfrag_free_pbuf_custom+0x5c>)
 8018106:	4811      	ldr	r0, [pc, #68]	; (801814c <ipfrag_free_pbuf_custom+0x60>)
 8018108:	f000 fd10 	bl	8018b2c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801810c:	68fa      	ldr	r2, [r7, #12]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	429a      	cmp	r2, r3
 8018112:	d006      	beq.n	8018122 <ipfrag_free_pbuf_custom+0x36>
 8018114:	4b0b      	ldr	r3, [pc, #44]	; (8018144 <ipfrag_free_pbuf_custom+0x58>)
 8018116:	f240 22cf 	movw	r2, #719	; 0x2cf
 801811a:	490d      	ldr	r1, [pc, #52]	; (8018150 <ipfrag_free_pbuf_custom+0x64>)
 801811c:	480b      	ldr	r0, [pc, #44]	; (801814c <ipfrag_free_pbuf_custom+0x60>)
 801811e:	f000 fd05 	bl	8018b2c <iprintf>
  if (pcr->original != NULL) {
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	695b      	ldr	r3, [r3, #20]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d004      	beq.n	8018134 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	695b      	ldr	r3, [r3, #20]
 801812e:	4618      	mov	r0, r3
 8018130:	f7f4 fdf8 	bl	800cd24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018134:	68f8      	ldr	r0, [r7, #12]
 8018136:	f7ff ffbd 	bl	80180b4 <ip_frag_free_pbuf_custom_ref>
}
 801813a:	bf00      	nop
 801813c:	3710      	adds	r7, #16
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	0801d868 	.word	0x0801d868
 8018148:	0801da2c 	.word	0x0801da2c
 801814c:	0801d8b0 	.word	0x0801d8b0
 8018150:	0801da38 	.word	0x0801da38

08018154 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b094      	sub	sp, #80	; 0x50
 8018158:	af02      	add	r7, sp, #8
 801815a:	60f8      	str	r0, [r7, #12]
 801815c:	60b9      	str	r1, [r7, #8]
 801815e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018160:	2300      	movs	r3, #0
 8018162:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801816a:	3b14      	subs	r3, #20
 801816c:	2b00      	cmp	r3, #0
 801816e:	da00      	bge.n	8018172 <ip4_frag+0x1e>
 8018170:	3307      	adds	r3, #7
 8018172:	10db      	asrs	r3, r3, #3
 8018174:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018176:	2314      	movs	r3, #20
 8018178:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	685b      	ldr	r3, [r3, #4]
 801817e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018182:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	f003 030f 	and.w	r3, r3, #15
 801818c:	b2db      	uxtb	r3, r3
 801818e:	009b      	lsls	r3, r3, #2
 8018190:	b2db      	uxtb	r3, r3
 8018192:	2b14      	cmp	r3, #20
 8018194:	d002      	beq.n	801819c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018196:	f06f 0305 	mvn.w	r3, #5
 801819a:	e110      	b.n	80183be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	895b      	ldrh	r3, [r3, #10]
 80181a0:	2b13      	cmp	r3, #19
 80181a2:	d809      	bhi.n	80181b8 <ip4_frag+0x64>
 80181a4:	4b88      	ldr	r3, [pc, #544]	; (80183c8 <ip4_frag+0x274>)
 80181a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80181aa:	4988      	ldr	r1, [pc, #544]	; (80183cc <ip4_frag+0x278>)
 80181ac:	4888      	ldr	r0, [pc, #544]	; (80183d0 <ip4_frag+0x27c>)
 80181ae:	f000 fcbd 	bl	8018b2c <iprintf>
 80181b2:	f06f 0305 	mvn.w	r3, #5
 80181b6:	e102      	b.n	80183be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80181b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ba:	88db      	ldrh	r3, [r3, #6]
 80181bc:	b29b      	uxth	r3, r3
 80181be:	4618      	mov	r0, r3
 80181c0:	f7f3 f97c 	bl	800b4bc <lwip_htons>
 80181c4:	4603      	mov	r3, r0
 80181c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80181c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80181d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80181d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	891b      	ldrh	r3, [r3, #8]
 80181de:	3b14      	subs	r3, #20
 80181e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80181e4:	e0e1      	b.n	80183aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80181e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80181e8:	00db      	lsls	r3, r3, #3
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181f0:	4293      	cmp	r3, r2
 80181f2:	bf28      	it	cs
 80181f4:	4613      	movcs	r3, r2
 80181f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80181f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80181fc:	2114      	movs	r1, #20
 80181fe:	200e      	movs	r0, #14
 8018200:	f7f4 faac 	bl	800c75c <pbuf_alloc>
 8018204:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	2b00      	cmp	r3, #0
 801820a:	f000 80d5 	beq.w	80183b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018210:	895b      	ldrh	r3, [r3, #10]
 8018212:	2b13      	cmp	r3, #19
 8018214:	d806      	bhi.n	8018224 <ip4_frag+0xd0>
 8018216:	4b6c      	ldr	r3, [pc, #432]	; (80183c8 <ip4_frag+0x274>)
 8018218:	f44f 7249 	mov.w	r2, #804	; 0x324
 801821c:	496d      	ldr	r1, [pc, #436]	; (80183d4 <ip4_frag+0x280>)
 801821e:	486c      	ldr	r0, [pc, #432]	; (80183d0 <ip4_frag+0x27c>)
 8018220:	f000 fc84 	bl	8018b2c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	2214      	movs	r2, #20
 801822a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801822c:	4618      	mov	r0, r3
 801822e:	f000 fe7d 	bl	8018f2c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	685b      	ldr	r3, [r3, #4]
 8018236:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801823a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801823e:	e064      	b.n	801830a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	895a      	ldrh	r2, [r3, #10]
 8018244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	895b      	ldrh	r3, [r3, #10]
 801824e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018250:	429a      	cmp	r2, r3
 8018252:	d906      	bls.n	8018262 <ip4_frag+0x10e>
 8018254:	4b5c      	ldr	r3, [pc, #368]	; (80183c8 <ip4_frag+0x274>)
 8018256:	f240 322d 	movw	r2, #813	; 0x32d
 801825a:	495f      	ldr	r1, [pc, #380]	; (80183d8 <ip4_frag+0x284>)
 801825c:	485c      	ldr	r0, [pc, #368]	; (80183d0 <ip4_frag+0x27c>)
 801825e:	f000 fc65 	bl	8018b2c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018262:	8bfa      	ldrh	r2, [r7, #30]
 8018264:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018268:	4293      	cmp	r3, r2
 801826a:	bf28      	it	cs
 801826c:	4613      	movcs	r3, r2
 801826e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018272:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018276:	2b00      	cmp	r3, #0
 8018278:	d105      	bne.n	8018286 <ip4_frag+0x132>
        poff = 0;
 801827a:	2300      	movs	r3, #0
 801827c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	60fb      	str	r3, [r7, #12]
        continue;
 8018284:	e041      	b.n	801830a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018286:	f7ff ff0d 	bl	80180a4 <ip_frag_alloc_pbuf_custom_ref>
 801828a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801828c:	69bb      	ldr	r3, [r7, #24]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d103      	bne.n	801829a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018294:	f7f4 fd46 	bl	800cd24 <pbuf_free>
        goto memerr;
 8018298:	e08f      	b.n	80183ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801829a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182a2:	4413      	add	r3, r2
 80182a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80182a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80182ac:	9201      	str	r2, [sp, #4]
 80182ae:	9300      	str	r3, [sp, #0]
 80182b0:	4603      	mov	r3, r0
 80182b2:	2241      	movs	r2, #65	; 0x41
 80182b4:	2000      	movs	r0, #0
 80182b6:	f7f4 fb7b 	bl	800c9b0 <pbuf_alloced_custom>
 80182ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d106      	bne.n	80182d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80182c2:	69b8      	ldr	r0, [r7, #24]
 80182c4:	f7ff fef6 	bl	80180b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80182c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182ca:	f7f4 fd2b 	bl	800cd24 <pbuf_free>
        goto memerr;
 80182ce:	e074      	b.n	80183ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80182d0:	68f8      	ldr	r0, [r7, #12]
 80182d2:	f7f4 fdcd 	bl	800ce70 <pbuf_ref>
      pcr->original = p;
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	68fa      	ldr	r2, [r7, #12]
 80182da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	4a3f      	ldr	r2, [pc, #252]	; (80183dc <ip4_frag+0x288>)
 80182e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80182e2:	6979      	ldr	r1, [r7, #20]
 80182e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182e6:	f7f4 fdeb 	bl	800cec0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80182ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80182ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80182f2:	1ad3      	subs	r3, r2, r3
 80182f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80182f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d004      	beq.n	801830a <ip4_frag+0x1b6>
        poff = 0;
 8018300:	2300      	movs	r3, #0
 8018302:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801830a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801830e:	2b00      	cmp	r3, #0
 8018310:	d196      	bne.n	8018240 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018312:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018318:	4413      	add	r3, r2
 801831a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018320:	f1a3 0213 	sub.w	r2, r3, #19
 8018324:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018328:	429a      	cmp	r2, r3
 801832a:	bfcc      	ite	gt
 801832c:	2301      	movgt	r3, #1
 801832e:	2300      	movle	r3, #0
 8018330:	b2db      	uxtb	r3, r3
 8018332:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801833c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801833e:	6a3b      	ldr	r3, [r7, #32]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d002      	beq.n	801834a <ip4_frag+0x1f6>
 8018344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018346:	2b00      	cmp	r3, #0
 8018348:	d003      	beq.n	8018352 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801834a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801834c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018350:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018352:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018354:	4618      	mov	r0, r3
 8018356:	f7f3 f8b1 	bl	800b4bc <lwip_htons>
 801835a:	4603      	mov	r3, r0
 801835c:	461a      	mov	r2, r3
 801835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018360:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018362:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018364:	3314      	adds	r3, #20
 8018366:	b29b      	uxth	r3, r3
 8018368:	4618      	mov	r0, r3
 801836a:	f7f3 f8a7 	bl	800b4bc <lwip_htons>
 801836e:	4603      	mov	r3, r0
 8018370:	461a      	mov	r2, r3
 8018372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018374:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018378:	2200      	movs	r2, #0
 801837a:	729a      	strb	r2, [r3, #10]
 801837c:	2200      	movs	r2, #0
 801837e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	695b      	ldr	r3, [r3, #20]
 8018384:	687a      	ldr	r2, [r7, #4]
 8018386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018388:	68b8      	ldr	r0, [r7, #8]
 801838a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801838c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801838e:	f7f4 fcc9 	bl	800cd24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018392:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018396:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018398:	1ad3      	subs	r3, r2, r3
 801839a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801839e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80183a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183a4:	4413      	add	r3, r2
 80183a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80183aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	f47f af19 	bne.w	80181e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80183b4:	2300      	movs	r3, #0
 80183b6:	e002      	b.n	80183be <ip4_frag+0x26a>
      goto memerr;
 80183b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80183ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3748      	adds	r7, #72	; 0x48
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}
 80183c6:	bf00      	nop
 80183c8:	0801d868 	.word	0x0801d868
 80183cc:	0801da44 	.word	0x0801da44
 80183d0:	0801d8b0 	.word	0x0801d8b0
 80183d4:	0801da60 	.word	0x0801da60
 80183d8:	0801da80 	.word	0x0801da80
 80183dc:	080180ed 	.word	0x080180ed

080183e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b086      	sub	sp, #24
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	6078      	str	r0, [r7, #4]
 80183e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80183ea:	230e      	movs	r3, #14
 80183ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	895b      	ldrh	r3, [r3, #10]
 80183f2:	2b0e      	cmp	r3, #14
 80183f4:	d96e      	bls.n	80184d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	7bdb      	ldrb	r3, [r3, #15]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d106      	bne.n	801840c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018404:	3301      	adds	r3, #1
 8018406:	b2da      	uxtb	r2, r3
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	685b      	ldr	r3, [r3, #4]
 8018410:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	7b1a      	ldrb	r2, [r3, #12]
 8018416:	7b5b      	ldrb	r3, [r3, #13]
 8018418:	021b      	lsls	r3, r3, #8
 801841a:	4313      	orrs	r3, r2
 801841c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	f003 0301 	and.w	r3, r3, #1
 8018426:	2b00      	cmp	r3, #0
 8018428:	d023      	beq.n	8018472 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801842a:	693b      	ldr	r3, [r7, #16]
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	2b01      	cmp	r3, #1
 8018430:	d10f      	bne.n	8018452 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	785b      	ldrb	r3, [r3, #1]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d11b      	bne.n	8018472 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801843e:	2b5e      	cmp	r3, #94	; 0x5e
 8018440:	d117      	bne.n	8018472 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	7b5b      	ldrb	r3, [r3, #13]
 8018446:	f043 0310 	orr.w	r3, r3, #16
 801844a:	b2da      	uxtb	r2, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	735a      	strb	r2, [r3, #13]
 8018450:	e00f      	b.n	8018472 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	2206      	movs	r2, #6
 8018456:	4928      	ldr	r1, [pc, #160]	; (80184f8 <ethernet_input+0x118>)
 8018458:	4618      	mov	r0, r3
 801845a:	f000 fbdc 	bl	8018c16 <memcmp>
 801845e:	4603      	mov	r3, r0
 8018460:	2b00      	cmp	r3, #0
 8018462:	d106      	bne.n	8018472 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	7b5b      	ldrb	r3, [r3, #13]
 8018468:	f043 0308 	orr.w	r3, r3, #8
 801846c:	b2da      	uxtb	r2, r3
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018472:	89fb      	ldrh	r3, [r7, #14]
 8018474:	2b08      	cmp	r3, #8
 8018476:	d003      	beq.n	8018480 <ethernet_input+0xa0>
 8018478:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801847c:	d014      	beq.n	80184a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801847e:	e032      	b.n	80184e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018486:	f003 0308 	and.w	r3, r3, #8
 801848a:	2b00      	cmp	r3, #0
 801848c:	d024      	beq.n	80184d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801848e:	8afb      	ldrh	r3, [r7, #22]
 8018490:	4619      	mov	r1, r3
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f7f4 fbc0 	bl	800cc18 <pbuf_remove_header>
 8018498:	4603      	mov	r3, r0
 801849a:	2b00      	cmp	r3, #0
 801849c:	d11e      	bne.n	80184dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801849e:	6839      	ldr	r1, [r7, #0]
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7fe ff03 	bl	80172ac <ip4_input>
      break;
 80184a6:	e013      	b.n	80184d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80184ae:	f003 0308 	and.w	r3, r3, #8
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d014      	beq.n	80184e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184b6:	8afb      	ldrh	r3, [r7, #22]
 80184b8:	4619      	mov	r1, r3
 80184ba:	6878      	ldr	r0, [r7, #4]
 80184bc:	f7f4 fbac 	bl	800cc18 <pbuf_remove_header>
 80184c0:	4603      	mov	r3, r0
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d10e      	bne.n	80184e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80184c6:	6839      	ldr	r1, [r7, #0]
 80184c8:	6878      	ldr	r0, [r7, #4]
 80184ca:	f7fe f89f 	bl	801660c <etharp_input>
      break;
 80184ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80184d0:	2300      	movs	r3, #0
 80184d2:	e00c      	b.n	80184ee <ethernet_input+0x10e>
    goto free_and_return;
 80184d4:	bf00      	nop
 80184d6:	e006      	b.n	80184e6 <ethernet_input+0x106>
        goto free_and_return;
 80184d8:	bf00      	nop
 80184da:	e004      	b.n	80184e6 <ethernet_input+0x106>
        goto free_and_return;
 80184dc:	bf00      	nop
 80184de:	e002      	b.n	80184e6 <ethernet_input+0x106>
        goto free_and_return;
 80184e0:	bf00      	nop
 80184e2:	e000      	b.n	80184e6 <ethernet_input+0x106>
        goto free_and_return;
 80184e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f7f4 fc1c 	bl	800cd24 <pbuf_free>
  return ERR_OK;
 80184ec:	2300      	movs	r3, #0
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	3718      	adds	r7, #24
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	08027dac 	.word	0x08027dac

080184fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b086      	sub	sp, #24
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
 8018508:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801850a:	8c3b      	ldrh	r3, [r7, #32]
 801850c:	4618      	mov	r0, r3
 801850e:	f7f2 ffd5 	bl	800b4bc <lwip_htons>
 8018512:	4603      	mov	r3, r0
 8018514:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018516:	210e      	movs	r1, #14
 8018518:	68b8      	ldr	r0, [r7, #8]
 801851a:	f7f4 fb6d 	bl	800cbf8 <pbuf_add_header>
 801851e:	4603      	mov	r3, r0
 8018520:	2b00      	cmp	r3, #0
 8018522:	d125      	bne.n	8018570 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018524:	68bb      	ldr	r3, [r7, #8]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	8afa      	ldrh	r2, [r7, #22]
 801852e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	2206      	movs	r2, #6
 8018534:	6839      	ldr	r1, [r7, #0]
 8018536:	4618      	mov	r0, r3
 8018538:	f000 fcf8 	bl	8018f2c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	3306      	adds	r3, #6
 8018540:	2206      	movs	r2, #6
 8018542:	6879      	ldr	r1, [r7, #4]
 8018544:	4618      	mov	r0, r3
 8018546:	f000 fcf1 	bl	8018f2c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018550:	2b06      	cmp	r3, #6
 8018552:	d006      	beq.n	8018562 <ethernet_output+0x66>
 8018554:	4b0a      	ldr	r3, [pc, #40]	; (8018580 <ethernet_output+0x84>)
 8018556:	f44f 7299 	mov.w	r2, #306	; 0x132
 801855a:	490a      	ldr	r1, [pc, #40]	; (8018584 <ethernet_output+0x88>)
 801855c:	480a      	ldr	r0, [pc, #40]	; (8018588 <ethernet_output+0x8c>)
 801855e:	f000 fae5 	bl	8018b2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	699b      	ldr	r3, [r3, #24]
 8018566:	68b9      	ldr	r1, [r7, #8]
 8018568:	68f8      	ldr	r0, [r7, #12]
 801856a:	4798      	blx	r3
 801856c:	4603      	mov	r3, r0
 801856e:	e002      	b.n	8018576 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018570:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018572:	f06f 0301 	mvn.w	r3, #1
}
 8018576:	4618      	mov	r0, r3
 8018578:	3718      	adds	r7, #24
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	0801da90 	.word	0x0801da90
 8018584:	0801dac8 	.word	0x0801dac8
 8018588:	0801dafc 	.word	0x0801dafc

0801858c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b086      	sub	sp, #24
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	60bb      	str	r3, [r7, #8]
 801859a:	2304      	movs	r3, #4
 801859c:	60fb      	str	r3, [r7, #12]
 801859e:	2300      	movs	r3, #0
 80185a0:	613b      	str	r3, [r7, #16]
 80185a2:	2300      	movs	r3, #0
 80185a4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80185a6:	f107 0308 	add.w	r3, r7, #8
 80185aa:	2100      	movs	r1, #0
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7ec fee6 	bl	800537e <osMessageCreate>
 80185b2:	4602      	mov	r2, r0
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d102      	bne.n	80185c6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80185c0:	f04f 33ff 	mov.w	r3, #4294967295
 80185c4:	e000      	b.n	80185c8 <sys_mbox_new+0x3c>

  return ERR_OK;
 80185c6:	2300      	movs	r3, #0
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	3718      	adds	r7, #24
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd80      	pop	{r7, pc}

080185d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b082      	sub	sp, #8
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	4618      	mov	r0, r3
 80185de:	f7ec ffab 	bl	8005538 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	4618      	mov	r0, r3
 80185e8:	f7ec ffbc 	bl	8005564 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80185ec:	bf00      	nop
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b084      	sub	sp, #16
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
 80185fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	6839      	ldr	r1, [r7, #0]
 8018604:	2200      	movs	r2, #0
 8018606:	4618      	mov	r0, r3
 8018608:	f7ec fee2 	bl	80053d0 <osMessagePut>
 801860c:	4603      	mov	r3, r0
 801860e:	2b00      	cmp	r3, #0
 8018610:	d102      	bne.n	8018618 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018612:	2300      	movs	r3, #0
 8018614:	73fb      	strb	r3, [r7, #15]
 8018616:	e001      	b.n	801861c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018618:	23ff      	movs	r3, #255	; 0xff
 801861a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801861c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018620:	4618      	mov	r0, r3
 8018622:	3710      	adds	r7, #16
 8018624:	46bd      	mov	sp, r7
 8018626:	bd80      	pop	{r7, pc}

08018628 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	b08c      	sub	sp, #48	; 0x30
 801862c:	af00      	add	r7, sp, #0
 801862e:	61f8      	str	r0, [r7, #28]
 8018630:	61b9      	str	r1, [r7, #24]
 8018632:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018634:	f7ec fcce 	bl	8004fd4 <osKernelSysTick>
 8018638:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d017      	beq.n	8018670 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018640:	69fb      	ldr	r3, [r7, #28]
 8018642:	6819      	ldr	r1, [r3, #0]
 8018644:	f107 0320 	add.w	r3, r7, #32
 8018648:	697a      	ldr	r2, [r7, #20]
 801864a:	4618      	mov	r0, r3
 801864c:	f7ec ff00 	bl	8005450 <osMessageGet>

    if(event.status == osEventMessage)
 8018650:	6a3b      	ldr	r3, [r7, #32]
 8018652:	2b10      	cmp	r3, #16
 8018654:	d109      	bne.n	801866a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018658:	461a      	mov	r2, r3
 801865a:	69bb      	ldr	r3, [r7, #24]
 801865c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801865e:	f7ec fcb9 	bl	8004fd4 <osKernelSysTick>
 8018662:	4602      	mov	r2, r0
 8018664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018666:	1ad3      	subs	r3, r2, r3
 8018668:	e019      	b.n	801869e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801866a:	f04f 33ff 	mov.w	r3, #4294967295
 801866e:	e016      	b.n	801869e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018670:	69fb      	ldr	r3, [r7, #28]
 8018672:	6819      	ldr	r1, [r3, #0]
 8018674:	463b      	mov	r3, r7
 8018676:	f04f 32ff 	mov.w	r2, #4294967295
 801867a:	4618      	mov	r0, r3
 801867c:	f7ec fee8 	bl	8005450 <osMessageGet>
 8018680:	f107 0320 	add.w	r3, r7, #32
 8018684:	463a      	mov	r2, r7
 8018686:	ca07      	ldmia	r2, {r0, r1, r2}
 8018688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868e:	461a      	mov	r2, r3
 8018690:	69bb      	ldr	r3, [r7, #24]
 8018692:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018694:	f7ec fc9e 	bl	8004fd4 <osKernelSysTick>
 8018698:	4602      	mov	r2, r0
 801869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801869c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3730      	adds	r7, #48	; 0x30
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}

080186a6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80186a6:	b580      	push	{r7, lr}
 80186a8:	b086      	sub	sp, #24
 80186aa:	af00      	add	r7, sp, #0
 80186ac:	6078      	str	r0, [r7, #4]
 80186ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6819      	ldr	r1, [r3, #0]
 80186b4:	f107 030c 	add.w	r3, r7, #12
 80186b8:	2200      	movs	r2, #0
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7ec fec8 	bl	8005450 <osMessageGet>

  if(event.status == osEventMessage)
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2b10      	cmp	r3, #16
 80186c4:	d105      	bne.n	80186d2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	461a      	mov	r2, r3
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80186ce:	2300      	movs	r3, #0
 80186d0:	e001      	b.n	80186d6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80186d2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3718      	adds	r7, #24
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}

080186de <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80186de:	b480      	push	{r7}
 80186e0:	b083      	sub	sp, #12
 80186e2:	af00      	add	r7, sp, #0
 80186e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d101      	bne.n	80186f2 <sys_mbox_valid+0x14>
    return 0;
 80186ee:	2300      	movs	r3, #0
 80186f0:	e000      	b.n	80186f4 <sys_mbox_valid+0x16>
  else
    return 1;
 80186f2:	2301      	movs	r3, #1
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	370c      	adds	r7, #12
 80186f8:	46bd      	mov	sp, r7
 80186fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fe:	4770      	bx	lr

08018700 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018700:	b480      	push	{r7}
 8018702:	b083      	sub	sp, #12
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2200      	movs	r2, #0
 801870c:	601a      	str	r2, [r3, #0]
}
 801870e:	bf00      	nop
 8018710:	370c      	adds	r7, #12
 8018712:	46bd      	mov	sp, r7
 8018714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018718:	4770      	bx	lr

0801871a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801871a:	b580      	push	{r7, lr}
 801871c:	b084      	sub	sp, #16
 801871e:	af00      	add	r7, sp, #0
 8018720:	6078      	str	r0, [r7, #4]
 8018722:	460b      	mov	r3, r1
 8018724:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018726:	2300      	movs	r3, #0
 8018728:	60bb      	str	r3, [r7, #8]
 801872a:	2300      	movs	r3, #0
 801872c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801872e:	f107 0308 	add.w	r3, r7, #8
 8018732:	2101      	movs	r1, #1
 8018734:	4618      	mov	r0, r3
 8018736:	f7ec fd59 	bl	80051ec <osSemaphoreCreate>
 801873a:	4602      	mov	r2, r0
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d102      	bne.n	801874e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018748:	f04f 33ff 	mov.w	r3, #4294967295
 801874c:	e009      	b.n	8018762 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801874e:	78fb      	ldrb	r3, [r7, #3]
 8018750:	2b00      	cmp	r3, #0
 8018752:	d105      	bne.n	8018760 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	2100      	movs	r1, #0
 801875a:	4618      	mov	r0, r3
 801875c:	f7ec fd78 	bl	8005250 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018760:	2300      	movs	r3, #0
}
 8018762:	4618      	mov	r0, r3
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801876a:	b580      	push	{r7, lr}
 801876c:	b084      	sub	sp, #16
 801876e:	af00      	add	r7, sp, #0
 8018770:	6078      	str	r0, [r7, #4]
 8018772:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018774:	f7ec fc2e 	bl	8004fd4 <osKernelSysTick>
 8018778:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d011      	beq.n	80187a4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	6839      	ldr	r1, [r7, #0]
 8018786:	4618      	mov	r0, r3
 8018788:	f7ec fd62 	bl	8005250 <osSemaphoreWait>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	d105      	bne.n	801879e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018792:	f7ec fc1f 	bl	8004fd4 <osKernelSysTick>
 8018796:	4602      	mov	r2, r0
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	1ad3      	subs	r3, r2, r3
 801879c:	e012      	b.n	80187c4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801879e:	f04f 33ff 	mov.w	r3, #4294967295
 80187a2:	e00f      	b.n	80187c4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80187a4:	bf00      	nop
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f04f 31ff 	mov.w	r1, #4294967295
 80187ae:	4618      	mov	r0, r3
 80187b0:	f7ec fd4e 	bl	8005250 <osSemaphoreWait>
 80187b4:	4603      	mov	r3, r0
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d1f5      	bne.n	80187a6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80187ba:	f7ec fc0b 	bl	8004fd4 <osKernelSysTick>
 80187be:	4602      	mov	r2, r0
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3710      	adds	r7, #16
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}

080187cc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b082      	sub	sp, #8
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	4618      	mov	r0, r3
 80187da:	f7ec fd87 	bl	80052ec <osSemaphoreRelease>
}
 80187de:	bf00      	nop
 80187e0:	3708      	adds	r7, #8
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}

080187e6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80187e6:	b580      	push	{r7, lr}
 80187e8:	b082      	sub	sp, #8
 80187ea:	af00      	add	r7, sp, #0
 80187ec:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7ec fdb0 	bl	8005358 <osSemaphoreDelete>
}
 80187f8:	bf00      	nop
 80187fa:	3708      	adds	r7, #8
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bd80      	pop	{r7, pc}

08018800 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018800:	b480      	push	{r7}
 8018802:	b083      	sub	sp, #12
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d101      	bne.n	8018814 <sys_sem_valid+0x14>
    return 0;
 8018810:	2300      	movs	r3, #0
 8018812:	e000      	b.n	8018816 <sys_sem_valid+0x16>
  else
    return 1;
 8018814:	2301      	movs	r3, #1
}
 8018816:	4618      	mov	r0, r3
 8018818:	370c      	adds	r7, #12
 801881a:	46bd      	mov	sp, r7
 801881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018820:	4770      	bx	lr

08018822 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018822:	b480      	push	{r7}
 8018824:	b083      	sub	sp, #12
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	2200      	movs	r2, #0
 801882e:	601a      	str	r2, [r3, #0]
}
 8018830:	bf00      	nop
 8018832:	370c      	adds	r7, #12
 8018834:	46bd      	mov	sp, r7
 8018836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883a:	4770      	bx	lr

0801883c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018840:	4803      	ldr	r0, [pc, #12]	; (8018850 <sys_init+0x14>)
 8018842:	f7ec fc37 	bl	80050b4 <osMutexCreate>
 8018846:	4603      	mov	r3, r0
 8018848:	4a02      	ldr	r2, [pc, #8]	; (8018854 <sys_init+0x18>)
 801884a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801884c:	bf00      	nop
 801884e:	bd80      	pop	{r7, pc}
 8018850:	08027dbc 	.word	0x08027dbc
 8018854:	20011330 	.word	0x20011330

08018858 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018860:	2300      	movs	r3, #0
 8018862:	60bb      	str	r3, [r7, #8]
 8018864:	2300      	movs	r3, #0
 8018866:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018868:	f107 0308 	add.w	r3, r7, #8
 801886c:	4618      	mov	r0, r3
 801886e:	f7ec fc21 	bl	80050b4 <osMutexCreate>
 8018872:	4602      	mov	r2, r0
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d102      	bne.n	8018886 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018880:	f04f 33ff 	mov.w	r3, #4294967295
 8018884:	e000      	b.n	8018888 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018886:	2300      	movs	r3, #0
}
 8018888:	4618      	mov	r0, r3
 801888a:	3710      	adds	r7, #16
 801888c:	46bd      	mov	sp, r7
 801888e:	bd80      	pop	{r7, pc}

08018890 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	f04f 31ff 	mov.w	r1, #4294967295
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7ec fc1f 	bl	80050e4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80188a6:	bf00      	nop
 80188a8:	3708      	adds	r7, #8
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}

080188ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80188ae:	b580      	push	{r7, lr}
 80188b0:	b082      	sub	sp, #8
 80188b2:	af00      	add	r7, sp, #0
 80188b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7ec fc60 	bl	8005180 <osMutexRelease>
}
 80188c0:	bf00      	nop
 80188c2:	3708      	adds	r7, #8
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}

080188c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b08c      	sub	sp, #48	; 0x30
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	60f8      	str	r0, [r7, #12]
 80188d0:	60b9      	str	r1, [r7, #8]
 80188d2:	607a      	str	r2, [r7, #4]
 80188d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80188d6:	f107 0314 	add.w	r3, r7, #20
 80188da:	2200      	movs	r2, #0
 80188dc:	601a      	str	r2, [r3, #0]
 80188de:	605a      	str	r2, [r3, #4]
 80188e0:	609a      	str	r2, [r3, #8]
 80188e2:	60da      	str	r2, [r3, #12]
 80188e4:	611a      	str	r2, [r3, #16]
 80188e6:	615a      	str	r2, [r3, #20]
 80188e8:	619a      	str	r2, [r3, #24]
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	617b      	str	r3, [r7, #20]
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	61bb      	str	r3, [r7, #24]
 80188f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188f4:	b21b      	sxth	r3, r3
 80188f6:	83bb      	strh	r3, [r7, #28]
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80188fc:	f107 0314 	add.w	r3, r7, #20
 8018900:	6879      	ldr	r1, [r7, #4]
 8018902:	4618      	mov	r0, r3
 8018904:	f7ec fb76 	bl	8004ff4 <osThreadCreate>
 8018908:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801890a:	4618      	mov	r0, r3
 801890c:	3730      	adds	r7, #48	; 0x30
 801890e:	46bd      	mov	sp, r7
 8018910:	bd80      	pop	{r7, pc}
	...

08018914 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018918:	4b04      	ldr	r3, [pc, #16]	; (801892c <sys_arch_protect+0x18>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	f04f 31ff 	mov.w	r1, #4294967295
 8018920:	4618      	mov	r0, r3
 8018922:	f7ec fbdf 	bl	80050e4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018926:	2301      	movs	r3, #1
}
 8018928:	4618      	mov	r0, r3
 801892a:	bd80      	pop	{r7, pc}
 801892c:	20011330 	.word	0x20011330

08018930 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b082      	sub	sp, #8
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018938:	4b04      	ldr	r3, [pc, #16]	; (801894c <sys_arch_unprotect+0x1c>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	4618      	mov	r0, r3
 801893e:	f7ec fc1f 	bl	8005180 <osMutexRelease>
}
 8018942:	bf00      	nop
 8018944:	3708      	adds	r7, #8
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	20011330 	.word	0x20011330

08018950 <rand>:
 8018950:	4b16      	ldr	r3, [pc, #88]	; (80189ac <rand+0x5c>)
 8018952:	b510      	push	{r4, lr}
 8018954:	681c      	ldr	r4, [r3, #0]
 8018956:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018958:	b9b3      	cbnz	r3, 8018988 <rand+0x38>
 801895a:	2018      	movs	r0, #24
 801895c:	f000 fb5e 	bl	801901c <malloc>
 8018960:	4602      	mov	r2, r0
 8018962:	6320      	str	r0, [r4, #48]	; 0x30
 8018964:	b920      	cbnz	r0, 8018970 <rand+0x20>
 8018966:	4b12      	ldr	r3, [pc, #72]	; (80189b0 <rand+0x60>)
 8018968:	4812      	ldr	r0, [pc, #72]	; (80189b4 <rand+0x64>)
 801896a:	2152      	movs	r1, #82	; 0x52
 801896c:	f000 faec 	bl	8018f48 <__assert_func>
 8018970:	4911      	ldr	r1, [pc, #68]	; (80189b8 <rand+0x68>)
 8018972:	4b12      	ldr	r3, [pc, #72]	; (80189bc <rand+0x6c>)
 8018974:	e9c0 1300 	strd	r1, r3, [r0]
 8018978:	4b11      	ldr	r3, [pc, #68]	; (80189c0 <rand+0x70>)
 801897a:	6083      	str	r3, [r0, #8]
 801897c:	230b      	movs	r3, #11
 801897e:	8183      	strh	r3, [r0, #12]
 8018980:	2100      	movs	r1, #0
 8018982:	2001      	movs	r0, #1
 8018984:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018988:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801898a:	480e      	ldr	r0, [pc, #56]	; (80189c4 <rand+0x74>)
 801898c:	690b      	ldr	r3, [r1, #16]
 801898e:	694c      	ldr	r4, [r1, #20]
 8018990:	4a0d      	ldr	r2, [pc, #52]	; (80189c8 <rand+0x78>)
 8018992:	4358      	muls	r0, r3
 8018994:	fb02 0004 	mla	r0, r2, r4, r0
 8018998:	fba3 3202 	umull	r3, r2, r3, r2
 801899c:	3301      	adds	r3, #1
 801899e:	eb40 0002 	adc.w	r0, r0, r2
 80189a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80189a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80189aa:	bd10      	pop	{r4, pc}
 80189ac:	2000008c 	.word	0x2000008c
 80189b0:	08027dc4 	.word	0x08027dc4
 80189b4:	08027ddb 	.word	0x08027ddb
 80189b8:	abcd330e 	.word	0xabcd330e
 80189bc:	e66d1234 	.word	0xe66d1234
 80189c0:	0005deec 	.word	0x0005deec
 80189c4:	5851f42d 	.word	0x5851f42d
 80189c8:	4c957f2d 	.word	0x4c957f2d

080189cc <std>:
 80189cc:	2300      	movs	r3, #0
 80189ce:	b510      	push	{r4, lr}
 80189d0:	4604      	mov	r4, r0
 80189d2:	e9c0 3300 	strd	r3, r3, [r0]
 80189d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80189da:	6083      	str	r3, [r0, #8]
 80189dc:	8181      	strh	r1, [r0, #12]
 80189de:	6643      	str	r3, [r0, #100]	; 0x64
 80189e0:	81c2      	strh	r2, [r0, #14]
 80189e2:	6183      	str	r3, [r0, #24]
 80189e4:	4619      	mov	r1, r3
 80189e6:	2208      	movs	r2, #8
 80189e8:	305c      	adds	r0, #92	; 0x5c
 80189ea:	f000 f93e 	bl	8018c6a <memset>
 80189ee:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <std+0x38>)
 80189f0:	6263      	str	r3, [r4, #36]	; 0x24
 80189f2:	4b05      	ldr	r3, [pc, #20]	; (8018a08 <std+0x3c>)
 80189f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80189f6:	4b05      	ldr	r3, [pc, #20]	; (8018a0c <std+0x40>)
 80189f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80189fa:	4b05      	ldr	r3, [pc, #20]	; (8018a10 <std+0x44>)
 80189fc:	6224      	str	r4, [r4, #32]
 80189fe:	6323      	str	r3, [r4, #48]	; 0x30
 8018a00:	bd10      	pop	{r4, pc}
 8018a02:	bf00      	nop
 8018a04:	08018b91 	.word	0x08018b91
 8018a08:	08018bb3 	.word	0x08018bb3
 8018a0c:	08018beb 	.word	0x08018beb
 8018a10:	08018c0f 	.word	0x08018c0f

08018a14 <stdio_exit_handler>:
 8018a14:	4a02      	ldr	r2, [pc, #8]	; (8018a20 <stdio_exit_handler+0xc>)
 8018a16:	4903      	ldr	r1, [pc, #12]	; (8018a24 <stdio_exit_handler+0x10>)
 8018a18:	4803      	ldr	r0, [pc, #12]	; (8018a28 <stdio_exit_handler+0x14>)
 8018a1a:	f000 b869 	b.w	8018af0 <_fwalk_sglue>
 8018a1e:	bf00      	nop
 8018a20:	20000034 	.word	0x20000034
 8018a24:	08019ae9 	.word	0x08019ae9
 8018a28:	20000040 	.word	0x20000040

08018a2c <cleanup_stdio>:
 8018a2c:	6841      	ldr	r1, [r0, #4]
 8018a2e:	4b0c      	ldr	r3, [pc, #48]	; (8018a60 <cleanup_stdio+0x34>)
 8018a30:	4299      	cmp	r1, r3
 8018a32:	b510      	push	{r4, lr}
 8018a34:	4604      	mov	r4, r0
 8018a36:	d001      	beq.n	8018a3c <cleanup_stdio+0x10>
 8018a38:	f001 f856 	bl	8019ae8 <_fflush_r>
 8018a3c:	68a1      	ldr	r1, [r4, #8]
 8018a3e:	4b09      	ldr	r3, [pc, #36]	; (8018a64 <cleanup_stdio+0x38>)
 8018a40:	4299      	cmp	r1, r3
 8018a42:	d002      	beq.n	8018a4a <cleanup_stdio+0x1e>
 8018a44:	4620      	mov	r0, r4
 8018a46:	f001 f84f 	bl	8019ae8 <_fflush_r>
 8018a4a:	68e1      	ldr	r1, [r4, #12]
 8018a4c:	4b06      	ldr	r3, [pc, #24]	; (8018a68 <cleanup_stdio+0x3c>)
 8018a4e:	4299      	cmp	r1, r3
 8018a50:	d004      	beq.n	8018a5c <cleanup_stdio+0x30>
 8018a52:	4620      	mov	r0, r4
 8018a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a58:	f001 b846 	b.w	8019ae8 <_fflush_r>
 8018a5c:	bd10      	pop	{r4, pc}
 8018a5e:	bf00      	nop
 8018a60:	20011334 	.word	0x20011334
 8018a64:	2001139c 	.word	0x2001139c
 8018a68:	20011404 	.word	0x20011404

08018a6c <global_stdio_init.part.0>:
 8018a6c:	b510      	push	{r4, lr}
 8018a6e:	4b0b      	ldr	r3, [pc, #44]	; (8018a9c <global_stdio_init.part.0+0x30>)
 8018a70:	4c0b      	ldr	r4, [pc, #44]	; (8018aa0 <global_stdio_init.part.0+0x34>)
 8018a72:	4a0c      	ldr	r2, [pc, #48]	; (8018aa4 <global_stdio_init.part.0+0x38>)
 8018a74:	601a      	str	r2, [r3, #0]
 8018a76:	4620      	mov	r0, r4
 8018a78:	2200      	movs	r2, #0
 8018a7a:	2104      	movs	r1, #4
 8018a7c:	f7ff ffa6 	bl	80189cc <std>
 8018a80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018a84:	2201      	movs	r2, #1
 8018a86:	2109      	movs	r1, #9
 8018a88:	f7ff ffa0 	bl	80189cc <std>
 8018a8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018a90:	2202      	movs	r2, #2
 8018a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a96:	2112      	movs	r1, #18
 8018a98:	f7ff bf98 	b.w	80189cc <std>
 8018a9c:	2001146c 	.word	0x2001146c
 8018aa0:	20011334 	.word	0x20011334
 8018aa4:	08018a15 	.word	0x08018a15

08018aa8 <__sfp_lock_acquire>:
 8018aa8:	4801      	ldr	r0, [pc, #4]	; (8018ab0 <__sfp_lock_acquire+0x8>)
 8018aaa:	f000 ba3d 	b.w	8018f28 <__retarget_lock_acquire_recursive>
 8018aae:	bf00      	nop
 8018ab0:	20011475 	.word	0x20011475

08018ab4 <__sfp_lock_release>:
 8018ab4:	4801      	ldr	r0, [pc, #4]	; (8018abc <__sfp_lock_release+0x8>)
 8018ab6:	f000 ba38 	b.w	8018f2a <__retarget_lock_release_recursive>
 8018aba:	bf00      	nop
 8018abc:	20011475 	.word	0x20011475

08018ac0 <__sinit>:
 8018ac0:	b510      	push	{r4, lr}
 8018ac2:	4604      	mov	r4, r0
 8018ac4:	f7ff fff0 	bl	8018aa8 <__sfp_lock_acquire>
 8018ac8:	6a23      	ldr	r3, [r4, #32]
 8018aca:	b11b      	cbz	r3, 8018ad4 <__sinit+0x14>
 8018acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ad0:	f7ff bff0 	b.w	8018ab4 <__sfp_lock_release>
 8018ad4:	4b04      	ldr	r3, [pc, #16]	; (8018ae8 <__sinit+0x28>)
 8018ad6:	6223      	str	r3, [r4, #32]
 8018ad8:	4b04      	ldr	r3, [pc, #16]	; (8018aec <__sinit+0x2c>)
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d1f5      	bne.n	8018acc <__sinit+0xc>
 8018ae0:	f7ff ffc4 	bl	8018a6c <global_stdio_init.part.0>
 8018ae4:	e7f2      	b.n	8018acc <__sinit+0xc>
 8018ae6:	bf00      	nop
 8018ae8:	08018a2d 	.word	0x08018a2d
 8018aec:	2001146c 	.word	0x2001146c

08018af0 <_fwalk_sglue>:
 8018af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018af4:	4607      	mov	r7, r0
 8018af6:	4688      	mov	r8, r1
 8018af8:	4614      	mov	r4, r2
 8018afa:	2600      	movs	r6, #0
 8018afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018b00:	f1b9 0901 	subs.w	r9, r9, #1
 8018b04:	d505      	bpl.n	8018b12 <_fwalk_sglue+0x22>
 8018b06:	6824      	ldr	r4, [r4, #0]
 8018b08:	2c00      	cmp	r4, #0
 8018b0a:	d1f7      	bne.n	8018afc <_fwalk_sglue+0xc>
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b12:	89ab      	ldrh	r3, [r5, #12]
 8018b14:	2b01      	cmp	r3, #1
 8018b16:	d907      	bls.n	8018b28 <_fwalk_sglue+0x38>
 8018b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b1c:	3301      	adds	r3, #1
 8018b1e:	d003      	beq.n	8018b28 <_fwalk_sglue+0x38>
 8018b20:	4629      	mov	r1, r5
 8018b22:	4638      	mov	r0, r7
 8018b24:	47c0      	blx	r8
 8018b26:	4306      	orrs	r6, r0
 8018b28:	3568      	adds	r5, #104	; 0x68
 8018b2a:	e7e9      	b.n	8018b00 <_fwalk_sglue+0x10>

08018b2c <iprintf>:
 8018b2c:	b40f      	push	{r0, r1, r2, r3}
 8018b2e:	b507      	push	{r0, r1, r2, lr}
 8018b30:	4906      	ldr	r1, [pc, #24]	; (8018b4c <iprintf+0x20>)
 8018b32:	ab04      	add	r3, sp, #16
 8018b34:	6808      	ldr	r0, [r1, #0]
 8018b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b3a:	6881      	ldr	r1, [r0, #8]
 8018b3c:	9301      	str	r3, [sp, #4]
 8018b3e:	f000 fca3 	bl	8019488 <_vfiprintf_r>
 8018b42:	b003      	add	sp, #12
 8018b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b48:	b004      	add	sp, #16
 8018b4a:	4770      	bx	lr
 8018b4c:	2000008c 	.word	0x2000008c

08018b50 <siprintf>:
 8018b50:	b40e      	push	{r1, r2, r3}
 8018b52:	b500      	push	{lr}
 8018b54:	b09c      	sub	sp, #112	; 0x70
 8018b56:	ab1d      	add	r3, sp, #116	; 0x74
 8018b58:	9002      	str	r0, [sp, #8]
 8018b5a:	9006      	str	r0, [sp, #24]
 8018b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018b60:	4809      	ldr	r0, [pc, #36]	; (8018b88 <siprintf+0x38>)
 8018b62:	9107      	str	r1, [sp, #28]
 8018b64:	9104      	str	r1, [sp, #16]
 8018b66:	4909      	ldr	r1, [pc, #36]	; (8018b8c <siprintf+0x3c>)
 8018b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b6c:	9105      	str	r1, [sp, #20]
 8018b6e:	6800      	ldr	r0, [r0, #0]
 8018b70:	9301      	str	r3, [sp, #4]
 8018b72:	a902      	add	r1, sp, #8
 8018b74:	f000 fb60 	bl	8019238 <_svfiprintf_r>
 8018b78:	9b02      	ldr	r3, [sp, #8]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	701a      	strb	r2, [r3, #0]
 8018b7e:	b01c      	add	sp, #112	; 0x70
 8018b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8018b84:	b003      	add	sp, #12
 8018b86:	4770      	bx	lr
 8018b88:	2000008c 	.word	0x2000008c
 8018b8c:	ffff0208 	.word	0xffff0208

08018b90 <__sread>:
 8018b90:	b510      	push	{r4, lr}
 8018b92:	460c      	mov	r4, r1
 8018b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b98:	f000 f97e 	bl	8018e98 <_read_r>
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	bfab      	itete	ge
 8018ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8018ba4:	181b      	addge	r3, r3, r0
 8018ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018baa:	bfac      	ite	ge
 8018bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8018bae:	81a3      	strhlt	r3, [r4, #12]
 8018bb0:	bd10      	pop	{r4, pc}

08018bb2 <__swrite>:
 8018bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb6:	461f      	mov	r7, r3
 8018bb8:	898b      	ldrh	r3, [r1, #12]
 8018bba:	05db      	lsls	r3, r3, #23
 8018bbc:	4605      	mov	r5, r0
 8018bbe:	460c      	mov	r4, r1
 8018bc0:	4616      	mov	r6, r2
 8018bc2:	d505      	bpl.n	8018bd0 <__swrite+0x1e>
 8018bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bc8:	2302      	movs	r3, #2
 8018bca:	2200      	movs	r2, #0
 8018bcc:	f000 f952 	bl	8018e74 <_lseek_r>
 8018bd0:	89a3      	ldrh	r3, [r4, #12]
 8018bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018bda:	81a3      	strh	r3, [r4, #12]
 8018bdc:	4632      	mov	r2, r6
 8018bde:	463b      	mov	r3, r7
 8018be0:	4628      	mov	r0, r5
 8018be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018be6:	f000 b969 	b.w	8018ebc <_write_r>

08018bea <__sseek>:
 8018bea:	b510      	push	{r4, lr}
 8018bec:	460c      	mov	r4, r1
 8018bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bf2:	f000 f93f 	bl	8018e74 <_lseek_r>
 8018bf6:	1c43      	adds	r3, r0, #1
 8018bf8:	89a3      	ldrh	r3, [r4, #12]
 8018bfa:	bf15      	itete	ne
 8018bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8018bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018c06:	81a3      	strheq	r3, [r4, #12]
 8018c08:	bf18      	it	ne
 8018c0a:	81a3      	strhne	r3, [r4, #12]
 8018c0c:	bd10      	pop	{r4, pc}

08018c0e <__sclose>:
 8018c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c12:	f000 b8c9 	b.w	8018da8 <_close_r>

08018c16 <memcmp>:
 8018c16:	b510      	push	{r4, lr}
 8018c18:	3901      	subs	r1, #1
 8018c1a:	4402      	add	r2, r0
 8018c1c:	4290      	cmp	r0, r2
 8018c1e:	d101      	bne.n	8018c24 <memcmp+0xe>
 8018c20:	2000      	movs	r0, #0
 8018c22:	e005      	b.n	8018c30 <memcmp+0x1a>
 8018c24:	7803      	ldrb	r3, [r0, #0]
 8018c26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018c2a:	42a3      	cmp	r3, r4
 8018c2c:	d001      	beq.n	8018c32 <memcmp+0x1c>
 8018c2e:	1b18      	subs	r0, r3, r4
 8018c30:	bd10      	pop	{r4, pc}
 8018c32:	3001      	adds	r0, #1
 8018c34:	e7f2      	b.n	8018c1c <memcmp+0x6>

08018c36 <memmove>:
 8018c36:	4288      	cmp	r0, r1
 8018c38:	b510      	push	{r4, lr}
 8018c3a:	eb01 0402 	add.w	r4, r1, r2
 8018c3e:	d902      	bls.n	8018c46 <memmove+0x10>
 8018c40:	4284      	cmp	r4, r0
 8018c42:	4623      	mov	r3, r4
 8018c44:	d807      	bhi.n	8018c56 <memmove+0x20>
 8018c46:	1e43      	subs	r3, r0, #1
 8018c48:	42a1      	cmp	r1, r4
 8018c4a:	d008      	beq.n	8018c5e <memmove+0x28>
 8018c4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018c54:	e7f8      	b.n	8018c48 <memmove+0x12>
 8018c56:	4402      	add	r2, r0
 8018c58:	4601      	mov	r1, r0
 8018c5a:	428a      	cmp	r2, r1
 8018c5c:	d100      	bne.n	8018c60 <memmove+0x2a>
 8018c5e:	bd10      	pop	{r4, pc}
 8018c60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018c68:	e7f7      	b.n	8018c5a <memmove+0x24>

08018c6a <memset>:
 8018c6a:	4402      	add	r2, r0
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d100      	bne.n	8018c74 <memset+0xa>
 8018c72:	4770      	bx	lr
 8018c74:	f803 1b01 	strb.w	r1, [r3], #1
 8018c78:	e7f9      	b.n	8018c6e <memset+0x4>
	...

08018c7c <strcasecmp>:
 8018c7c:	b530      	push	{r4, r5, lr}
 8018c7e:	4d0b      	ldr	r5, [pc, #44]	; (8018cac <strcasecmp+0x30>)
 8018c80:	4604      	mov	r4, r0
 8018c82:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c86:	5cea      	ldrb	r2, [r5, r3]
 8018c88:	f002 0203 	and.w	r2, r2, #3
 8018c8c:	2a01      	cmp	r2, #1
 8018c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018c92:	5ca8      	ldrb	r0, [r5, r2]
 8018c94:	f000 0003 	and.w	r0, r0, #3
 8018c98:	bf08      	it	eq
 8018c9a:	3320      	addeq	r3, #32
 8018c9c:	2801      	cmp	r0, #1
 8018c9e:	bf08      	it	eq
 8018ca0:	3220      	addeq	r2, #32
 8018ca2:	1a98      	subs	r0, r3, r2
 8018ca4:	d101      	bne.n	8018caa <strcasecmp+0x2e>
 8018ca6:	2a00      	cmp	r2, #0
 8018ca8:	d1eb      	bne.n	8018c82 <strcasecmp+0x6>
 8018caa:	bd30      	pop	{r4, r5, pc}
 8018cac:	08027e34 	.word	0x08027e34

08018cb0 <strchr>:
 8018cb0:	b2c9      	uxtb	r1, r1
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cb8:	b11a      	cbz	r2, 8018cc2 <strchr+0x12>
 8018cba:	428a      	cmp	r2, r1
 8018cbc:	d1f9      	bne.n	8018cb2 <strchr+0x2>
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	4770      	bx	lr
 8018cc2:	2900      	cmp	r1, #0
 8018cc4:	bf18      	it	ne
 8018cc6:	2300      	movne	r3, #0
 8018cc8:	e7f9      	b.n	8018cbe <strchr+0xe>

08018cca <strncmp>:
 8018cca:	b510      	push	{r4, lr}
 8018ccc:	b16a      	cbz	r2, 8018cea <strncmp+0x20>
 8018cce:	3901      	subs	r1, #1
 8018cd0:	1884      	adds	r4, r0, r2
 8018cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018cda:	429a      	cmp	r2, r3
 8018cdc:	d103      	bne.n	8018ce6 <strncmp+0x1c>
 8018cde:	42a0      	cmp	r0, r4
 8018ce0:	d001      	beq.n	8018ce6 <strncmp+0x1c>
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	d1f5      	bne.n	8018cd2 <strncmp+0x8>
 8018ce6:	1ad0      	subs	r0, r2, r3
 8018ce8:	bd10      	pop	{r4, pc}
 8018cea:	4610      	mov	r0, r2
 8018cec:	e7fc      	b.n	8018ce8 <strncmp+0x1e>
	...

08018cf0 <strtok>:
 8018cf0:	4b16      	ldr	r3, [pc, #88]	; (8018d4c <strtok+0x5c>)
 8018cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018cf4:	681e      	ldr	r6, [r3, #0]
 8018cf6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8018cf8:	4605      	mov	r5, r0
 8018cfa:	b9fc      	cbnz	r4, 8018d3c <strtok+0x4c>
 8018cfc:	2050      	movs	r0, #80	; 0x50
 8018cfe:	9101      	str	r1, [sp, #4]
 8018d00:	f000 f98c 	bl	801901c <malloc>
 8018d04:	9901      	ldr	r1, [sp, #4]
 8018d06:	6470      	str	r0, [r6, #68]	; 0x44
 8018d08:	4602      	mov	r2, r0
 8018d0a:	b920      	cbnz	r0, 8018d16 <strtok+0x26>
 8018d0c:	4b10      	ldr	r3, [pc, #64]	; (8018d50 <strtok+0x60>)
 8018d0e:	4811      	ldr	r0, [pc, #68]	; (8018d54 <strtok+0x64>)
 8018d10:	215b      	movs	r1, #91	; 0x5b
 8018d12:	f000 f919 	bl	8018f48 <__assert_func>
 8018d16:	e9c0 4400 	strd	r4, r4, [r0]
 8018d1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018d1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018d22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018d26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018d2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018d2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018d32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018d36:	6184      	str	r4, [r0, #24]
 8018d38:	7704      	strb	r4, [r0, #28]
 8018d3a:	6244      	str	r4, [r0, #36]	; 0x24
 8018d3c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8018d3e:	2301      	movs	r3, #1
 8018d40:	4628      	mov	r0, r5
 8018d42:	b002      	add	sp, #8
 8018d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d48:	f000 b806 	b.w	8018d58 <__strtok_r>
 8018d4c:	2000008c 	.word	0x2000008c
 8018d50:	08027dc4 	.word	0x08027dc4
 8018d54:	08027f34 	.word	0x08027f34

08018d58 <__strtok_r>:
 8018d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d5a:	b908      	cbnz	r0, 8018d60 <__strtok_r+0x8>
 8018d5c:	6810      	ldr	r0, [r2, #0]
 8018d5e:	b188      	cbz	r0, 8018d84 <__strtok_r+0x2c>
 8018d60:	4604      	mov	r4, r0
 8018d62:	4620      	mov	r0, r4
 8018d64:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018d68:	460f      	mov	r7, r1
 8018d6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018d6e:	b91e      	cbnz	r6, 8018d78 <__strtok_r+0x20>
 8018d70:	b965      	cbnz	r5, 8018d8c <__strtok_r+0x34>
 8018d72:	6015      	str	r5, [r2, #0]
 8018d74:	4628      	mov	r0, r5
 8018d76:	e005      	b.n	8018d84 <__strtok_r+0x2c>
 8018d78:	42b5      	cmp	r5, r6
 8018d7a:	d1f6      	bne.n	8018d6a <__strtok_r+0x12>
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d1f0      	bne.n	8018d62 <__strtok_r+0xa>
 8018d80:	6014      	str	r4, [r2, #0]
 8018d82:	7003      	strb	r3, [r0, #0]
 8018d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d86:	461c      	mov	r4, r3
 8018d88:	e00c      	b.n	8018da4 <__strtok_r+0x4c>
 8018d8a:	b915      	cbnz	r5, 8018d92 <__strtok_r+0x3a>
 8018d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018d90:	460e      	mov	r6, r1
 8018d92:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018d96:	42ab      	cmp	r3, r5
 8018d98:	d1f7      	bne.n	8018d8a <__strtok_r+0x32>
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d0f3      	beq.n	8018d86 <__strtok_r+0x2e>
 8018d9e:	2300      	movs	r3, #0
 8018da0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018da4:	6014      	str	r4, [r2, #0]
 8018da6:	e7ed      	b.n	8018d84 <__strtok_r+0x2c>

08018da8 <_close_r>:
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	4d06      	ldr	r5, [pc, #24]	; (8018dc4 <_close_r+0x1c>)
 8018dac:	2300      	movs	r3, #0
 8018dae:	4604      	mov	r4, r0
 8018db0:	4608      	mov	r0, r1
 8018db2:	602b      	str	r3, [r5, #0]
 8018db4:	f7e7 ff41 	bl	8000c3a <_close>
 8018db8:	1c43      	adds	r3, r0, #1
 8018dba:	d102      	bne.n	8018dc2 <_close_r+0x1a>
 8018dbc:	682b      	ldr	r3, [r5, #0]
 8018dbe:	b103      	cbz	r3, 8018dc2 <_close_r+0x1a>
 8018dc0:	6023      	str	r3, [r4, #0]
 8018dc2:	bd38      	pop	{r3, r4, r5, pc}
 8018dc4:	20011470 	.word	0x20011470

08018dc8 <_reclaim_reent>:
 8018dc8:	4b29      	ldr	r3, [pc, #164]	; (8018e70 <_reclaim_reent+0xa8>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	4283      	cmp	r3, r0
 8018dce:	b570      	push	{r4, r5, r6, lr}
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	d04b      	beq.n	8018e6c <_reclaim_reent+0xa4>
 8018dd4:	69c3      	ldr	r3, [r0, #28]
 8018dd6:	b143      	cbz	r3, 8018dea <_reclaim_reent+0x22>
 8018dd8:	68db      	ldr	r3, [r3, #12]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d144      	bne.n	8018e68 <_reclaim_reent+0xa0>
 8018dde:	69e3      	ldr	r3, [r4, #28]
 8018de0:	6819      	ldr	r1, [r3, #0]
 8018de2:	b111      	cbz	r1, 8018dea <_reclaim_reent+0x22>
 8018de4:	4620      	mov	r0, r4
 8018de6:	f000 f8cd 	bl	8018f84 <_free_r>
 8018dea:	6961      	ldr	r1, [r4, #20]
 8018dec:	b111      	cbz	r1, 8018df4 <_reclaim_reent+0x2c>
 8018dee:	4620      	mov	r0, r4
 8018df0:	f000 f8c8 	bl	8018f84 <_free_r>
 8018df4:	69e1      	ldr	r1, [r4, #28]
 8018df6:	b111      	cbz	r1, 8018dfe <_reclaim_reent+0x36>
 8018df8:	4620      	mov	r0, r4
 8018dfa:	f000 f8c3 	bl	8018f84 <_free_r>
 8018dfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018e00:	b111      	cbz	r1, 8018e08 <_reclaim_reent+0x40>
 8018e02:	4620      	mov	r0, r4
 8018e04:	f000 f8be 	bl	8018f84 <_free_r>
 8018e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018e0a:	b111      	cbz	r1, 8018e12 <_reclaim_reent+0x4a>
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f000 f8b9 	bl	8018f84 <_free_r>
 8018e12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018e14:	b111      	cbz	r1, 8018e1c <_reclaim_reent+0x54>
 8018e16:	4620      	mov	r0, r4
 8018e18:	f000 f8b4 	bl	8018f84 <_free_r>
 8018e1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018e1e:	b111      	cbz	r1, 8018e26 <_reclaim_reent+0x5e>
 8018e20:	4620      	mov	r0, r4
 8018e22:	f000 f8af 	bl	8018f84 <_free_r>
 8018e26:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018e28:	b111      	cbz	r1, 8018e30 <_reclaim_reent+0x68>
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f000 f8aa 	bl	8018f84 <_free_r>
 8018e30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018e32:	b111      	cbz	r1, 8018e3a <_reclaim_reent+0x72>
 8018e34:	4620      	mov	r0, r4
 8018e36:	f000 f8a5 	bl	8018f84 <_free_r>
 8018e3a:	6a23      	ldr	r3, [r4, #32]
 8018e3c:	b1b3      	cbz	r3, 8018e6c <_reclaim_reent+0xa4>
 8018e3e:	4620      	mov	r0, r4
 8018e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e44:	4718      	bx	r3
 8018e46:	5949      	ldr	r1, [r1, r5]
 8018e48:	b941      	cbnz	r1, 8018e5c <_reclaim_reent+0x94>
 8018e4a:	3504      	adds	r5, #4
 8018e4c:	69e3      	ldr	r3, [r4, #28]
 8018e4e:	2d80      	cmp	r5, #128	; 0x80
 8018e50:	68d9      	ldr	r1, [r3, #12]
 8018e52:	d1f8      	bne.n	8018e46 <_reclaim_reent+0x7e>
 8018e54:	4620      	mov	r0, r4
 8018e56:	f000 f895 	bl	8018f84 <_free_r>
 8018e5a:	e7c0      	b.n	8018dde <_reclaim_reent+0x16>
 8018e5c:	680e      	ldr	r6, [r1, #0]
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f000 f890 	bl	8018f84 <_free_r>
 8018e64:	4631      	mov	r1, r6
 8018e66:	e7ef      	b.n	8018e48 <_reclaim_reent+0x80>
 8018e68:	2500      	movs	r5, #0
 8018e6a:	e7ef      	b.n	8018e4c <_reclaim_reent+0x84>
 8018e6c:	bd70      	pop	{r4, r5, r6, pc}
 8018e6e:	bf00      	nop
 8018e70:	2000008c 	.word	0x2000008c

08018e74 <_lseek_r>:
 8018e74:	b538      	push	{r3, r4, r5, lr}
 8018e76:	4d07      	ldr	r5, [pc, #28]	; (8018e94 <_lseek_r+0x20>)
 8018e78:	4604      	mov	r4, r0
 8018e7a:	4608      	mov	r0, r1
 8018e7c:	4611      	mov	r1, r2
 8018e7e:	2200      	movs	r2, #0
 8018e80:	602a      	str	r2, [r5, #0]
 8018e82:	461a      	mov	r2, r3
 8018e84:	f7e7 ff00 	bl	8000c88 <_lseek>
 8018e88:	1c43      	adds	r3, r0, #1
 8018e8a:	d102      	bne.n	8018e92 <_lseek_r+0x1e>
 8018e8c:	682b      	ldr	r3, [r5, #0]
 8018e8e:	b103      	cbz	r3, 8018e92 <_lseek_r+0x1e>
 8018e90:	6023      	str	r3, [r4, #0]
 8018e92:	bd38      	pop	{r3, r4, r5, pc}
 8018e94:	20011470 	.word	0x20011470

08018e98 <_read_r>:
 8018e98:	b538      	push	{r3, r4, r5, lr}
 8018e9a:	4d07      	ldr	r5, [pc, #28]	; (8018eb8 <_read_r+0x20>)
 8018e9c:	4604      	mov	r4, r0
 8018e9e:	4608      	mov	r0, r1
 8018ea0:	4611      	mov	r1, r2
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	602a      	str	r2, [r5, #0]
 8018ea6:	461a      	mov	r2, r3
 8018ea8:	f7e7 fe8e 	bl	8000bc8 <_read>
 8018eac:	1c43      	adds	r3, r0, #1
 8018eae:	d102      	bne.n	8018eb6 <_read_r+0x1e>
 8018eb0:	682b      	ldr	r3, [r5, #0]
 8018eb2:	b103      	cbz	r3, 8018eb6 <_read_r+0x1e>
 8018eb4:	6023      	str	r3, [r4, #0]
 8018eb6:	bd38      	pop	{r3, r4, r5, pc}
 8018eb8:	20011470 	.word	0x20011470

08018ebc <_write_r>:
 8018ebc:	b538      	push	{r3, r4, r5, lr}
 8018ebe:	4d07      	ldr	r5, [pc, #28]	; (8018edc <_write_r+0x20>)
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	4608      	mov	r0, r1
 8018ec4:	4611      	mov	r1, r2
 8018ec6:	2200      	movs	r2, #0
 8018ec8:	602a      	str	r2, [r5, #0]
 8018eca:	461a      	mov	r2, r3
 8018ecc:	f7e7 fe99 	bl	8000c02 <_write>
 8018ed0:	1c43      	adds	r3, r0, #1
 8018ed2:	d102      	bne.n	8018eda <_write_r+0x1e>
 8018ed4:	682b      	ldr	r3, [r5, #0]
 8018ed6:	b103      	cbz	r3, 8018eda <_write_r+0x1e>
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	bd38      	pop	{r3, r4, r5, pc}
 8018edc:	20011470 	.word	0x20011470

08018ee0 <__libc_init_array>:
 8018ee0:	b570      	push	{r4, r5, r6, lr}
 8018ee2:	4d0d      	ldr	r5, [pc, #52]	; (8018f18 <__libc_init_array+0x38>)
 8018ee4:	4c0d      	ldr	r4, [pc, #52]	; (8018f1c <__libc_init_array+0x3c>)
 8018ee6:	1b64      	subs	r4, r4, r5
 8018ee8:	10a4      	asrs	r4, r4, #2
 8018eea:	2600      	movs	r6, #0
 8018eec:	42a6      	cmp	r6, r4
 8018eee:	d109      	bne.n	8018f04 <__libc_init_array+0x24>
 8018ef0:	4d0b      	ldr	r5, [pc, #44]	; (8018f20 <__libc_init_array+0x40>)
 8018ef2:	4c0c      	ldr	r4, [pc, #48]	; (8018f24 <__libc_init_array+0x44>)
 8018ef4:	f000 ffde 	bl	8019eb4 <_init>
 8018ef8:	1b64      	subs	r4, r4, r5
 8018efa:	10a4      	asrs	r4, r4, #2
 8018efc:	2600      	movs	r6, #0
 8018efe:	42a6      	cmp	r6, r4
 8018f00:	d105      	bne.n	8018f0e <__libc_init_array+0x2e>
 8018f02:	bd70      	pop	{r4, r5, r6, pc}
 8018f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f08:	4798      	blx	r3
 8018f0a:	3601      	adds	r6, #1
 8018f0c:	e7ee      	b.n	8018eec <__libc_init_array+0xc>
 8018f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f12:	4798      	blx	r3
 8018f14:	3601      	adds	r6, #1
 8018f16:	e7f2      	b.n	8018efe <__libc_init_array+0x1e>
 8018f18:	08028008 	.word	0x08028008
 8018f1c:	08028008 	.word	0x08028008
 8018f20:	08028008 	.word	0x08028008
 8018f24:	0802800c 	.word	0x0802800c

08018f28 <__retarget_lock_acquire_recursive>:
 8018f28:	4770      	bx	lr

08018f2a <__retarget_lock_release_recursive>:
 8018f2a:	4770      	bx	lr

08018f2c <memcpy>:
 8018f2c:	440a      	add	r2, r1
 8018f2e:	4291      	cmp	r1, r2
 8018f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f34:	d100      	bne.n	8018f38 <memcpy+0xc>
 8018f36:	4770      	bx	lr
 8018f38:	b510      	push	{r4, lr}
 8018f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f42:	4291      	cmp	r1, r2
 8018f44:	d1f9      	bne.n	8018f3a <memcpy+0xe>
 8018f46:	bd10      	pop	{r4, pc}

08018f48 <__assert_func>:
 8018f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f4a:	4614      	mov	r4, r2
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	4b09      	ldr	r3, [pc, #36]	; (8018f74 <__assert_func+0x2c>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	4605      	mov	r5, r0
 8018f54:	68d8      	ldr	r0, [r3, #12]
 8018f56:	b14c      	cbz	r4, 8018f6c <__assert_func+0x24>
 8018f58:	4b07      	ldr	r3, [pc, #28]	; (8018f78 <__assert_func+0x30>)
 8018f5a:	9100      	str	r1, [sp, #0]
 8018f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018f60:	4906      	ldr	r1, [pc, #24]	; (8018f7c <__assert_func+0x34>)
 8018f62:	462b      	mov	r3, r5
 8018f64:	f000 fde8 	bl	8019b38 <fiprintf>
 8018f68:	f000 fe9e 	bl	8019ca8 <abort>
 8018f6c:	4b04      	ldr	r3, [pc, #16]	; (8018f80 <__assert_func+0x38>)
 8018f6e:	461c      	mov	r4, r3
 8018f70:	e7f3      	b.n	8018f5a <__assert_func+0x12>
 8018f72:	bf00      	nop
 8018f74:	2000008c 	.word	0x2000008c
 8018f78:	08027f8e 	.word	0x08027f8e
 8018f7c:	08027f9b 	.word	0x08027f9b
 8018f80:	08027fc9 	.word	0x08027fc9

08018f84 <_free_r>:
 8018f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f86:	2900      	cmp	r1, #0
 8018f88:	d044      	beq.n	8019014 <_free_r+0x90>
 8018f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f8e:	9001      	str	r0, [sp, #4]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	f1a1 0404 	sub.w	r4, r1, #4
 8018f96:	bfb8      	it	lt
 8018f98:	18e4      	addlt	r4, r4, r3
 8018f9a:	f000 f8e7 	bl	801916c <__malloc_lock>
 8018f9e:	4a1e      	ldr	r2, [pc, #120]	; (8019018 <_free_r+0x94>)
 8018fa0:	9801      	ldr	r0, [sp, #4]
 8018fa2:	6813      	ldr	r3, [r2, #0]
 8018fa4:	b933      	cbnz	r3, 8018fb4 <_free_r+0x30>
 8018fa6:	6063      	str	r3, [r4, #4]
 8018fa8:	6014      	str	r4, [r2, #0]
 8018faa:	b003      	add	sp, #12
 8018fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fb0:	f000 b8e2 	b.w	8019178 <__malloc_unlock>
 8018fb4:	42a3      	cmp	r3, r4
 8018fb6:	d908      	bls.n	8018fca <_free_r+0x46>
 8018fb8:	6825      	ldr	r5, [r4, #0]
 8018fba:	1961      	adds	r1, r4, r5
 8018fbc:	428b      	cmp	r3, r1
 8018fbe:	bf01      	itttt	eq
 8018fc0:	6819      	ldreq	r1, [r3, #0]
 8018fc2:	685b      	ldreq	r3, [r3, #4]
 8018fc4:	1949      	addeq	r1, r1, r5
 8018fc6:	6021      	streq	r1, [r4, #0]
 8018fc8:	e7ed      	b.n	8018fa6 <_free_r+0x22>
 8018fca:	461a      	mov	r2, r3
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	b10b      	cbz	r3, 8018fd4 <_free_r+0x50>
 8018fd0:	42a3      	cmp	r3, r4
 8018fd2:	d9fa      	bls.n	8018fca <_free_r+0x46>
 8018fd4:	6811      	ldr	r1, [r2, #0]
 8018fd6:	1855      	adds	r5, r2, r1
 8018fd8:	42a5      	cmp	r5, r4
 8018fda:	d10b      	bne.n	8018ff4 <_free_r+0x70>
 8018fdc:	6824      	ldr	r4, [r4, #0]
 8018fde:	4421      	add	r1, r4
 8018fe0:	1854      	adds	r4, r2, r1
 8018fe2:	42a3      	cmp	r3, r4
 8018fe4:	6011      	str	r1, [r2, #0]
 8018fe6:	d1e0      	bne.n	8018faa <_free_r+0x26>
 8018fe8:	681c      	ldr	r4, [r3, #0]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	6053      	str	r3, [r2, #4]
 8018fee:	440c      	add	r4, r1
 8018ff0:	6014      	str	r4, [r2, #0]
 8018ff2:	e7da      	b.n	8018faa <_free_r+0x26>
 8018ff4:	d902      	bls.n	8018ffc <_free_r+0x78>
 8018ff6:	230c      	movs	r3, #12
 8018ff8:	6003      	str	r3, [r0, #0]
 8018ffa:	e7d6      	b.n	8018faa <_free_r+0x26>
 8018ffc:	6825      	ldr	r5, [r4, #0]
 8018ffe:	1961      	adds	r1, r4, r5
 8019000:	428b      	cmp	r3, r1
 8019002:	bf04      	itt	eq
 8019004:	6819      	ldreq	r1, [r3, #0]
 8019006:	685b      	ldreq	r3, [r3, #4]
 8019008:	6063      	str	r3, [r4, #4]
 801900a:	bf04      	itt	eq
 801900c:	1949      	addeq	r1, r1, r5
 801900e:	6021      	streq	r1, [r4, #0]
 8019010:	6054      	str	r4, [r2, #4]
 8019012:	e7ca      	b.n	8018faa <_free_r+0x26>
 8019014:	b003      	add	sp, #12
 8019016:	bd30      	pop	{r4, r5, pc}
 8019018:	20011478 	.word	0x20011478

0801901c <malloc>:
 801901c:	4b02      	ldr	r3, [pc, #8]	; (8019028 <malloc+0xc>)
 801901e:	4601      	mov	r1, r0
 8019020:	6818      	ldr	r0, [r3, #0]
 8019022:	f000 b823 	b.w	801906c <_malloc_r>
 8019026:	bf00      	nop
 8019028:	2000008c 	.word	0x2000008c

0801902c <sbrk_aligned>:
 801902c:	b570      	push	{r4, r5, r6, lr}
 801902e:	4e0e      	ldr	r6, [pc, #56]	; (8019068 <sbrk_aligned+0x3c>)
 8019030:	460c      	mov	r4, r1
 8019032:	6831      	ldr	r1, [r6, #0]
 8019034:	4605      	mov	r5, r0
 8019036:	b911      	cbnz	r1, 801903e <sbrk_aligned+0x12>
 8019038:	f000 fe26 	bl	8019c88 <_sbrk_r>
 801903c:	6030      	str	r0, [r6, #0]
 801903e:	4621      	mov	r1, r4
 8019040:	4628      	mov	r0, r5
 8019042:	f000 fe21 	bl	8019c88 <_sbrk_r>
 8019046:	1c43      	adds	r3, r0, #1
 8019048:	d00a      	beq.n	8019060 <sbrk_aligned+0x34>
 801904a:	1cc4      	adds	r4, r0, #3
 801904c:	f024 0403 	bic.w	r4, r4, #3
 8019050:	42a0      	cmp	r0, r4
 8019052:	d007      	beq.n	8019064 <sbrk_aligned+0x38>
 8019054:	1a21      	subs	r1, r4, r0
 8019056:	4628      	mov	r0, r5
 8019058:	f000 fe16 	bl	8019c88 <_sbrk_r>
 801905c:	3001      	adds	r0, #1
 801905e:	d101      	bne.n	8019064 <sbrk_aligned+0x38>
 8019060:	f04f 34ff 	mov.w	r4, #4294967295
 8019064:	4620      	mov	r0, r4
 8019066:	bd70      	pop	{r4, r5, r6, pc}
 8019068:	2001147c 	.word	0x2001147c

0801906c <_malloc_r>:
 801906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019070:	1ccd      	adds	r5, r1, #3
 8019072:	f025 0503 	bic.w	r5, r5, #3
 8019076:	3508      	adds	r5, #8
 8019078:	2d0c      	cmp	r5, #12
 801907a:	bf38      	it	cc
 801907c:	250c      	movcc	r5, #12
 801907e:	2d00      	cmp	r5, #0
 8019080:	4607      	mov	r7, r0
 8019082:	db01      	blt.n	8019088 <_malloc_r+0x1c>
 8019084:	42a9      	cmp	r1, r5
 8019086:	d905      	bls.n	8019094 <_malloc_r+0x28>
 8019088:	230c      	movs	r3, #12
 801908a:	603b      	str	r3, [r7, #0]
 801908c:	2600      	movs	r6, #0
 801908e:	4630      	mov	r0, r6
 8019090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019168 <_malloc_r+0xfc>
 8019098:	f000 f868 	bl	801916c <__malloc_lock>
 801909c:	f8d8 3000 	ldr.w	r3, [r8]
 80190a0:	461c      	mov	r4, r3
 80190a2:	bb5c      	cbnz	r4, 80190fc <_malloc_r+0x90>
 80190a4:	4629      	mov	r1, r5
 80190a6:	4638      	mov	r0, r7
 80190a8:	f7ff ffc0 	bl	801902c <sbrk_aligned>
 80190ac:	1c43      	adds	r3, r0, #1
 80190ae:	4604      	mov	r4, r0
 80190b0:	d155      	bne.n	801915e <_malloc_r+0xf2>
 80190b2:	f8d8 4000 	ldr.w	r4, [r8]
 80190b6:	4626      	mov	r6, r4
 80190b8:	2e00      	cmp	r6, #0
 80190ba:	d145      	bne.n	8019148 <_malloc_r+0xdc>
 80190bc:	2c00      	cmp	r4, #0
 80190be:	d048      	beq.n	8019152 <_malloc_r+0xe6>
 80190c0:	6823      	ldr	r3, [r4, #0]
 80190c2:	4631      	mov	r1, r6
 80190c4:	4638      	mov	r0, r7
 80190c6:	eb04 0903 	add.w	r9, r4, r3
 80190ca:	f000 fddd 	bl	8019c88 <_sbrk_r>
 80190ce:	4581      	cmp	r9, r0
 80190d0:	d13f      	bne.n	8019152 <_malloc_r+0xe6>
 80190d2:	6821      	ldr	r1, [r4, #0]
 80190d4:	1a6d      	subs	r5, r5, r1
 80190d6:	4629      	mov	r1, r5
 80190d8:	4638      	mov	r0, r7
 80190da:	f7ff ffa7 	bl	801902c <sbrk_aligned>
 80190de:	3001      	adds	r0, #1
 80190e0:	d037      	beq.n	8019152 <_malloc_r+0xe6>
 80190e2:	6823      	ldr	r3, [r4, #0]
 80190e4:	442b      	add	r3, r5
 80190e6:	6023      	str	r3, [r4, #0]
 80190e8:	f8d8 3000 	ldr.w	r3, [r8]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d038      	beq.n	8019162 <_malloc_r+0xf6>
 80190f0:	685a      	ldr	r2, [r3, #4]
 80190f2:	42a2      	cmp	r2, r4
 80190f4:	d12b      	bne.n	801914e <_malloc_r+0xe2>
 80190f6:	2200      	movs	r2, #0
 80190f8:	605a      	str	r2, [r3, #4]
 80190fa:	e00f      	b.n	801911c <_malloc_r+0xb0>
 80190fc:	6822      	ldr	r2, [r4, #0]
 80190fe:	1b52      	subs	r2, r2, r5
 8019100:	d41f      	bmi.n	8019142 <_malloc_r+0xd6>
 8019102:	2a0b      	cmp	r2, #11
 8019104:	d917      	bls.n	8019136 <_malloc_r+0xca>
 8019106:	1961      	adds	r1, r4, r5
 8019108:	42a3      	cmp	r3, r4
 801910a:	6025      	str	r5, [r4, #0]
 801910c:	bf18      	it	ne
 801910e:	6059      	strne	r1, [r3, #4]
 8019110:	6863      	ldr	r3, [r4, #4]
 8019112:	bf08      	it	eq
 8019114:	f8c8 1000 	streq.w	r1, [r8]
 8019118:	5162      	str	r2, [r4, r5]
 801911a:	604b      	str	r3, [r1, #4]
 801911c:	4638      	mov	r0, r7
 801911e:	f104 060b 	add.w	r6, r4, #11
 8019122:	f000 f829 	bl	8019178 <__malloc_unlock>
 8019126:	f026 0607 	bic.w	r6, r6, #7
 801912a:	1d23      	adds	r3, r4, #4
 801912c:	1af2      	subs	r2, r6, r3
 801912e:	d0ae      	beq.n	801908e <_malloc_r+0x22>
 8019130:	1b9b      	subs	r3, r3, r6
 8019132:	50a3      	str	r3, [r4, r2]
 8019134:	e7ab      	b.n	801908e <_malloc_r+0x22>
 8019136:	42a3      	cmp	r3, r4
 8019138:	6862      	ldr	r2, [r4, #4]
 801913a:	d1dd      	bne.n	80190f8 <_malloc_r+0x8c>
 801913c:	f8c8 2000 	str.w	r2, [r8]
 8019140:	e7ec      	b.n	801911c <_malloc_r+0xb0>
 8019142:	4623      	mov	r3, r4
 8019144:	6864      	ldr	r4, [r4, #4]
 8019146:	e7ac      	b.n	80190a2 <_malloc_r+0x36>
 8019148:	4634      	mov	r4, r6
 801914a:	6876      	ldr	r6, [r6, #4]
 801914c:	e7b4      	b.n	80190b8 <_malloc_r+0x4c>
 801914e:	4613      	mov	r3, r2
 8019150:	e7cc      	b.n	80190ec <_malloc_r+0x80>
 8019152:	230c      	movs	r3, #12
 8019154:	603b      	str	r3, [r7, #0]
 8019156:	4638      	mov	r0, r7
 8019158:	f000 f80e 	bl	8019178 <__malloc_unlock>
 801915c:	e797      	b.n	801908e <_malloc_r+0x22>
 801915e:	6025      	str	r5, [r4, #0]
 8019160:	e7dc      	b.n	801911c <_malloc_r+0xb0>
 8019162:	605b      	str	r3, [r3, #4]
 8019164:	deff      	udf	#255	; 0xff
 8019166:	bf00      	nop
 8019168:	20011478 	.word	0x20011478

0801916c <__malloc_lock>:
 801916c:	4801      	ldr	r0, [pc, #4]	; (8019174 <__malloc_lock+0x8>)
 801916e:	f7ff bedb 	b.w	8018f28 <__retarget_lock_acquire_recursive>
 8019172:	bf00      	nop
 8019174:	20011474 	.word	0x20011474

08019178 <__malloc_unlock>:
 8019178:	4801      	ldr	r0, [pc, #4]	; (8019180 <__malloc_unlock+0x8>)
 801917a:	f7ff bed6 	b.w	8018f2a <__retarget_lock_release_recursive>
 801917e:	bf00      	nop
 8019180:	20011474 	.word	0x20011474

08019184 <__ssputs_r>:
 8019184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019188:	688e      	ldr	r6, [r1, #8]
 801918a:	461f      	mov	r7, r3
 801918c:	42be      	cmp	r6, r7
 801918e:	680b      	ldr	r3, [r1, #0]
 8019190:	4682      	mov	sl, r0
 8019192:	460c      	mov	r4, r1
 8019194:	4690      	mov	r8, r2
 8019196:	d82c      	bhi.n	80191f2 <__ssputs_r+0x6e>
 8019198:	898a      	ldrh	r2, [r1, #12]
 801919a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801919e:	d026      	beq.n	80191ee <__ssputs_r+0x6a>
 80191a0:	6965      	ldr	r5, [r4, #20]
 80191a2:	6909      	ldr	r1, [r1, #16]
 80191a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191a8:	eba3 0901 	sub.w	r9, r3, r1
 80191ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80191b0:	1c7b      	adds	r3, r7, #1
 80191b2:	444b      	add	r3, r9
 80191b4:	106d      	asrs	r5, r5, #1
 80191b6:	429d      	cmp	r5, r3
 80191b8:	bf38      	it	cc
 80191ba:	461d      	movcc	r5, r3
 80191bc:	0553      	lsls	r3, r2, #21
 80191be:	d527      	bpl.n	8019210 <__ssputs_r+0x8c>
 80191c0:	4629      	mov	r1, r5
 80191c2:	f7ff ff53 	bl	801906c <_malloc_r>
 80191c6:	4606      	mov	r6, r0
 80191c8:	b360      	cbz	r0, 8019224 <__ssputs_r+0xa0>
 80191ca:	6921      	ldr	r1, [r4, #16]
 80191cc:	464a      	mov	r2, r9
 80191ce:	f7ff fead 	bl	8018f2c <memcpy>
 80191d2:	89a3      	ldrh	r3, [r4, #12]
 80191d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80191d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191dc:	81a3      	strh	r3, [r4, #12]
 80191de:	6126      	str	r6, [r4, #16]
 80191e0:	6165      	str	r5, [r4, #20]
 80191e2:	444e      	add	r6, r9
 80191e4:	eba5 0509 	sub.w	r5, r5, r9
 80191e8:	6026      	str	r6, [r4, #0]
 80191ea:	60a5      	str	r5, [r4, #8]
 80191ec:	463e      	mov	r6, r7
 80191ee:	42be      	cmp	r6, r7
 80191f0:	d900      	bls.n	80191f4 <__ssputs_r+0x70>
 80191f2:	463e      	mov	r6, r7
 80191f4:	6820      	ldr	r0, [r4, #0]
 80191f6:	4632      	mov	r2, r6
 80191f8:	4641      	mov	r1, r8
 80191fa:	f7ff fd1c 	bl	8018c36 <memmove>
 80191fe:	68a3      	ldr	r3, [r4, #8]
 8019200:	1b9b      	subs	r3, r3, r6
 8019202:	60a3      	str	r3, [r4, #8]
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	4433      	add	r3, r6
 8019208:	6023      	str	r3, [r4, #0]
 801920a:	2000      	movs	r0, #0
 801920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019210:	462a      	mov	r2, r5
 8019212:	f000 fd50 	bl	8019cb6 <_realloc_r>
 8019216:	4606      	mov	r6, r0
 8019218:	2800      	cmp	r0, #0
 801921a:	d1e0      	bne.n	80191de <__ssputs_r+0x5a>
 801921c:	6921      	ldr	r1, [r4, #16]
 801921e:	4650      	mov	r0, sl
 8019220:	f7ff feb0 	bl	8018f84 <_free_r>
 8019224:	230c      	movs	r3, #12
 8019226:	f8ca 3000 	str.w	r3, [sl]
 801922a:	89a3      	ldrh	r3, [r4, #12]
 801922c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019230:	81a3      	strh	r3, [r4, #12]
 8019232:	f04f 30ff 	mov.w	r0, #4294967295
 8019236:	e7e9      	b.n	801920c <__ssputs_r+0x88>

08019238 <_svfiprintf_r>:
 8019238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801923c:	4698      	mov	r8, r3
 801923e:	898b      	ldrh	r3, [r1, #12]
 8019240:	061b      	lsls	r3, r3, #24
 8019242:	b09d      	sub	sp, #116	; 0x74
 8019244:	4607      	mov	r7, r0
 8019246:	460d      	mov	r5, r1
 8019248:	4614      	mov	r4, r2
 801924a:	d50e      	bpl.n	801926a <_svfiprintf_r+0x32>
 801924c:	690b      	ldr	r3, [r1, #16]
 801924e:	b963      	cbnz	r3, 801926a <_svfiprintf_r+0x32>
 8019250:	2140      	movs	r1, #64	; 0x40
 8019252:	f7ff ff0b 	bl	801906c <_malloc_r>
 8019256:	6028      	str	r0, [r5, #0]
 8019258:	6128      	str	r0, [r5, #16]
 801925a:	b920      	cbnz	r0, 8019266 <_svfiprintf_r+0x2e>
 801925c:	230c      	movs	r3, #12
 801925e:	603b      	str	r3, [r7, #0]
 8019260:	f04f 30ff 	mov.w	r0, #4294967295
 8019264:	e0d0      	b.n	8019408 <_svfiprintf_r+0x1d0>
 8019266:	2340      	movs	r3, #64	; 0x40
 8019268:	616b      	str	r3, [r5, #20]
 801926a:	2300      	movs	r3, #0
 801926c:	9309      	str	r3, [sp, #36]	; 0x24
 801926e:	2320      	movs	r3, #32
 8019270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019274:	f8cd 800c 	str.w	r8, [sp, #12]
 8019278:	2330      	movs	r3, #48	; 0x30
 801927a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019420 <_svfiprintf_r+0x1e8>
 801927e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019282:	f04f 0901 	mov.w	r9, #1
 8019286:	4623      	mov	r3, r4
 8019288:	469a      	mov	sl, r3
 801928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801928e:	b10a      	cbz	r2, 8019294 <_svfiprintf_r+0x5c>
 8019290:	2a25      	cmp	r2, #37	; 0x25
 8019292:	d1f9      	bne.n	8019288 <_svfiprintf_r+0x50>
 8019294:	ebba 0b04 	subs.w	fp, sl, r4
 8019298:	d00b      	beq.n	80192b2 <_svfiprintf_r+0x7a>
 801929a:	465b      	mov	r3, fp
 801929c:	4622      	mov	r2, r4
 801929e:	4629      	mov	r1, r5
 80192a0:	4638      	mov	r0, r7
 80192a2:	f7ff ff6f 	bl	8019184 <__ssputs_r>
 80192a6:	3001      	adds	r0, #1
 80192a8:	f000 80a9 	beq.w	80193fe <_svfiprintf_r+0x1c6>
 80192ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192ae:	445a      	add	r2, fp
 80192b0:	9209      	str	r2, [sp, #36]	; 0x24
 80192b2:	f89a 3000 	ldrb.w	r3, [sl]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	f000 80a1 	beq.w	80193fe <_svfiprintf_r+0x1c6>
 80192bc:	2300      	movs	r3, #0
 80192be:	f04f 32ff 	mov.w	r2, #4294967295
 80192c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192c6:	f10a 0a01 	add.w	sl, sl, #1
 80192ca:	9304      	str	r3, [sp, #16]
 80192cc:	9307      	str	r3, [sp, #28]
 80192ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192d2:	931a      	str	r3, [sp, #104]	; 0x68
 80192d4:	4654      	mov	r4, sl
 80192d6:	2205      	movs	r2, #5
 80192d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192dc:	4850      	ldr	r0, [pc, #320]	; (8019420 <_svfiprintf_r+0x1e8>)
 80192de:	f7e6 ff9f 	bl	8000220 <memchr>
 80192e2:	9a04      	ldr	r2, [sp, #16]
 80192e4:	b9d8      	cbnz	r0, 801931e <_svfiprintf_r+0xe6>
 80192e6:	06d0      	lsls	r0, r2, #27
 80192e8:	bf44      	itt	mi
 80192ea:	2320      	movmi	r3, #32
 80192ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192f0:	0711      	lsls	r1, r2, #28
 80192f2:	bf44      	itt	mi
 80192f4:	232b      	movmi	r3, #43	; 0x2b
 80192f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192fa:	f89a 3000 	ldrb.w	r3, [sl]
 80192fe:	2b2a      	cmp	r3, #42	; 0x2a
 8019300:	d015      	beq.n	801932e <_svfiprintf_r+0xf6>
 8019302:	9a07      	ldr	r2, [sp, #28]
 8019304:	4654      	mov	r4, sl
 8019306:	2000      	movs	r0, #0
 8019308:	f04f 0c0a 	mov.w	ip, #10
 801930c:	4621      	mov	r1, r4
 801930e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019312:	3b30      	subs	r3, #48	; 0x30
 8019314:	2b09      	cmp	r3, #9
 8019316:	d94d      	bls.n	80193b4 <_svfiprintf_r+0x17c>
 8019318:	b1b0      	cbz	r0, 8019348 <_svfiprintf_r+0x110>
 801931a:	9207      	str	r2, [sp, #28]
 801931c:	e014      	b.n	8019348 <_svfiprintf_r+0x110>
 801931e:	eba0 0308 	sub.w	r3, r0, r8
 8019322:	fa09 f303 	lsl.w	r3, r9, r3
 8019326:	4313      	orrs	r3, r2
 8019328:	9304      	str	r3, [sp, #16]
 801932a:	46a2      	mov	sl, r4
 801932c:	e7d2      	b.n	80192d4 <_svfiprintf_r+0x9c>
 801932e:	9b03      	ldr	r3, [sp, #12]
 8019330:	1d19      	adds	r1, r3, #4
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	9103      	str	r1, [sp, #12]
 8019336:	2b00      	cmp	r3, #0
 8019338:	bfbb      	ittet	lt
 801933a:	425b      	neglt	r3, r3
 801933c:	f042 0202 	orrlt.w	r2, r2, #2
 8019340:	9307      	strge	r3, [sp, #28]
 8019342:	9307      	strlt	r3, [sp, #28]
 8019344:	bfb8      	it	lt
 8019346:	9204      	strlt	r2, [sp, #16]
 8019348:	7823      	ldrb	r3, [r4, #0]
 801934a:	2b2e      	cmp	r3, #46	; 0x2e
 801934c:	d10c      	bne.n	8019368 <_svfiprintf_r+0x130>
 801934e:	7863      	ldrb	r3, [r4, #1]
 8019350:	2b2a      	cmp	r3, #42	; 0x2a
 8019352:	d134      	bne.n	80193be <_svfiprintf_r+0x186>
 8019354:	9b03      	ldr	r3, [sp, #12]
 8019356:	1d1a      	adds	r2, r3, #4
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	9203      	str	r2, [sp, #12]
 801935c:	2b00      	cmp	r3, #0
 801935e:	bfb8      	it	lt
 8019360:	f04f 33ff 	movlt.w	r3, #4294967295
 8019364:	3402      	adds	r4, #2
 8019366:	9305      	str	r3, [sp, #20]
 8019368:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019430 <_svfiprintf_r+0x1f8>
 801936c:	7821      	ldrb	r1, [r4, #0]
 801936e:	2203      	movs	r2, #3
 8019370:	4650      	mov	r0, sl
 8019372:	f7e6 ff55 	bl	8000220 <memchr>
 8019376:	b138      	cbz	r0, 8019388 <_svfiprintf_r+0x150>
 8019378:	9b04      	ldr	r3, [sp, #16]
 801937a:	eba0 000a 	sub.w	r0, r0, sl
 801937e:	2240      	movs	r2, #64	; 0x40
 8019380:	4082      	lsls	r2, r0
 8019382:	4313      	orrs	r3, r2
 8019384:	3401      	adds	r4, #1
 8019386:	9304      	str	r3, [sp, #16]
 8019388:	f814 1b01 	ldrb.w	r1, [r4], #1
 801938c:	4825      	ldr	r0, [pc, #148]	; (8019424 <_svfiprintf_r+0x1ec>)
 801938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019392:	2206      	movs	r2, #6
 8019394:	f7e6 ff44 	bl	8000220 <memchr>
 8019398:	2800      	cmp	r0, #0
 801939a:	d038      	beq.n	801940e <_svfiprintf_r+0x1d6>
 801939c:	4b22      	ldr	r3, [pc, #136]	; (8019428 <_svfiprintf_r+0x1f0>)
 801939e:	bb1b      	cbnz	r3, 80193e8 <_svfiprintf_r+0x1b0>
 80193a0:	9b03      	ldr	r3, [sp, #12]
 80193a2:	3307      	adds	r3, #7
 80193a4:	f023 0307 	bic.w	r3, r3, #7
 80193a8:	3308      	adds	r3, #8
 80193aa:	9303      	str	r3, [sp, #12]
 80193ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193ae:	4433      	add	r3, r6
 80193b0:	9309      	str	r3, [sp, #36]	; 0x24
 80193b2:	e768      	b.n	8019286 <_svfiprintf_r+0x4e>
 80193b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80193b8:	460c      	mov	r4, r1
 80193ba:	2001      	movs	r0, #1
 80193bc:	e7a6      	b.n	801930c <_svfiprintf_r+0xd4>
 80193be:	2300      	movs	r3, #0
 80193c0:	3401      	adds	r4, #1
 80193c2:	9305      	str	r3, [sp, #20]
 80193c4:	4619      	mov	r1, r3
 80193c6:	f04f 0c0a 	mov.w	ip, #10
 80193ca:	4620      	mov	r0, r4
 80193cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193d0:	3a30      	subs	r2, #48	; 0x30
 80193d2:	2a09      	cmp	r2, #9
 80193d4:	d903      	bls.n	80193de <_svfiprintf_r+0x1a6>
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d0c6      	beq.n	8019368 <_svfiprintf_r+0x130>
 80193da:	9105      	str	r1, [sp, #20]
 80193dc:	e7c4      	b.n	8019368 <_svfiprintf_r+0x130>
 80193de:	fb0c 2101 	mla	r1, ip, r1, r2
 80193e2:	4604      	mov	r4, r0
 80193e4:	2301      	movs	r3, #1
 80193e6:	e7f0      	b.n	80193ca <_svfiprintf_r+0x192>
 80193e8:	ab03      	add	r3, sp, #12
 80193ea:	9300      	str	r3, [sp, #0]
 80193ec:	462a      	mov	r2, r5
 80193ee:	4b0f      	ldr	r3, [pc, #60]	; (801942c <_svfiprintf_r+0x1f4>)
 80193f0:	a904      	add	r1, sp, #16
 80193f2:	4638      	mov	r0, r7
 80193f4:	f3af 8000 	nop.w
 80193f8:	1c42      	adds	r2, r0, #1
 80193fa:	4606      	mov	r6, r0
 80193fc:	d1d6      	bne.n	80193ac <_svfiprintf_r+0x174>
 80193fe:	89ab      	ldrh	r3, [r5, #12]
 8019400:	065b      	lsls	r3, r3, #25
 8019402:	f53f af2d 	bmi.w	8019260 <_svfiprintf_r+0x28>
 8019406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019408:	b01d      	add	sp, #116	; 0x74
 801940a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801940e:	ab03      	add	r3, sp, #12
 8019410:	9300      	str	r3, [sp, #0]
 8019412:	462a      	mov	r2, r5
 8019414:	4b05      	ldr	r3, [pc, #20]	; (801942c <_svfiprintf_r+0x1f4>)
 8019416:	a904      	add	r1, sp, #16
 8019418:	4638      	mov	r0, r7
 801941a:	f000 f9bd 	bl	8019798 <_printf_i>
 801941e:	e7eb      	b.n	80193f8 <_svfiprintf_r+0x1c0>
 8019420:	08027fca 	.word	0x08027fca
 8019424:	08027fd4 	.word	0x08027fd4
 8019428:	00000000 	.word	0x00000000
 801942c:	08019185 	.word	0x08019185
 8019430:	08027fd0 	.word	0x08027fd0

08019434 <__sfputc_r>:
 8019434:	6893      	ldr	r3, [r2, #8]
 8019436:	3b01      	subs	r3, #1
 8019438:	2b00      	cmp	r3, #0
 801943a:	b410      	push	{r4}
 801943c:	6093      	str	r3, [r2, #8]
 801943e:	da08      	bge.n	8019452 <__sfputc_r+0x1e>
 8019440:	6994      	ldr	r4, [r2, #24]
 8019442:	42a3      	cmp	r3, r4
 8019444:	db01      	blt.n	801944a <__sfputc_r+0x16>
 8019446:	290a      	cmp	r1, #10
 8019448:	d103      	bne.n	8019452 <__sfputc_r+0x1e>
 801944a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801944e:	f000 bb85 	b.w	8019b5c <__swbuf_r>
 8019452:	6813      	ldr	r3, [r2, #0]
 8019454:	1c58      	adds	r0, r3, #1
 8019456:	6010      	str	r0, [r2, #0]
 8019458:	7019      	strb	r1, [r3, #0]
 801945a:	4608      	mov	r0, r1
 801945c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019460:	4770      	bx	lr

08019462 <__sfputs_r>:
 8019462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019464:	4606      	mov	r6, r0
 8019466:	460f      	mov	r7, r1
 8019468:	4614      	mov	r4, r2
 801946a:	18d5      	adds	r5, r2, r3
 801946c:	42ac      	cmp	r4, r5
 801946e:	d101      	bne.n	8019474 <__sfputs_r+0x12>
 8019470:	2000      	movs	r0, #0
 8019472:	e007      	b.n	8019484 <__sfputs_r+0x22>
 8019474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019478:	463a      	mov	r2, r7
 801947a:	4630      	mov	r0, r6
 801947c:	f7ff ffda 	bl	8019434 <__sfputc_r>
 8019480:	1c43      	adds	r3, r0, #1
 8019482:	d1f3      	bne.n	801946c <__sfputs_r+0xa>
 8019484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019488 <_vfiprintf_r>:
 8019488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801948c:	460d      	mov	r5, r1
 801948e:	b09d      	sub	sp, #116	; 0x74
 8019490:	4614      	mov	r4, r2
 8019492:	4698      	mov	r8, r3
 8019494:	4606      	mov	r6, r0
 8019496:	b118      	cbz	r0, 80194a0 <_vfiprintf_r+0x18>
 8019498:	6a03      	ldr	r3, [r0, #32]
 801949a:	b90b      	cbnz	r3, 80194a0 <_vfiprintf_r+0x18>
 801949c:	f7ff fb10 	bl	8018ac0 <__sinit>
 80194a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194a2:	07d9      	lsls	r1, r3, #31
 80194a4:	d405      	bmi.n	80194b2 <_vfiprintf_r+0x2a>
 80194a6:	89ab      	ldrh	r3, [r5, #12]
 80194a8:	059a      	lsls	r2, r3, #22
 80194aa:	d402      	bmi.n	80194b2 <_vfiprintf_r+0x2a>
 80194ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194ae:	f7ff fd3b 	bl	8018f28 <__retarget_lock_acquire_recursive>
 80194b2:	89ab      	ldrh	r3, [r5, #12]
 80194b4:	071b      	lsls	r3, r3, #28
 80194b6:	d501      	bpl.n	80194bc <_vfiprintf_r+0x34>
 80194b8:	692b      	ldr	r3, [r5, #16]
 80194ba:	b99b      	cbnz	r3, 80194e4 <_vfiprintf_r+0x5c>
 80194bc:	4629      	mov	r1, r5
 80194be:	4630      	mov	r0, r6
 80194c0:	f000 fb8a 	bl	8019bd8 <__swsetup_r>
 80194c4:	b170      	cbz	r0, 80194e4 <_vfiprintf_r+0x5c>
 80194c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194c8:	07dc      	lsls	r4, r3, #31
 80194ca:	d504      	bpl.n	80194d6 <_vfiprintf_r+0x4e>
 80194cc:	f04f 30ff 	mov.w	r0, #4294967295
 80194d0:	b01d      	add	sp, #116	; 0x74
 80194d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d6:	89ab      	ldrh	r3, [r5, #12]
 80194d8:	0598      	lsls	r0, r3, #22
 80194da:	d4f7      	bmi.n	80194cc <_vfiprintf_r+0x44>
 80194dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194de:	f7ff fd24 	bl	8018f2a <__retarget_lock_release_recursive>
 80194e2:	e7f3      	b.n	80194cc <_vfiprintf_r+0x44>
 80194e4:	2300      	movs	r3, #0
 80194e6:	9309      	str	r3, [sp, #36]	; 0x24
 80194e8:	2320      	movs	r3, #32
 80194ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80194f2:	2330      	movs	r3, #48	; 0x30
 80194f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80196a8 <_vfiprintf_r+0x220>
 80194f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80194fc:	f04f 0901 	mov.w	r9, #1
 8019500:	4623      	mov	r3, r4
 8019502:	469a      	mov	sl, r3
 8019504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019508:	b10a      	cbz	r2, 801950e <_vfiprintf_r+0x86>
 801950a:	2a25      	cmp	r2, #37	; 0x25
 801950c:	d1f9      	bne.n	8019502 <_vfiprintf_r+0x7a>
 801950e:	ebba 0b04 	subs.w	fp, sl, r4
 8019512:	d00b      	beq.n	801952c <_vfiprintf_r+0xa4>
 8019514:	465b      	mov	r3, fp
 8019516:	4622      	mov	r2, r4
 8019518:	4629      	mov	r1, r5
 801951a:	4630      	mov	r0, r6
 801951c:	f7ff ffa1 	bl	8019462 <__sfputs_r>
 8019520:	3001      	adds	r0, #1
 8019522:	f000 80a9 	beq.w	8019678 <_vfiprintf_r+0x1f0>
 8019526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019528:	445a      	add	r2, fp
 801952a:	9209      	str	r2, [sp, #36]	; 0x24
 801952c:	f89a 3000 	ldrb.w	r3, [sl]
 8019530:	2b00      	cmp	r3, #0
 8019532:	f000 80a1 	beq.w	8019678 <_vfiprintf_r+0x1f0>
 8019536:	2300      	movs	r3, #0
 8019538:	f04f 32ff 	mov.w	r2, #4294967295
 801953c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019540:	f10a 0a01 	add.w	sl, sl, #1
 8019544:	9304      	str	r3, [sp, #16]
 8019546:	9307      	str	r3, [sp, #28]
 8019548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801954c:	931a      	str	r3, [sp, #104]	; 0x68
 801954e:	4654      	mov	r4, sl
 8019550:	2205      	movs	r2, #5
 8019552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019556:	4854      	ldr	r0, [pc, #336]	; (80196a8 <_vfiprintf_r+0x220>)
 8019558:	f7e6 fe62 	bl	8000220 <memchr>
 801955c:	9a04      	ldr	r2, [sp, #16]
 801955e:	b9d8      	cbnz	r0, 8019598 <_vfiprintf_r+0x110>
 8019560:	06d1      	lsls	r1, r2, #27
 8019562:	bf44      	itt	mi
 8019564:	2320      	movmi	r3, #32
 8019566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801956a:	0713      	lsls	r3, r2, #28
 801956c:	bf44      	itt	mi
 801956e:	232b      	movmi	r3, #43	; 0x2b
 8019570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019574:	f89a 3000 	ldrb.w	r3, [sl]
 8019578:	2b2a      	cmp	r3, #42	; 0x2a
 801957a:	d015      	beq.n	80195a8 <_vfiprintf_r+0x120>
 801957c:	9a07      	ldr	r2, [sp, #28]
 801957e:	4654      	mov	r4, sl
 8019580:	2000      	movs	r0, #0
 8019582:	f04f 0c0a 	mov.w	ip, #10
 8019586:	4621      	mov	r1, r4
 8019588:	f811 3b01 	ldrb.w	r3, [r1], #1
 801958c:	3b30      	subs	r3, #48	; 0x30
 801958e:	2b09      	cmp	r3, #9
 8019590:	d94d      	bls.n	801962e <_vfiprintf_r+0x1a6>
 8019592:	b1b0      	cbz	r0, 80195c2 <_vfiprintf_r+0x13a>
 8019594:	9207      	str	r2, [sp, #28]
 8019596:	e014      	b.n	80195c2 <_vfiprintf_r+0x13a>
 8019598:	eba0 0308 	sub.w	r3, r0, r8
 801959c:	fa09 f303 	lsl.w	r3, r9, r3
 80195a0:	4313      	orrs	r3, r2
 80195a2:	9304      	str	r3, [sp, #16]
 80195a4:	46a2      	mov	sl, r4
 80195a6:	e7d2      	b.n	801954e <_vfiprintf_r+0xc6>
 80195a8:	9b03      	ldr	r3, [sp, #12]
 80195aa:	1d19      	adds	r1, r3, #4
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	9103      	str	r1, [sp, #12]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	bfbb      	ittet	lt
 80195b4:	425b      	neglt	r3, r3
 80195b6:	f042 0202 	orrlt.w	r2, r2, #2
 80195ba:	9307      	strge	r3, [sp, #28]
 80195bc:	9307      	strlt	r3, [sp, #28]
 80195be:	bfb8      	it	lt
 80195c0:	9204      	strlt	r2, [sp, #16]
 80195c2:	7823      	ldrb	r3, [r4, #0]
 80195c4:	2b2e      	cmp	r3, #46	; 0x2e
 80195c6:	d10c      	bne.n	80195e2 <_vfiprintf_r+0x15a>
 80195c8:	7863      	ldrb	r3, [r4, #1]
 80195ca:	2b2a      	cmp	r3, #42	; 0x2a
 80195cc:	d134      	bne.n	8019638 <_vfiprintf_r+0x1b0>
 80195ce:	9b03      	ldr	r3, [sp, #12]
 80195d0:	1d1a      	adds	r2, r3, #4
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	9203      	str	r2, [sp, #12]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	bfb8      	it	lt
 80195da:	f04f 33ff 	movlt.w	r3, #4294967295
 80195de:	3402      	adds	r4, #2
 80195e0:	9305      	str	r3, [sp, #20]
 80195e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80196b8 <_vfiprintf_r+0x230>
 80195e6:	7821      	ldrb	r1, [r4, #0]
 80195e8:	2203      	movs	r2, #3
 80195ea:	4650      	mov	r0, sl
 80195ec:	f7e6 fe18 	bl	8000220 <memchr>
 80195f0:	b138      	cbz	r0, 8019602 <_vfiprintf_r+0x17a>
 80195f2:	9b04      	ldr	r3, [sp, #16]
 80195f4:	eba0 000a 	sub.w	r0, r0, sl
 80195f8:	2240      	movs	r2, #64	; 0x40
 80195fa:	4082      	lsls	r2, r0
 80195fc:	4313      	orrs	r3, r2
 80195fe:	3401      	adds	r4, #1
 8019600:	9304      	str	r3, [sp, #16]
 8019602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019606:	4829      	ldr	r0, [pc, #164]	; (80196ac <_vfiprintf_r+0x224>)
 8019608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801960c:	2206      	movs	r2, #6
 801960e:	f7e6 fe07 	bl	8000220 <memchr>
 8019612:	2800      	cmp	r0, #0
 8019614:	d03f      	beq.n	8019696 <_vfiprintf_r+0x20e>
 8019616:	4b26      	ldr	r3, [pc, #152]	; (80196b0 <_vfiprintf_r+0x228>)
 8019618:	bb1b      	cbnz	r3, 8019662 <_vfiprintf_r+0x1da>
 801961a:	9b03      	ldr	r3, [sp, #12]
 801961c:	3307      	adds	r3, #7
 801961e:	f023 0307 	bic.w	r3, r3, #7
 8019622:	3308      	adds	r3, #8
 8019624:	9303      	str	r3, [sp, #12]
 8019626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019628:	443b      	add	r3, r7
 801962a:	9309      	str	r3, [sp, #36]	; 0x24
 801962c:	e768      	b.n	8019500 <_vfiprintf_r+0x78>
 801962e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019632:	460c      	mov	r4, r1
 8019634:	2001      	movs	r0, #1
 8019636:	e7a6      	b.n	8019586 <_vfiprintf_r+0xfe>
 8019638:	2300      	movs	r3, #0
 801963a:	3401      	adds	r4, #1
 801963c:	9305      	str	r3, [sp, #20]
 801963e:	4619      	mov	r1, r3
 8019640:	f04f 0c0a 	mov.w	ip, #10
 8019644:	4620      	mov	r0, r4
 8019646:	f810 2b01 	ldrb.w	r2, [r0], #1
 801964a:	3a30      	subs	r2, #48	; 0x30
 801964c:	2a09      	cmp	r2, #9
 801964e:	d903      	bls.n	8019658 <_vfiprintf_r+0x1d0>
 8019650:	2b00      	cmp	r3, #0
 8019652:	d0c6      	beq.n	80195e2 <_vfiprintf_r+0x15a>
 8019654:	9105      	str	r1, [sp, #20]
 8019656:	e7c4      	b.n	80195e2 <_vfiprintf_r+0x15a>
 8019658:	fb0c 2101 	mla	r1, ip, r1, r2
 801965c:	4604      	mov	r4, r0
 801965e:	2301      	movs	r3, #1
 8019660:	e7f0      	b.n	8019644 <_vfiprintf_r+0x1bc>
 8019662:	ab03      	add	r3, sp, #12
 8019664:	9300      	str	r3, [sp, #0]
 8019666:	462a      	mov	r2, r5
 8019668:	4b12      	ldr	r3, [pc, #72]	; (80196b4 <_vfiprintf_r+0x22c>)
 801966a:	a904      	add	r1, sp, #16
 801966c:	4630      	mov	r0, r6
 801966e:	f3af 8000 	nop.w
 8019672:	4607      	mov	r7, r0
 8019674:	1c78      	adds	r0, r7, #1
 8019676:	d1d6      	bne.n	8019626 <_vfiprintf_r+0x19e>
 8019678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801967a:	07d9      	lsls	r1, r3, #31
 801967c:	d405      	bmi.n	801968a <_vfiprintf_r+0x202>
 801967e:	89ab      	ldrh	r3, [r5, #12]
 8019680:	059a      	lsls	r2, r3, #22
 8019682:	d402      	bmi.n	801968a <_vfiprintf_r+0x202>
 8019684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019686:	f7ff fc50 	bl	8018f2a <__retarget_lock_release_recursive>
 801968a:	89ab      	ldrh	r3, [r5, #12]
 801968c:	065b      	lsls	r3, r3, #25
 801968e:	f53f af1d 	bmi.w	80194cc <_vfiprintf_r+0x44>
 8019692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019694:	e71c      	b.n	80194d0 <_vfiprintf_r+0x48>
 8019696:	ab03      	add	r3, sp, #12
 8019698:	9300      	str	r3, [sp, #0]
 801969a:	462a      	mov	r2, r5
 801969c:	4b05      	ldr	r3, [pc, #20]	; (80196b4 <_vfiprintf_r+0x22c>)
 801969e:	a904      	add	r1, sp, #16
 80196a0:	4630      	mov	r0, r6
 80196a2:	f000 f879 	bl	8019798 <_printf_i>
 80196a6:	e7e4      	b.n	8019672 <_vfiprintf_r+0x1ea>
 80196a8:	08027fca 	.word	0x08027fca
 80196ac:	08027fd4 	.word	0x08027fd4
 80196b0:	00000000 	.word	0x00000000
 80196b4:	08019463 	.word	0x08019463
 80196b8:	08027fd0 	.word	0x08027fd0

080196bc <_printf_common>:
 80196bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196c0:	4616      	mov	r6, r2
 80196c2:	4699      	mov	r9, r3
 80196c4:	688a      	ldr	r2, [r1, #8]
 80196c6:	690b      	ldr	r3, [r1, #16]
 80196c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196cc:	4293      	cmp	r3, r2
 80196ce:	bfb8      	it	lt
 80196d0:	4613      	movlt	r3, r2
 80196d2:	6033      	str	r3, [r6, #0]
 80196d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196d8:	4607      	mov	r7, r0
 80196da:	460c      	mov	r4, r1
 80196dc:	b10a      	cbz	r2, 80196e2 <_printf_common+0x26>
 80196de:	3301      	adds	r3, #1
 80196e0:	6033      	str	r3, [r6, #0]
 80196e2:	6823      	ldr	r3, [r4, #0]
 80196e4:	0699      	lsls	r1, r3, #26
 80196e6:	bf42      	ittt	mi
 80196e8:	6833      	ldrmi	r3, [r6, #0]
 80196ea:	3302      	addmi	r3, #2
 80196ec:	6033      	strmi	r3, [r6, #0]
 80196ee:	6825      	ldr	r5, [r4, #0]
 80196f0:	f015 0506 	ands.w	r5, r5, #6
 80196f4:	d106      	bne.n	8019704 <_printf_common+0x48>
 80196f6:	f104 0a19 	add.w	sl, r4, #25
 80196fa:	68e3      	ldr	r3, [r4, #12]
 80196fc:	6832      	ldr	r2, [r6, #0]
 80196fe:	1a9b      	subs	r3, r3, r2
 8019700:	42ab      	cmp	r3, r5
 8019702:	dc26      	bgt.n	8019752 <_printf_common+0x96>
 8019704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019708:	1e13      	subs	r3, r2, #0
 801970a:	6822      	ldr	r2, [r4, #0]
 801970c:	bf18      	it	ne
 801970e:	2301      	movne	r3, #1
 8019710:	0692      	lsls	r2, r2, #26
 8019712:	d42b      	bmi.n	801976c <_printf_common+0xb0>
 8019714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019718:	4649      	mov	r1, r9
 801971a:	4638      	mov	r0, r7
 801971c:	47c0      	blx	r8
 801971e:	3001      	adds	r0, #1
 8019720:	d01e      	beq.n	8019760 <_printf_common+0xa4>
 8019722:	6823      	ldr	r3, [r4, #0]
 8019724:	6922      	ldr	r2, [r4, #16]
 8019726:	f003 0306 	and.w	r3, r3, #6
 801972a:	2b04      	cmp	r3, #4
 801972c:	bf02      	ittt	eq
 801972e:	68e5      	ldreq	r5, [r4, #12]
 8019730:	6833      	ldreq	r3, [r6, #0]
 8019732:	1aed      	subeq	r5, r5, r3
 8019734:	68a3      	ldr	r3, [r4, #8]
 8019736:	bf0c      	ite	eq
 8019738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801973c:	2500      	movne	r5, #0
 801973e:	4293      	cmp	r3, r2
 8019740:	bfc4      	itt	gt
 8019742:	1a9b      	subgt	r3, r3, r2
 8019744:	18ed      	addgt	r5, r5, r3
 8019746:	2600      	movs	r6, #0
 8019748:	341a      	adds	r4, #26
 801974a:	42b5      	cmp	r5, r6
 801974c:	d11a      	bne.n	8019784 <_printf_common+0xc8>
 801974e:	2000      	movs	r0, #0
 8019750:	e008      	b.n	8019764 <_printf_common+0xa8>
 8019752:	2301      	movs	r3, #1
 8019754:	4652      	mov	r2, sl
 8019756:	4649      	mov	r1, r9
 8019758:	4638      	mov	r0, r7
 801975a:	47c0      	blx	r8
 801975c:	3001      	adds	r0, #1
 801975e:	d103      	bne.n	8019768 <_printf_common+0xac>
 8019760:	f04f 30ff 	mov.w	r0, #4294967295
 8019764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019768:	3501      	adds	r5, #1
 801976a:	e7c6      	b.n	80196fa <_printf_common+0x3e>
 801976c:	18e1      	adds	r1, r4, r3
 801976e:	1c5a      	adds	r2, r3, #1
 8019770:	2030      	movs	r0, #48	; 0x30
 8019772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019776:	4422      	add	r2, r4
 8019778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801977c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019780:	3302      	adds	r3, #2
 8019782:	e7c7      	b.n	8019714 <_printf_common+0x58>
 8019784:	2301      	movs	r3, #1
 8019786:	4622      	mov	r2, r4
 8019788:	4649      	mov	r1, r9
 801978a:	4638      	mov	r0, r7
 801978c:	47c0      	blx	r8
 801978e:	3001      	adds	r0, #1
 8019790:	d0e6      	beq.n	8019760 <_printf_common+0xa4>
 8019792:	3601      	adds	r6, #1
 8019794:	e7d9      	b.n	801974a <_printf_common+0x8e>
	...

08019798 <_printf_i>:
 8019798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801979c:	7e0f      	ldrb	r7, [r1, #24]
 801979e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80197a0:	2f78      	cmp	r7, #120	; 0x78
 80197a2:	4691      	mov	r9, r2
 80197a4:	4680      	mov	r8, r0
 80197a6:	460c      	mov	r4, r1
 80197a8:	469a      	mov	sl, r3
 80197aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80197ae:	d807      	bhi.n	80197c0 <_printf_i+0x28>
 80197b0:	2f62      	cmp	r7, #98	; 0x62
 80197b2:	d80a      	bhi.n	80197ca <_printf_i+0x32>
 80197b4:	2f00      	cmp	r7, #0
 80197b6:	f000 80d4 	beq.w	8019962 <_printf_i+0x1ca>
 80197ba:	2f58      	cmp	r7, #88	; 0x58
 80197bc:	f000 80c0 	beq.w	8019940 <_printf_i+0x1a8>
 80197c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80197c8:	e03a      	b.n	8019840 <_printf_i+0xa8>
 80197ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80197ce:	2b15      	cmp	r3, #21
 80197d0:	d8f6      	bhi.n	80197c0 <_printf_i+0x28>
 80197d2:	a101      	add	r1, pc, #4	; (adr r1, 80197d8 <_printf_i+0x40>)
 80197d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197d8:	08019831 	.word	0x08019831
 80197dc:	08019845 	.word	0x08019845
 80197e0:	080197c1 	.word	0x080197c1
 80197e4:	080197c1 	.word	0x080197c1
 80197e8:	080197c1 	.word	0x080197c1
 80197ec:	080197c1 	.word	0x080197c1
 80197f0:	08019845 	.word	0x08019845
 80197f4:	080197c1 	.word	0x080197c1
 80197f8:	080197c1 	.word	0x080197c1
 80197fc:	080197c1 	.word	0x080197c1
 8019800:	080197c1 	.word	0x080197c1
 8019804:	08019949 	.word	0x08019949
 8019808:	08019871 	.word	0x08019871
 801980c:	08019903 	.word	0x08019903
 8019810:	080197c1 	.word	0x080197c1
 8019814:	080197c1 	.word	0x080197c1
 8019818:	0801996b 	.word	0x0801996b
 801981c:	080197c1 	.word	0x080197c1
 8019820:	08019871 	.word	0x08019871
 8019824:	080197c1 	.word	0x080197c1
 8019828:	080197c1 	.word	0x080197c1
 801982c:	0801990b 	.word	0x0801990b
 8019830:	682b      	ldr	r3, [r5, #0]
 8019832:	1d1a      	adds	r2, r3, #4
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	602a      	str	r2, [r5, #0]
 8019838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801983c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019840:	2301      	movs	r3, #1
 8019842:	e09f      	b.n	8019984 <_printf_i+0x1ec>
 8019844:	6820      	ldr	r0, [r4, #0]
 8019846:	682b      	ldr	r3, [r5, #0]
 8019848:	0607      	lsls	r7, r0, #24
 801984a:	f103 0104 	add.w	r1, r3, #4
 801984e:	6029      	str	r1, [r5, #0]
 8019850:	d501      	bpl.n	8019856 <_printf_i+0xbe>
 8019852:	681e      	ldr	r6, [r3, #0]
 8019854:	e003      	b.n	801985e <_printf_i+0xc6>
 8019856:	0646      	lsls	r6, r0, #25
 8019858:	d5fb      	bpl.n	8019852 <_printf_i+0xba>
 801985a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801985e:	2e00      	cmp	r6, #0
 8019860:	da03      	bge.n	801986a <_printf_i+0xd2>
 8019862:	232d      	movs	r3, #45	; 0x2d
 8019864:	4276      	negs	r6, r6
 8019866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801986a:	485a      	ldr	r0, [pc, #360]	; (80199d4 <_printf_i+0x23c>)
 801986c:	230a      	movs	r3, #10
 801986e:	e012      	b.n	8019896 <_printf_i+0xfe>
 8019870:	682b      	ldr	r3, [r5, #0]
 8019872:	6820      	ldr	r0, [r4, #0]
 8019874:	1d19      	adds	r1, r3, #4
 8019876:	6029      	str	r1, [r5, #0]
 8019878:	0605      	lsls	r5, r0, #24
 801987a:	d501      	bpl.n	8019880 <_printf_i+0xe8>
 801987c:	681e      	ldr	r6, [r3, #0]
 801987e:	e002      	b.n	8019886 <_printf_i+0xee>
 8019880:	0641      	lsls	r1, r0, #25
 8019882:	d5fb      	bpl.n	801987c <_printf_i+0xe4>
 8019884:	881e      	ldrh	r6, [r3, #0]
 8019886:	4853      	ldr	r0, [pc, #332]	; (80199d4 <_printf_i+0x23c>)
 8019888:	2f6f      	cmp	r7, #111	; 0x6f
 801988a:	bf0c      	ite	eq
 801988c:	2308      	moveq	r3, #8
 801988e:	230a      	movne	r3, #10
 8019890:	2100      	movs	r1, #0
 8019892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019896:	6865      	ldr	r5, [r4, #4]
 8019898:	60a5      	str	r5, [r4, #8]
 801989a:	2d00      	cmp	r5, #0
 801989c:	bfa2      	ittt	ge
 801989e:	6821      	ldrge	r1, [r4, #0]
 80198a0:	f021 0104 	bicge.w	r1, r1, #4
 80198a4:	6021      	strge	r1, [r4, #0]
 80198a6:	b90e      	cbnz	r6, 80198ac <_printf_i+0x114>
 80198a8:	2d00      	cmp	r5, #0
 80198aa:	d04b      	beq.n	8019944 <_printf_i+0x1ac>
 80198ac:	4615      	mov	r5, r2
 80198ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80198b2:	fb03 6711 	mls	r7, r3, r1, r6
 80198b6:	5dc7      	ldrb	r7, [r0, r7]
 80198b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80198bc:	4637      	mov	r7, r6
 80198be:	42bb      	cmp	r3, r7
 80198c0:	460e      	mov	r6, r1
 80198c2:	d9f4      	bls.n	80198ae <_printf_i+0x116>
 80198c4:	2b08      	cmp	r3, #8
 80198c6:	d10b      	bne.n	80198e0 <_printf_i+0x148>
 80198c8:	6823      	ldr	r3, [r4, #0]
 80198ca:	07de      	lsls	r6, r3, #31
 80198cc:	d508      	bpl.n	80198e0 <_printf_i+0x148>
 80198ce:	6923      	ldr	r3, [r4, #16]
 80198d0:	6861      	ldr	r1, [r4, #4]
 80198d2:	4299      	cmp	r1, r3
 80198d4:	bfde      	ittt	le
 80198d6:	2330      	movle	r3, #48	; 0x30
 80198d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80198e0:	1b52      	subs	r2, r2, r5
 80198e2:	6122      	str	r2, [r4, #16]
 80198e4:	f8cd a000 	str.w	sl, [sp]
 80198e8:	464b      	mov	r3, r9
 80198ea:	aa03      	add	r2, sp, #12
 80198ec:	4621      	mov	r1, r4
 80198ee:	4640      	mov	r0, r8
 80198f0:	f7ff fee4 	bl	80196bc <_printf_common>
 80198f4:	3001      	adds	r0, #1
 80198f6:	d14a      	bne.n	801998e <_printf_i+0x1f6>
 80198f8:	f04f 30ff 	mov.w	r0, #4294967295
 80198fc:	b004      	add	sp, #16
 80198fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	f043 0320 	orr.w	r3, r3, #32
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	4833      	ldr	r0, [pc, #204]	; (80199d8 <_printf_i+0x240>)
 801990c:	2778      	movs	r7, #120	; 0x78
 801990e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	6829      	ldr	r1, [r5, #0]
 8019916:	061f      	lsls	r7, r3, #24
 8019918:	f851 6b04 	ldr.w	r6, [r1], #4
 801991c:	d402      	bmi.n	8019924 <_printf_i+0x18c>
 801991e:	065f      	lsls	r7, r3, #25
 8019920:	bf48      	it	mi
 8019922:	b2b6      	uxthmi	r6, r6
 8019924:	07df      	lsls	r7, r3, #31
 8019926:	bf48      	it	mi
 8019928:	f043 0320 	orrmi.w	r3, r3, #32
 801992c:	6029      	str	r1, [r5, #0]
 801992e:	bf48      	it	mi
 8019930:	6023      	strmi	r3, [r4, #0]
 8019932:	b91e      	cbnz	r6, 801993c <_printf_i+0x1a4>
 8019934:	6823      	ldr	r3, [r4, #0]
 8019936:	f023 0320 	bic.w	r3, r3, #32
 801993a:	6023      	str	r3, [r4, #0]
 801993c:	2310      	movs	r3, #16
 801993e:	e7a7      	b.n	8019890 <_printf_i+0xf8>
 8019940:	4824      	ldr	r0, [pc, #144]	; (80199d4 <_printf_i+0x23c>)
 8019942:	e7e4      	b.n	801990e <_printf_i+0x176>
 8019944:	4615      	mov	r5, r2
 8019946:	e7bd      	b.n	80198c4 <_printf_i+0x12c>
 8019948:	682b      	ldr	r3, [r5, #0]
 801994a:	6826      	ldr	r6, [r4, #0]
 801994c:	6961      	ldr	r1, [r4, #20]
 801994e:	1d18      	adds	r0, r3, #4
 8019950:	6028      	str	r0, [r5, #0]
 8019952:	0635      	lsls	r5, r6, #24
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	d501      	bpl.n	801995c <_printf_i+0x1c4>
 8019958:	6019      	str	r1, [r3, #0]
 801995a:	e002      	b.n	8019962 <_printf_i+0x1ca>
 801995c:	0670      	lsls	r0, r6, #25
 801995e:	d5fb      	bpl.n	8019958 <_printf_i+0x1c0>
 8019960:	8019      	strh	r1, [r3, #0]
 8019962:	2300      	movs	r3, #0
 8019964:	6123      	str	r3, [r4, #16]
 8019966:	4615      	mov	r5, r2
 8019968:	e7bc      	b.n	80198e4 <_printf_i+0x14c>
 801996a:	682b      	ldr	r3, [r5, #0]
 801996c:	1d1a      	adds	r2, r3, #4
 801996e:	602a      	str	r2, [r5, #0]
 8019970:	681d      	ldr	r5, [r3, #0]
 8019972:	6862      	ldr	r2, [r4, #4]
 8019974:	2100      	movs	r1, #0
 8019976:	4628      	mov	r0, r5
 8019978:	f7e6 fc52 	bl	8000220 <memchr>
 801997c:	b108      	cbz	r0, 8019982 <_printf_i+0x1ea>
 801997e:	1b40      	subs	r0, r0, r5
 8019980:	6060      	str	r0, [r4, #4]
 8019982:	6863      	ldr	r3, [r4, #4]
 8019984:	6123      	str	r3, [r4, #16]
 8019986:	2300      	movs	r3, #0
 8019988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801998c:	e7aa      	b.n	80198e4 <_printf_i+0x14c>
 801998e:	6923      	ldr	r3, [r4, #16]
 8019990:	462a      	mov	r2, r5
 8019992:	4649      	mov	r1, r9
 8019994:	4640      	mov	r0, r8
 8019996:	47d0      	blx	sl
 8019998:	3001      	adds	r0, #1
 801999a:	d0ad      	beq.n	80198f8 <_printf_i+0x160>
 801999c:	6823      	ldr	r3, [r4, #0]
 801999e:	079b      	lsls	r3, r3, #30
 80199a0:	d413      	bmi.n	80199ca <_printf_i+0x232>
 80199a2:	68e0      	ldr	r0, [r4, #12]
 80199a4:	9b03      	ldr	r3, [sp, #12]
 80199a6:	4298      	cmp	r0, r3
 80199a8:	bfb8      	it	lt
 80199aa:	4618      	movlt	r0, r3
 80199ac:	e7a6      	b.n	80198fc <_printf_i+0x164>
 80199ae:	2301      	movs	r3, #1
 80199b0:	4632      	mov	r2, r6
 80199b2:	4649      	mov	r1, r9
 80199b4:	4640      	mov	r0, r8
 80199b6:	47d0      	blx	sl
 80199b8:	3001      	adds	r0, #1
 80199ba:	d09d      	beq.n	80198f8 <_printf_i+0x160>
 80199bc:	3501      	adds	r5, #1
 80199be:	68e3      	ldr	r3, [r4, #12]
 80199c0:	9903      	ldr	r1, [sp, #12]
 80199c2:	1a5b      	subs	r3, r3, r1
 80199c4:	42ab      	cmp	r3, r5
 80199c6:	dcf2      	bgt.n	80199ae <_printf_i+0x216>
 80199c8:	e7eb      	b.n	80199a2 <_printf_i+0x20a>
 80199ca:	2500      	movs	r5, #0
 80199cc:	f104 0619 	add.w	r6, r4, #25
 80199d0:	e7f5      	b.n	80199be <_printf_i+0x226>
 80199d2:	bf00      	nop
 80199d4:	08027fdb 	.word	0x08027fdb
 80199d8:	08027fec 	.word	0x08027fec

080199dc <__sflush_r>:
 80199dc:	898a      	ldrh	r2, [r1, #12]
 80199de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199e2:	4605      	mov	r5, r0
 80199e4:	0710      	lsls	r0, r2, #28
 80199e6:	460c      	mov	r4, r1
 80199e8:	d458      	bmi.n	8019a9c <__sflush_r+0xc0>
 80199ea:	684b      	ldr	r3, [r1, #4]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	dc05      	bgt.n	80199fc <__sflush_r+0x20>
 80199f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	dc02      	bgt.n	80199fc <__sflush_r+0x20>
 80199f6:	2000      	movs	r0, #0
 80199f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199fe:	2e00      	cmp	r6, #0
 8019a00:	d0f9      	beq.n	80199f6 <__sflush_r+0x1a>
 8019a02:	2300      	movs	r3, #0
 8019a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a08:	682f      	ldr	r7, [r5, #0]
 8019a0a:	6a21      	ldr	r1, [r4, #32]
 8019a0c:	602b      	str	r3, [r5, #0]
 8019a0e:	d032      	beq.n	8019a76 <__sflush_r+0x9a>
 8019a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a12:	89a3      	ldrh	r3, [r4, #12]
 8019a14:	075a      	lsls	r2, r3, #29
 8019a16:	d505      	bpl.n	8019a24 <__sflush_r+0x48>
 8019a18:	6863      	ldr	r3, [r4, #4]
 8019a1a:	1ac0      	subs	r0, r0, r3
 8019a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a1e:	b10b      	cbz	r3, 8019a24 <__sflush_r+0x48>
 8019a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a22:	1ac0      	subs	r0, r0, r3
 8019a24:	2300      	movs	r3, #0
 8019a26:	4602      	mov	r2, r0
 8019a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a2a:	6a21      	ldr	r1, [r4, #32]
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	47b0      	blx	r6
 8019a30:	1c43      	adds	r3, r0, #1
 8019a32:	89a3      	ldrh	r3, [r4, #12]
 8019a34:	d106      	bne.n	8019a44 <__sflush_r+0x68>
 8019a36:	6829      	ldr	r1, [r5, #0]
 8019a38:	291d      	cmp	r1, #29
 8019a3a:	d82b      	bhi.n	8019a94 <__sflush_r+0xb8>
 8019a3c:	4a29      	ldr	r2, [pc, #164]	; (8019ae4 <__sflush_r+0x108>)
 8019a3e:	410a      	asrs	r2, r1
 8019a40:	07d6      	lsls	r6, r2, #31
 8019a42:	d427      	bmi.n	8019a94 <__sflush_r+0xb8>
 8019a44:	2200      	movs	r2, #0
 8019a46:	6062      	str	r2, [r4, #4]
 8019a48:	04d9      	lsls	r1, r3, #19
 8019a4a:	6922      	ldr	r2, [r4, #16]
 8019a4c:	6022      	str	r2, [r4, #0]
 8019a4e:	d504      	bpl.n	8019a5a <__sflush_r+0x7e>
 8019a50:	1c42      	adds	r2, r0, #1
 8019a52:	d101      	bne.n	8019a58 <__sflush_r+0x7c>
 8019a54:	682b      	ldr	r3, [r5, #0]
 8019a56:	b903      	cbnz	r3, 8019a5a <__sflush_r+0x7e>
 8019a58:	6560      	str	r0, [r4, #84]	; 0x54
 8019a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a5c:	602f      	str	r7, [r5, #0]
 8019a5e:	2900      	cmp	r1, #0
 8019a60:	d0c9      	beq.n	80199f6 <__sflush_r+0x1a>
 8019a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a66:	4299      	cmp	r1, r3
 8019a68:	d002      	beq.n	8019a70 <__sflush_r+0x94>
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	f7ff fa8a 	bl	8018f84 <_free_r>
 8019a70:	2000      	movs	r0, #0
 8019a72:	6360      	str	r0, [r4, #52]	; 0x34
 8019a74:	e7c0      	b.n	80199f8 <__sflush_r+0x1c>
 8019a76:	2301      	movs	r3, #1
 8019a78:	4628      	mov	r0, r5
 8019a7a:	47b0      	blx	r6
 8019a7c:	1c41      	adds	r1, r0, #1
 8019a7e:	d1c8      	bne.n	8019a12 <__sflush_r+0x36>
 8019a80:	682b      	ldr	r3, [r5, #0]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d0c5      	beq.n	8019a12 <__sflush_r+0x36>
 8019a86:	2b1d      	cmp	r3, #29
 8019a88:	d001      	beq.n	8019a8e <__sflush_r+0xb2>
 8019a8a:	2b16      	cmp	r3, #22
 8019a8c:	d101      	bne.n	8019a92 <__sflush_r+0xb6>
 8019a8e:	602f      	str	r7, [r5, #0]
 8019a90:	e7b1      	b.n	80199f6 <__sflush_r+0x1a>
 8019a92:	89a3      	ldrh	r3, [r4, #12]
 8019a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a98:	81a3      	strh	r3, [r4, #12]
 8019a9a:	e7ad      	b.n	80199f8 <__sflush_r+0x1c>
 8019a9c:	690f      	ldr	r7, [r1, #16]
 8019a9e:	2f00      	cmp	r7, #0
 8019aa0:	d0a9      	beq.n	80199f6 <__sflush_r+0x1a>
 8019aa2:	0793      	lsls	r3, r2, #30
 8019aa4:	680e      	ldr	r6, [r1, #0]
 8019aa6:	bf08      	it	eq
 8019aa8:	694b      	ldreq	r3, [r1, #20]
 8019aaa:	600f      	str	r7, [r1, #0]
 8019aac:	bf18      	it	ne
 8019aae:	2300      	movne	r3, #0
 8019ab0:	eba6 0807 	sub.w	r8, r6, r7
 8019ab4:	608b      	str	r3, [r1, #8]
 8019ab6:	f1b8 0f00 	cmp.w	r8, #0
 8019aba:	dd9c      	ble.n	80199f6 <__sflush_r+0x1a>
 8019abc:	6a21      	ldr	r1, [r4, #32]
 8019abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019ac0:	4643      	mov	r3, r8
 8019ac2:	463a      	mov	r2, r7
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	47b0      	blx	r6
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	dc06      	bgt.n	8019ada <__sflush_r+0xfe>
 8019acc:	89a3      	ldrh	r3, [r4, #12]
 8019ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ad2:	81a3      	strh	r3, [r4, #12]
 8019ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad8:	e78e      	b.n	80199f8 <__sflush_r+0x1c>
 8019ada:	4407      	add	r7, r0
 8019adc:	eba8 0800 	sub.w	r8, r8, r0
 8019ae0:	e7e9      	b.n	8019ab6 <__sflush_r+0xda>
 8019ae2:	bf00      	nop
 8019ae4:	dfbffffe 	.word	0xdfbffffe

08019ae8 <_fflush_r>:
 8019ae8:	b538      	push	{r3, r4, r5, lr}
 8019aea:	690b      	ldr	r3, [r1, #16]
 8019aec:	4605      	mov	r5, r0
 8019aee:	460c      	mov	r4, r1
 8019af0:	b913      	cbnz	r3, 8019af8 <_fflush_r+0x10>
 8019af2:	2500      	movs	r5, #0
 8019af4:	4628      	mov	r0, r5
 8019af6:	bd38      	pop	{r3, r4, r5, pc}
 8019af8:	b118      	cbz	r0, 8019b02 <_fflush_r+0x1a>
 8019afa:	6a03      	ldr	r3, [r0, #32]
 8019afc:	b90b      	cbnz	r3, 8019b02 <_fflush_r+0x1a>
 8019afe:	f7fe ffdf 	bl	8018ac0 <__sinit>
 8019b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d0f3      	beq.n	8019af2 <_fflush_r+0xa>
 8019b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b0c:	07d0      	lsls	r0, r2, #31
 8019b0e:	d404      	bmi.n	8019b1a <_fflush_r+0x32>
 8019b10:	0599      	lsls	r1, r3, #22
 8019b12:	d402      	bmi.n	8019b1a <_fflush_r+0x32>
 8019b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b16:	f7ff fa07 	bl	8018f28 <__retarget_lock_acquire_recursive>
 8019b1a:	4628      	mov	r0, r5
 8019b1c:	4621      	mov	r1, r4
 8019b1e:	f7ff ff5d 	bl	80199dc <__sflush_r>
 8019b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b24:	07da      	lsls	r2, r3, #31
 8019b26:	4605      	mov	r5, r0
 8019b28:	d4e4      	bmi.n	8019af4 <_fflush_r+0xc>
 8019b2a:	89a3      	ldrh	r3, [r4, #12]
 8019b2c:	059b      	lsls	r3, r3, #22
 8019b2e:	d4e1      	bmi.n	8019af4 <_fflush_r+0xc>
 8019b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b32:	f7ff f9fa 	bl	8018f2a <__retarget_lock_release_recursive>
 8019b36:	e7dd      	b.n	8019af4 <_fflush_r+0xc>

08019b38 <fiprintf>:
 8019b38:	b40e      	push	{r1, r2, r3}
 8019b3a:	b503      	push	{r0, r1, lr}
 8019b3c:	4601      	mov	r1, r0
 8019b3e:	ab03      	add	r3, sp, #12
 8019b40:	4805      	ldr	r0, [pc, #20]	; (8019b58 <fiprintf+0x20>)
 8019b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b46:	6800      	ldr	r0, [r0, #0]
 8019b48:	9301      	str	r3, [sp, #4]
 8019b4a:	f7ff fc9d 	bl	8019488 <_vfiprintf_r>
 8019b4e:	b002      	add	sp, #8
 8019b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b54:	b003      	add	sp, #12
 8019b56:	4770      	bx	lr
 8019b58:	2000008c 	.word	0x2000008c

08019b5c <__swbuf_r>:
 8019b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b5e:	460e      	mov	r6, r1
 8019b60:	4614      	mov	r4, r2
 8019b62:	4605      	mov	r5, r0
 8019b64:	b118      	cbz	r0, 8019b6e <__swbuf_r+0x12>
 8019b66:	6a03      	ldr	r3, [r0, #32]
 8019b68:	b90b      	cbnz	r3, 8019b6e <__swbuf_r+0x12>
 8019b6a:	f7fe ffa9 	bl	8018ac0 <__sinit>
 8019b6e:	69a3      	ldr	r3, [r4, #24]
 8019b70:	60a3      	str	r3, [r4, #8]
 8019b72:	89a3      	ldrh	r3, [r4, #12]
 8019b74:	071a      	lsls	r2, r3, #28
 8019b76:	d525      	bpl.n	8019bc4 <__swbuf_r+0x68>
 8019b78:	6923      	ldr	r3, [r4, #16]
 8019b7a:	b31b      	cbz	r3, 8019bc4 <__swbuf_r+0x68>
 8019b7c:	6823      	ldr	r3, [r4, #0]
 8019b7e:	6922      	ldr	r2, [r4, #16]
 8019b80:	1a98      	subs	r0, r3, r2
 8019b82:	6963      	ldr	r3, [r4, #20]
 8019b84:	b2f6      	uxtb	r6, r6
 8019b86:	4283      	cmp	r3, r0
 8019b88:	4637      	mov	r7, r6
 8019b8a:	dc04      	bgt.n	8019b96 <__swbuf_r+0x3a>
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	4628      	mov	r0, r5
 8019b90:	f7ff ffaa 	bl	8019ae8 <_fflush_r>
 8019b94:	b9e0      	cbnz	r0, 8019bd0 <__swbuf_r+0x74>
 8019b96:	68a3      	ldr	r3, [r4, #8]
 8019b98:	3b01      	subs	r3, #1
 8019b9a:	60a3      	str	r3, [r4, #8]
 8019b9c:	6823      	ldr	r3, [r4, #0]
 8019b9e:	1c5a      	adds	r2, r3, #1
 8019ba0:	6022      	str	r2, [r4, #0]
 8019ba2:	701e      	strb	r6, [r3, #0]
 8019ba4:	6962      	ldr	r2, [r4, #20]
 8019ba6:	1c43      	adds	r3, r0, #1
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d004      	beq.n	8019bb6 <__swbuf_r+0x5a>
 8019bac:	89a3      	ldrh	r3, [r4, #12]
 8019bae:	07db      	lsls	r3, r3, #31
 8019bb0:	d506      	bpl.n	8019bc0 <__swbuf_r+0x64>
 8019bb2:	2e0a      	cmp	r6, #10
 8019bb4:	d104      	bne.n	8019bc0 <__swbuf_r+0x64>
 8019bb6:	4621      	mov	r1, r4
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f7ff ff95 	bl	8019ae8 <_fflush_r>
 8019bbe:	b938      	cbnz	r0, 8019bd0 <__swbuf_r+0x74>
 8019bc0:	4638      	mov	r0, r7
 8019bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bc4:	4621      	mov	r1, r4
 8019bc6:	4628      	mov	r0, r5
 8019bc8:	f000 f806 	bl	8019bd8 <__swsetup_r>
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d0d5      	beq.n	8019b7c <__swbuf_r+0x20>
 8019bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8019bd4:	e7f4      	b.n	8019bc0 <__swbuf_r+0x64>
	...

08019bd8 <__swsetup_r>:
 8019bd8:	b538      	push	{r3, r4, r5, lr}
 8019bda:	4b2a      	ldr	r3, [pc, #168]	; (8019c84 <__swsetup_r+0xac>)
 8019bdc:	4605      	mov	r5, r0
 8019bde:	6818      	ldr	r0, [r3, #0]
 8019be0:	460c      	mov	r4, r1
 8019be2:	b118      	cbz	r0, 8019bec <__swsetup_r+0x14>
 8019be4:	6a03      	ldr	r3, [r0, #32]
 8019be6:	b90b      	cbnz	r3, 8019bec <__swsetup_r+0x14>
 8019be8:	f7fe ff6a 	bl	8018ac0 <__sinit>
 8019bec:	89a3      	ldrh	r3, [r4, #12]
 8019bee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bf2:	0718      	lsls	r0, r3, #28
 8019bf4:	d422      	bmi.n	8019c3c <__swsetup_r+0x64>
 8019bf6:	06d9      	lsls	r1, r3, #27
 8019bf8:	d407      	bmi.n	8019c0a <__swsetup_r+0x32>
 8019bfa:	2309      	movs	r3, #9
 8019bfc:	602b      	str	r3, [r5, #0]
 8019bfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c02:	81a3      	strh	r3, [r4, #12]
 8019c04:	f04f 30ff 	mov.w	r0, #4294967295
 8019c08:	e034      	b.n	8019c74 <__swsetup_r+0x9c>
 8019c0a:	0758      	lsls	r0, r3, #29
 8019c0c:	d512      	bpl.n	8019c34 <__swsetup_r+0x5c>
 8019c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c10:	b141      	cbz	r1, 8019c24 <__swsetup_r+0x4c>
 8019c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c16:	4299      	cmp	r1, r3
 8019c18:	d002      	beq.n	8019c20 <__swsetup_r+0x48>
 8019c1a:	4628      	mov	r0, r5
 8019c1c:	f7ff f9b2 	bl	8018f84 <_free_r>
 8019c20:	2300      	movs	r3, #0
 8019c22:	6363      	str	r3, [r4, #52]	; 0x34
 8019c24:	89a3      	ldrh	r3, [r4, #12]
 8019c26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019c2a:	81a3      	strh	r3, [r4, #12]
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	6063      	str	r3, [r4, #4]
 8019c30:	6923      	ldr	r3, [r4, #16]
 8019c32:	6023      	str	r3, [r4, #0]
 8019c34:	89a3      	ldrh	r3, [r4, #12]
 8019c36:	f043 0308 	orr.w	r3, r3, #8
 8019c3a:	81a3      	strh	r3, [r4, #12]
 8019c3c:	6923      	ldr	r3, [r4, #16]
 8019c3e:	b94b      	cbnz	r3, 8019c54 <__swsetup_r+0x7c>
 8019c40:	89a3      	ldrh	r3, [r4, #12]
 8019c42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019c4a:	d003      	beq.n	8019c54 <__swsetup_r+0x7c>
 8019c4c:	4621      	mov	r1, r4
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f000 f886 	bl	8019d60 <__smakebuf_r>
 8019c54:	89a0      	ldrh	r0, [r4, #12]
 8019c56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c5a:	f010 0301 	ands.w	r3, r0, #1
 8019c5e:	d00a      	beq.n	8019c76 <__swsetup_r+0x9e>
 8019c60:	2300      	movs	r3, #0
 8019c62:	60a3      	str	r3, [r4, #8]
 8019c64:	6963      	ldr	r3, [r4, #20]
 8019c66:	425b      	negs	r3, r3
 8019c68:	61a3      	str	r3, [r4, #24]
 8019c6a:	6923      	ldr	r3, [r4, #16]
 8019c6c:	b943      	cbnz	r3, 8019c80 <__swsetup_r+0xa8>
 8019c6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019c72:	d1c4      	bne.n	8019bfe <__swsetup_r+0x26>
 8019c74:	bd38      	pop	{r3, r4, r5, pc}
 8019c76:	0781      	lsls	r1, r0, #30
 8019c78:	bf58      	it	pl
 8019c7a:	6963      	ldrpl	r3, [r4, #20]
 8019c7c:	60a3      	str	r3, [r4, #8]
 8019c7e:	e7f4      	b.n	8019c6a <__swsetup_r+0x92>
 8019c80:	2000      	movs	r0, #0
 8019c82:	e7f7      	b.n	8019c74 <__swsetup_r+0x9c>
 8019c84:	2000008c 	.word	0x2000008c

08019c88 <_sbrk_r>:
 8019c88:	b538      	push	{r3, r4, r5, lr}
 8019c8a:	4d06      	ldr	r5, [pc, #24]	; (8019ca4 <_sbrk_r+0x1c>)
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	4604      	mov	r4, r0
 8019c90:	4608      	mov	r0, r1
 8019c92:	602b      	str	r3, [r5, #0]
 8019c94:	f7e7 f806 	bl	8000ca4 <_sbrk>
 8019c98:	1c43      	adds	r3, r0, #1
 8019c9a:	d102      	bne.n	8019ca2 <_sbrk_r+0x1a>
 8019c9c:	682b      	ldr	r3, [r5, #0]
 8019c9e:	b103      	cbz	r3, 8019ca2 <_sbrk_r+0x1a>
 8019ca0:	6023      	str	r3, [r4, #0]
 8019ca2:	bd38      	pop	{r3, r4, r5, pc}
 8019ca4:	20011470 	.word	0x20011470

08019ca8 <abort>:
 8019ca8:	b508      	push	{r3, lr}
 8019caa:	2006      	movs	r0, #6
 8019cac:	f000 f8bc 	bl	8019e28 <raise>
 8019cb0:	2001      	movs	r0, #1
 8019cb2:	f7e6 ff7f 	bl	8000bb4 <_exit>

08019cb6 <_realloc_r>:
 8019cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cba:	4680      	mov	r8, r0
 8019cbc:	4614      	mov	r4, r2
 8019cbe:	460e      	mov	r6, r1
 8019cc0:	b921      	cbnz	r1, 8019ccc <_realloc_r+0x16>
 8019cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019cc6:	4611      	mov	r1, r2
 8019cc8:	f7ff b9d0 	b.w	801906c <_malloc_r>
 8019ccc:	b92a      	cbnz	r2, 8019cda <_realloc_r+0x24>
 8019cce:	f7ff f959 	bl	8018f84 <_free_r>
 8019cd2:	4625      	mov	r5, r4
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cda:	f000 f8e3 	bl	8019ea4 <_malloc_usable_size_r>
 8019cde:	4284      	cmp	r4, r0
 8019ce0:	4607      	mov	r7, r0
 8019ce2:	d802      	bhi.n	8019cea <_realloc_r+0x34>
 8019ce4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019ce8:	d812      	bhi.n	8019d10 <_realloc_r+0x5a>
 8019cea:	4621      	mov	r1, r4
 8019cec:	4640      	mov	r0, r8
 8019cee:	f7ff f9bd 	bl	801906c <_malloc_r>
 8019cf2:	4605      	mov	r5, r0
 8019cf4:	2800      	cmp	r0, #0
 8019cf6:	d0ed      	beq.n	8019cd4 <_realloc_r+0x1e>
 8019cf8:	42bc      	cmp	r4, r7
 8019cfa:	4622      	mov	r2, r4
 8019cfc:	4631      	mov	r1, r6
 8019cfe:	bf28      	it	cs
 8019d00:	463a      	movcs	r2, r7
 8019d02:	f7ff f913 	bl	8018f2c <memcpy>
 8019d06:	4631      	mov	r1, r6
 8019d08:	4640      	mov	r0, r8
 8019d0a:	f7ff f93b 	bl	8018f84 <_free_r>
 8019d0e:	e7e1      	b.n	8019cd4 <_realloc_r+0x1e>
 8019d10:	4635      	mov	r5, r6
 8019d12:	e7df      	b.n	8019cd4 <_realloc_r+0x1e>

08019d14 <__swhatbuf_r>:
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	460c      	mov	r4, r1
 8019d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d1c:	2900      	cmp	r1, #0
 8019d1e:	b096      	sub	sp, #88	; 0x58
 8019d20:	4615      	mov	r5, r2
 8019d22:	461e      	mov	r6, r3
 8019d24:	da0d      	bge.n	8019d42 <__swhatbuf_r+0x2e>
 8019d26:	89a3      	ldrh	r3, [r4, #12]
 8019d28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019d2c:	f04f 0100 	mov.w	r1, #0
 8019d30:	bf0c      	ite	eq
 8019d32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019d36:	2340      	movne	r3, #64	; 0x40
 8019d38:	2000      	movs	r0, #0
 8019d3a:	6031      	str	r1, [r6, #0]
 8019d3c:	602b      	str	r3, [r5, #0]
 8019d3e:	b016      	add	sp, #88	; 0x58
 8019d40:	bd70      	pop	{r4, r5, r6, pc}
 8019d42:	466a      	mov	r2, sp
 8019d44:	f000 f878 	bl	8019e38 <_fstat_r>
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	dbec      	blt.n	8019d26 <__swhatbuf_r+0x12>
 8019d4c:	9901      	ldr	r1, [sp, #4]
 8019d4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019d52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019d56:	4259      	negs	r1, r3
 8019d58:	4159      	adcs	r1, r3
 8019d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d5e:	e7eb      	b.n	8019d38 <__swhatbuf_r+0x24>

08019d60 <__smakebuf_r>:
 8019d60:	898b      	ldrh	r3, [r1, #12]
 8019d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d64:	079d      	lsls	r5, r3, #30
 8019d66:	4606      	mov	r6, r0
 8019d68:	460c      	mov	r4, r1
 8019d6a:	d507      	bpl.n	8019d7c <__smakebuf_r+0x1c>
 8019d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019d70:	6023      	str	r3, [r4, #0]
 8019d72:	6123      	str	r3, [r4, #16]
 8019d74:	2301      	movs	r3, #1
 8019d76:	6163      	str	r3, [r4, #20]
 8019d78:	b002      	add	sp, #8
 8019d7a:	bd70      	pop	{r4, r5, r6, pc}
 8019d7c:	ab01      	add	r3, sp, #4
 8019d7e:	466a      	mov	r2, sp
 8019d80:	f7ff ffc8 	bl	8019d14 <__swhatbuf_r>
 8019d84:	9900      	ldr	r1, [sp, #0]
 8019d86:	4605      	mov	r5, r0
 8019d88:	4630      	mov	r0, r6
 8019d8a:	f7ff f96f 	bl	801906c <_malloc_r>
 8019d8e:	b948      	cbnz	r0, 8019da4 <__smakebuf_r+0x44>
 8019d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d94:	059a      	lsls	r2, r3, #22
 8019d96:	d4ef      	bmi.n	8019d78 <__smakebuf_r+0x18>
 8019d98:	f023 0303 	bic.w	r3, r3, #3
 8019d9c:	f043 0302 	orr.w	r3, r3, #2
 8019da0:	81a3      	strh	r3, [r4, #12]
 8019da2:	e7e3      	b.n	8019d6c <__smakebuf_r+0xc>
 8019da4:	89a3      	ldrh	r3, [r4, #12]
 8019da6:	6020      	str	r0, [r4, #0]
 8019da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dac:	81a3      	strh	r3, [r4, #12]
 8019dae:	9b00      	ldr	r3, [sp, #0]
 8019db0:	6163      	str	r3, [r4, #20]
 8019db2:	9b01      	ldr	r3, [sp, #4]
 8019db4:	6120      	str	r0, [r4, #16]
 8019db6:	b15b      	cbz	r3, 8019dd0 <__smakebuf_r+0x70>
 8019db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019dbc:	4630      	mov	r0, r6
 8019dbe:	f000 f84d 	bl	8019e5c <_isatty_r>
 8019dc2:	b128      	cbz	r0, 8019dd0 <__smakebuf_r+0x70>
 8019dc4:	89a3      	ldrh	r3, [r4, #12]
 8019dc6:	f023 0303 	bic.w	r3, r3, #3
 8019dca:	f043 0301 	orr.w	r3, r3, #1
 8019dce:	81a3      	strh	r3, [r4, #12]
 8019dd0:	89a3      	ldrh	r3, [r4, #12]
 8019dd2:	431d      	orrs	r5, r3
 8019dd4:	81a5      	strh	r5, [r4, #12]
 8019dd6:	e7cf      	b.n	8019d78 <__smakebuf_r+0x18>

08019dd8 <_raise_r>:
 8019dd8:	291f      	cmp	r1, #31
 8019dda:	b538      	push	{r3, r4, r5, lr}
 8019ddc:	4604      	mov	r4, r0
 8019dde:	460d      	mov	r5, r1
 8019de0:	d904      	bls.n	8019dec <_raise_r+0x14>
 8019de2:	2316      	movs	r3, #22
 8019de4:	6003      	str	r3, [r0, #0]
 8019de6:	f04f 30ff 	mov.w	r0, #4294967295
 8019dea:	bd38      	pop	{r3, r4, r5, pc}
 8019dec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019dee:	b112      	cbz	r2, 8019df6 <_raise_r+0x1e>
 8019df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019df4:	b94b      	cbnz	r3, 8019e0a <_raise_r+0x32>
 8019df6:	4620      	mov	r0, r4
 8019df8:	f000 f852 	bl	8019ea0 <_getpid_r>
 8019dfc:	462a      	mov	r2, r5
 8019dfe:	4601      	mov	r1, r0
 8019e00:	4620      	mov	r0, r4
 8019e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e06:	f000 b839 	b.w	8019e7c <_kill_r>
 8019e0a:	2b01      	cmp	r3, #1
 8019e0c:	d00a      	beq.n	8019e24 <_raise_r+0x4c>
 8019e0e:	1c59      	adds	r1, r3, #1
 8019e10:	d103      	bne.n	8019e1a <_raise_r+0x42>
 8019e12:	2316      	movs	r3, #22
 8019e14:	6003      	str	r3, [r0, #0]
 8019e16:	2001      	movs	r0, #1
 8019e18:	e7e7      	b.n	8019dea <_raise_r+0x12>
 8019e1a:	2400      	movs	r4, #0
 8019e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e20:	4628      	mov	r0, r5
 8019e22:	4798      	blx	r3
 8019e24:	2000      	movs	r0, #0
 8019e26:	e7e0      	b.n	8019dea <_raise_r+0x12>

08019e28 <raise>:
 8019e28:	4b02      	ldr	r3, [pc, #8]	; (8019e34 <raise+0xc>)
 8019e2a:	4601      	mov	r1, r0
 8019e2c:	6818      	ldr	r0, [r3, #0]
 8019e2e:	f7ff bfd3 	b.w	8019dd8 <_raise_r>
 8019e32:	bf00      	nop
 8019e34:	2000008c 	.word	0x2000008c

08019e38 <_fstat_r>:
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	4d07      	ldr	r5, [pc, #28]	; (8019e58 <_fstat_r+0x20>)
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	4604      	mov	r4, r0
 8019e40:	4608      	mov	r0, r1
 8019e42:	4611      	mov	r1, r2
 8019e44:	602b      	str	r3, [r5, #0]
 8019e46:	f7e6 ff04 	bl	8000c52 <_fstat>
 8019e4a:	1c43      	adds	r3, r0, #1
 8019e4c:	d102      	bne.n	8019e54 <_fstat_r+0x1c>
 8019e4e:	682b      	ldr	r3, [r5, #0]
 8019e50:	b103      	cbz	r3, 8019e54 <_fstat_r+0x1c>
 8019e52:	6023      	str	r3, [r4, #0]
 8019e54:	bd38      	pop	{r3, r4, r5, pc}
 8019e56:	bf00      	nop
 8019e58:	20011470 	.word	0x20011470

08019e5c <_isatty_r>:
 8019e5c:	b538      	push	{r3, r4, r5, lr}
 8019e5e:	4d06      	ldr	r5, [pc, #24]	; (8019e78 <_isatty_r+0x1c>)
 8019e60:	2300      	movs	r3, #0
 8019e62:	4604      	mov	r4, r0
 8019e64:	4608      	mov	r0, r1
 8019e66:	602b      	str	r3, [r5, #0]
 8019e68:	f7e6 ff03 	bl	8000c72 <_isatty>
 8019e6c:	1c43      	adds	r3, r0, #1
 8019e6e:	d102      	bne.n	8019e76 <_isatty_r+0x1a>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	b103      	cbz	r3, 8019e76 <_isatty_r+0x1a>
 8019e74:	6023      	str	r3, [r4, #0]
 8019e76:	bd38      	pop	{r3, r4, r5, pc}
 8019e78:	20011470 	.word	0x20011470

08019e7c <_kill_r>:
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4d07      	ldr	r5, [pc, #28]	; (8019e9c <_kill_r+0x20>)
 8019e80:	2300      	movs	r3, #0
 8019e82:	4604      	mov	r4, r0
 8019e84:	4608      	mov	r0, r1
 8019e86:	4611      	mov	r1, r2
 8019e88:	602b      	str	r3, [r5, #0]
 8019e8a:	f7e6 fe81 	bl	8000b90 <_kill>
 8019e8e:	1c43      	adds	r3, r0, #1
 8019e90:	d102      	bne.n	8019e98 <_kill_r+0x1c>
 8019e92:	682b      	ldr	r3, [r5, #0]
 8019e94:	b103      	cbz	r3, 8019e98 <_kill_r+0x1c>
 8019e96:	6023      	str	r3, [r4, #0]
 8019e98:	bd38      	pop	{r3, r4, r5, pc}
 8019e9a:	bf00      	nop
 8019e9c:	20011470 	.word	0x20011470

08019ea0 <_getpid_r>:
 8019ea0:	f7e6 be6e 	b.w	8000b80 <_getpid>

08019ea4 <_malloc_usable_size_r>:
 8019ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ea8:	1f18      	subs	r0, r3, #4
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	bfbc      	itt	lt
 8019eae:	580b      	ldrlt	r3, [r1, r0]
 8019eb0:	18c0      	addlt	r0, r0, r3
 8019eb2:	4770      	bx	lr

08019eb4 <_init>:
 8019eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eb6:	bf00      	nop
 8019eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eba:	bc08      	pop	{r3}
 8019ebc:	469e      	mov	lr, r3
 8019ebe:	4770      	bx	lr

08019ec0 <_fini>:
 8019ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ec2:	bf00      	nop
 8019ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ec6:	bc08      	pop	{r3}
 8019ec8:	469e      	mov	lr, r3
 8019eca:	4770      	bx	lr
