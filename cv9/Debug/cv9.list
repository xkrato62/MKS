
cv9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08009098  08009098  00019098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d0  080092d0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d8  080092d8  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080092e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000a68  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010515  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bd9  00000000  00000000  000306a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009dd  00000000  00000000  00033f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252a6  00000000  00000000  00034965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001163a  00000000  00000000  00059c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5a1a  00000000  00000000  0006b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003938  00000000  00000000  00140c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00144598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009080 	.word	0x08009080

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08009080 	.word	0x08009080

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <sendMouseCommand>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t buff[4];

void sendMouseCommand(int8_t deltaX, int8_t deltaY)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
  //  uint8_t buff[4];
    buff[0] = 0x01;      // stiskni leve tlacitko
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <sendMouseCommand+0x48>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
    buff[1] = deltaX;    // posun X
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <sendMouseCommand+0x48>)
 8000ea2:	705a      	strb	r2, [r3, #1]
    buff[2] = deltaY;    // posun Y
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <sendMouseCommand+0x48>)
 8000ea8:	709a      	strb	r2, [r3, #2]
    buff[3] = 0;         // bez scrollu
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <sendMouseCommand+0x48>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	70da      	strb	r2, [r3, #3]

    // Poslat report
    USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <sendMouseCommand+0x48>)
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <sendMouseCommand+0x4c>)
 8000eb6:	f005 f84d 	bl	8005f54 <USBD_HID_SendReport>

    // Pošli report a počkej na následující pohyb
    HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <sendMouseCommand+0x4c>)
 8000ebc:	f005 f87a 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fd70 	bl	80019a8 <HAL_Delay>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000017c 	.word	0x2000017c
 8000ed4:	20000188 	.word	0x20000188

08000ed8 <clearer>:

void clearer (void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	//uint8_t buff[4];
	buff[0] = 0x00;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <clearer+0x38>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	buff[1] = (int8_t)(0); // posun X +10
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <clearer+0x38>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
	buff[2] = (int8_t)(0); // posun Y -3
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <clearer+0x38>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	709a      	strb	r2, [r3, #2]
	buff[3] = 0; // bez scrollu
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <clearer+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4906      	ldr	r1, [pc, #24]	; (8000f10 <clearer+0x38>)
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <clearer+0x3c>)
 8000efa:	f005 f82b 	bl	8005f54 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <clearer+0x3c>)
 8000f00:	f005 f858 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fd4e 	bl	80019a8 <HAL_Delay>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000017c 	.word	0x2000017c
 8000f14:	20000188 	.word	0x20000188

08000f18 <eye>:


void eye(void)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
	//uint8_t buff[4];

	buff[0] = 0x01;
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <eye+0x110>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
	buff[1] = (int8_t)(30); // posun X +10
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <eye+0x110>)
 8000f26:	221e      	movs	r2, #30
 8000f28:	705a      	strb	r2, [r3, #1]
	buff[2] = (int8_t)(-40); // posun Y -3
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <eye+0x110>)
 8000f2c:	22d8      	movs	r2, #216	; 0xd8
 8000f2e:	709a      	strb	r2, [r3, #2]
	buff[3] = 0; // bez scrollu
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <eye+0x110>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	70da      	strb	r2, [r3, #3]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000f36:	2204      	movs	r2, #4
 8000f38:	493b      	ldr	r1, [pc, #236]	; (8001028 <eye+0x110>)
 8000f3a:	483c      	ldr	r0, [pc, #240]	; (800102c <eye+0x114>)
 8000f3c:	f005 f80a 	bl	8005f54 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000f40:	483a      	ldr	r0, [pc, #232]	; (800102c <eye+0x114>)
 8000f42:	f005 f837 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fd2d 	bl	80019a8 <HAL_Delay>
	uint8_t num_steps;
	num_steps = 10; // Počet kroků pro aproximaci kruhu
 8000f4e:	230a      	movs	r3, #10
 8000f50:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i < num_steps; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e058      	b.n	800100a <eye+0xf2>
	{
		// Výpočet úhlu pro aktuální krok
		float angle = 2 * PI * i / num_steps;
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fa9b 	bl	8000494 <__aeabi_i2d>
 8000f5e:	a330      	add	r3, pc, #192	; (adr r3, 8001020 <eye+0x108>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb00 	bl	8000568 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	461d      	mov	r5, r3
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa8e 	bl	8000494 <__aeabi_i2d>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f7ff fc1c 	bl	80007bc <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fdae 	bl	8000aec <__aeabi_d2f>
 8000f90:	4603      	mov	r3, r0
 8000f92:	607b      	str	r3, [r7, #4]

		// Výpočet nových souřadnic na kružnici
		int8_t deltaX = (int8_t)(10 * cos(angle)); // Posun X
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fa8f 	bl	80004b8 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ec43 2b10 	vmov	d0, r2, r3
 8000fa2:	f006 ffd9 	bl	8007f58 <cos>
 8000fa6:	ec51 0b10 	vmov	r0, r1, d0
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <eye+0x118>)
 8000fb0:	f7ff fada 	bl	8000568 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fd6e 	bl	8000a9c <__aeabi_d2iz>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	70fb      	strb	r3, [r7, #3]
		int8_t deltaY = (int8_t)(10 * sin(angle)); // Posun Y
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fa77 	bl	80004b8 <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	ec43 2b10 	vmov	d0, r2, r3
 8000fd2:	f007 f815 	bl	8008000 <sin>
 8000fd6:	ec51 0b10 	vmov	r0, r1, d0
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <eye+0x118>)
 8000fe0:	f7ff fac2 	bl	8000568 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fd56 	bl	8000a9c <__aeabi_d2iz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	70bb      	strb	r3, [r7, #2]

		// Poslat příkaz pro pohyb myši na nové souřadnice
		sendMouseCommand(deltaX, deltaY);
 8000ff4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8000ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff42 	bl	8000e88 <sendMouseCommand>
	for (int i = 0; i < num_steps; i++)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dba2      	blt.n	8000f58 <eye+0x40>
	}
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	f3af 8000 	nop.w
 8001020:	54442eea 	.word	0x54442eea
 8001024:	401921fb 	.word	0x401921fb
 8001028:	2000017c 	.word	0x2000017c
 800102c:	20000188 	.word	0x20000188
 8001030:	40240000 	.word	0x40240000
 8001034:	00000000 	.word	0x00000000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b08c      	sub	sp, #48	; 0x30
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 fc40 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f9d2 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f000 fa64 	bl	8001514 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800104c:	f000 fa38 	bl	80014c0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001050:	f006 fb0e 	bl	8007670 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t buff[4];
	  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001058:	4897      	ldr	r0, [pc, #604]	; (80012b8 <main+0x280>)
 800105a:	f000 ff87 	bl	8001f6c <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f7      	beq.n	8001054 <main+0x1c>
	  {
		  // Nakreslit kruh
		  int num_steps = 100; // Počet kroků pro aproximaci kruhu
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	623b      	str	r3, [r7, #32]

              for (int i = 0; i < num_steps; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800106c:	e057      	b.n	800111e <main+0xe6>
              {
                  // Výpočet úhlu pro aktuální krok
                  float angle = 2 * PI * i / num_steps;
 800106e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001070:	f7ff fa10 	bl	8000494 <__aeabi_i2d>
 8001074:	a38e      	add	r3, pc, #568	; (adr r3, 80012b0 <main+0x278>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fa75 	bl	8000568 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4690      	mov	r8, r2
 8001084:	4699      	mov	r9, r3
 8001086:	6a38      	ldr	r0, [r7, #32]
 8001088:	f7ff fa04 	bl	8000494 <__aeabi_i2d>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4640      	mov	r0, r8
 8001092:	4649      	mov	r1, r9
 8001094:	f7ff fb92 	bl	80007bc <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd24 	bl	8000aec <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	60fb      	str	r3, [r7, #12]

                  // Výpočet nových souřadnic na kružnici
                  int8_t deltaX = (int8_t)(10 * cos(angle)); // Posun X
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff fa05 	bl	80004b8 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	ec43 2b10 	vmov	d0, r2, r3
 80010b6:	f006 ff4f 	bl	8007f58 <cos>
 80010ba:	ec51 0b10 	vmov	r0, r1, d0
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b7e      	ldr	r3, [pc, #504]	; (80012bc <main+0x284>)
 80010c4:	f7ff fa50 	bl	8000568 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fce4 	bl	8000a9c <__aeabi_d2iz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	72fb      	strb	r3, [r7, #11]
                  int8_t deltaY = (int8_t)(10 * sin(angle)); // Posun Y
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f7ff f9ed 	bl	80004b8 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ec43 2b10 	vmov	d0, r2, r3
 80010e6:	f006 ff8b 	bl	8008000 <sin>
 80010ea:	ec51 0b10 	vmov	r0, r1, d0
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b72      	ldr	r3, [pc, #456]	; (80012bc <main+0x284>)
 80010f4:	f7ff fa38 	bl	8000568 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fccc 	bl	8000a9c <__aeabi_d2iz>
 8001104:	4603      	mov	r3, r0
 8001106:	72bb      	strb	r3, [r7, #10]

                  // Poslat příkaz pro pohyb myši na nové souřadnice
                  sendMouseCommand(deltaX, deltaY);
 8001108:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800110c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff feb8 	bl	8000e88 <sendMouseCommand>
              for (int i = 0; i < num_steps; i++)
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	3301      	adds	r3, #1
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	429a      	cmp	r2, r3
 8001124:	dba3      	blt.n	800106e <main+0x36>

           }

              clearer();
 8001126:	f7ff fed7 	bl	8000ed8 <clearer>



              buff[0] = 0x01;
 800112a:	2301      	movs	r3, #1
 800112c:	713b      	strb	r3, [r7, #4]
              buff[1] = (int8_t)(0); // posun X +10
 800112e:	2300      	movs	r3, #0
 8001130:	717b      	strb	r3, [r7, #5]
              buff[2] = (int8_t)(50); // posun Y -3
 8001132:	2332      	movs	r3, #50	; 0x32
 8001134:	71bb      	strb	r3, [r7, #6]
              buff[3] = 0; // bez scrollu
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
              USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2204      	movs	r2, #4
 800113e:	4619      	mov	r1, r3
 8001140:	485f      	ldr	r0, [pc, #380]	; (80012c0 <main+0x288>)
 8001142:	f004 ff07 	bl	8005f54 <USBD_HID_SendReport>
              HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001146:	485e      	ldr	r0, [pc, #376]	; (80012c0 <main+0x288>)
 8001148:	f004 ff34 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fc2a 	bl	80019a8 <HAL_Delay>


              buff[0] = 0x01;
 8001154:	2301      	movs	r3, #1
 8001156:	713b      	strb	r3, [r7, #4]
              buff[1] = (int8_t)(0); // posun X +10
 8001158:	2300      	movs	r3, #0
 800115a:	717b      	strb	r3, [r7, #5]
              buff[2] = (int8_t)(30); // posun Y -3
 800115c:	231e      	movs	r3, #30
 800115e:	71bb      	strb	r3, [r7, #6]
              buff[3] = 0; // bez scrollu
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
              USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2204      	movs	r2, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4855      	ldr	r0, [pc, #340]	; (80012c0 <main+0x288>)
 800116c:	f004 fef2 	bl	8005f54 <USBD_HID_SendReport>
              HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001170:	4853      	ldr	r0, [pc, #332]	; (80012c0 <main+0x288>)
 8001172:	f004 ff1f 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fc15 	bl	80019a8 <HAL_Delay>

              //pusteni mysi

              clearer();
 800117e:	f7ff feab 	bl	8000ed8 <clearer>

              //prvni oko

             eye();
 8001182:	f7ff fec9 	bl	8000f18 <eye>


              clearer();
 8001186:	f7ff fea7 	bl	8000ed8 <clearer>

              buff[0] = 0x01;
 800118a:	2301      	movs	r3, #1
 800118c:	713b      	strb	r3, [r7, #4]
              buff[1] = (int8_t)(-70); // posun X +10
 800118e:	23ba      	movs	r3, #186	; 0xba
 8001190:	717b      	strb	r3, [r7, #5]
              buff[2] = (int8_t)(0); // posun Y -3
 8001192:	2300      	movs	r3, #0
 8001194:	71bb      	strb	r3, [r7, #6]
              buff[3] = 0; // bez scrollu
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
              USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4847      	ldr	r0, [pc, #284]	; (80012c0 <main+0x288>)
 80011a2:	f004 fed7 	bl	8005f54 <USBD_HID_SendReport>
              HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 80011a6:	4846      	ldr	r0, [pc, #280]	; (80012c0 <main+0x288>)
 80011a8:	f004 ff04 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fbfa 	bl	80019a8 <HAL_Delay>


              num_steps = 10; // Počet kroků pro aproximaci kruhu
 80011b4:	230a      	movs	r3, #10
 80011b6:	623b      	str	r3, [r7, #32]

              for (int i = 0; i < num_steps; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80011bc:	e057      	b.n	800126e <main+0x236>
              {
            	  // Výpočet úhlu pro aktuální krok
            	  float angle = 2 * PI * i / num_steps;
 80011be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c0:	f7ff f968 	bl	8000494 <__aeabi_i2d>
 80011c4:	a33a      	add	r3, pc, #232	; (adr r3, 80012b0 <main+0x278>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9cd 	bl	8000568 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4690      	mov	r8, r2
 80011d4:	4699      	mov	r9, r3
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f7ff f95c 	bl	8000494 <__aeabi_i2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4640      	mov	r0, r8
 80011e2:	4649      	mov	r1, r9
 80011e4:	f7ff faea 	bl	80007bc <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc7c 	bl	8000aec <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]

            	  // Výpočet nových souřadnic na kružnici
            	  int8_t deltaX = (int8_t)(10 * cos(angle)); // Posun X
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff f95d 	bl	80004b8 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b10 	vmov	d0, r2, r3
 8001206:	f006 fea7 	bl	8007f58 <cos>
 800120a:	ec51 0b10 	vmov	r0, r1, d0
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <main+0x284>)
 8001214:	f7ff f9a8 	bl	8000568 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc3c 	bl	8000a9c <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	74fb      	strb	r3, [r7, #19]
            	  int8_t deltaY = (int8_t)(10 * sin(angle)); // Posun Y
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff f945 	bl	80004b8 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	ec43 2b10 	vmov	d0, r2, r3
 8001236:	f006 fee3 	bl	8008000 <sin>
 800123a:	ec51 0b10 	vmov	r0, r1, d0
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <main+0x284>)
 8001244:	f7ff f990 	bl	8000568 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fc24 	bl	8000a9c <__aeabi_d2iz>
 8001254:	4603      	mov	r3, r0
 8001256:	74bb      	strb	r3, [r7, #18]

            	  // Poslat příkaz pro pohyb myši na nové souřadnice
            	  sendMouseCommand(deltaX, deltaY);
 8001258:	f997 2012 	ldrsb.w	r2, [r7, #18]
 800125c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe10 	bl	8000e88 <sendMouseCommand>
              for (int i = 0; i < num_steps; i++)
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	429a      	cmp	r2, r3
 8001274:	dba3      	blt.n	80011be <main+0x186>
              }

              //pusa
              clearer();
 8001276:	f7ff fe2f 	bl	8000ed8 <clearer>

              buff[0] = 0x01;
 800127a:	2301      	movs	r3, #1
 800127c:	713b      	strb	r3, [r7, #4]
              buff[1] = (int8_t)(-10); // posun X +10
 800127e:	23f6      	movs	r3, #246	; 0xf6
 8001280:	717b      	strb	r3, [r7, #5]
              buff[2] = (int8_t)(80); // posun Y -3
 8001282:	2350      	movs	r3, #80	; 0x50
 8001284:	71bb      	strb	r3, [r7, #6]
              buff[3] = 0; // bez scrollu
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]
              USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2204      	movs	r2, #4
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <main+0x288>)
 8001292:	f004 fe5f 	bl	8005f54 <USBD_HID_SendReport>
              HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <main+0x288>)
 8001298:	f004 fe8c 	bl	8005fb4 <USBD_HID_GetPollingInterval>
 800129c:	4603      	mov	r3, r0
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fb82 	bl	80019a8 <HAL_Delay>


              num_steps = 50;
 80012a4:	2332      	movs	r3, #50	; 0x32
 80012a6:	623b      	str	r3, [r7, #32]
              for (int i = 0; i < num_steps/3.5; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
 80012ac:	e078      	b.n	80013a0 <main+0x368>
 80012ae:	bf00      	nop
 80012b0:	54442eea 	.word	0x54442eea
 80012b4:	401921fb 	.word	0x401921fb
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40240000 	.word	0x40240000
 80012c0:	20000188 	.word	0x20000188
              {
            	  // Výpočet úhlu pro aktuální krok
            	  float angle = 2*(PI * i / num_steps)-45;
 80012c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c6:	f7ff f8e5 	bl	8000494 <__aeabi_i2d>
 80012ca:	a346      	add	r3, pc, #280	; (adr r3, 80013e4 <main+0x3ac>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f94a 	bl	8000568 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4690      	mov	r8, r2
 80012da:	4699      	mov	r9, r3
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f7ff f8d9 	bl	8000494 <__aeabi_i2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4640      	mov	r0, r8
 80012e8:	4649      	mov	r1, r9
 80012ea:	f7ff fa67 	bl	80007bc <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	f7fe ff7f 	bl	80001fc <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <main+0x3a0>)
 800130c:	f7fe ff74 	bl	80001f8 <__aeabi_dsub>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbe8 	bl	8000aec <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	61fb      	str	r3, [r7, #28]

            	  // Výpočet nových souřadnic na kružnici
            	  int8_t deltaX = (int8_t)(10 * cos(angle)); // Posun X
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	f7ff f8c9 	bl	80004b8 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ec43 2b10 	vmov	d0, r2, r3
 800132e:	f006 fe13 	bl	8007f58 <cos>
 8001332:	ec51 0b10 	vmov	r0, r1, d0
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <main+0x3a4>)
 800133c:	f7ff f914 	bl	8000568 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fba8 	bl	8000a9c <__aeabi_d2iz>
 800134c:	4603      	mov	r3, r0
 800134e:	76fb      	strb	r3, [r7, #27]
            	  int8_t deltaY = (int8_t)(10 * -sin(angle)); // Posun Y
 8001350:	69f8      	ldr	r0, [r7, #28]
 8001352:	f7ff f8b1 	bl	80004b8 <__aeabi_f2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	ec43 2b10 	vmov	d0, r2, r3
 800135e:	f006 fe4f 	bl	8008000 <sin>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4614      	mov	r4, r2
 8001368:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <main+0x3a4>)
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7ff f8f7 	bl	8000568 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb8b 	bl	8000a9c <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	76bb      	strb	r3, [r7, #26]

            	  // Poslat příkaz pro pohyb myši na nové souřadnice
            	  sendMouseCommand(deltaX, deltaY);
 800138a:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800138e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd77 	bl	8000e88 <sendMouseCommand>
              for (int i = 0; i < num_steps/3.5; i++)
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a2:	f7ff f877 	bl	8000494 <__aeabi_i2d>
 80013a6:	4680      	mov	r8, r0
 80013a8:	4689      	mov	r9, r1
 80013aa:	6a38      	ldr	r0, [r7, #32]
 80013ac:	f7ff f872 	bl	8000494 <__aeabi_i2d>
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <main+0x3a8>)
 80013b6:	f7ff fa01 	bl	80007bc <__aeabi_ddiv>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff fb43 	bl	8000a4c <__aeabi_dcmplt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f47f af7b 	bne.w	80012c4 <main+0x28c>
              }
              clearer();
 80013ce:	f7ff fd83 	bl	8000ed8 <clearer>
  {
 80013d2:	e63f      	b.n	8001054 <main+0x1c>
 80013d4:	f3af 8000 	nop.w
 80013d8:	40468000 	.word	0x40468000
 80013dc:	40240000 	.word	0x40240000
 80013e0:	400c0000 	.word	0x400c0000
 80013e4:	54442eea 	.word	0x54442eea
 80013e8:	400921fb 	.word	0x400921fb

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 fd7e 	bl	8007efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800144c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001460:	23a8      	movs	r3, #168	; 0xa8
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001468:	2307      	movs	r3, #7
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f002 f811 	bl	8003498 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800147c:	f000 f93c 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	230f      	movs	r3, #15
 8001482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2105      	movs	r1, #5
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fa72 	bl	8003988 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014aa:	f000 f925 	bl	80016f8 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART3_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART3_UART_Init+0x4c>)
 80014f8:	f002 fc66 	bl	8003dc8 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f8f9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000138 	.word	0x20000138
 8001510:	40004800 	.word	0x40004800

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a5e      	ldr	r2, [pc, #376]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a50      	ldr	r2, [pc, #320]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80015d8:	4843      	ldr	r0, [pc, #268]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 80015da:	f000 fcdf 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	4842      	ldr	r0, [pc, #264]	; (80016ec <MX_GPIO_Init+0x1d8>)
 80015e4:	f000 fcda 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	483c      	ldr	r0, [pc, #240]	; (80016f0 <MX_GPIO_Init+0x1dc>)
 8001600:	f000 fb08 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001604:	2332      	movs	r3, #50	; 0x32
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001614:	230b      	movs	r3, #11
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4834      	ldr	r0, [pc, #208]	; (80016f0 <MX_GPIO_Init+0x1dc>)
 8001620:	f000 faf8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001624:	2386      	movs	r3, #134	; 0x86
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001634:	230b      	movs	r3, #11
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <MX_GPIO_Init+0x1e0>)
 8001640:	f000 fae8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001644:	f244 0381 	movw	r3, #16513	; 0x4081
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4822      	ldr	r0, [pc, #136]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 800165e:	f000 fad9 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001674:	230b      	movs	r3, #11
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	481a      	ldr	r0, [pc, #104]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 8001680:	f000 fac8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001684:	2340      	movs	r3, #64	; 0x40
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4814      	ldr	r0, [pc, #80]	; (80016ec <MX_GPIO_Init+0x1d8>)
 800169c:	f000 faba 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <MX_GPIO_Init+0x1d8>)
 80016b4:	f000 faae 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ca:	230b      	movs	r3, #11
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_GPIO_Init+0x1d8>)
 80016d6:	f000 fa9d 	bl	8001c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020000 	.word	0x40020000

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_UART_MspInit+0x88>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_UART_MspInit+0x88>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c0:	2307      	movs	r3, #7
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_UART_MspInit+0x8c>)
 80017cc:	f000 fa22 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40004800 	.word	0x40004800
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 f89a 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <OTG_FS_IRQHandler+0x10>)
 800183e:	f000 fd16 	bl	800226e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000664 	.word	0x20000664

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001876:	490e      	ldr	r1, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800188c:	4c0b      	ldr	r4, [pc, #44]	; (80018bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800189a:	f7ff ffd7 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189e:	f006 fb35 	bl	8007f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff fbc9 	bl	8001038 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80018b4:	080092e0 	.word	0x080092e0
  ldr r2, =_sbss
 80018b8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80018bc:	20000b84 	.word	0x20000b84

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f94f 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff ff04 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f967 	bl	8001bfa <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f92f 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000180 	.word	0x20000180

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000180 	.word	0x20000180

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e177      	b.n	8001f20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8166 	bne.w	8001f1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80c0 	beq.w	8001f1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a65      	ldr	r2, [pc, #404]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_GPIO_Init+0x324>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a61      	ldr	r2, [pc, #388]	; (8001f3c <HAL_GPIO_Init+0x328>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	; (8001f40 <HAL_GPIO_Init+0x32c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d037      	beq.n	8001e52 <HAL_GPIO_Init+0x23e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a57      	ldr	r2, [pc, #348]	; (8001f44 <HAL_GPIO_Init+0x330>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_GPIO_Init+0x23a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a56      	ldr	r2, [pc, #344]	; (8001f48 <HAL_GPIO_Init+0x334>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x236>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <HAL_GPIO_Init+0x338>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x232>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a54      	ldr	r2, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x33c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x22e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a53      	ldr	r2, [pc, #332]	; (8001f54 <HAL_GPIO_Init+0x340>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x22a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_GPIO_Init+0x344>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_GPIO_Init+0x348>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	; (8001f60 <HAL_GPIO_Init+0x34c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	; (8001f64 <HAL_GPIO_Init+0x350>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	e012      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e2e:	230a      	movs	r3, #10
 8001e30:	e010      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4935      	ldr	r1, [pc, #212]	; (8001f3c <HAL_GPIO_Init+0x328>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_GPIO_Init+0x354>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae84 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40021400 	.word	0x40021400
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021c00 	.word	0x40021c00
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40022400 	.word	0x40022400
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd0:	b08f      	sub	sp, #60	; 0x3c
 8001fd2:	af0a      	add	r7, sp, #40	; 0x28
 8001fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e10f      	b.n	8002200 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f005 fc6e 	bl	80078dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 faa9 	bl	8004576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	687e      	ldr	r6, [r7, #4]
 800202c:	466d      	mov	r5, sp
 800202e:	f106 0410 	add.w	r4, r6, #16
 8002032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800203e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002042:	1d33      	adds	r3, r6, #4
 8002044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f002 f980 	bl	800434c <USB_CoreInit>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0d0      	b.n	8002200 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fa97 	bl	8004598 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e04a      	b.n	8002106 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	333d      	adds	r3, #61	; 0x3d
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	333c      	adds	r3, #60	; 0x3c
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	b298      	uxth	r0, r3
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3344      	adds	r3, #68	; 0x44
 80020ac:	4602      	mov	r2, r0
 80020ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3340      	adds	r3, #64	; 0x40
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3348      	adds	r3, #72	; 0x48
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	334c      	adds	r3, #76	; 0x4c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	3354      	adds	r3, #84	; 0x54
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3301      	adds	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3af      	bcc.n	8002070 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e044      	b.n	80021a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	3301      	adds	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d3b5      	bcc.n	8002116 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	687e      	ldr	r6, [r7, #4]
 80021b2:	466d      	mov	r5, sp
 80021b4:	f106 0410 	add.w	r4, r6, #16
 80021b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80021c8:	1d33      	adds	r3, r6, #4
 80021ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	f002 fa2f 	bl	8004630 <USB_DevInit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e00d      	b.n	8002200 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fb7e 	bl	80058fa <USB_DevDisconnect>

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_PCD_Start+0x1c>
 8002220:	2302      	movs	r3, #2
 8002222:	e020      	b.n	8002266 <HAL_PCD_Start+0x5e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	2b01      	cmp	r3, #1
 8002232:	d109      	bne.n	8002248 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002238:	2b01      	cmp	r3, #1
 800223a:	d005      	beq.n	8002248 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f002 f981 	bl	8004554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fb2e 	bl	80058b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800226e:	b590      	push	{r4, r7, lr}
 8002270:	b08d      	sub	sp, #52	; 0x34
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fbec 	bl	8005a62 <USB_GetMode>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 848a 	bne.w	8002ba6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fb50 	bl	800593c <USB_ReadInterrupts>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8480 	beq.w	8002ba4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fb3d 	bl	800593c <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d107      	bne.n	80022dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 0202 	and.w	r2, r2, #2
 80022da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 fb2b 	bl	800593c <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d161      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 020f 	and.w	r2, r3, #15
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	0c5b      	lsrs	r3, r3, #17
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	2b02      	cmp	r3, #2
 800232a:	d124      	bne.n	8002376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d035      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f003 f962 	bl	8005614 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800236e:	441a      	add	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	621a      	str	r2, [r3, #32]
 8002374:	e016      	b.n	80023a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	0c5b      	lsrs	r3, r3, #17
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	2b06      	cmp	r3, #6
 8002380:	d110      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002388:	2208      	movs	r2, #8
 800238a:	4619      	mov	r1, r3
 800238c:	6a38      	ldr	r0, [r7, #32]
 800238e:	f003 f941 	bl	8005614 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239e:	441a      	add	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0210 	orr.w	r2, r2, #16
 80023b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 fabf 	bl	800593c <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023c8:	f040 80a7 	bne.w	800251a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fac4 	bl	8005962 <USB_ReadDevAllOutEpInterrupt>
 80023da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023dc:	e099      	b.n	8002512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 808e 	beq.w	8002506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fae8 	bl	80059ca <USB_ReadDevOutEPInterrupt>
 80023fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	2301      	movs	r3, #1
 8002416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 feaa 	bl	8003174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	2308      	movs	r3, #8
 800243a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ff80 	bl	8003344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	2310      	movs	r3, #16
 800245e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d030      	beq.n	80024cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d109      	bne.n	800248a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	78db      	ldrb	r3, [r3, #3]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f005 fb25 	bl	8007b04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	461a      	mov	r2, r3
 80024c8:	2302      	movs	r3, #2
 80024ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e2:	461a      	mov	r2, r3
 80024e4:	2320      	movs	r3, #32
 80024e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	461a      	mov	r2, r3
 8002500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f af62 	bne.w	80023de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fa0c 	bl	800593c <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800252e:	f040 80db 	bne.w	80026e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fa2d 	bl	8005996 <USB_ReadDevAllInEpInterrupt>
 800253c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002542:	e0cd      	b.n	80026e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80c2 	beq.w	80026d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fa53 	bl	8005a06 <USB_ReadDevInEPInterrupt>
 8002560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d057      	beq.n	800261c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800258c:	4013      	ands	r3, r2
 800258e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259c:	461a      	mov	r2, r3
 800259e:	2301      	movs	r3, #1
 80025a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d132      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	334c      	adds	r3, #76	; 0x4c
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	3348      	adds	r3, #72	; 0x48
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4419      	add	r1, r3
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4403      	add	r3, r0
 80025de:	334c      	adds	r3, #76	; 0x4c
 80025e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	3354      	adds	r3, #84	; 0x54
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002608:	461a      	mov	r2, r3
 800260a:	2101      	movs	r1, #1
 800260c:	f003 fa5a 	bl	8005ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	b2db      	uxtb	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f005 f9ef 	bl	80079fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002632:	461a      	mov	r2, r3
 8002634:	2308      	movs	r3, #8
 8002636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264e:	461a      	mov	r2, r3
 8002650:	2310      	movs	r3, #16
 8002652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266a:	461a      	mov	r2, r3
 800266c:	2340      	movs	r3, #64	; 0x40
 800266e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d023      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800267a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267c:	6a38      	ldr	r0, [r7, #32]
 800267e:	f002 f93b 	bl	80048f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3338      	adds	r3, #56	; 0x38
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2200      	movs	r2, #0
 80026a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f005 fa3c 	bl	8007b28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	2302      	movs	r3, #2
 80026c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fcc3 	bl	800305a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3301      	adds	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f47f af2e 	bne.w	8002544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 f925 	bl	800593c <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026fc:	d122      	bne.n	8002744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 feaa 	bl	8003480 <HAL_PCDEx_LPM_Callback>
 800272c:	e002      	b.n	8002734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f005 f9da 	bl	8007ae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f8f7 	bl	800593c <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002758:	d112      	bne.n	8002780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f005 f996 	bl	8007a9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800277e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 f8d9 	bl	800593c <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002794:	f040 80b7 	bne.w	8002906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2110      	movs	r1, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 f8a0 	bl	80048f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	e046      	b.n	800284c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ca:	461a      	mov	r2, r3
 80027cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fe:	461a      	mov	r2, r3
 8002800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	440a      	add	r2, r1
 800281c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002836:	0151      	lsls	r1, r2, #5
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	440a      	add	r2, r1
 800283c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	3301      	adds	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002852:	429a      	cmp	r2, r3
 8002854:	d3b3      	bcc.n	80027be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002864:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002868:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002882:	f043 030b 	orr.w	r3, r3, #11
 8002886:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002898:	f043 030b 	orr.w	r3, r3, #11
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	e015      	b.n	80028cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f043 030b 	orr.w	r3, r3, #11
 80028ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028f0:	461a      	mov	r2, r3
 80028f2:	f003 f8e7 	bl	8005ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 f816 	bl	800593c <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	d124      	bne.n	8002966 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 f8ac 	bl	8005a7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f002 f861 	bl	80049f2 <USB_GetDevSpeed>
 8002930:	4603      	mov	r3, r0
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681c      	ldr	r4, [r3, #0]
 800293c:	f001 fa10 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8002940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	4620      	mov	r0, r4
 800294c:	f001 fd60 	bl	8004410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f005 f87a 	bl	8007a4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 ffe6 	bl	800593c <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d10a      	bne.n	8002990 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f005 f857 	bl	8007a2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f002 0208 	and.w	r2, r2, #8
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f002 ffd1 	bl	800593c <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d122      	bne.n	80029ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b0:	2301      	movs	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	e014      	b.n	80029e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb0f 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	3301      	adds	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d3e5      	bcc.n	80029b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 ffa4 	bl	800593c <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029fe:	d13b      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	e02b      	b.n	8002a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3340      	adds	r3, #64	; 0x40
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d115      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da12      	bge.n	8002a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fad0 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d3ce      	bcc.n	8002a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 ff5d 	bl	800593c <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8c:	d155      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e045      	b.n	8002b20 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d12e      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da2b      	bge.n	8002b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ace:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d121      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	6053      	str	r3, [r2, #4]
            break;
 8002b18:	e007      	b.n	8002b2a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3b4      	bcc.n	8002a94 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 fefc 	bl	800593c <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d10a      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f004 fffb 	bl	8007b4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fee6 	bl	800593c <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d115      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f004 ffeb 	bl	8007b68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	e000      	b.n	8002ba6 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ba4:	bf00      	nop
    }
  }
}
 8002ba6:	3734      	adds	r7, #52	; 0x34
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}

08002bac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_PCD_SetAddress+0x1a>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e013      	b.n	8002bee <HAL_PCD_SetAddress+0x42>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 fe44 	bl	800586c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	461a      	mov	r2, r3
 8002c04:	4603      	mov	r3, r0
 8002c06:	70fb      	strb	r3, [r7, #3]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	803b      	strh	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da0f      	bge.n	8002c3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 020f 	and.w	r2, r3, #15
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3338      	adds	r3, #56	; 0x38
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	705a      	strb	r2, [r3, #1]
 8002c3a:	e00f      	b.n	8002c5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c68:	883a      	ldrh	r2, [r7, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	78ba      	ldrb	r2, [r7, #2]
 8002c72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c86:	78bb      	ldrb	r3, [r7, #2]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d102      	bne.n	8002c92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_PCD_EP_Open+0xaa>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e00e      	b.n	8002cbe <HAL_PCD_EP_Open+0xc8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 fec4 	bl	8004a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0f      	bge.n	8002cfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
 8002cf8:	e00f      	b.n	8002d1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_EP_Close+0x6e>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e00e      	b.n	8002d52 <HAL_PCD_EP_Close+0x8c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68f9      	ldr	r1, [r7, #12]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 ff02 	bl	8004b4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	460b      	mov	r3, r1
 8002d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	f003 020f 	and.w	r2, r3, #15
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3304      	adds	r3, #4
 8002d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d102      	bne.n	8002db6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002db6:	7afb      	ldrb	r3, [r7, #11]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	f002 f9e1 	bl	8005194 <USB_EP0StartXfer>
 8002dd2:	e008      	b.n	8002de6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6979      	ldr	r1, [r7, #20]
 8002de2:	f001 ff8f 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3338      	adds	r3, #56	; 0x38
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d102      	bne.n	8002e4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	6979      	ldr	r1, [r7, #20]
 8002e62:	f002 f997 	bl	8005194 <USB_EP0StartXfer>
 8002e66:	e008      	b.n	8002e7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	f001 ff45 	bl	8004d04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e050      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0f      	bge.n	8002eca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00d      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_PCD_EP_SetStall+0x82>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e01e      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xc0>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fbd5 	bl	80056c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	f002 fdc5 	bl	8005ac4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	3338      	adds	r3, #56	; 0x38
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_EP_ClrStall+0x86>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e00e      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 fbdd 	bl	80057a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0c      	bge.n	8003026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 f9fc 	bl	8005444 <USB_EPStopXfer>
 800304c:	4603      	mov	r3, r0
 800304e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003050:	7afb      	ldrb	r3, [r7, #11]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	429a      	cmp	r2, r3
 800308c:	d901      	bls.n	8003092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06c      	b.n	800316c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d902      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3303      	adds	r3, #3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b6:	e02b      	b.n	8003110 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3303      	adds	r3, #3
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6919      	ldr	r1, [r3, #16]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4603      	mov	r3, r0
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f002 fa50 	bl	8005598 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	441a      	add	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	429a      	cmp	r2, r3
 8003124:	d809      	bhi.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312e:	429a      	cmp	r2, r3
 8003130:	d203      	bcs.n	800313a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1be      	bne.n	80030b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	429a      	cmp	r2, r3
 8003144:	d811      	bhi.n	800316a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2201      	movs	r2, #1
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	43db      	mvns	r3, r3
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003166:	4013      	ands	r3, r2
 8003168:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	333c      	adds	r3, #60	; 0x3c
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d17b      	bne.n	80032a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a61      	ldr	r2, [pc, #388]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f240 80b9 	bls.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80b3 	beq.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e0a7      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e098      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 8093 	bne.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90f      	bls.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e07e      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	440b      	add	r3, r1
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d114      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800327c:	461a      	mov	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	f002 fc20 	bl	8005ac4 <USB_EP0_OutStart>
 8003284:	e006      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f004 fb92 	bl	80079c4 <HAL_PCD_DataOutStageCallback>
 80032a0:	e046      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e032      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2320      	movs	r3, #32
 80032e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f004 fb69 	bl	80079c4 <HAL_PCD_DataOutStageCallback>
 80032f2:	e01d      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800331c:	461a      	mov	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f002 fbd0 	bl	8005ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f004 fb4a 	bl	80079c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4f54300a 	.word	0x4f54300a
 8003340:	4f54310a 	.word	0x4f54310a

08003344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	333c      	adds	r3, #60	; 0x3c
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d90e      	bls.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f004 fb01 	bl	80079a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d90c      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033b8:	461a      	mov	r2, r3
 80033ba:	2101      	movs	r1, #1
 80033bc:	f002 fb82 	bl	8005ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	4f54300a 	.word	0x4f54300a

080033d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
 80033dc:	4613      	mov	r3, r2
 80033de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	0419      	lsls	r1, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	e028      	b.n	8003450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e00d      	b.n	800342e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	3340      	adds	r3, #64	; 0x40
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	3b01      	subs	r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d3ec      	bcc.n	8003412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	0418      	lsls	r0, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	3b01      	subs	r3, #1
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4302      	orrs	r2, r0
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e267      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d075      	beq.n	80035a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00c      	beq.n	80034dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d112      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05b      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d157      	bne.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e242      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x74>
 80034fe:	4b76      	ldr	r3, [pc, #472]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x98>
 8003516:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6c      	ldr	r2, [pc, #432]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 8003530:	4b69      	ldr	r3, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b66      	ldr	r3, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fa1e 	bl	8001990 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe fa1a 	bl	8001990 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e207      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xc0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fa0a 	bl	8001990 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe fa06 	bl	8001990 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1f3      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe f9bf 	bl	8001990 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003616:	f7fe f9bb 	bl	8001990 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a8      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x244>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe f99e 	bl	8001990 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe f99a 	bl	8001990 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e187      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe f97e 	bl	8001990 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fe f97a 	bl	8001990 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e167      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe f967 	bl	8001990 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fe f963 	bl	8001990 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e150      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b88      	ldr	r3, [pc, #544]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fe f923 	bl	8001990 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fe f91f 	bl	8001990 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e10c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x474>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x2ea>
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a63      	ldr	r2, [pc, #396]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x30c>
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	; 0x70
 8003796:	4b5c      	ldr	r3, [pc, #368]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 80037a4:	4b58      	ldr	r3, [pc, #352]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a57      	ldr	r2, [pc, #348]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a54      	ldr	r2, [pc, #336]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe f8e4 	bl	8001990 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fe f8e0 	bl	8001990 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0cb      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x334>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fe f8ce 	bl	8001990 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe f8ca 	bl	8001990 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b5      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a1 	beq.w	8003978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d05c      	beq.n	80038fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d141      	bne.n	80038ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe f89e 	bl	8001990 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f89a 	bl	8001990 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e087      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	491b      	ldr	r1, [pc, #108]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe f873 	bl	8001990 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe f86f 	bl	8001990 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x416>
 80038cc:	e054      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	; (8003910 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fe f85c 	bl	8001990 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe f858 	bl	8001990 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x444>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e038      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d028      	beq.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d121      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11a      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cc      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d90c      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d044      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e067      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4934      	ldr	r1, [pc, #208]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fd ff8a 	bl	8001990 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd ff86 	bl	8001990 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20c      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd feea 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	080090e0 	.word	0x080090e0
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b094      	sub	sp, #80	; 0x50
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b60:	2300      	movs	r3, #0
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b79      	ldr	r3, [pc, #484]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80e1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0db      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b8c:	e0db      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd8:	0150      	lsls	r0, r2, #5
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4621      	mov	r1, r4
 8003be0:	1a51      	subs	r1, r2, r1
 8003be2:	6139      	str	r1, [r7, #16]
 8003be4:	4629      	mov	r1, r5
 8003be6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	018b      	lsls	r3, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c02:	4651      	mov	r1, sl
 8003c04:	018a      	lsls	r2, r1, #6
 8003c06:	4651      	mov	r1, sl
 8003c08:	ebb2 0801 	subs.w	r8, r2, r1
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	eb18 0303 	adds.w	r3, r8, r3
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	462b      	mov	r3, r5
 8003c34:	eb49 0303 	adc.w	r3, r9, r3
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c46:	4629      	mov	r1, r5
 8003c48:	024b      	lsls	r3, r1, #9
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c50:	4621      	mov	r1, r4
 8003c52:	024a      	lsls	r2, r1, #9
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c64:	f7fc ff92 	bl	8000b8c <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	e058      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	0159      	lsls	r1, r3, #5
 8003c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9e:	0150      	lsls	r0, r2, #5
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003caa:	4649      	mov	r1, r9
 8003cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	00eb      	lsls	r3, r5, #3
 8003cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cda:	00e2      	lsls	r2, r4, #3
 8003cdc:	4614      	mov	r4, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	18e3      	adds	r3, r4, r3
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	eb45 0303 	adc.w	r3, r5, r3
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	61fa      	str	r2, [r7, #28]
 8003d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d18:	f7fc ff38 	bl	8000b8c <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3750      	adds	r7, #80	; 0x50
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4903      	ldr	r1, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	080090f0 	.word	0x080090f0

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	080090f0 	.word	0x080090f0

08003dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e03f      	b.n	8003e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd fcb0 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f829 	bl	8003e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b0c0      	sub	sp, #256	; 0x100
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	68d9      	ldr	r1, [r3, #12]
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	ea40 0301 	orr.w	r3, r0, r1
 8003e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ebc:	f021 010c 	bic.w	r1, r1, #12
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	6999      	ldr	r1, [r3, #24]
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	ea40 0301 	orr.w	r3, r0, r1
 8003eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b8f      	ldr	r3, [pc, #572]	; (8004130 <UART_SetConfig+0x2cc>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d005      	beq.n	8003f04 <UART_SetConfig+0xa0>
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <UART_SetConfig+0x2d0>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d104      	bne.n	8003f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7ff ff4c 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8003f08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f0c:	e003      	b.n	8003f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7ff ff33 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8003f12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	f040 810c 	bne.w	800413c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f36:	4622      	mov	r2, r4
 8003f38:	462b      	mov	r3, r5
 8003f3a:	1891      	adds	r1, r2, r2
 8003f3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f3e:	415b      	adcs	r3, r3
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f46:	4621      	mov	r1, r4
 8003f48:	eb12 0801 	adds.w	r8, r2, r1
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	eb43 0901 	adc.w	r9, r3, r1
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f66:	4690      	mov	r8, r2
 8003f68:	4699      	mov	r9, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	eb18 0303 	adds.w	r3, r8, r3
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f74:	462b      	mov	r3, r5
 8003f76:	eb49 0303 	adc.w	r3, r9, r3
 8003f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f92:	460b      	mov	r3, r1
 8003f94:	18db      	adds	r3, r3, r3
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	4613      	mov	r3, r2
 8003f9a:	eb42 0303 	adc.w	r3, r2, r3
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fa8:	f7fc fdf0 	bl	8000b8c <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <UART_SetConfig+0x2d4>)
 8003fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	011c      	lsls	r4, r3, #4
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fdc:	4641      	mov	r1, r8
 8003fde:	eb12 0a01 	adds.w	sl, r2, r1
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffc:	4692      	mov	sl, r2
 8003ffe:	469b      	mov	fp, r3
 8004000:	4643      	mov	r3, r8
 8004002:	eb1a 0303 	adds.w	r3, sl, r3
 8004006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800400a:	464b      	mov	r3, r9
 800400c:	eb4b 0303 	adc.w	r3, fp, r3
 8004010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004028:	460b      	mov	r3, r1
 800402a:	18db      	adds	r3, r3, r3
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
 800402e:	4613      	mov	r3, r2
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
 8004036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800403a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800403e:	f7fc fda5 	bl	8000b8c <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4611      	mov	r1, r2
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <UART_SetConfig+0x2d4>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2264      	movs	r2, #100	; 0x64
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	1acb      	subs	r3, r1, r3
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800405e:	4b36      	ldr	r3, [pc, #216]	; (8004138 <UART_SetConfig+0x2d4>)
 8004060:	fba3 2302 	umull	r2, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800406c:	441c      	add	r4, r3
 800406e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800407c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004080:	4642      	mov	r2, r8
 8004082:	464b      	mov	r3, r9
 8004084:	1891      	adds	r1, r2, r2
 8004086:	63b9      	str	r1, [r7, #56]	; 0x38
 8004088:	415b      	adcs	r3, r3
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004090:	4641      	mov	r1, r8
 8004092:	1851      	adds	r1, r2, r1
 8004094:	6339      	str	r1, [r7, #48]	; 0x30
 8004096:	4649      	mov	r1, r9
 8004098:	414b      	adcs	r3, r1
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040a8:	4659      	mov	r1, fp
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b2:	4651      	mov	r1, sl
 80040b4:	00ca      	lsls	r2, r1, #3
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4642      	mov	r2, r8
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040c4:	464b      	mov	r3, r9
 80040c6:	460a      	mov	r2, r1
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e4:	460b      	mov	r3, r1
 80040e6:	18db      	adds	r3, r3, r3
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ea:	4613      	mov	r3, r2
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040fa:	f7fc fd47 	bl	8000b8c <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <UART_SetConfig+0x2d4>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a08      	ldr	r2, [pc, #32]	; (8004138 <UART_SetConfig+0x2d4>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 0207 	and.w	r2, r3, #7
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4422      	add	r2, r4
 800412a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800412c:	e106      	b.n	800433c <UART_SetConfig+0x4d8>
 800412e:	bf00      	nop
 8004130:	40011000 	.word	0x40011000
 8004134:	40011400 	.word	0x40011400
 8004138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800414a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800414e:	4642      	mov	r2, r8
 8004150:	464b      	mov	r3, r9
 8004152:	1891      	adds	r1, r2, r2
 8004154:	6239      	str	r1, [r7, #32]
 8004156:	415b      	adcs	r3, r3
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800415e:	4641      	mov	r1, r8
 8004160:	1854      	adds	r4, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb43 0501 	adc.w	r5, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004184:	464b      	mov	r3, r9
 8004186:	eb45 0303 	adc.w	r3, r5, r3
 800418a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800419a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041aa:	4629      	mov	r1, r5
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b4:	4621      	mov	r1, r4
 80041b6:	008a      	lsls	r2, r1, #2
 80041b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041bc:	f7fc fce6 	bl	8000b8c <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <UART_SetConfig+0x4e4>)
 80041c6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	011c      	lsls	r4, r3, #4
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	61b9      	str	r1, [r7, #24]
 80041e8:	415b      	adcs	r3, r3
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f0:	4641      	mov	r1, r8
 80041f2:	1851      	adds	r1, r2, r1
 80041f4:	6139      	str	r1, [r7, #16]
 80041f6:	4649      	mov	r1, r9
 80041f8:	414b      	adcs	r3, r1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004208:	4659      	mov	r1, fp
 800420a:	00cb      	lsls	r3, r1, #3
 800420c:	4651      	mov	r1, sl
 800420e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004212:	4651      	mov	r1, sl
 8004214:	00ca      	lsls	r2, r1, #3
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	4603      	mov	r3, r0
 800421c:	4642      	mov	r2, r8
 800421e:	189b      	adds	r3, r3, r2
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	464b      	mov	r3, r9
 8004226:	460a      	mov	r2, r1
 8004228:	eb42 0303 	adc.w	r3, r2, r3
 800422c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	67bb      	str	r3, [r7, #120]	; 0x78
 800423a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004248:	4649      	mov	r1, r9
 800424a:	008b      	lsls	r3, r1, #2
 800424c:	4641      	mov	r1, r8
 800424e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004252:	4641      	mov	r1, r8
 8004254:	008a      	lsls	r2, r1, #2
 8004256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800425a:	f7fc fc97 	bl	8000b8c <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4611      	mov	r1, r2
 8004264:	4b38      	ldr	r3, [pc, #224]	; (8004348 <UART_SetConfig+0x4e4>)
 8004266:	fba3 2301 	umull	r2, r3, r3, r1
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2264      	movs	r2, #100	; 0x64
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a33      	ldr	r2, [pc, #204]	; (8004348 <UART_SetConfig+0x4e4>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	441c      	add	r4, r3
 8004286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800428a:	2200      	movs	r2, #0
 800428c:	673b      	str	r3, [r7, #112]	; 0x70
 800428e:	677a      	str	r2, [r7, #116]	; 0x74
 8004290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004294:	4642      	mov	r2, r8
 8004296:	464b      	mov	r3, r9
 8004298:	1891      	adds	r1, r2, r2
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	415b      	adcs	r3, r3
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a4:	4641      	mov	r1, r8
 80042a6:	1851      	adds	r1, r2, r1
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	4649      	mov	r1, r9
 80042ac:	414b      	adcs	r3, r1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042bc:	4659      	mov	r1, fp
 80042be:	00cb      	lsls	r3, r1, #3
 80042c0:	4651      	mov	r1, sl
 80042c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c6:	4651      	mov	r1, sl
 80042c8:	00ca      	lsls	r2, r1, #3
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	4642      	mov	r2, r8
 80042d2:	189b      	adds	r3, r3, r2
 80042d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042d6:	464b      	mov	r3, r9
 80042d8:	460a      	mov	r2, r1
 80042da:	eb42 0303 	adc.w	r3, r2, r3
 80042de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ea:	667a      	str	r2, [r7, #100]	; 0x64
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042f8:	4649      	mov	r1, r9
 80042fa:	008b      	lsls	r3, r1, #2
 80042fc:	4641      	mov	r1, r8
 80042fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004302:	4641      	mov	r1, r8
 8004304:	008a      	lsls	r2, r1, #2
 8004306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800430a:	f7fc fc3f 	bl	8000b8c <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <UART_SetConfig+0x4e4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <UART_SetConfig+0x4e4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4422      	add	r2, r4
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004348:	51eb851f 	.word	0x51eb851f

0800434c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800434c:	b084      	sub	sp, #16
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	f107 001c 	add.w	r0, r7, #28
 800435a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d122      	bne.n	80043aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 fbee 	bl	8005b80 <USB_CoreReset>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e01a      	b.n	80043e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fbe2 	bl	8005b80 <USB_CoreReset>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
 80043d2:	e005      	b.n	80043e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10b      	bne.n	80043fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f043 0206 	orr.w	r2, r3, #6
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
	...

08004410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d165      	bne.n	80044f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <USB_SetTurnaroundTime+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d906      	bls.n	800443a <USB_SetTurnaroundTime+0x2a>
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4a40      	ldr	r2, [pc, #256]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d202      	bcs.n	800443a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004434:	230f      	movs	r3, #15
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e062      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <USB_SetTurnaroundTime+0x120>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d306      	bcc.n	8004450 <USB_SetTurnaroundTime+0x40>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d202      	bcs.n	8004450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800444a:	230e      	movs	r3, #14
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e057      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a38      	ldr	r2, [pc, #224]	; (8004534 <USB_SetTurnaroundTime+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d306      	bcc.n	8004466 <USB_SetTurnaroundTime+0x56>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4a37      	ldr	r2, [pc, #220]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d202      	bcs.n	8004466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004460:	230d      	movs	r3, #13
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e04c      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a33      	ldr	r2, [pc, #204]	; (8004538 <USB_SetTurnaroundTime+0x128>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d306      	bcc.n	800447c <USB_SetTurnaroundTime+0x6c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4a32      	ldr	r2, [pc, #200]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d802      	bhi.n	800447c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004476:	230c      	movs	r3, #12
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e041      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a2f      	ldr	r2, [pc, #188]	; (800453c <USB_SetTurnaroundTime+0x12c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d906      	bls.n	8004492 <USB_SetTurnaroundTime+0x82>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d802      	bhi.n	8004492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800448c:	230b      	movs	r3, #11
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e036      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <USB_SetTurnaroundTime+0x130>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d906      	bls.n	80044a8 <USB_SetTurnaroundTime+0x98>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a29      	ldr	r2, [pc, #164]	; (8004544 <USB_SetTurnaroundTime+0x134>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d802      	bhi.n	80044a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044a2:	230a      	movs	r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e02b      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <USB_SetTurnaroundTime+0x134>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d906      	bls.n	80044be <USB_SetTurnaroundTime+0xae>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <USB_SetTurnaroundTime+0x138>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d202      	bcs.n	80044be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b8:	2309      	movs	r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e020      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a21      	ldr	r2, [pc, #132]	; (8004548 <USB_SetTurnaroundTime+0x138>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d306      	bcc.n	80044d4 <USB_SetTurnaroundTime+0xc4>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a20      	ldr	r2, [pc, #128]	; (800454c <USB_SetTurnaroundTime+0x13c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d802      	bhi.n	80044d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ce:	2308      	movs	r3, #8
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e015      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <USB_SetTurnaroundTime+0x13c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d906      	bls.n	80044ea <USB_SetTurnaroundTime+0xda>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <USB_SetTurnaroundTime+0x140>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d202      	bcs.n	80044ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e4:	2307      	movs	r3, #7
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e00a      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044ea:	2306      	movs	r3, #6
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e007      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044f6:	2309      	movs	r3, #9
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e001      	b.n	8004500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044fc:	2309      	movs	r3, #9
 80044fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	00d8acbf 	.word	0x00d8acbf
 8004530:	00e4e1c0 	.word	0x00e4e1c0
 8004534:	00f42400 	.word	0x00f42400
 8004538:	01067380 	.word	0x01067380
 800453c:	011a499f 	.word	0x011a499f
 8004540:	01312cff 	.word	0x01312cff
 8004544:	014ca43f 	.word	0x014ca43f
 8004548:	016e3600 	.word	0x016e3600
 800454c:	01a6ab1f 	.word	0x01a6ab1f
 8004550:	01e84800 	.word	0x01e84800

08004554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d115      	bne.n	80045e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7fd f9ee 	bl	80019a8 <HAL_Delay>
      ms++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 fa45 	bl	8005a62 <USB_GetMode>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d01e      	beq.n	800461c <USB_SetCurrentMode+0x84>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b31      	cmp	r3, #49	; 0x31
 80045e2:	d9f0      	bls.n	80045c6 <USB_SetCurrentMode+0x2e>
 80045e4:	e01a      	b.n	800461c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d115      	bne.n	8004618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f8:	2001      	movs	r0, #1
 80045fa:	f7fd f9d5 	bl	80019a8 <HAL_Delay>
      ms++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3301      	adds	r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 fa2c 	bl	8005a62 <USB_GetMode>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <USB_SetCurrentMode+0x84>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b31      	cmp	r3, #49	; 0x31
 8004614:	d9f0      	bls.n	80045f8 <USB_SetCurrentMode+0x60>
 8004616:	e001      	b.n	800461c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e005      	b.n	8004628 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b32      	cmp	r3, #50	; 0x32
 8004620:	d101      	bne.n	8004626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004630:	b084      	sub	sp, #16
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800463e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e009      	b.n	8004664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3340      	adds	r3, #64	; 0x40
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	2200      	movs	r2, #0
 800465c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0e      	cmp	r3, #14
 8004668:	d9f2      	bls.n	8004650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11c      	bne.n	80046aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
 80046a8:	e00b      	b.n	80046c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c8:	461a      	mov	r2, r3
 80046ca:	2300      	movs	r3, #0
 80046cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d4:	4619      	mov	r1, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	461a      	mov	r2, r3
 80046de:	680b      	ldr	r3, [r1, #0]
 80046e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10c      	bne.n	8004702 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ee:	2100      	movs	r1, #0
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f965 	bl	80049c0 <USB_SetDevSpeed>
 80046f6:	e008      	b.n	800470a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046f8:	2101      	movs	r1, #1
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f960 	bl	80049c0 <USB_SetDevSpeed>
 8004700:	e003      	b.n	800470a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004702:	2103      	movs	r1, #3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f95b 	bl	80049c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800470a:	2110      	movs	r1, #16
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8f3 	bl	80048f8 <USB_FlushTxFifo>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f91f 	bl	8004960 <USB_FlushRxFifo>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474a:	461a      	mov	r2, r3
 800474c:	2300      	movs	r3, #0
 800474e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	e043      	b.n	80047de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800476c:	d118      	bne.n	80047a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e013      	b.n	80047b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	461a      	mov	r2, r3
 8004798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e008      	b.n	80047b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	461a      	mov	r2, r3
 80047d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3301      	adds	r3, #1
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3b7      	bcc.n	8004756 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e043      	b.n	8004874 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004802:	d118      	bne.n	8004836 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e013      	b.n	8004848 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e008      	b.n	8004848 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	2300      	movs	r3, #0
 8004858:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	461a      	mov	r2, r3
 8004868:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800486c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3301      	adds	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d3b7      	bcc.n	80047ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800488e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800489c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <USB_DevInit+0x2c4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f043 0208 	orr.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d107      	bne.n	80048e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048f0:	b004      	add	sp, #16
 80048f2:	4770      	bx	lr
 80048f4:	803c3800 	.word	0x803c3800

080048f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <USB_FlushTxFifo+0x64>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e01b      	b.n	8004950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	daf2      	bge.n	8004906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	019b      	lsls	r3, r3, #6
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <USB_FlushTxFifo+0x64>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e006      	b.n	8004950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d0f0      	beq.n	8004930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	00030d40 	.word	0x00030d40

08004960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <USB_FlushRxFifo+0x5c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e018      	b.n	80049b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	daf2      	bge.n	800496c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2210      	movs	r2, #16
 800498e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <USB_FlushRxFifo+0x5c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e006      	b.n	80049b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d0f0      	beq.n	8004990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	00030d40 	.word	0x00030d40

080049c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]
 8004a16:	e00a      	b.n	8004a2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d002      	beq.n	8004a24 <USB_GetDevSpeed+0x32>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d102      	bne.n	8004a2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a24:	2302      	movs	r3, #2
 8004a26:	75fb      	strb	r3, [r7, #23]
 8004a28:	e001      	b.n	8004a2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a2a:	230f      	movs	r3, #15
 8004a2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d13a      	bne.n	8004ace <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	68f9      	ldr	r1, [r7, #12]
 8004a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d155      	bne.n	8004b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	059b      	lsls	r3, r3, #22
 8004ab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	e036      	b.n	8004b3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	2101      	movs	r1, #1
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11a      	bne.n	8004b3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	791b      	ldrb	r3, [r3, #4]
 8004b20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b22:	430b      	orrs	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d161      	bne.n	8004c2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b7e:	d11f      	bne.n	8004bc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be0:	4013      	ands	r3, r2
 8004be2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c04:	4013      	ands	r3, r2
 8004c06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0159      	lsls	r1, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	440b      	add	r3, r1
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	4619      	mov	r1, r3
 8004c24:	4b35      	ldr	r3, [pc, #212]	; (8004cfc <USB_DeactivateEndpoint+0x1b0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
 8004c2a:	e060      	b.n	8004cee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c42:	d11f      	bne.n	8004c84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0159      	lsls	r1, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <USB_DeactivateEndpoint+0x1b4>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	ec337800 	.word	0xec337800
 8004d00:	eff37800 	.word	0xeff37800

08004d04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 815c 	bne.w	8004fde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d132      	bne.n	8004d94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	0cdb      	lsrs	r3, r3, #19
 8004d8e:	04db      	lsls	r3, r3, #19
 8004d90:	6113      	str	r3, [r2, #16]
 8004d92:	e074      	b.n	8004e7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dae:	0cdb      	lsrs	r3, r3, #19
 8004db0:	04db      	lsls	r3, r3, #19
 8004db2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	440b      	add	r3, r1
 8004df0:	1e59      	subs	r1, r3, #1
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004dfc:	4b9d      	ldr	r3, [pc, #628]	; (8005074 <USB_EPStartXfer+0x370>)
 8004dfe:	400b      	ands	r3, r1
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	0148      	lsls	r0, r1, #5
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	4401      	add	r1, r0
 8004e08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	69b9      	ldr	r1, [r7, #24]
 8004e28:	0148      	lsls	r0, r1, #5
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	4401      	add	r1, r0
 8004e2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e32:	4313      	orrs	r3, r2
 8004e34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	791b      	ldrb	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d11f      	bne.n	8004e7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d14b      	bne.n	8004f1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d128      	bne.n	8004efa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d110      	bne.n	8004eda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e00f      	b.n	8004efa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e133      	b.n	8005184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d015      	beq.n	8004f70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 811b 	beq.w	8005184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f6e:	e109      	b.n	8005184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e00f      	b.n	8004fc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6919      	ldr	r1, [r3, #16]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	b298      	uxth	r0, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fade 	bl	8005598 <USB_WritePacket>
 8004fdc:	e0d2      	b.n	8005184 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff8:	0cdb      	lsrs	r3, r3, #19
 8004ffa:	04db      	lsls	r3, r3, #19
 8004ffc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800501c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005020:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d126      	bne.n	8005078 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	0148      	lsls	r0, r1, #5
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	4401      	add	r1, r0
 8005048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800504c:	4313      	orrs	r3, r2
 800504e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800506e:	6113      	str	r3, [r2, #16]
 8005070:	e03a      	b.n	80050e8 <USB_EPStartXfer+0x3e4>
 8005072:	bf00      	nop
 8005074:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4413      	add	r3, r2
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	8afa      	ldrh	r2, [r7, #22]
 8005094:	fb03 f202 	mul.w	r2, r3, r2
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	8afb      	ldrh	r3, [r7, #22]
 80050ac:	04d9      	lsls	r1, r3, #19
 80050ae:	4b38      	ldr	r3, [pc, #224]	; (8005190 <USB_EPStartXfer+0x48c>)
 80050b0:	400b      	ands	r3, r1
 80050b2:	69b9      	ldr	r1, [r7, #24]
 80050b4:	0148      	lsls	r0, r1, #5
 80050b6:	69f9      	ldr	r1, [r7, #28]
 80050b8:	4401      	add	r1, r0
 80050ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d8:	69b9      	ldr	r1, [r7, #24]
 80050da:	0148      	lsls	r0, r1, #5
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	4401      	add	r1, r0
 80050e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d10d      	bne.n	800510a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6919      	ldr	r1, [r3, #16]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	460a      	mov	r2, r1
 8005108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	791b      	ldrb	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d128      	bne.n	8005164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d110      	bne.n	8005144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e00f      	b.n	8005164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	1ff80000 	.word	0x1ff80000

08005194 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 80ce 	bne.w	8005352 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d132      	bne.n	8005224 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	0cdb      	lsrs	r3, r3, #19
 800521e:	04db      	lsls	r3, r3, #19
 8005220:	6113      	str	r3, [r2, #16]
 8005222:	e04e      	b.n	80052c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	0cdb      	lsrs	r3, r3, #19
 8005240:	04db      	lsls	r3, r3, #19
 8005242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005266:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	0148      	lsls	r0, r1, #5
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	4401      	add	r1, r0
 80052ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d11e      	bne.n	8005306 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e097      	b.n	8005436 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005324:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8083 	beq.w	8005436 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534c:	4313      	orrs	r3, r2
 800534e:	634b      	str	r3, [r1, #52]	; 0x34
 8005350:	e071      	b.n	8005436 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	0cdb      	lsrs	r3, r3, #19
 800536e:	04db      	lsls	r3, r3, #19
 8005370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	6939      	ldr	r1, [r7, #16]
 80053e6:	0148      	lsls	r0, r1, #5
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	4401      	add	r1, r0
 80053ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10d      	bne.n	8005416 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6919      	ldr	r1, [r3, #16]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	460a      	mov	r2, r1
 8005414:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005434:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d14a      	bne.n	80054f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547a:	f040 8086 	bne.w	800558a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3301      	adds	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d902      	bls.n	80054dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
          break;
 80054da:	e056      	b.n	800558a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f4:	d0e7      	beq.n	80054c6 <USB_EPStopXfer+0x82>
 80054f6:	e048      	b.n	800558a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800550c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005510:	d13b      	bne.n	800558a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	440a      	add	r2, r1
 800552c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005534:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005558:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f242 7210 	movw	r2, #10000	; 0x2710
 8005566:	4293      	cmp	r3, r2
 8005568:	d902      	bls.n	8005570 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
          break;
 800556e:	e00c      	b.n	800558a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005588:	d0e7      	beq.n	800555a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	460b      	mov	r3, r1
 80055a8:	71fb      	strb	r3, [r7, #7]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d123      	bne.n	8005606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055be:	88bb      	ldrh	r3, [r7, #4]
 80055c0:	3303      	adds	r3, #3
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e018      	b.n	80055fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	031a      	lsls	r2, r3, #12
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	461a      	mov	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	3301      	adds	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3301      	adds	r3, #1
 80055ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	429a      	cmp	r2, r3
 8005604:	d3e2      	bcc.n	80055cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3724      	adds	r7, #36	; 0x24
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005614:	b480      	push	{r7}
 8005616:	b08b      	sub	sp, #44	; 0x2c
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	b29b      	uxth	r3, r3
 8005630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	e014      	b.n	800566a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	601a      	str	r2, [r3, #0]
    pDest++;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	3301      	adds	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	3301      	adds	r3, #1
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	3301      	adds	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	3301      	adds	r3, #1
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	3301      	adds	r3, #1
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	429a      	cmp	r2, r3
 8005670:	d3e6      	bcc.n	8005640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005672:	8bfb      	ldrh	r3, [r7, #30]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01e      	beq.n	80056b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005682:	461a      	mov	r2, r3
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	b2da      	uxtb	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	701a      	strb	r2, [r3, #0]
      i++;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	3301      	adds	r3, #1
 80056a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	3301      	adds	r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056aa:	8bfb      	ldrh	r3, [r7, #30]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056b0:	8bfb      	ldrh	r3, [r7, #30]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ea      	bne.n	800568c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	372c      	adds	r7, #44	; 0x2c
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d12c      	bne.n	800573a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db12      	blt.n	8005718 <USB_EPSetStall+0x54>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00f      	beq.n	8005718 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005716:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e02b      	b.n	8005792 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	db12      	blt.n	8005772 <USB_EPSetStall+0xae>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00f      	beq.n	8005772 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005770:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005790:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d128      	bne.n	800580e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	791b      	ldrb	r3, [r3, #4]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d003      	beq.n	80057ec <USB_EPClearStall+0x4c>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	791b      	ldrb	r3, [r3, #4]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d138      	bne.n	800585e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e027      	b.n	800585e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800582c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d003      	beq.n	800583e <USB_EPClearStall+0x9e>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	791b      	ldrb	r3, [r3, #4]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d10f      	bne.n	800585e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800588a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800588e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f023 0302 	bic.w	r3, r3, #2
 80058ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005914:	f023 0303 	bic.w	r3, r3, #3
 8005918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4013      	ands	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005954:	68fb      	ldr	r3, [r7, #12]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0c1b      	lsrs	r3, r3, #16
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	b29b      	uxth	r3, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059f8:	68bb      	ldr	r3, [r7, #8]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	01db      	lsls	r3, r3, #7
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a54:	68bb      	ldr	r3, [r7, #8]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a9c:	f023 0307 	bic.w	r3, r3, #7
 8005aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	460b      	mov	r3, r1
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	333c      	adds	r3, #60	; 0x3c
 8005ada:	3304      	adds	r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <USB_EP0_OutStart+0xb8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d90a      	bls.n	8005afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af8:	d101      	bne.n	8005afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e037      	b.n	8005b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	461a      	mov	r2, r3
 8005b06:	2300      	movs	r3, #0
 8005b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2c:	f043 0318 	orr.w	r3, r3, #24
 8005b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10f      	bne.n	8005b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	4f54300a 	.word	0x4f54300a

08005b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <USB_CoreReset+0x64>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e01b      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	daf2      	bge.n	8005b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <USB_CoreReset+0x64>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d0f0      	beq.n	8005bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	00030d40 	.word	0x00030d40

08005be8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005bf4:	2010      	movs	r0, #16
 8005bf6:	f002 f93d 	bl	8007e74 <USBD_static_malloc>
 8005bfa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d109      	bne.n	8005c16 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	; 0xb0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e048      	b.n	8005ca8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	32b0      	adds	r2, #176	; 0xb0
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	32b0      	adds	r2, #176	; 0xb0
 8005c30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7c1b      	ldrb	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <USBD_HID_Init+0xc8>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f003 020f 	and.w	r2, r3, #15
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	3326      	adds	r3, #38	; 0x26
 8005c58:	2207      	movs	r2, #7
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	e00c      	b.n	8005c78 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <USBD_HID_Init+0xc8>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 020f 	and.w	r2, r3, #15
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	3326      	adds	r3, #38	; 0x26
 8005c74:	220a      	movs	r2, #10
 8005c76:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <USBD_HID_Init+0xc8>)
 8005c7a:	7819      	ldrb	r1, [r3, #0]
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	2203      	movs	r2, #3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 ffe6 	bl	8007c52 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <USBD_HID_Init+0xc8>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	3324      	adds	r3, #36	; 0x24
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	200000ca 	.word	0x200000ca

08005cb4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <USBD_HID_DeInit+0x8c>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 ffe9 	bl	8007c9e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <USBD_HID_DeInit+0x8c>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3324      	adds	r3, #36	; 0x24
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <USBD_HID_DeInit+0x8c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	f003 020f 	and.w	r2, r3, #15
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3326      	adds	r3, #38	; 0x26
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32b0      	adds	r2, #176	; 0xb0
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d011      	beq.n	8005d36 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	32b0      	adds	r2, #176	; 0xb0
 8005d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f002 f8b5 	bl	8007e90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	32b0      	adds	r2, #176	; 0xb0
 8005d30:	2100      	movs	r1, #0
 8005d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	200000ca 	.word	0x200000ca

08005d44 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	; 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e0e8      	b.n	8005f42 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d046      	beq.n	8005e0a <USBD_HID_Setup+0xc6>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 80d8 	bne.w	8005f32 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	3b02      	subs	r3, #2
 8005d88:	2b09      	cmp	r3, #9
 8005d8a:	d836      	bhi.n	8005dfa <USBD_HID_Setup+0xb6>
 8005d8c:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <USBD_HID_Setup+0x50>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005deb 	.word	0x08005deb
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005dfb 	.word	0x08005dfb
 8005da0:	08005dfb 	.word	0x08005dfb
 8005da4:	08005dfb 	.word	0x08005dfb
 8005da8:	08005dfb 	.word	0x08005dfb
 8005dac:	08005dfb 	.word	0x08005dfb
 8005db0:	08005dfb 	.word	0x08005dfb
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005dbd 	.word	0x08005dbd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	885b      	ldrh	r3, [r3, #2]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]
          break;
 8005dc8:	e01e      	b.n	8005e08 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f001 fbe9 	bl	80075a8 <USBD_CtlSendData>
          break;
 8005dd6:	e017      	b.n	8005e08 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	885b      	ldrh	r3, [r3, #2]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]
          break;
 8005de8:	e00e      	b.n	8005e08 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2201      	movs	r2, #1
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fbd8 	bl	80075a8 <USBD_CtlSendData>
          break;
 8005df8:	e006      	b.n	8005e08 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fb62 	bl	80074c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e02:	2303      	movs	r3, #3
 8005e04:	75fb      	strb	r3, [r7, #23]
          break;
 8005e06:	bf00      	nop
      }
      break;
 8005e08:	e09a      	b.n	8005f40 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b0b      	cmp	r3, #11
 8005e10:	f200 8086 	bhi.w	8005f20 <USBD_HID_Setup+0x1dc>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USBD_HID_Setup+0xd8>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e4d 	.word	0x08005e4d
 8005e20:	08005f2f 	.word	0x08005f2f
 8005e24:	08005f21 	.word	0x08005f21
 8005e28:	08005f21 	.word	0x08005f21
 8005e2c:	08005f21 	.word	0x08005f21
 8005e30:	08005f21 	.word	0x08005f21
 8005e34:	08005e77 	.word	0x08005e77
 8005e38:	08005f21 	.word	0x08005f21
 8005e3c:	08005f21 	.word	0x08005f21
 8005e40:	08005f21 	.word	0x08005f21
 8005e44:	08005ecf 	.word	0x08005ecf
 8005e48:	08005ef9 	.word	0x08005ef9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d107      	bne.n	8005e68 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e58:	f107 030a 	add.w	r3, r7, #10
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fba1 	bl	80075a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e66:	e063      	b.n	8005f30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fb2b 	bl	80074c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	75fb      	strb	r3, [r7, #23]
          break;
 8005e74:	e05c      	b.n	8005f30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b22      	cmp	r3, #34	; 0x22
 8005e80:	d108      	bne.n	8005e94 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	88db      	ldrh	r3, [r3, #6]
 8005e86:	2b4a      	cmp	r3, #74	; 0x4a
 8005e88:	bf28      	it	cs
 8005e8a:	234a      	movcs	r3, #74	; 0x4a
 8005e8c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <USBD_HID_Setup+0x208>)
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	e015      	b.n	8005ec0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b21      	cmp	r3, #33	; 0x21
 8005e9e:	d108      	bne.n	8005eb2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <USBD_HID_Setup+0x20c>)
 8005ea2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	88db      	ldrh	r3, [r3, #6]
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	bf28      	it	cs
 8005eac:	2309      	movcs	r3, #9
 8005eae:	82bb      	strh	r3, [r7, #20]
 8005eb0:	e006      	b.n	8005ec0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 fb06 	bl	80074c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	75fb      	strb	r3, [r7, #23]
            break;
 8005ebe:	e037      	b.n	8005f30 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ec0:	8abb      	ldrh	r3, [r7, #20]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6939      	ldr	r1, [r7, #16]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 fb6e 	bl	80075a8 <USBD_CtlSendData>
          break;
 8005ecc:	e030      	b.n	8005f30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d107      	bne.n	8005eea <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3308      	adds	r3, #8
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fb60 	bl	80075a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ee8:	e022      	b.n	8005f30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 faea 	bl	80074c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef6:	e01b      	b.n	8005f30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d106      	bne.n	8005f12 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	885b      	ldrh	r3, [r3, #2]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f10:	e00e      	b.n	8005f30 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fad6 	bl	80074c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e007      	b.n	8005f30 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 facf 	bl	80074c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f2c:	e000      	b.n	8005f30 <USBD_HID_Setup+0x1ec>
          break;
 8005f2e:	bf00      	nop
      }
      break;
 8005f30:	e006      	b.n	8005f40 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fac6 	bl	80074c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000080 	.word	0x20000080
 8005f50:	20000068 	.word	0x20000068

08005f54 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	32b0      	adds	r2, #176	; 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e014      	b.n	8005fa6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d10d      	bne.n	8005fa4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	7b1b      	ldrb	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2201      	movs	r2, #1
 8005f94:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <USBD_HID_SendReport+0x5c>)
 8005f98:	7819      	ldrb	r1, [r3, #0]
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 ff25 	bl	8007dee <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200000ca 	.word	0x200000ca

08005fb4 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e001      	b.n	8005fce <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8005fca:	230a      	movs	r3, #10
 8005fcc:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 8005fce:	68fb      	ldr	r3, [r7, #12]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005fe4:	2181      	movs	r1, #129	; 0x81
 8005fe6:	4809      	ldr	r0, [pc, #36]	; (800600c <USBD_HID_GetFSCfgDesc+0x30>)
 8005fe8:	f000 fc35 	bl	8006856 <USBD_GetEpDesc>
 8005fec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	220a      	movs	r2, #10
 8005ff8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2222      	movs	r2, #34	; 0x22
 8005ffe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006000:	4b02      	ldr	r3, [pc, #8]	; (800600c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000044 	.word	0x20000044

08006010 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006018:	2181      	movs	r1, #129	; 0x81
 800601a:	4809      	ldr	r0, [pc, #36]	; (8006040 <USBD_HID_GetHSCfgDesc+0x30>)
 800601c:	f000 fc1b 	bl	8006856 <USBD_GetEpDesc>
 8006020:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2207      	movs	r2, #7
 800602c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2222      	movs	r2, #34	; 0x22
 8006032:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000044 	.word	0x20000044

08006044 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800604c:	2181      	movs	r1, #129	; 0x81
 800604e:	4809      	ldr	r0, [pc, #36]	; (8006074 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006050:	f000 fc01 	bl	8006856 <USBD_GetEpDesc>
 8006054:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	220a      	movs	r2, #10
 8006060:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2222      	movs	r2, #34	; 0x22
 8006066:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006068:	4b02      	ldr	r3, [pc, #8]	; (8006074 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000044 	.word	0x20000044

08006078 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	; 0xb0
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	2200      	movs	r2, #0
 8006094:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	220a      	movs	r2, #10
 80060b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80060b2:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000074 	.word	0x20000074

080060c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	e01f      	b.n	800611c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	79fa      	ldrb	r2, [r7, #7]
 800610e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 fd37 	bl	8007b84 <USBD_LL_Init>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]

  return ret;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	e025      	b.n	8006188 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	32ae      	adds	r2, #174	; 0xae
 800614e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32ae      	adds	r2, #174	; 0xae
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f107 020e 	add.w	r2, r7, #14
 800616c:	4610      	mov	r0, r2
 800616e:	4798      	blx	r3
 8006170:	4602      	mov	r2, r0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fd3f 	bl	8007c1c <USBD_LL_Start>
 800619e:	4603      	mov	r3, r0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	4611      	mov	r1, r2
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	4611      	mov	r1, r2
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f001 f908 	bl	8007452 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2b02      	cmp	r3, #2
 8006264:	d01a      	beq.n	800629c <USBD_LL_SetupStage+0x72>
 8006266:	2b02      	cmp	r3, #2
 8006268:	d822      	bhi.n	80062b0 <USBD_LL_SetupStage+0x86>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <USBD_LL_SetupStage+0x4a>
 800626e:	2b01      	cmp	r3, #1
 8006270:	d00a      	beq.n	8006288 <USBD_LL_SetupStage+0x5e>
 8006272:	e01d      	b.n	80062b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fb5f 	bl	8006940 <USBD_StdDevReq>
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
      break;
 8006286:	e020      	b.n	80062ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fbc7 	bl	8006a24 <USBD_StdItfReq>
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
      break;
 800629a:	e016      	b.n	80062ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fc29 	bl	8006afc <USBD_StdEPReq>
 80062aa:	4603      	mov	r3, r0
 80062ac:	73fb      	strb	r3, [r7, #15]
      break;
 80062ae:	e00c      	b.n	80062ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 fd0c 	bl	8007cdc <USBD_LL_StallEP>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]
      break;
 80062c8:	bf00      	nop
  }

  return ret;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	460b      	mov	r3, r1
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d16e      	bne.n	80063ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	f040 8098 	bne.w	8006430 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d913      	bls.n	8006334 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4293      	cmp	r3, r2
 8006324:	bf28      	it	cs
 8006326:	4613      	movcs	r3, r2
 8006328:	461a      	mov	r2, r3
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 f967 	bl	8007600 <USBD_CtlContinueRx>
 8006332:	e07d      	b.n	8006430 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2b02      	cmp	r3, #2
 8006340:	d014      	beq.n	800636c <USBD_LL_DataOutStage+0x98>
 8006342:	2b02      	cmp	r3, #2
 8006344:	d81d      	bhi.n	8006382 <USBD_LL_DataOutStage+0xae>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <USBD_LL_DataOutStage+0x7c>
 800634a:	2b01      	cmp	r3, #1
 800634c:	d003      	beq.n	8006356 <USBD_LL_DataOutStage+0x82>
 800634e:	e018      	b.n	8006382 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	75bb      	strb	r3, [r7, #22]
            break;
 8006354:	e018      	b.n	8006388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fa5e 	bl	8006822 <USBD_CoreFindIF>
 8006366:	4603      	mov	r3, r0
 8006368:	75bb      	strb	r3, [r7, #22]
            break;
 800636a:	e00d      	b.n	8006388 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006372:	b2db      	uxtb	r3, r3
 8006374:	4619      	mov	r1, r3
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fa60 	bl	800683c <USBD_CoreFindEP>
 800637c:	4603      	mov	r3, r0
 800637e:	75bb      	strb	r3, [r7, #22]
            break;
 8006380:	e002      	b.n	8006388 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	75bb      	strb	r3, [r7, #22]
            break;
 8006386:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006388:	7dbb      	ldrb	r3, [r7, #22]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d119      	bne.n	80063c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d113      	bne.n	80063c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800639a:	7dba      	ldrb	r2, [r7, #22]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	32ae      	adds	r2, #174	; 0xae
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80063aa:	7dba      	ldrb	r2, [r7, #22]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80063b2:	7dba      	ldrb	r2, [r7, #22]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	32ae      	adds	r2, #174	; 0xae
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 f92d 	bl	8007622 <USBD_CtlSendStatus>
 80063c8:	e032      	b.n	8006430 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa31 	bl	800683c <USBD_CoreFindEP>
 80063da:	4603      	mov	r3, r0
 80063dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063de:	7dbb      	ldrb	r3, [r7, #22]
 80063e0:	2bff      	cmp	r3, #255	; 0xff
 80063e2:	d025      	beq.n	8006430 <USBD_LL_DataOutStage+0x15c>
 80063e4:	7dbb      	ldrb	r3, [r7, #22]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d122      	bne.n	8006430 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d117      	bne.n	8006426 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063f6:	7dba      	ldrb	r2, [r7, #22]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	32ae      	adds	r2, #174	; 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00f      	beq.n	8006426 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006406:	7dba      	ldrb	r2, [r7, #22]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800640e:	7dba      	ldrb	r2, [r7, #22]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	32ae      	adds	r2, #174	; 0xae
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	7afa      	ldrb	r2, [r7, #11]
 800641c:	4611      	mov	r1, r2
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	e000      	b.n	8006432 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	460b      	mov	r3, r1
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d16f      	bne.n	800652e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3314      	adds	r3, #20
 8006452:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800645a:	2b02      	cmp	r3, #2
 800645c:	d15a      	bne.n	8006514 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	429a      	cmp	r2, r3
 8006468:	d914      	bls.n	8006494 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	1ad2      	subs	r2, r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	461a      	mov	r2, r3
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f001 f8ac 	bl	80075de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006486:	2300      	movs	r3, #0
 8006488:	2200      	movs	r2, #0
 800648a:	2100      	movs	r1, #0
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f001 fccf 	bl	8007e30 <USBD_LL_PrepareReceive>
 8006492:	e03f      	b.n	8006514 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	d11c      	bne.n	80064da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d316      	bcc.n	80064da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d20f      	bcs.n	80064da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f001 f88d 	bl	80075de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064cc:	2300      	movs	r3, #0
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f001 fcac 	bl	8007e30 <USBD_LL_PrepareReceive>
 80064d8:	e01c      	b.n	8006514 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d10f      	bne.n	8006506 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006506:	2180      	movs	r1, #128	; 0x80
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f001 fbe7 	bl	8007cdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f001 f89a 	bl	8007648 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d03a      	beq.n	8006594 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff fe42 	bl	80061a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800652c:	e032      	b.n	8006594 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4619      	mov	r1, r3
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f97f 	bl	800683c <USBD_CoreFindEP>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2bff      	cmp	r3, #255	; 0xff
 8006546:	d025      	beq.n	8006594 <USBD_LL_DataInStage+0x15a>
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d122      	bne.n	8006594 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d11c      	bne.n	8006594 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800655a:	7dfa      	ldrb	r2, [r7, #23]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	32ae      	adds	r2, #174	; 0xae
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d014      	beq.n	8006594 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800656a:	7dfa      	ldrb	r2, [r7, #23]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006572:	7dfa      	ldrb	r2, [r7, #23]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	32ae      	adds	r2, #174	; 0xae
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	7afa      	ldrb	r2, [r7, #11]
 8006580:	4611      	mov	r1, r2
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800658a:	7dbb      	ldrb	r3, [r7, #22]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006590:	7dbb      	ldrb	r3, [r7, #22]
 8006592:	e000      	b.n	8006596 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00e      	beq.n	8006604 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6852      	ldr	r2, [r2, #4]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	4611      	mov	r1, r2
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006604:	2340      	movs	r3, #64	; 0x40
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fb21 	bl	8007c52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2240      	movs	r2, #64	; 0x40
 800661c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006620:	2340      	movs	r3, #64	; 0x40
 8006622:	2200      	movs	r2, #0
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 fb13 	bl	8007c52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2240      	movs	r2, #64	; 0x40
 8006636:	621a      	str	r2, [r3, #32]

  return ret;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006670:	b2da      	uxtb	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2204      	movs	r2, #4
 800667c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d106      	bne.n	80066b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d110      	bne.n	80066f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32ae      	adds	r2, #174	; 0xae
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e01c      	b.n	800675a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d115      	bne.n	8006758 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	32ae      	adds	r2, #174	; 0xae
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32ae      	adds	r2, #174	; 0xae
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	4611      	mov	r1, r2
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	32ae      	adds	r2, #174	; 0xae
 8006778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006780:	2303      	movs	r3, #3
 8006782:	e01c      	b.n	80067be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d115      	bne.n	80067bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	32ae      	adds	r2, #174	; 0xae
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32ae      	adds	r2, #174	; 0xae
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	4611      	mov	r1, r2
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6852      	ldr	r2, [r2, #4]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	4611      	mov	r1, r2
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800682e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006848:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b086      	sub	sp, #24
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	885b      	ldrh	r3, [r3, #2]
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	429a      	cmp	r2, r3
 800687c:	d920      	bls.n	80068c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006886:	e013      	b.n	80068b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006888:	f107 030a 	add.w	r3, r7, #10
 800688c:	4619      	mov	r1, r3
 800688e:	6978      	ldr	r0, [r7, #20]
 8006890:	f000 f81b 	bl	80068ca <USBD_GetNextDesc>
 8006894:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d108      	bne.n	80068b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	789b      	ldrb	r3, [r3, #2]
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d008      	beq.n	80068be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	885b      	ldrh	r3, [r3, #2]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d8e5      	bhi.n	8006888 <USBD_GetEpDesc+0x32>
 80068bc:	e000      	b.n	80068c0 <USBD_GetEpDesc+0x6a>
          break;
 80068be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80068c0:	693b      	ldr	r3, [r7, #16]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	3301      	adds	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006922:	8a3b      	ldrh	r3, [r7, #16]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b21a      	sxth	r2, r3
 8006928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800692c:	4313      	orrs	r3, r2
 800692e:	b21b      	sxth	r3, r3
 8006930:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006932:	89fb      	ldrh	r3, [r7, #14]
}
 8006934:	4618      	mov	r0, r3
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d005      	beq.n	8006966 <USBD_StdDevReq+0x26>
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d857      	bhi.n	8006a0e <USBD_StdDevReq+0xce>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00f      	beq.n	8006982 <USBD_StdDevReq+0x42>
 8006962:	2b20      	cmp	r3, #32
 8006964:	d153      	bne.n	8006a0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	32ae      	adds	r2, #174	; 0xae
 8006970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
      break;
 8006980:	e04a      	b.n	8006a18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b09      	cmp	r3, #9
 8006988:	d83b      	bhi.n	8006a02 <USBD_StdDevReq+0xc2>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <USBD_StdDevReq+0x50>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069e5 	.word	0x080069e5
 8006994:	080069f9 	.word	0x080069f9
 8006998:	08006a03 	.word	0x08006a03
 800699c:	080069ef 	.word	0x080069ef
 80069a0:	08006a03 	.word	0x08006a03
 80069a4:	080069c3 	.word	0x080069c3
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	08006a03 	.word	0x08006a03
 80069b0:	080069db 	.word	0x080069db
 80069b4:	080069cd 	.word	0x080069cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa3c 	bl	8006e38 <USBD_GetDescriptor>
          break;
 80069c0:	e024      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fba1 	bl	800710c <USBD_SetAddress>
          break;
 80069ca:	e01f      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fbe0 	bl	8007194 <USBD_SetConfig>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
          break;
 80069d8:	e018      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc83 	bl	80072e8 <USBD_GetConfig>
          break;
 80069e2:	e013      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fcb4 	bl	8007354 <USBD_GetStatus>
          break;
 80069ec:	e00e      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fce3 	bl	80073bc <USBD_SetFeature>
          break;
 80069f6:	e009      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fd07 	bl	800740e <USBD_ClrFeature>
          break;
 8006a00:	e004      	b.n	8006a0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fd5e 	bl	80074c6 <USBD_CtlError>
          break;
 8006a0a:	bf00      	nop
      }
      break;
 8006a0c:	e004      	b.n	8006a18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fd58 	bl	80074c6 <USBD_CtlError>
      break;
 8006a16:	bf00      	nop
  }

  return ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop

08006a24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d005      	beq.n	8006a4a <USBD_StdItfReq+0x26>
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	d852      	bhi.n	8006ae8 <USBD_StdItfReq+0xc4>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <USBD_StdItfReq+0x26>
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d14e      	bne.n	8006ae8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d840      	bhi.n	8006ada <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	889b      	ldrh	r3, [r3, #4]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d836      	bhi.n	8006ad0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	889b      	ldrh	r3, [r3, #4]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fed9 	bl	8006822 <USBD_CoreFindIF>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	2bff      	cmp	r3, #255	; 0xff
 8006a78:	d01d      	beq.n	8006ab6 <USBD_StdItfReq+0x92>
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11a      	bne.n	8006ab6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a80:	7bba      	ldrb	r2, [r7, #14]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32ae      	adds	r2, #174	; 0xae
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a90:	7bba      	ldrb	r2, [r7, #14]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a98:	7bba      	ldrb	r2, [r7, #14]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	32ae      	adds	r2, #174	; 0xae
 8006a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006aae:	e004      	b.n	8006aba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ab4:	e001      	b.n	8006aba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <USBD_StdItfReq+0xc0>
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fdaa 	bl	8007622 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ace:	e009      	b.n	8006ae4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fcf7 	bl	80074c6 <USBD_CtlError>
          break;
 8006ad8:	e004      	b.n	8006ae4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fcf2 	bl	80074c6 <USBD_CtlError>
          break;
 8006ae2:	e000      	b.n	8006ae6 <USBD_StdItfReq+0xc2>
          break;
 8006ae4:	bf00      	nop
      }
      break;
 8006ae6:	e004      	b.n	8006af2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fceb 	bl	80074c6 <USBD_CtlError>
      break;
 8006af0:	bf00      	nop
  }

  return ret;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	889b      	ldrh	r3, [r3, #4]
 8006b0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d007      	beq.n	8006b2c <USBD_StdEPReq+0x30>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	f200 817f 	bhi.w	8006e20 <USBD_StdEPReq+0x324>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02a      	beq.n	8006b7c <USBD_StdEPReq+0x80>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 817a 	bne.w	8006e20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fe83 	bl	800683c <USBD_CoreFindEP>
 8006b36:	4603      	mov	r3, r0
 8006b38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b3a:	7b7b      	ldrb	r3, [r7, #13]
 8006b3c:	2bff      	cmp	r3, #255	; 0xff
 8006b3e:	f000 8174 	beq.w	8006e2a <USBD_StdEPReq+0x32e>
 8006b42:	7b7b      	ldrb	r3, [r7, #13]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8170 	bne.w	8006e2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b4a:	7b7a      	ldrb	r2, [r7, #13]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b52:	7b7a      	ldrb	r2, [r7, #13]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	32ae      	adds	r2, #174	; 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8163 	beq.w	8006e2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b64:	7b7a      	ldrb	r2, [r7, #13]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	32ae      	adds	r2, #174	; 0xae
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b7a:	e156      	b.n	8006e2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d008      	beq.n	8006b96 <USBD_StdEPReq+0x9a>
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	f300 8145 	bgt.w	8006e14 <USBD_StdEPReq+0x318>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 809b 	beq.w	8006cc6 <USBD_StdEPReq+0x1ca>
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d03c      	beq.n	8006c0e <USBD_StdEPReq+0x112>
 8006b94:	e13e      	b.n	8006e14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d002      	beq.n	8006ba8 <USBD_StdEPReq+0xac>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d016      	beq.n	8006bd4 <USBD_StdEPReq+0xd8>
 8006ba6:	e02c      	b.n	8006c02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00d      	beq.n	8006bca <USBD_StdEPReq+0xce>
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d00a      	beq.n	8006bca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f88f 	bl	8007cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f88b 	bl	8007cdc <USBD_LL_StallEP>
 8006bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc8:	e020      	b.n	8006c0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc7a 	bl	80074c6 <USBD_CtlError>
              break;
 8006bd2:	e01b      	b.n	8006c0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	885b      	ldrh	r3, [r3, #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10e      	bne.n	8006bfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <USBD_StdEPReq+0xfe>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d008      	beq.n	8006bfa <USBD_StdEPReq+0xfe>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f871 	bl	8007cdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fd11 	bl	8007622 <USBD_CtlSendStatus>

              break;
 8006c00:	e004      	b.n	8006c0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc5e 	bl	80074c6 <USBD_CtlError>
              break;
 8006c0a:	bf00      	nop
          }
          break;
 8006c0c:	e107      	b.n	8006e1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d002      	beq.n	8006c20 <USBD_StdEPReq+0x124>
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d016      	beq.n	8006c4c <USBD_StdEPReq+0x150>
 8006c1e:	e04b      	b.n	8006cb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <USBD_StdEPReq+0x146>
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d00a      	beq.n	8006c42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f853 	bl	8007cdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f84f 	bl	8007cdc <USBD_LL_StallEP>
 8006c3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c40:	e040      	b.n	8006cc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fc3e 	bl	80074c6 <USBD_CtlError>
              break;
 8006c4a:	e03b      	b.n	8006cc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d136      	bne.n	8006cc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f859 	bl	8007d1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fcda 	bl	8007622 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fde2 	bl	800683c <USBD_CoreFindEP>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c7c:	7b7b      	ldrb	r3, [r7, #13]
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	d01f      	beq.n	8006cc2 <USBD_StdEPReq+0x1c6>
 8006c82:	7b7b      	ldrb	r3, [r7, #13]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11c      	bne.n	8006cc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c88:	7b7a      	ldrb	r2, [r7, #13]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c90:	7b7a      	ldrb	r2, [r7, #13]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	32ae      	adds	r2, #174	; 0xae
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ca0:	7b7a      	ldrb	r2, [r7, #13]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32ae      	adds	r2, #174	; 0xae
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006cb6:	e004      	b.n	8006cc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fc03 	bl	80074c6 <USBD_CtlError>
              break;
 8006cc0:	e000      	b.n	8006cc4 <USBD_StdEPReq+0x1c8>
              break;
 8006cc2:	bf00      	nop
          }
          break;
 8006cc4:	e0ab      	b.n	8006e1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d002      	beq.n	8006cd8 <USBD_StdEPReq+0x1dc>
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d032      	beq.n	8006d3c <USBD_StdEPReq+0x240>
 8006cd6:	e097      	b.n	8006e08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <USBD_StdEPReq+0x1f2>
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	d004      	beq.n	8006cee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fbed 	bl	80074c6 <USBD_CtlError>
                break;
 8006cec:	e091      	b.n	8006e12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da0b      	bge.n	8006d0e <USBD_StdEPReq+0x212>
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	3310      	adds	r3, #16
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	e00b      	b.n	8006d26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2202      	movs	r2, #2
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fc37 	bl	80075a8 <USBD_CtlSendData>
              break;
 8006d3a:	e06a      	b.n	8006e12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da11      	bge.n	8006d68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	3324      	adds	r3, #36	; 0x24
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d117      	bne.n	8006d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fbb0 	bl	80074c6 <USBD_CtlError>
                  break;
 8006d66:	e054      	b.n	8006e12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	f003 020f 	and.w	r2, r3, #15
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb9d 	bl	80074c6 <USBD_CtlError>
                  break;
 8006d8c:	e041      	b.n	8006e12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	da0b      	bge.n	8006dae <USBD_StdEPReq+0x2b2>
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	3310      	adds	r3, #16
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	3304      	adds	r3, #4
 8006dac:	e00b      	b.n	8006dc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dae:	7bbb      	ldrb	r3, [r7, #14]
 8006db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <USBD_StdEPReq+0x2d8>
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b80      	cmp	r3, #128	; 0x80
 8006dd2:	d103      	bne.n	8006ddc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e00e      	b.n	8006dfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ffb9 	bl	8007d58 <USBD_LL_IsStallEP>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	e002      	b.n	8006dfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fbd1 	bl	80075a8 <USBD_CtlSendData>
              break;
 8006e06:	e004      	b.n	8006e12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fb5b 	bl	80074c6 <USBD_CtlError>
              break;
 8006e10:	bf00      	nop
          }
          break;
 8006e12:	e004      	b.n	8006e1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb55 	bl	80074c6 <USBD_CtlError>
          break;
 8006e1c:	bf00      	nop
      }
      break;
 8006e1e:	e005      	b.n	8006e2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb4f 	bl	80074c6 <USBD_CtlError>
      break;
 8006e28:	e000      	b.n	8006e2c <USBD_StdEPReq+0x330>
      break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	f200 8128 	bhi.w	80070ae <USBD_GetDescriptor+0x276>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <USBD_GetDescriptor+0x2c>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006ed9 	.word	0x08006ed9
 8006e70:	080070af 	.word	0x080070af
 8006e74:	080070af 	.word	0x080070af
 8006e78:	0800704f 	.word	0x0800704f
 8006e7c:	0800707b 	.word	0x0800707b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
      break;
 8006e96:	e112      	b.n	80070be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7c1b      	ldrb	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10d      	bne.n	8006ebc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f107 0208 	add.w	r2, r7, #8
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
 8006eb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006eba:	e100      	b.n	80070be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	f107 0208 	add.w	r2, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	701a      	strb	r2, [r3, #0]
      break;
 8006ed6:	e0f2      	b.n	80070be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	f200 80ac 	bhi.w	800703c <USBD_GetDescriptor+0x204>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <USBD_GetDescriptor+0xb4>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006f05 	.word	0x08006f05
 8006ef0:	08006f39 	.word	0x08006f39
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006fa1 	.word	0x08006fa1
 8006efc:	08006fd5 	.word	0x08006fd5
 8006f00:	08007009 	.word	0x08007009
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	7c12      	ldrb	r2, [r2, #16]
 8006f1c:	f107 0108 	add.w	r1, r7, #8
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f26:	e091      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 facb 	bl	80074c6 <USBD_CtlError>
            err++;
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	3301      	adds	r3, #1
 8006f34:	72fb      	strb	r3, [r7, #11]
          break;
 8006f36:	e089      	b.n	800704c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f5a:	e077      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fab1 	bl	80074c6 <USBD_CtlError>
            err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
          break;
 8006f6a:	e06f      	b.n	800704c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	7c12      	ldrb	r2, [r2, #16]
 8006f84:	f107 0108 	add.w	r1, r7, #8
 8006f88:	4610      	mov	r0, r2
 8006f8a:	4798      	blx	r3
 8006f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8e:	e05d      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa97 	bl	80074c6 <USBD_CtlError>
            err++;
 8006f98:	7afb      	ldrb	r3, [r7, #11]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9e:	e055      	b.n	800704c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	7c12      	ldrb	r2, [r2, #16]
 8006fb8:	f107 0108 	add.w	r1, r7, #8
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4798      	blx	r3
 8006fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fc2:	e043      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa7d 	bl	80074c6 <USBD_CtlError>
            err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fd2:	e03b      	b.n	800704c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	f107 0108 	add.w	r1, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff6:	e029      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa63 	bl	80074c6 <USBD_CtlError>
            err++;
 8007000:	7afb      	ldrb	r3, [r7, #11]
 8007002:	3301      	adds	r3, #1
 8007004:	72fb      	strb	r3, [r7, #11]
          break;
 8007006:	e021      	b.n	800704c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7c12      	ldrb	r2, [r2, #16]
 8007020:	f107 0108 	add.w	r1, r7, #8
 8007024:	4610      	mov	r0, r2
 8007026:	4798      	blx	r3
 8007028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800702a:	e00f      	b.n	800704c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa49 	bl	80074c6 <USBD_CtlError>
            err++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	3301      	adds	r3, #1
 8007038:	72fb      	strb	r3, [r7, #11]
          break;
 800703a:	e007      	b.n	800704c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa41 	bl	80074c6 <USBD_CtlError>
          err++;
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	3301      	adds	r3, #1
 8007048:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800704a:	bf00      	nop
      }
      break;
 800704c:	e037      	b.n	80070be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7c1b      	ldrb	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	4610      	mov	r0, r2
 8007064:	4798      	blx	r3
 8007066:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007068:	e029      	b.n	80070be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa2a 	bl	80074c6 <USBD_CtlError>
        err++;
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	3301      	adds	r3, #1
 8007076:	72fb      	strb	r3, [r7, #11]
      break;
 8007078:	e021      	b.n	80070be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7c1b      	ldrb	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f107 0208 	add.w	r2, r7, #8
 800708e:	4610      	mov	r0, r2
 8007090:	4798      	blx	r3
 8007092:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	2207      	movs	r2, #7
 800709a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800709c:	e00f      	b.n	80070be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa10 	bl	80074c6 <USBD_CtlError>
        err++;
 80070a6:	7afb      	ldrb	r3, [r7, #11]
 80070a8:	3301      	adds	r3, #1
 80070aa:	72fb      	strb	r3, [r7, #11]
      break;
 80070ac:	e007      	b.n	80070be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fa08 	bl	80074c6 <USBD_CtlError>
      err++;
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	3301      	adds	r3, #1
 80070ba:	72fb      	strb	r3, [r7, #11]
      break;
 80070bc:	bf00      	nop
  }

  if (err != 0U)
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11e      	bne.n	8007102 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d016      	beq.n	80070fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00e      	beq.n	80070f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88da      	ldrh	r2, [r3, #6]
 80070d6:	893b      	ldrh	r3, [r7, #8]
 80070d8:	4293      	cmp	r3, r2
 80070da:	bf28      	it	cs
 80070dc:	4613      	movcs	r3, r2
 80070de:	b29b      	uxth	r3, r3
 80070e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070e2:	893b      	ldrh	r3, [r7, #8]
 80070e4:	461a      	mov	r2, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fa5d 	bl	80075a8 <USBD_CtlSendData>
 80070ee:	e009      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9e7 	bl	80074c6 <USBD_CtlError>
 80070f8:	e004      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa91 	bl	8007622 <USBD_CtlSendStatus>
 8007100:	e000      	b.n	8007104 <USBD_GetDescriptor+0x2cc>
    return;
 8007102:	bf00      	nop
  }
}
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop

0800710c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	889b      	ldrh	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d131      	bne.n	8007182 <USBD_SetAddress+0x76>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	88db      	ldrh	r3, [r3, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d12d      	bne.n	8007182 <USBD_SetAddress+0x76>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	2b7f      	cmp	r3, #127	; 0x7f
 800712c:	d829      	bhi.n	8007182 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007138:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d104      	bne.n	8007150 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9bc 	bl	80074c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714e:	e01d      	b.n	800718c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	7bfa      	ldrb	r2, [r7, #15]
 8007154:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fe27 	bl	8007db0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa5d 	bl	8007622 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	e009      	b.n	800718c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007180:	e004      	b.n	800718c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f99e 	bl	80074c6 <USBD_CtlError>
  }
}
 800718a:	bf00      	nop
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	4b4e      	ldr	r3, [pc, #312]	; (80072e4 <USBD_SetConfig+0x150>)
 80071aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071ac:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <USBD_SetConfig+0x150>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d905      	bls.n	80071c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f985 	bl	80074c6 <USBD_CtlError>
    return USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e08c      	b.n	80072da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d002      	beq.n	80071d2 <USBD_SetConfig+0x3e>
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d029      	beq.n	8007224 <USBD_SetConfig+0x90>
 80071d0:	e075      	b.n	80072be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071d2:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <USBD_SetConfig+0x150>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d020      	beq.n	800721c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80071da:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <USBD_SetConfig+0x150>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071e4:	4b3f      	ldr	r3, [pc, #252]	; (80072e4 <USBD_SetConfig+0x150>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fe ffe7 	bl	80061be <USBD_SetClassConfig>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f962 	bl	80074c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800720a:	e065      	b.n	80072d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa08 	bl	8007622 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2203      	movs	r2, #3
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800721a:	e05d      	b.n	80072d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa00 	bl	8007622 <USBD_CtlSendStatus>
      break;
 8007222:	e059      	b.n	80072d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007224:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <USBD_SetConfig+0x150>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d112      	bne.n	8007252 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007234:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <USBD_SetConfig+0x150>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800723e:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <USBD_SetConfig+0x150>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fe ffd6 	bl	80061f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9e9 	bl	8007622 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007250:	e042      	b.n	80072d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007252:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <USBD_SetConfig+0x150>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d02a      	beq.n	80072b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fe ffc4 	bl	80061f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800726e:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <USBD_SetConfig+0x150>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007278:	4b1a      	ldr	r3, [pc, #104]	; (80072e4 <USBD_SetConfig+0x150>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fe ff9d 	bl	80061be <USBD_SetClassConfig>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00f      	beq.n	80072ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f918 	bl	80074c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fe ffa9 	bl	80061f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072ac:	e014      	b.n	80072d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f9b7 	bl	8007622 <USBD_CtlSendStatus>
      break;
 80072b4:	e010      	b.n	80072d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9b3 	bl	8007622 <USBD_CtlSendStatus>
      break;
 80072bc:	e00c      	b.n	80072d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f900 	bl	80074c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072c6:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <USBD_SetConfig+0x150>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7fe ff92 	bl	80061f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072d2:	2303      	movs	r3, #3
 80072d4:	73fb      	strb	r3, [r7, #15]
      break;
 80072d6:	bf00      	nop
  }

  return ret;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000184 	.word	0x20000184

080072e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88db      	ldrh	r3, [r3, #6]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d004      	beq.n	8007304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f8e2 	bl	80074c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007302:	e023      	b.n	800734c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	dc02      	bgt.n	8007316 <USBD_GetConfig+0x2e>
 8007310:	2b00      	cmp	r3, #0
 8007312:	dc03      	bgt.n	800731c <USBD_GetConfig+0x34>
 8007314:	e015      	b.n	8007342 <USBD_GetConfig+0x5a>
 8007316:	2b03      	cmp	r3, #3
 8007318:	d00b      	beq.n	8007332 <USBD_GetConfig+0x4a>
 800731a:	e012      	b.n	8007342 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3308      	adds	r3, #8
 8007326:	2201      	movs	r2, #1
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f93c 	bl	80075a8 <USBD_CtlSendData>
        break;
 8007330:	e00c      	b.n	800734c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	2201      	movs	r2, #1
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f934 	bl	80075a8 <USBD_CtlSendData>
        break;
 8007340:	e004      	b.n	800734c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f8be 	bl	80074c6 <USBD_CtlError>
        break;
 800734a:	bf00      	nop
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	2b02      	cmp	r3, #2
 800736a:	d81e      	bhi.n	80073aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	88db      	ldrh	r3, [r3, #6]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d004      	beq.n	800737e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f8a5 	bl	80074c6 <USBD_CtlError>
        break;
 800737c:	e01a      	b.n	80073b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f043 0202 	orr.w	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	330c      	adds	r3, #12
 800739e:	2202      	movs	r2, #2
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f900 	bl	80075a8 <USBD_CtlSendData>
      break;
 80073a8:	e004      	b.n	80073b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f88a 	bl	80074c6 <USBD_CtlError>
      break;
 80073b2:	bf00      	nop
  }
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d107      	bne.n	80073de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f923 	bl	8007622 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80073dc:	e013      	b.n	8007406 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d10b      	bne.n	80073fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	889b      	ldrh	r3, [r3, #4]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f913 	bl	8007622 <USBD_CtlSendStatus>
}
 80073fc:	e003      	b.n	8007406 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f860 	bl	80074c6 <USBD_CtlError>
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	2b02      	cmp	r3, #2
 8007424:	d80b      	bhi.n	800743e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d10c      	bne.n	8007448 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f8f3 	bl	8007622 <USBD_CtlSendStatus>
      }
      break;
 800743c:	e004      	b.n	8007448 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f840 	bl	80074c6 <USBD_CtlError>
      break;
 8007446:	e000      	b.n	800744a <USBD_ClrFeature+0x3c>
      break;
 8007448:	bf00      	nop
  }
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fa41 	bl	8006904 <SWAPBYTE>
 8007482:	4603      	mov	r3, r0
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff fa34 	bl	8006904 <SWAPBYTE>
 800749c:	4603      	mov	r3, r0
 800749e:	461a      	mov	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7ff fa27 	bl	8006904 <SWAPBYTE>
 80074b6:	4603      	mov	r3, r0
 80074b8:	461a      	mov	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	80da      	strh	r2, [r3, #6]
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc02 	bl	8007cdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074d8:	2100      	movs	r1, #0
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fbfe 	bl	8007cdc <USBD_LL_StallEP>
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d036      	beq.n	800756c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007502:	6938      	ldr	r0, [r7, #16]
 8007504:	f000 f836 	bl	8007574 <USBD_GetLen>
 8007508:	4603      	mov	r3, r0
 800750a:	3301      	adds	r3, #1
 800750c:	b29b      	uxth	r3, r3
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4413      	add	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
  idx++;
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	3301      	adds	r3, #1
 8007526:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	2203      	movs	r2, #3
 8007530:	701a      	strb	r2, [r3, #0]
  idx++;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	3301      	adds	r3, #1
 8007536:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007538:	e013      	b.n	8007562 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	4413      	add	r3, r2
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	3301      	adds	r3, #1
 800754a:	613b      	str	r3, [r7, #16]
    idx++;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	3301      	adds	r3, #1
 8007550:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	4413      	add	r3, r2
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
    idx++;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	3301      	adds	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e7      	bne.n	800753a <USBD_GetString+0x52>
 800756a:	e000      	b.n	800756e <USBD_GetString+0x86>
    return;
 800756c:	bf00      	nop
  }
}
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007584:	e005      	b.n	8007592 <USBD_GetLen+0x1e>
  {
    len++;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	3301      	adds	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	3301      	adds	r3, #1
 8007590:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f5      	bne.n	8007586 <USBD_GetLen+0x12>
  }

  return len;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fc0d 	bl	8007dee <USBD_LL_Transmit>

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	2100      	movs	r1, #0
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fbfc 	bl	8007dee <USBD_LL_Transmit>

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fc0c 	bl	8007e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2204      	movs	r2, #4
 800762e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fbd8 	bl	8007dee <USBD_LL_Transmit>

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2205      	movs	r2, #5
 8007654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007658:	2300      	movs	r3, #0
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fbe6 	bl	8007e30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007674:	2200      	movs	r2, #0
 8007676:	490e      	ldr	r1, [pc, #56]	; (80076b0 <MX_USB_DEVICE_Init+0x40>)
 8007678:	480e      	ldr	r0, [pc, #56]	; (80076b4 <MX_USB_DEVICE_Init+0x44>)
 800767a:	f7fe fd23 	bl	80060c4 <USBD_Init>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007684:	f7fa f838 	bl	80016f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007688:	490b      	ldr	r1, [pc, #44]	; (80076b8 <MX_USB_DEVICE_Init+0x48>)
 800768a:	480a      	ldr	r0, [pc, #40]	; (80076b4 <MX_USB_DEVICE_Init+0x44>)
 800768c:	f7fe fd4a 	bl	8006124 <USBD_RegisterClass>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007696:	f7fa f82f 	bl	80016f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800769a:	4806      	ldr	r0, [pc, #24]	; (80076b4 <MX_USB_DEVICE_Init+0x44>)
 800769c:	f7fe fd78 	bl	8006190 <USBD_Start>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80076a6:	f7fa f827 	bl	80016f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076aa:	bf00      	nop
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200000cc 	.word	0x200000cc
 80076b4:	20000188 	.word	0x20000188
 80076b8:	2000000c 	.word	0x2000000c

080076bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2212      	movs	r2, #18
 80076cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076ce:	4b03      	ldr	r3, [pc, #12]	; (80076dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	200000e8 	.word	0x200000e8

080076e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076f2:	4b03      	ldr	r3, [pc, #12]	; (8007700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	200000fc 	.word	0x200000fc

08007704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4907      	ldr	r1, [pc, #28]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
 800771a:	4808      	ldr	r0, [pc, #32]	; (800773c <USBD_FS_ProductStrDescriptor+0x38>)
 800771c:	f7ff fee4 	bl	80074e8 <USBD_GetString>
 8007720:	e004      	b.n	800772c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4904      	ldr	r1, [pc, #16]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <USBD_FS_ProductStrDescriptor+0x38>)
 8007728:	f7ff fede 	bl	80074e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800772c:	4b02      	ldr	r3, [pc, #8]	; (8007738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000464 	.word	0x20000464
 800773c:	08009098 	.word	0x08009098

08007740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	4904      	ldr	r1, [pc, #16]	; (8007760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007752:	f7ff fec9 	bl	80074e8 <USBD_GetString>
  return USBD_StrDesc;
 8007756:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000464 	.word	0x20000464
 8007764:	080090b0 	.word	0x080090b0

08007768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	221a      	movs	r2, #26
 8007778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800777a:	f000 f843 	bl	8007804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800777e:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000100 	.word	0x20000100

0800778c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d105      	bne.n	80077aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4907      	ldr	r1, [pc, #28]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077a2:	4808      	ldr	r0, [pc, #32]	; (80077c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077a4:	f7ff fea0 	bl	80074e8 <USBD_GetString>
 80077a8:	e004      	b.n	80077b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	4904      	ldr	r1, [pc, #16]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ae:	4805      	ldr	r0, [pc, #20]	; (80077c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80077b0:	f7ff fe9a 	bl	80074e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000464 	.word	0x20000464
 80077c4:	080090c4 	.word	0x080090c4

080077c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4907      	ldr	r1, [pc, #28]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077de:	4808      	ldr	r0, [pc, #32]	; (8007800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e0:	f7ff fe82 	bl	80074e8 <USBD_GetString>
 80077e4:	e004      	b.n	80077f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077ea:	4805      	ldr	r0, [pc, #20]	; (8007800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077ec:	f7ff fe7c 	bl	80074e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000464 	.word	0x20000464
 8007800:	080090d0 	.word	0x080090d0

08007804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <Get_SerialNum+0x44>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <Get_SerialNum+0x48>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <Get_SerialNum+0x4c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800782a:	2208      	movs	r2, #8
 800782c:	4909      	ldr	r1, [pc, #36]	; (8007854 <Get_SerialNum+0x50>)
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f814 	bl	800785c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007834:	2204      	movs	r2, #4
 8007836:	4908      	ldr	r1, [pc, #32]	; (8007858 <Get_SerialNum+0x54>)
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f000 f80f 	bl	800785c <IntToUnicode>
  }
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	1fff7a10 	.word	0x1fff7a10
 800784c:	1fff7a14 	.word	0x1fff7a14
 8007850:	1fff7a18 	.word	0x1fff7a18
 8007854:	20000102 	.word	0x20000102
 8007858:	20000112 	.word	0x20000112

0800785c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
 8007872:	e027      	b.n	80078c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	2b09      	cmp	r3, #9
 800787a:	d80b      	bhi.n	8007894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4619      	mov	r1, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	440b      	add	r3, r1
 800788c:	3230      	adds	r2, #48	; 0x30
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e00a      	b.n	80078aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0f1b      	lsrs	r3, r3, #28
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4619      	mov	r1, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	440b      	add	r3, r1
 80078a4:	3237      	adds	r2, #55	; 0x37
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	3301      	adds	r3, #1
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	3301      	adds	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
 80078c4:	7dfa      	ldrb	r2, [r7, #23]
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d3d3      	bcc.n	8007874 <IntToUnicode+0x18>
  }
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	; 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	2200      	movs	r2, #0
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	609a      	str	r2, [r3, #8]
 80078f0:	60da      	str	r2, [r3, #12]
 80078f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078fc:	d147      	bne.n	800798e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078fe:	2300      	movs	r3, #0
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	4b25      	ldr	r3, [pc, #148]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	4a24      	ldr	r2, [pc, #144]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	6313      	str	r3, [r2, #48]	; 0x30
 800790e:	4b22      	ldr	r3, [pc, #136]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800791a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800791e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007920:	2302      	movs	r3, #2
 8007922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007928:	2303      	movs	r3, #3
 800792a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800792c:	230a      	movs	r3, #10
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007930:	f107 0314 	add.w	r3, r7, #20
 8007934:	4619      	mov	r1, r3
 8007936:	4819      	ldr	r0, [pc, #100]	; (800799c <HAL_PCD_MspInit+0xc0>)
 8007938:	f7fa f96c 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800793c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007942:	2300      	movs	r3, #0
 8007944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4619      	mov	r1, r3
 8007950:	4812      	ldr	r0, [pc, #72]	; (800799c <HAL_PCD_MspInit+0xc0>)
 8007952:	f7fa f95f 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007956:	4b10      	ldr	r3, [pc, #64]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	4a0f      	ldr	r2, [pc, #60]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 800795c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007960:	6353      	str	r3, [r2, #52]	; 0x34
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	4a0b      	ldr	r2, [pc, #44]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 800796c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007970:	6453      	str	r3, [r2, #68]	; 0x44
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <HAL_PCD_MspInit+0xbc>)
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	2043      	movs	r0, #67	; 0x43
 8007984:	f7fa f90f 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007988:	2043      	movs	r0, #67	; 0x43
 800798a:	f7fa f928 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800798e:	bf00      	nop
 8007990:	3728      	adds	r7, #40	; 0x28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40023800 	.word	0x40023800
 800799c:	40020000 	.word	0x40020000

080079a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f7fe fc37 	bl	800622a <USBD_LL_SetupStage>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7fe fc71 	bl	80062d4 <USBD_LL_DataOutStage>
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	460b      	mov	r3, r1
 8007a04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	4613      	mov	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	334c      	adds	r3, #76	; 0x4c
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	4619      	mov	r1, r3
 8007a22:	f7fe fd0a 	bl	800643a <USBD_LL_DataInStage>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe fe3e 	bl	80066be <USBD_LL_SOF>
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a52:	2301      	movs	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
 8007a62:	e008      	b.n	8007a76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d102      	bne.n	8007a72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
 8007a70:	e001      	b.n	8007a76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a72:	f7f9 fe41 	bl	80016f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7c:	7bfa      	ldrb	r2, [r7, #15]
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fe fdde 	bl	8006642 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fd86 	bl	800659e <USBD_LL_Reset>
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fdd9 	bl	8006662 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <HAL_PCD_SuspendCallback+0x48>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	4a03      	ldr	r2, [pc, #12]	; (8007ae4 <HAL_PCD_SuspendCallback+0x48>)
 8007ad6:	f043 0306 	orr.w	r3, r3, #6
 8007ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	e000ed00 	.word	0xe000ed00

08007ae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fdc9 	bl	800668e <USBD_LL_Resume>
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fe21 	bl	8006762 <USBD_LL_IsoOUTIncomplete>
}
 8007b20:	bf00      	nop
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe fddd 	bl	80066fe <USBD_LL_IsoINIncomplete>
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fe33 	bl	80067c6 <USBD_LL_DevConnected>
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fe30 	bl	80067dc <USBD_LL_DevDisconnected>
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d13c      	bne.n	8007c0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b94:	4a20      	ldr	r2, [pc, #128]	; (8007c18 <USBD_LL_Init+0x94>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <USBD_LL_Init+0x94>)
 8007ba0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ba4:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <USBD_LL_Init+0x94>)
 8007ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007baa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bac:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bae:	2204      	movs	r2, #4
 8007bb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bb2:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bb8:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bbe:	4b16      	ldr	r3, [pc, #88]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007bc4:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bd0:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007be2:	480d      	ldr	r0, [pc, #52]	; (8007c18 <USBD_LL_Init+0x94>)
 8007be4:	f7fa f9f3 	bl	8001fce <HAL_PCD_Init>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bee:	f7f9 fd83 	bl	80016f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	4808      	ldr	r0, [pc, #32]	; (8007c18 <USBD_LL_Init+0x94>)
 8007bf6:	f7fb fc32 	bl	800345e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bfa:	2240      	movs	r2, #64	; 0x40
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4806      	ldr	r0, [pc, #24]	; (8007c18 <USBD_LL_Init+0x94>)
 8007c00:	f7fb fbe6 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c04:	2280      	movs	r2, #128	; 0x80
 8007c06:	2101      	movs	r1, #1
 8007c08:	4803      	ldr	r0, [pc, #12]	; (8007c18 <USBD_LL_Init+0x94>)
 8007c0a:	f7fb fbe1 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000664 	.word	0x20000664

08007c1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fa fae8 	bl	8002208 <HAL_PCD_Start>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f930 	bl	8007ea4 <USBD_Get_USB_Status>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4603      	mov	r3, r0
 8007c62:	70fb      	strb	r3, [r7, #3]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70bb      	strb	r3, [r7, #2]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c7a:	78bb      	ldrb	r3, [r7, #2]
 8007c7c:	883a      	ldrh	r2, [r7, #0]
 8007c7e:	78f9      	ldrb	r1, [r7, #3]
 8007c80:	f7fa ffb9 	bl	8002bf6 <HAL_PCD_EP_Open>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f90a 	bl	8007ea4 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fb f802 	bl	8002cc6 <HAL_PCD_EP_Close>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f8eb 	bl	8007ea4 <USBD_Get_USB_Status>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fb f8c2 	bl	8002e84 <HAL_PCD_EP_SetStall>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f8cc 	bl	8007ea4 <USBD_Get_USB_Status>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fb f907 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f8ad 	bl	8007ea4 <USBD_Get_USB_Status>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	da0b      	bge.n	8007d8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	333e      	adds	r3, #62	; 0x3e
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	e00b      	b.n	8007da4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	4613      	mov	r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007da2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fa feec 	bl	8002bac <HAL_PCD_SetAddress>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 f862 	bl	8007ea4 <USBD_Get_USB_Status>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b086      	sub	sp, #24
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e0c:	7af9      	ldrb	r1, [r7, #11]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	f7fa ffed 	bl	8002df0 <HAL_PCD_EP_Transmit>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 f841 	bl	8007ea4 <USBD_Get_USB_Status>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e26:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e4e:	7af9      	ldrb	r1, [r7, #11]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	f7fa ff81 	bl	8002d5a <HAL_PCD_EP_Receive>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f820 	bl	8007ea4 <USBD_Get_USB_Status>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e68:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <USBD_static_malloc+0x18>)
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	20000b70 	.word	0x20000b70

08007e90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d817      	bhi.n	8007ee8 <USBD_Get_USB_Status+0x44>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <USBD_Get_USB_Status+0x1c>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007ed7 	.word	0x08007ed7
 8007ec8:	08007edd 	.word	0x08007edd
 8007ecc:	08007ee3 	.word	0x08007ee3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed4:	e00b      	b.n	8007eee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eda:	e008      	b.n	8007eee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee0:	e005      	b.n	8007eee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee6:	e002      	b.n	8007eee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]
    break;
 8007eec:	bf00      	nop
  }
  return usb_status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <memset>:
 8007efc:	4402      	add	r2, r0
 8007efe:	4603      	mov	r3, r0
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d100      	bne.n	8007f06 <memset+0xa>
 8007f04:	4770      	bx	lr
 8007f06:	f803 1b01 	strb.w	r1, [r3], #1
 8007f0a:	e7f9      	b.n	8007f00 <memset+0x4>

08007f0c <__libc_init_array>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4d0d      	ldr	r5, [pc, #52]	; (8007f44 <__libc_init_array+0x38>)
 8007f10:	4c0d      	ldr	r4, [pc, #52]	; (8007f48 <__libc_init_array+0x3c>)
 8007f12:	1b64      	subs	r4, r4, r5
 8007f14:	10a4      	asrs	r4, r4, #2
 8007f16:	2600      	movs	r6, #0
 8007f18:	42a6      	cmp	r6, r4
 8007f1a:	d109      	bne.n	8007f30 <__libc_init_array+0x24>
 8007f1c:	4d0b      	ldr	r5, [pc, #44]	; (8007f4c <__libc_init_array+0x40>)
 8007f1e:	4c0c      	ldr	r4, [pc, #48]	; (8007f50 <__libc_init_array+0x44>)
 8007f20:	f001 f8ae 	bl	8009080 <_init>
 8007f24:	1b64      	subs	r4, r4, r5
 8007f26:	10a4      	asrs	r4, r4, #2
 8007f28:	2600      	movs	r6, #0
 8007f2a:	42a6      	cmp	r6, r4
 8007f2c:	d105      	bne.n	8007f3a <__libc_init_array+0x2e>
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f34:	4798      	blx	r3
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7ee      	b.n	8007f18 <__libc_init_array+0xc>
 8007f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3e:	4798      	blx	r3
 8007f40:	3601      	adds	r6, #1
 8007f42:	e7f2      	b.n	8007f2a <__libc_init_array+0x1e>
 8007f44:	080092d8 	.word	0x080092d8
 8007f48:	080092d8 	.word	0x080092d8
 8007f4c:	080092d8 	.word	0x080092d8
 8007f50:	080092dc 	.word	0x080092dc
 8007f54:	00000000 	.word	0x00000000

08007f58 <cos>:
 8007f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f5a:	ec53 2b10 	vmov	r2, r3, d0
 8007f5e:	4826      	ldr	r0, [pc, #152]	; (8007ff8 <cos+0xa0>)
 8007f60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f64:	4281      	cmp	r1, r0
 8007f66:	dc06      	bgt.n	8007f76 <cos+0x1e>
 8007f68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007ff0 <cos+0x98>
 8007f6c:	b005      	add	sp, #20
 8007f6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f72:	f000 b89d 	b.w	80080b0 <__kernel_cos>
 8007f76:	4821      	ldr	r0, [pc, #132]	; (8007ffc <cos+0xa4>)
 8007f78:	4281      	cmp	r1, r0
 8007f7a:	dd09      	ble.n	8007f90 <cos+0x38>
 8007f7c:	ee10 0a10 	vmov	r0, s0
 8007f80:	4619      	mov	r1, r3
 8007f82:	f7f8 f939 	bl	80001f8 <__aeabi_dsub>
 8007f86:	ec41 0b10 	vmov	d0, r0, r1
 8007f8a:	b005      	add	sp, #20
 8007f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f90:	4668      	mov	r0, sp
 8007f92:	f000 fa15 	bl	80083c0 <__ieee754_rem_pio2>
 8007f96:	f000 0003 	and.w	r0, r0, #3
 8007f9a:	2801      	cmp	r0, #1
 8007f9c:	d00b      	beq.n	8007fb6 <cos+0x5e>
 8007f9e:	2802      	cmp	r0, #2
 8007fa0:	d016      	beq.n	8007fd0 <cos+0x78>
 8007fa2:	b9e0      	cbnz	r0, 8007fde <cos+0x86>
 8007fa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fa8:	ed9d 0b00 	vldr	d0, [sp]
 8007fac:	f000 f880 	bl	80080b0 <__kernel_cos>
 8007fb0:	ec51 0b10 	vmov	r0, r1, d0
 8007fb4:	e7e7      	b.n	8007f86 <cos+0x2e>
 8007fb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fba:	ed9d 0b00 	vldr	d0, [sp]
 8007fbe:	f000 f93f 	bl	8008240 <__kernel_sin>
 8007fc2:	ec53 2b10 	vmov	r2, r3, d0
 8007fc6:	ee10 0a10 	vmov	r0, s0
 8007fca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007fce:	e7da      	b.n	8007f86 <cos+0x2e>
 8007fd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fd4:	ed9d 0b00 	vldr	d0, [sp]
 8007fd8:	f000 f86a 	bl	80080b0 <__kernel_cos>
 8007fdc:	e7f1      	b.n	8007fc2 <cos+0x6a>
 8007fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007fe2:	ed9d 0b00 	vldr	d0, [sp]
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f000 f92a 	bl	8008240 <__kernel_sin>
 8007fec:	e7e0      	b.n	8007fb0 <cos+0x58>
 8007fee:	bf00      	nop
	...
 8007ff8:	3fe921fb 	.word	0x3fe921fb
 8007ffc:	7fefffff 	.word	0x7fefffff

08008000 <sin>:
 8008000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008002:	ec53 2b10 	vmov	r2, r3, d0
 8008006:	4828      	ldr	r0, [pc, #160]	; (80080a8 <sin+0xa8>)
 8008008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800800c:	4281      	cmp	r1, r0
 800800e:	dc07      	bgt.n	8008020 <sin+0x20>
 8008010:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80080a0 <sin+0xa0>
 8008014:	2000      	movs	r0, #0
 8008016:	b005      	add	sp, #20
 8008018:	f85d eb04 	ldr.w	lr, [sp], #4
 800801c:	f000 b910 	b.w	8008240 <__kernel_sin>
 8008020:	4822      	ldr	r0, [pc, #136]	; (80080ac <sin+0xac>)
 8008022:	4281      	cmp	r1, r0
 8008024:	dd09      	ble.n	800803a <sin+0x3a>
 8008026:	ee10 0a10 	vmov	r0, s0
 800802a:	4619      	mov	r1, r3
 800802c:	f7f8 f8e4 	bl	80001f8 <__aeabi_dsub>
 8008030:	ec41 0b10 	vmov	d0, r0, r1
 8008034:	b005      	add	sp, #20
 8008036:	f85d fb04 	ldr.w	pc, [sp], #4
 800803a:	4668      	mov	r0, sp
 800803c:	f000 f9c0 	bl	80083c0 <__ieee754_rem_pio2>
 8008040:	f000 0003 	and.w	r0, r0, #3
 8008044:	2801      	cmp	r0, #1
 8008046:	d00c      	beq.n	8008062 <sin+0x62>
 8008048:	2802      	cmp	r0, #2
 800804a:	d011      	beq.n	8008070 <sin+0x70>
 800804c:	b9f0      	cbnz	r0, 800808c <sin+0x8c>
 800804e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008052:	ed9d 0b00 	vldr	d0, [sp]
 8008056:	2001      	movs	r0, #1
 8008058:	f000 f8f2 	bl	8008240 <__kernel_sin>
 800805c:	ec51 0b10 	vmov	r0, r1, d0
 8008060:	e7e6      	b.n	8008030 <sin+0x30>
 8008062:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008066:	ed9d 0b00 	vldr	d0, [sp]
 800806a:	f000 f821 	bl	80080b0 <__kernel_cos>
 800806e:	e7f5      	b.n	800805c <sin+0x5c>
 8008070:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008074:	ed9d 0b00 	vldr	d0, [sp]
 8008078:	2001      	movs	r0, #1
 800807a:	f000 f8e1 	bl	8008240 <__kernel_sin>
 800807e:	ec53 2b10 	vmov	r2, r3, d0
 8008082:	ee10 0a10 	vmov	r0, s0
 8008086:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800808a:	e7d1      	b.n	8008030 <sin+0x30>
 800808c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008090:	ed9d 0b00 	vldr	d0, [sp]
 8008094:	f000 f80c 	bl	80080b0 <__kernel_cos>
 8008098:	e7f1      	b.n	800807e <sin+0x7e>
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w
	...
 80080a8:	3fe921fb 	.word	0x3fe921fb
 80080ac:	7fefffff 	.word	0x7fefffff

080080b0 <__kernel_cos>:
 80080b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ec57 6b10 	vmov	r6, r7, d0
 80080b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80080bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80080c0:	ed8d 1b00 	vstr	d1, [sp]
 80080c4:	da07      	bge.n	80080d6 <__kernel_cos+0x26>
 80080c6:	ee10 0a10 	vmov	r0, s0
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 fce6 	bl	8000a9c <__aeabi_d2iz>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f000 8088 	beq.w	80081e6 <__kernel_cos+0x136>
 80080d6:	4632      	mov	r2, r6
 80080d8:	463b      	mov	r3, r7
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 fa43 	bl	8000568 <__aeabi_dmul>
 80080e2:	4b51      	ldr	r3, [pc, #324]	; (8008228 <__kernel_cos+0x178>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	f7f8 fa3d 	bl	8000568 <__aeabi_dmul>
 80080ee:	a340      	add	r3, pc, #256	; (adr r3, 80081f0 <__kernel_cos+0x140>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	4682      	mov	sl, r0
 80080f6:	468b      	mov	fp, r1
 80080f8:	4620      	mov	r0, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	f7f8 fa34 	bl	8000568 <__aeabi_dmul>
 8008100:	a33d      	add	r3, pc, #244	; (adr r3, 80081f8 <__kernel_cos+0x148>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f879 	bl	80001fc <__adddf3>
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	f7f8 fa2b 	bl	8000568 <__aeabi_dmul>
 8008112:	a33b      	add	r3, pc, #236	; (adr r3, 8008200 <__kernel_cos+0x150>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f86e 	bl	80001f8 <__aeabi_dsub>
 800811c:	4622      	mov	r2, r4
 800811e:	462b      	mov	r3, r5
 8008120:	f7f8 fa22 	bl	8000568 <__aeabi_dmul>
 8008124:	a338      	add	r3, pc, #224	; (adr r3, 8008208 <__kernel_cos+0x158>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	f7f8 f867 	bl	80001fc <__adddf3>
 800812e:	4622      	mov	r2, r4
 8008130:	462b      	mov	r3, r5
 8008132:	f7f8 fa19 	bl	8000568 <__aeabi_dmul>
 8008136:	a336      	add	r3, pc, #216	; (adr r3, 8008210 <__kernel_cos+0x160>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f85c 	bl	80001f8 <__aeabi_dsub>
 8008140:	4622      	mov	r2, r4
 8008142:	462b      	mov	r3, r5
 8008144:	f7f8 fa10 	bl	8000568 <__aeabi_dmul>
 8008148:	a333      	add	r3, pc, #204	; (adr r3, 8008218 <__kernel_cos+0x168>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 f855 	bl	80001fc <__adddf3>
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	f7f8 fa07 	bl	8000568 <__aeabi_dmul>
 800815a:	4622      	mov	r2, r4
 800815c:	462b      	mov	r3, r5
 800815e:	f7f8 fa03 	bl	8000568 <__aeabi_dmul>
 8008162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008166:	4604      	mov	r4, r0
 8008168:	460d      	mov	r5, r1
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 f9fb 	bl	8000568 <__aeabi_dmul>
 8008172:	460b      	mov	r3, r1
 8008174:	4602      	mov	r2, r0
 8008176:	4629      	mov	r1, r5
 8008178:	4620      	mov	r0, r4
 800817a:	f7f8 f83d 	bl	80001f8 <__aeabi_dsub>
 800817e:	4b2b      	ldr	r3, [pc, #172]	; (800822c <__kernel_cos+0x17c>)
 8008180:	4598      	cmp	r8, r3
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	dc10      	bgt.n	80081aa <__kernel_cos+0xfa>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	f7f8 f832 	bl	80001f8 <__aeabi_dsub>
 8008194:	460b      	mov	r3, r1
 8008196:	4926      	ldr	r1, [pc, #152]	; (8008230 <__kernel_cos+0x180>)
 8008198:	4602      	mov	r2, r0
 800819a:	2000      	movs	r0, #0
 800819c:	f7f8 f82c 	bl	80001f8 <__aeabi_dsub>
 80081a0:	ec41 0b10 	vmov	d0, r0, r1
 80081a4:	b003      	add	sp, #12
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	4b22      	ldr	r3, [pc, #136]	; (8008234 <__kernel_cos+0x184>)
 80081ac:	4920      	ldr	r1, [pc, #128]	; (8008230 <__kernel_cos+0x180>)
 80081ae:	4598      	cmp	r8, r3
 80081b0:	bfcc      	ite	gt
 80081b2:	4d21      	ldrgt	r5, [pc, #132]	; (8008238 <__kernel_cos+0x188>)
 80081b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80081b8:	2400      	movs	r4, #0
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	2000      	movs	r0, #0
 80081c0:	f7f8 f81a 	bl	80001f8 <__aeabi_dsub>
 80081c4:	4622      	mov	r2, r4
 80081c6:	4680      	mov	r8, r0
 80081c8:	4689      	mov	r9, r1
 80081ca:	462b      	mov	r3, r5
 80081cc:	4650      	mov	r0, sl
 80081ce:	4659      	mov	r1, fp
 80081d0:	f7f8 f812 	bl	80001f8 <__aeabi_dsub>
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	f7f8 f80e 	bl	80001f8 <__aeabi_dsub>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4640      	mov	r0, r8
 80081e2:	4649      	mov	r1, r9
 80081e4:	e7da      	b.n	800819c <__kernel_cos+0xec>
 80081e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008220 <__kernel_cos+0x170>
 80081ea:	e7db      	b.n	80081a4 <__kernel_cos+0xf4>
 80081ec:	f3af 8000 	nop.w
 80081f0:	be8838d4 	.word	0xbe8838d4
 80081f4:	bda8fae9 	.word	0xbda8fae9
 80081f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80081fc:	3e21ee9e 	.word	0x3e21ee9e
 8008200:	809c52ad 	.word	0x809c52ad
 8008204:	3e927e4f 	.word	0x3e927e4f
 8008208:	19cb1590 	.word	0x19cb1590
 800820c:	3efa01a0 	.word	0x3efa01a0
 8008210:	16c15177 	.word	0x16c15177
 8008214:	3f56c16c 	.word	0x3f56c16c
 8008218:	5555554c 	.word	0x5555554c
 800821c:	3fa55555 	.word	0x3fa55555
 8008220:	00000000 	.word	0x00000000
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	3fe00000 	.word	0x3fe00000
 800822c:	3fd33332 	.word	0x3fd33332
 8008230:	3ff00000 	.word	0x3ff00000
 8008234:	3fe90000 	.word	0x3fe90000
 8008238:	3fd20000 	.word	0x3fd20000
 800823c:	00000000 	.word	0x00000000

08008240 <__kernel_sin>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ed2d 8b04 	vpush	{d8-d9}
 8008248:	eeb0 8a41 	vmov.f32	s16, s2
 800824c:	eef0 8a61 	vmov.f32	s17, s3
 8008250:	ec55 4b10 	vmov	r4, r5, d0
 8008254:	b083      	sub	sp, #12
 8008256:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800825a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	da06      	bge.n	8008270 <__kernel_sin+0x30>
 8008262:	ee10 0a10 	vmov	r0, s0
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 fc18 	bl	8000a9c <__aeabi_d2iz>
 800826c:	2800      	cmp	r0, #0
 800826e:	d051      	beq.n	8008314 <__kernel_sin+0xd4>
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 f976 	bl	8000568 <__aeabi_dmul>
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f96e 	bl	8000568 <__aeabi_dmul>
 800828c:	a341      	add	r3, pc, #260	; (adr r3, 8008394 <__kernel_sin+0x154>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	4680      	mov	r8, r0
 8008294:	4689      	mov	r9, r1
 8008296:	4650      	mov	r0, sl
 8008298:	4659      	mov	r1, fp
 800829a:	f7f8 f965 	bl	8000568 <__aeabi_dmul>
 800829e:	a33f      	add	r3, pc, #252	; (adr r3, 800839c <__kernel_sin+0x15c>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f7f7 ffa8 	bl	80001f8 <__aeabi_dsub>
 80082a8:	4652      	mov	r2, sl
 80082aa:	465b      	mov	r3, fp
 80082ac:	f7f8 f95c 	bl	8000568 <__aeabi_dmul>
 80082b0:	a33c      	add	r3, pc, #240	; (adr r3, 80083a4 <__kernel_sin+0x164>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f7 ffa1 	bl	80001fc <__adddf3>
 80082ba:	4652      	mov	r2, sl
 80082bc:	465b      	mov	r3, fp
 80082be:	f7f8 f953 	bl	8000568 <__aeabi_dmul>
 80082c2:	a33a      	add	r3, pc, #232	; (adr r3, 80083ac <__kernel_sin+0x16c>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ff96 	bl	80001f8 <__aeabi_dsub>
 80082cc:	4652      	mov	r2, sl
 80082ce:	465b      	mov	r3, fp
 80082d0:	f7f8 f94a 	bl	8000568 <__aeabi_dmul>
 80082d4:	a337      	add	r3, pc, #220	; (adr r3, 80083b4 <__kernel_sin+0x174>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 ff8f 	bl	80001fc <__adddf3>
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	b9eb      	cbnz	r3, 8008322 <__kernel_sin+0xe2>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4650      	mov	r0, sl
 80082ec:	4659      	mov	r1, fp
 80082ee:	f7f8 f93b 	bl	8000568 <__aeabi_dmul>
 80082f2:	a325      	add	r3, pc, #148	; (adr r3, 8008388 <__kernel_sin+0x148>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ff7e 	bl	80001f8 <__aeabi_dsub>
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	f7f8 f932 	bl	8000568 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f7 ff76 	bl	80001fc <__adddf3>
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	ec45 4b10 	vmov	d0, r4, r5
 8008318:	b003      	add	sp, #12
 800831a:	ecbd 8b04 	vpop	{d8-d9}
 800831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <__kernel_sin+0x150>)
 8008324:	ec51 0b18 	vmov	r0, r1, d8
 8008328:	2200      	movs	r2, #0
 800832a:	f7f8 f91d 	bl	8000568 <__aeabi_dmul>
 800832e:	4632      	mov	r2, r6
 8008330:	ec41 0b19 	vmov	d9, r0, r1
 8008334:	463b      	mov	r3, r7
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	f7f8 f915 	bl	8000568 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	ec51 0b19 	vmov	r0, r1, d9
 8008346:	f7f7 ff57 	bl	80001f8 <__aeabi_dsub>
 800834a:	4652      	mov	r2, sl
 800834c:	465b      	mov	r3, fp
 800834e:	f7f8 f90b 	bl	8000568 <__aeabi_dmul>
 8008352:	ec53 2b18 	vmov	r2, r3, d8
 8008356:	f7f7 ff4f 	bl	80001f8 <__aeabi_dsub>
 800835a:	a30b      	add	r3, pc, #44	; (adr r3, 8008388 <__kernel_sin+0x148>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f8 f8fe 	bl	8000568 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ff42 	bl	80001fc <__adddf3>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4620      	mov	r0, r4
 800837e:	4629      	mov	r1, r5
 8008380:	f7f7 ff3a 	bl	80001f8 <__aeabi_dsub>
 8008384:	e7c4      	b.n	8008310 <__kernel_sin+0xd0>
 8008386:	bf00      	nop
 8008388:	55555549 	.word	0x55555549
 800838c:	3fc55555 	.word	0x3fc55555
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	5acfd57c 	.word	0x5acfd57c
 8008398:	3de5d93a 	.word	0x3de5d93a
 800839c:	8a2b9ceb 	.word	0x8a2b9ceb
 80083a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80083a4:	57b1fe7d 	.word	0x57b1fe7d
 80083a8:	3ec71de3 	.word	0x3ec71de3
 80083ac:	19c161d5 	.word	0x19c161d5
 80083b0:	3f2a01a0 	.word	0x3f2a01a0
 80083b4:	1110f8a6 	.word	0x1110f8a6
 80083b8:	3f811111 	.word	0x3f811111
 80083bc:	00000000 	.word	0x00000000

080083c0 <__ieee754_rem_pio2>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	ed2d 8b02 	vpush	{d8}
 80083c8:	ec55 4b10 	vmov	r4, r5, d0
 80083cc:	4bca      	ldr	r3, [pc, #808]	; (80086f8 <__ieee754_rem_pio2+0x338>)
 80083ce:	b08b      	sub	sp, #44	; 0x2c
 80083d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80083d4:	4598      	cmp	r8, r3
 80083d6:	4682      	mov	sl, r0
 80083d8:	9502      	str	r5, [sp, #8]
 80083da:	dc08      	bgt.n	80083ee <__ieee754_rem_pio2+0x2e>
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	ed80 0b00 	vstr	d0, [r0]
 80083e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	e028      	b.n	8008440 <__ieee754_rem_pio2+0x80>
 80083ee:	4bc3      	ldr	r3, [pc, #780]	; (80086fc <__ieee754_rem_pio2+0x33c>)
 80083f0:	4598      	cmp	r8, r3
 80083f2:	dc78      	bgt.n	80084e6 <__ieee754_rem_pio2+0x126>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	4ec2      	ldr	r6, [pc, #776]	; (8008700 <__ieee754_rem_pio2+0x340>)
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	ee10 0a10 	vmov	r0, s0
 80083fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x300>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	4629      	mov	r1, r5
 8008406:	dd39      	ble.n	800847c <__ieee754_rem_pio2+0xbc>
 8008408:	f7f7 fef6 	bl	80001f8 <__aeabi_dsub>
 800840c:	45b0      	cmp	r8, r6
 800840e:	4604      	mov	r4, r0
 8008410:	460d      	mov	r5, r1
 8008412:	d01b      	beq.n	800844c <__ieee754_rem_pio2+0x8c>
 8008414:	a3ac      	add	r3, pc, #688	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x308>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 feed 	bl	80001f8 <__aeabi_dsub>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9ca 2300 	strd	r2, r3, [sl]
 8008426:	4620      	mov	r0, r4
 8008428:	4629      	mov	r1, r5
 800842a:	f7f7 fee5 	bl	80001f8 <__aeabi_dsub>
 800842e:	a3a6      	add	r3, pc, #664	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x308>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 fee0 	bl	80001f8 <__aeabi_dsub>
 8008438:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800843c:	f04f 0b01 	mov.w	fp, #1
 8008440:	4658      	mov	r0, fp
 8008442:	b00b      	add	sp, #44	; 0x2c
 8008444:	ecbd 8b02 	vpop	{d8}
 8008448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844c:	a3a0      	add	r3, pc, #640	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x310>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f7 fed1 	bl	80001f8 <__aeabi_dsub>
 8008456:	a3a0      	add	r3, pc, #640	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x318>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	4604      	mov	r4, r0
 800845e:	460d      	mov	r5, r1
 8008460:	f7f7 feca 	bl	80001f8 <__aeabi_dsub>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	e9ca 2300 	strd	r2, r3, [sl]
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 fec2 	bl	80001f8 <__aeabi_dsub>
 8008474:	a398      	add	r3, pc, #608	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x318>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	e7db      	b.n	8008434 <__ieee754_rem_pio2+0x74>
 800847c:	f7f7 febe 	bl	80001fc <__adddf3>
 8008480:	45b0      	cmp	r8, r6
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	d016      	beq.n	80084b6 <__ieee754_rem_pio2+0xf6>
 8008488:	a38f      	add	r3, pc, #572	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x308>)
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f7 feb5 	bl	80001fc <__adddf3>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	e9ca 2300 	strd	r2, r3, [sl]
 800849a:	4620      	mov	r0, r4
 800849c:	4629      	mov	r1, r5
 800849e:	f7f7 feab 	bl	80001f8 <__aeabi_dsub>
 80084a2:	a389      	add	r3, pc, #548	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x308>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f7 fea8 	bl	80001fc <__adddf3>
 80084ac:	f04f 3bff 	mov.w	fp, #4294967295
 80084b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084b4:	e7c4      	b.n	8008440 <__ieee754_rem_pio2+0x80>
 80084b6:	a386      	add	r3, pc, #536	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x310>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f7 fe9e 	bl	80001fc <__adddf3>
 80084c0:	a385      	add	r3, pc, #532	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x318>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	f7f7 fe97 	bl	80001fc <__adddf3>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	e9ca 2300 	strd	r2, r3, [sl]
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f7f7 fe8d 	bl	80001f8 <__aeabi_dsub>
 80084de:	a37e      	add	r3, pc, #504	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x318>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	e7e0      	b.n	80084a8 <__ieee754_rem_pio2+0xe8>
 80084e6:	4b87      	ldr	r3, [pc, #540]	; (8008704 <__ieee754_rem_pio2+0x344>)
 80084e8:	4598      	cmp	r8, r3
 80084ea:	f300 80d8 	bgt.w	800869e <__ieee754_rem_pio2+0x2de>
 80084ee:	f000 f96d 	bl	80087cc <fabs>
 80084f2:	ec55 4b10 	vmov	r4, r5, d0
 80084f6:	ee10 0a10 	vmov	r0, s0
 80084fa:	a379      	add	r3, pc, #484	; (adr r3, 80086e0 <__ieee754_rem_pio2+0x320>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	4629      	mov	r1, r5
 8008502:	f7f8 f831 	bl	8000568 <__aeabi_dmul>
 8008506:	4b80      	ldr	r3, [pc, #512]	; (8008708 <__ieee754_rem_pio2+0x348>)
 8008508:	2200      	movs	r2, #0
 800850a:	f7f7 fe77 	bl	80001fc <__adddf3>
 800850e:	f7f8 fac5 	bl	8000a9c <__aeabi_d2iz>
 8008512:	4683      	mov	fp, r0
 8008514:	f7f7 ffbe 	bl	8000494 <__aeabi_i2d>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	ec43 2b18 	vmov	d8, r2, r3
 8008520:	a367      	add	r3, pc, #412	; (adr r3, 80086c0 <__ieee754_rem_pio2+0x300>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f8 f81f 	bl	8000568 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f7 fe61 	bl	80001f8 <__aeabi_dsub>
 8008536:	a364      	add	r3, pc, #400	; (adr r3, 80086c8 <__ieee754_rem_pio2+0x308>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	ec51 0b18 	vmov	r0, r1, d8
 8008544:	f7f8 f810 	bl	8000568 <__aeabi_dmul>
 8008548:	f1bb 0f1f 	cmp.w	fp, #31
 800854c:	4604      	mov	r4, r0
 800854e:	460d      	mov	r5, r1
 8008550:	dc0d      	bgt.n	800856e <__ieee754_rem_pio2+0x1ae>
 8008552:	4b6e      	ldr	r3, [pc, #440]	; (800870c <__ieee754_rem_pio2+0x34c>)
 8008554:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	4543      	cmp	r3, r8
 800855e:	d006      	beq.n	800856e <__ieee754_rem_pio2+0x1ae>
 8008560:	4622      	mov	r2, r4
 8008562:	462b      	mov	r3, r5
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f7 fe46 	bl	80001f8 <__aeabi_dsub>
 800856c:	e00e      	b.n	800858c <__ieee754_rem_pio2+0x1cc>
 800856e:	462b      	mov	r3, r5
 8008570:	4622      	mov	r2, r4
 8008572:	4630      	mov	r0, r6
 8008574:	4639      	mov	r1, r7
 8008576:	f7f7 fe3f 	bl	80001f8 <__aeabi_dsub>
 800857a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008584:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008588:	2b10      	cmp	r3, #16
 800858a:	dc02      	bgt.n	8008592 <__ieee754_rem_pio2+0x1d2>
 800858c:	e9ca 0100 	strd	r0, r1, [sl]
 8008590:	e039      	b.n	8008606 <__ieee754_rem_pio2+0x246>
 8008592:	a34f      	add	r3, pc, #316	; (adr r3, 80086d0 <__ieee754_rem_pio2+0x310>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	ec51 0b18 	vmov	r0, r1, d8
 800859c:	f7f7 ffe4 	bl	8000568 <__aeabi_dmul>
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f7 fe24 	bl	80001f8 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4680      	mov	r8, r0
 80085b6:	4689      	mov	r9, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 fe1c 	bl	80001f8 <__aeabi_dsub>
 80085c0:	4622      	mov	r2, r4
 80085c2:	462b      	mov	r3, r5
 80085c4:	f7f7 fe18 	bl	80001f8 <__aeabi_dsub>
 80085c8:	a343      	add	r3, pc, #268	; (adr r3, 80086d8 <__ieee754_rem_pio2+0x318>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	4604      	mov	r4, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	ec51 0b18 	vmov	r0, r1, d8
 80085d6:	f7f7 ffc7 	bl	8000568 <__aeabi_dmul>
 80085da:	4622      	mov	r2, r4
 80085dc:	462b      	mov	r3, r5
 80085de:	f7f7 fe0b 	bl	80001f8 <__aeabi_dsub>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f7 fe03 	bl	80001f8 <__aeabi_dsub>
 80085f2:	9a03      	ldr	r2, [sp, #12]
 80085f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b31      	cmp	r3, #49	; 0x31
 80085fc:	dc24      	bgt.n	8008648 <__ieee754_rem_pio2+0x288>
 80085fe:	e9ca 0100 	strd	r0, r1, [sl]
 8008602:	4646      	mov	r6, r8
 8008604:	464f      	mov	r7, r9
 8008606:	e9da 8900 	ldrd	r8, r9, [sl]
 800860a:	4630      	mov	r0, r6
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	4639      	mov	r1, r7
 8008612:	f7f7 fdf1 	bl	80001f8 <__aeabi_dsub>
 8008616:	462b      	mov	r3, r5
 8008618:	4622      	mov	r2, r4
 800861a:	f7f7 fded 	bl	80001f8 <__aeabi_dsub>
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008626:	f6bf af0b 	bge.w	8008440 <__ieee754_rem_pio2+0x80>
 800862a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800862e:	f8ca 3004 	str.w	r3, [sl, #4]
 8008632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008636:	f8ca 8000 	str.w	r8, [sl]
 800863a:	f8ca 0008 	str.w	r0, [sl, #8]
 800863e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008642:	f1cb 0b00 	rsb	fp, fp, #0
 8008646:	e6fb      	b.n	8008440 <__ieee754_rem_pio2+0x80>
 8008648:	a327      	add	r3, pc, #156	; (adr r3, 80086e8 <__ieee754_rem_pio2+0x328>)
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	ec51 0b18 	vmov	r0, r1, d8
 8008652:	f7f7 ff89 	bl	8000568 <__aeabi_dmul>
 8008656:	4604      	mov	r4, r0
 8008658:	460d      	mov	r5, r1
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4640      	mov	r0, r8
 8008660:	4649      	mov	r1, r9
 8008662:	f7f7 fdc9 	bl	80001f8 <__aeabi_dsub>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f7 fdc1 	bl	80001f8 <__aeabi_dsub>
 8008676:	4622      	mov	r2, r4
 8008678:	462b      	mov	r3, r5
 800867a:	f7f7 fdbd 	bl	80001f8 <__aeabi_dsub>
 800867e:	a31c      	add	r3, pc, #112	; (adr r3, 80086f0 <__ieee754_rem_pio2+0x330>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	ec51 0b18 	vmov	r0, r1, d8
 800868c:	f7f7 ff6c 	bl	8000568 <__aeabi_dmul>
 8008690:	4622      	mov	r2, r4
 8008692:	462b      	mov	r3, r5
 8008694:	f7f7 fdb0 	bl	80001f8 <__aeabi_dsub>
 8008698:	4604      	mov	r4, r0
 800869a:	460d      	mov	r5, r1
 800869c:	e760      	b.n	8008560 <__ieee754_rem_pio2+0x1a0>
 800869e:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <__ieee754_rem_pio2+0x350>)
 80086a0:	4598      	cmp	r8, r3
 80086a2:	dd37      	ble.n	8008714 <__ieee754_rem_pio2+0x354>
 80086a4:	ee10 2a10 	vmov	r2, s0
 80086a8:	462b      	mov	r3, r5
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f7 fda3 	bl	80001f8 <__aeabi_dsub>
 80086b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086b6:	e9ca 0100 	strd	r0, r1, [sl]
 80086ba:	e695      	b.n	80083e8 <__ieee754_rem_pio2+0x28>
 80086bc:	f3af 8000 	nop.w
 80086c0:	54400000 	.word	0x54400000
 80086c4:	3ff921fb 	.word	0x3ff921fb
 80086c8:	1a626331 	.word	0x1a626331
 80086cc:	3dd0b461 	.word	0x3dd0b461
 80086d0:	1a600000 	.word	0x1a600000
 80086d4:	3dd0b461 	.word	0x3dd0b461
 80086d8:	2e037073 	.word	0x2e037073
 80086dc:	3ba3198a 	.word	0x3ba3198a
 80086e0:	6dc9c883 	.word	0x6dc9c883
 80086e4:	3fe45f30 	.word	0x3fe45f30
 80086e8:	2e000000 	.word	0x2e000000
 80086ec:	3ba3198a 	.word	0x3ba3198a
 80086f0:	252049c1 	.word	0x252049c1
 80086f4:	397b839a 	.word	0x397b839a
 80086f8:	3fe921fb 	.word	0x3fe921fb
 80086fc:	4002d97b 	.word	0x4002d97b
 8008700:	3ff921fb 	.word	0x3ff921fb
 8008704:	413921fb 	.word	0x413921fb
 8008708:	3fe00000 	.word	0x3fe00000
 800870c:	080090f8 	.word	0x080090f8
 8008710:	7fefffff 	.word	0x7fefffff
 8008714:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008718:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800871c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008720:	4620      	mov	r0, r4
 8008722:	460d      	mov	r5, r1
 8008724:	f7f8 f9ba 	bl	8000a9c <__aeabi_d2iz>
 8008728:	f7f7 feb4 	bl	8000494 <__aeabi_i2d>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4620      	mov	r0, r4
 8008732:	4629      	mov	r1, r5
 8008734:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008738:	f7f7 fd5e 	bl	80001f8 <__aeabi_dsub>
 800873c:	4b21      	ldr	r3, [pc, #132]	; (80087c4 <__ieee754_rem_pio2+0x404>)
 800873e:	2200      	movs	r2, #0
 8008740:	f7f7 ff12 	bl	8000568 <__aeabi_dmul>
 8008744:	460d      	mov	r5, r1
 8008746:	4604      	mov	r4, r0
 8008748:	f7f8 f9a8 	bl	8000a9c <__aeabi_d2iz>
 800874c:	f7f7 fea2 	bl	8000494 <__aeabi_i2d>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800875c:	f7f7 fd4c 	bl	80001f8 <__aeabi_dsub>
 8008760:	4b18      	ldr	r3, [pc, #96]	; (80087c4 <__ieee754_rem_pio2+0x404>)
 8008762:	2200      	movs	r2, #0
 8008764:	f7f7 ff00 	bl	8000568 <__aeabi_dmul>
 8008768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800876c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008770:	2703      	movs	r7, #3
 8008772:	2400      	movs	r4, #0
 8008774:	2500      	movs	r5, #0
 8008776:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	46b9      	mov	r9, r7
 8008780:	3f01      	subs	r7, #1
 8008782:	f7f8 f959 	bl	8000a38 <__aeabi_dcmpeq>
 8008786:	2800      	cmp	r0, #0
 8008788:	d1f5      	bne.n	8008776 <__ieee754_rem_pio2+0x3b6>
 800878a:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <__ieee754_rem_pio2+0x408>)
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	2302      	movs	r3, #2
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	4632      	mov	r2, r6
 8008794:	464b      	mov	r3, r9
 8008796:	4651      	mov	r1, sl
 8008798:	a804      	add	r0, sp, #16
 800879a:	f000 f821 	bl	80087e0 <__kernel_rem_pio2>
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	4683      	mov	fp, r0
 80087a4:	f6bf ae4c 	bge.w	8008440 <__ieee754_rem_pio2+0x80>
 80087a8:	e9da 2100 	ldrd	r2, r1, [sl]
 80087ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087b0:	e9ca 2300 	strd	r2, r3, [sl]
 80087b4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80087b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087bc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80087c0:	e73f      	b.n	8008642 <__ieee754_rem_pio2+0x282>
 80087c2:	bf00      	nop
 80087c4:	41700000 	.word	0x41700000
 80087c8:	08009178 	.word	0x08009178

080087cc <fabs>:
 80087cc:	ec51 0b10 	vmov	r0, r1, d0
 80087d0:	ee10 2a10 	vmov	r2, s0
 80087d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087d8:	ec43 2b10 	vmov	d0, r2, r3
 80087dc:	4770      	bx	lr
	...

080087e0 <__kernel_rem_pio2>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	ed2d 8b02 	vpush	{d8}
 80087e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80087ec:	f112 0f14 	cmn.w	r2, #20
 80087f0:	9306      	str	r3, [sp, #24]
 80087f2:	9104      	str	r1, [sp, #16]
 80087f4:	4bc2      	ldr	r3, [pc, #776]	; (8008b00 <__kernel_rem_pio2+0x320>)
 80087f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80087f8:	9009      	str	r0, [sp, #36]	; 0x24
 80087fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	f103 33ff 	add.w	r3, r3, #4294967295
 8008806:	bfa8      	it	ge
 8008808:	1ed4      	subge	r4, r2, #3
 800880a:	9305      	str	r3, [sp, #20]
 800880c:	bfb2      	itee	lt
 800880e:	2400      	movlt	r4, #0
 8008810:	2318      	movge	r3, #24
 8008812:	fb94 f4f3 	sdivge	r4, r4, r3
 8008816:	f06f 0317 	mvn.w	r3, #23
 800881a:	fb04 3303 	mla	r3, r4, r3, r3
 800881e:	eb03 0a02 	add.w	sl, r3, r2
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	9a05      	ldr	r2, [sp, #20]
 8008826:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008af0 <__kernel_rem_pio2+0x310>
 800882a:	eb03 0802 	add.w	r8, r3, r2
 800882e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008830:	1aa7      	subs	r7, r4, r2
 8008832:	ae20      	add	r6, sp, #128	; 0x80
 8008834:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008838:	2500      	movs	r5, #0
 800883a:	4545      	cmp	r5, r8
 800883c:	dd13      	ble.n	8008866 <__kernel_rem_pio2+0x86>
 800883e:	9b06      	ldr	r3, [sp, #24]
 8008840:	aa20      	add	r2, sp, #128	; 0x80
 8008842:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008846:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	9b00      	ldr	r3, [sp, #0]
 8008850:	4598      	cmp	r8, r3
 8008852:	dc31      	bgt.n	80088b8 <__kernel_rem_pio2+0xd8>
 8008854:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008af0 <__kernel_rem_pio2+0x310>
 8008858:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800885c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008860:	462f      	mov	r7, r5
 8008862:	2600      	movs	r6, #0
 8008864:	e01b      	b.n	800889e <__kernel_rem_pio2+0xbe>
 8008866:	42ef      	cmn	r7, r5
 8008868:	d407      	bmi.n	800887a <__kernel_rem_pio2+0x9a>
 800886a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800886e:	f7f7 fe11 	bl	8000494 <__aeabi_i2d>
 8008872:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008876:	3501      	adds	r5, #1
 8008878:	e7df      	b.n	800883a <__kernel_rem_pio2+0x5a>
 800887a:	ec51 0b18 	vmov	r0, r1, d8
 800887e:	e7f8      	b.n	8008872 <__kernel_rem_pio2+0x92>
 8008880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008884:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008888:	f7f7 fe6e 	bl	8000568 <__aeabi_dmul>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008894:	f7f7 fcb2 	bl	80001fc <__adddf3>
 8008898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800889c:	3601      	adds	r6, #1
 800889e:	9b05      	ldr	r3, [sp, #20]
 80088a0:	429e      	cmp	r6, r3
 80088a2:	f1a7 0708 	sub.w	r7, r7, #8
 80088a6:	ddeb      	ble.n	8008880 <__kernel_rem_pio2+0xa0>
 80088a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088ac:	f108 0801 	add.w	r8, r8, #1
 80088b0:	ecab 7b02 	vstmia	fp!, {d7}
 80088b4:	3508      	adds	r5, #8
 80088b6:	e7ca      	b.n	800884e <__kernel_rem_pio2+0x6e>
 80088b8:	9b00      	ldr	r3, [sp, #0]
 80088ba:	aa0c      	add	r2, sp, #48	; 0x30
 80088bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80088c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80088c8:	9c00      	ldr	r4, [sp, #0]
 80088ca:	930a      	str	r3, [sp, #40]	; 0x28
 80088cc:	00e3      	lsls	r3, r4, #3
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	ab98      	add	r3, sp, #608	; 0x260
 80088d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80088da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80088de:	ab70      	add	r3, sp, #448	; 0x1c0
 80088e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80088e4:	46c3      	mov	fp, r8
 80088e6:	46a1      	mov	r9, r4
 80088e8:	f1b9 0f00 	cmp.w	r9, #0
 80088ec:	f1a5 0508 	sub.w	r5, r5, #8
 80088f0:	dc77      	bgt.n	80089e2 <__kernel_rem_pio2+0x202>
 80088f2:	ec47 6b10 	vmov	d0, r6, r7
 80088f6:	4650      	mov	r0, sl
 80088f8:	f000 fac2 	bl	8008e80 <scalbn>
 80088fc:	ec57 6b10 	vmov	r6, r7, d0
 8008900:	2200      	movs	r2, #0
 8008902:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008906:	ee10 0a10 	vmov	r0, s0
 800890a:	4639      	mov	r1, r7
 800890c:	f7f7 fe2c 	bl	8000568 <__aeabi_dmul>
 8008910:	ec41 0b10 	vmov	d0, r0, r1
 8008914:	f000 fb34 	bl	8008f80 <floor>
 8008918:	4b7a      	ldr	r3, [pc, #488]	; (8008b04 <__kernel_rem_pio2+0x324>)
 800891a:	ec51 0b10 	vmov	r0, r1, d0
 800891e:	2200      	movs	r2, #0
 8008920:	f7f7 fe22 	bl	8000568 <__aeabi_dmul>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 fc64 	bl	80001f8 <__aeabi_dsub>
 8008930:	460f      	mov	r7, r1
 8008932:	4606      	mov	r6, r0
 8008934:	f7f8 f8b2 	bl	8000a9c <__aeabi_d2iz>
 8008938:	9002      	str	r0, [sp, #8]
 800893a:	f7f7 fdab 	bl	8000494 <__aeabi_i2d>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4630      	mov	r0, r6
 8008944:	4639      	mov	r1, r7
 8008946:	f7f7 fc57 	bl	80001f8 <__aeabi_dsub>
 800894a:	f1ba 0f00 	cmp.w	sl, #0
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	dd6d      	ble.n	8008a30 <__kernel_rem_pio2+0x250>
 8008954:	1e61      	subs	r1, r4, #1
 8008956:	ab0c      	add	r3, sp, #48	; 0x30
 8008958:	9d02      	ldr	r5, [sp, #8]
 800895a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800895e:	f1ca 0018 	rsb	r0, sl, #24
 8008962:	fa43 f200 	asr.w	r2, r3, r0
 8008966:	4415      	add	r5, r2
 8008968:	4082      	lsls	r2, r0
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	aa0c      	add	r2, sp, #48	; 0x30
 800896e:	9502      	str	r5, [sp, #8]
 8008970:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008974:	f1ca 0217 	rsb	r2, sl, #23
 8008978:	fa43 fb02 	asr.w	fp, r3, r2
 800897c:	f1bb 0f00 	cmp.w	fp, #0
 8008980:	dd65      	ble.n	8008a4e <__kernel_rem_pio2+0x26e>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	3301      	adds	r3, #1
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	4615      	mov	r5, r2
 800898c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008990:	4294      	cmp	r4, r2
 8008992:	f300 809f 	bgt.w	8008ad4 <__kernel_rem_pio2+0x2f4>
 8008996:	f1ba 0f00 	cmp.w	sl, #0
 800899a:	dd07      	ble.n	80089ac <__kernel_rem_pio2+0x1cc>
 800899c:	f1ba 0f01 	cmp.w	sl, #1
 80089a0:	f000 80c1 	beq.w	8008b26 <__kernel_rem_pio2+0x346>
 80089a4:	f1ba 0f02 	cmp.w	sl, #2
 80089a8:	f000 80c7 	beq.w	8008b3a <__kernel_rem_pio2+0x35a>
 80089ac:	f1bb 0f02 	cmp.w	fp, #2
 80089b0:	d14d      	bne.n	8008a4e <__kernel_rem_pio2+0x26e>
 80089b2:	4632      	mov	r2, r6
 80089b4:	463b      	mov	r3, r7
 80089b6:	4954      	ldr	r1, [pc, #336]	; (8008b08 <__kernel_rem_pio2+0x328>)
 80089b8:	2000      	movs	r0, #0
 80089ba:	f7f7 fc1d 	bl	80001f8 <__aeabi_dsub>
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	2d00      	cmp	r5, #0
 80089c4:	d043      	beq.n	8008a4e <__kernel_rem_pio2+0x26e>
 80089c6:	4650      	mov	r0, sl
 80089c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008af8 <__kernel_rem_pio2+0x318>
 80089cc:	f000 fa58 	bl	8008e80 <scalbn>
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	ec53 2b10 	vmov	r2, r3, d0
 80089d8:	f7f7 fc0e 	bl	80001f8 <__aeabi_dsub>
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	e035      	b.n	8008a4e <__kernel_rem_pio2+0x26e>
 80089e2:	4b4a      	ldr	r3, [pc, #296]	; (8008b0c <__kernel_rem_pio2+0x32c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f7 fdbd 	bl	8000568 <__aeabi_dmul>
 80089ee:	f7f8 f855 	bl	8000a9c <__aeabi_d2iz>
 80089f2:	f7f7 fd4f 	bl	8000494 <__aeabi_i2d>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	ec43 2b18 	vmov	d8, r2, r3
 80089fe:	4b44      	ldr	r3, [pc, #272]	; (8008b10 <__kernel_rem_pio2+0x330>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f7 fdb1 	bl	8000568 <__aeabi_dmul>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f7 fbf3 	bl	80001f8 <__aeabi_dsub>
 8008a12:	f7f8 f843 	bl	8000a9c <__aeabi_d2iz>
 8008a16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a1a:	f84b 0b04 	str.w	r0, [fp], #4
 8008a1e:	ec51 0b18 	vmov	r0, r1, d8
 8008a22:	f7f7 fbeb 	bl	80001fc <__adddf3>
 8008a26:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	e75b      	b.n	80088e8 <__kernel_rem_pio2+0x108>
 8008a30:	d106      	bne.n	8008a40 <__kernel_rem_pio2+0x260>
 8008a32:	1e63      	subs	r3, r4, #1
 8008a34:	aa0c      	add	r2, sp, #48	; 0x30
 8008a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008a3e:	e79d      	b.n	800897c <__kernel_rem_pio2+0x19c>
 8008a40:	4b34      	ldr	r3, [pc, #208]	; (8008b14 <__kernel_rem_pio2+0x334>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	f7f8 f816 	bl	8000a74 <__aeabi_dcmpge>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d140      	bne.n	8008ace <__kernel_rem_pio2+0x2ee>
 8008a4c:	4683      	mov	fp, r0
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2300      	movs	r3, #0
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 ffef 	bl	8000a38 <__aeabi_dcmpeq>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	f000 80c1 	beq.w	8008be2 <__kernel_rem_pio2+0x402>
 8008a60:	1e65      	subs	r5, r4, #1
 8008a62:	462b      	mov	r3, r5
 8008a64:	2200      	movs	r2, #0
 8008a66:	9900      	ldr	r1, [sp, #0]
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	da6d      	bge.n	8008b48 <__kernel_rem_pio2+0x368>
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 808a 	beq.w	8008b86 <__kernel_rem_pio2+0x3a6>
 8008a72:	ab0c      	add	r3, sp, #48	; 0x30
 8008a74:	f1aa 0a18 	sub.w	sl, sl, #24
 8008a78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80ae 	beq.w	8008bde <__kernel_rem_pio2+0x3fe>
 8008a82:	4650      	mov	r0, sl
 8008a84:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008af8 <__kernel_rem_pio2+0x318>
 8008a88:	f000 f9fa 	bl	8008e80 <scalbn>
 8008a8c:	1c6b      	adds	r3, r5, #1
 8008a8e:	00da      	lsls	r2, r3, #3
 8008a90:	9205      	str	r2, [sp, #20]
 8008a92:	ec57 6b10 	vmov	r6, r7, d0
 8008a96:	aa70      	add	r2, sp, #448	; 0x1c0
 8008a98:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008b0c <__kernel_rem_pio2+0x32c>
 8008a9c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008aa0:	462c      	mov	r4, r5
 8008aa2:	f04f 0800 	mov.w	r8, #0
 8008aa6:	2c00      	cmp	r4, #0
 8008aa8:	f280 80d4 	bge.w	8008c54 <__kernel_rem_pio2+0x474>
 8008aac:	462c      	mov	r4, r5
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	f2c0 8102 	blt.w	8008cb8 <__kernel_rem_pio2+0x4d8>
 8008ab4:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <__kernel_rem_pio2+0x338>)
 8008ab6:	461e      	mov	r6, r3
 8008ab8:	ab70      	add	r3, sp, #448	; 0x1c0
 8008aba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008abe:	1b2b      	subs	r3, r5, r4
 8008ac0:	f04f 0900 	mov.w	r9, #0
 8008ac4:	f04f 0a00 	mov.w	sl, #0
 8008ac8:	2700      	movs	r7, #0
 8008aca:	9306      	str	r3, [sp, #24]
 8008acc:	e0e6      	b.n	8008c9c <__kernel_rem_pio2+0x4bc>
 8008ace:	f04f 0b02 	mov.w	fp, #2
 8008ad2:	e756      	b.n	8008982 <__kernel_rem_pio2+0x1a2>
 8008ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad8:	bb05      	cbnz	r5, 8008b1c <__kernel_rem_pio2+0x33c>
 8008ada:	b123      	cbz	r3, 8008ae6 <__kernel_rem_pio2+0x306>
 8008adc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008ae0:	f8c8 3000 	str.w	r3, [r8]
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	f108 0804 	add.w	r8, r8, #4
 8008aec:	461d      	mov	r5, r3
 8008aee:	e74f      	b.n	8008990 <__kernel_rem_pio2+0x1b0>
	...
 8008afc:	3ff00000 	.word	0x3ff00000
 8008b00:	080092c0 	.word	0x080092c0
 8008b04:	40200000 	.word	0x40200000
 8008b08:	3ff00000 	.word	0x3ff00000
 8008b0c:	3e700000 	.word	0x3e700000
 8008b10:	41700000 	.word	0x41700000
 8008b14:	3fe00000 	.word	0x3fe00000
 8008b18:	08009280 	.word	0x08009280
 8008b1c:	1acb      	subs	r3, r1, r3
 8008b1e:	f8c8 3000 	str.w	r3, [r8]
 8008b22:	462b      	mov	r3, r5
 8008b24:	e7df      	b.n	8008ae6 <__kernel_rem_pio2+0x306>
 8008b26:	1e62      	subs	r2, r4, #1
 8008b28:	ab0c      	add	r3, sp, #48	; 0x30
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008b32:	a90c      	add	r1, sp, #48	; 0x30
 8008b34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008b38:	e738      	b.n	80089ac <__kernel_rem_pio2+0x1cc>
 8008b3a:	1e62      	subs	r2, r4, #1
 8008b3c:	ab0c      	add	r3, sp, #48	; 0x30
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008b46:	e7f4      	b.n	8008b32 <__kernel_rem_pio2+0x352>
 8008b48:	a90c      	add	r1, sp, #48	; 0x30
 8008b4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	430a      	orrs	r2, r1
 8008b52:	e788      	b.n	8008a66 <__kernel_rem_pio2+0x286>
 8008b54:	3301      	adds	r3, #1
 8008b56:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008b5a:	2900      	cmp	r1, #0
 8008b5c:	d0fa      	beq.n	8008b54 <__kernel_rem_pio2+0x374>
 8008b5e:	9a08      	ldr	r2, [sp, #32]
 8008b60:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008b64:	446a      	add	r2, sp
 8008b66:	3a98      	subs	r2, #152	; 0x98
 8008b68:	9208      	str	r2, [sp, #32]
 8008b6a:	9a06      	ldr	r2, [sp, #24]
 8008b6c:	a920      	add	r1, sp, #128	; 0x80
 8008b6e:	18a2      	adds	r2, r4, r2
 8008b70:	18e3      	adds	r3, r4, r3
 8008b72:	f104 0801 	add.w	r8, r4, #1
 8008b76:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	9b02      	ldr	r3, [sp, #8]
 8008b7e:	4543      	cmp	r3, r8
 8008b80:	da04      	bge.n	8008b8c <__kernel_rem_pio2+0x3ac>
 8008b82:	461c      	mov	r4, r3
 8008b84:	e6a2      	b.n	80088cc <__kernel_rem_pio2+0xec>
 8008b86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e7e4      	b.n	8008b56 <__kernel_rem_pio2+0x376>
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008b92:	f7f7 fc7f 	bl	8000494 <__aeabi_i2d>
 8008b96:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9c:	46ab      	mov	fp, r5
 8008b9e:	461c      	mov	r4, r3
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	2700      	movs	r7, #0
 8008ba8:	9b05      	ldr	r3, [sp, #20]
 8008baa:	4599      	cmp	r9, r3
 8008bac:	dd06      	ble.n	8008bbc <__kernel_rem_pio2+0x3dc>
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008bb4:	f108 0801 	add.w	r8, r8, #1
 8008bb8:	9308      	str	r3, [sp, #32]
 8008bba:	e7df      	b.n	8008b7c <__kernel_rem_pio2+0x39c>
 8008bbc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008bc0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008bc4:	f7f7 fcd0 	bl	8000568 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb14 	bl	80001fc <__adddf3>
 8008bd4:	f109 0901 	add.w	r9, r9, #1
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	e7e4      	b.n	8008ba8 <__kernel_rem_pio2+0x3c8>
 8008bde:	3d01      	subs	r5, #1
 8008be0:	e747      	b.n	8008a72 <__kernel_rem_pio2+0x292>
 8008be2:	ec47 6b10 	vmov	d0, r6, r7
 8008be6:	f1ca 0000 	rsb	r0, sl, #0
 8008bea:	f000 f949 	bl	8008e80 <scalbn>
 8008bee:	ec57 6b10 	vmov	r6, r7, d0
 8008bf2:	4ba0      	ldr	r3, [pc, #640]	; (8008e74 <__kernel_rem_pio2+0x694>)
 8008bf4:	ee10 0a10 	vmov	r0, s0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 ff3a 	bl	8000a74 <__aeabi_dcmpge>
 8008c00:	b1f8      	cbz	r0, 8008c42 <__kernel_rem_pio2+0x462>
 8008c02:	4b9d      	ldr	r3, [pc, #628]	; (8008e78 <__kernel_rem_pio2+0x698>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 fcad 	bl	8000568 <__aeabi_dmul>
 8008c0e:	f7f7 ff45 	bl	8000a9c <__aeabi_d2iz>
 8008c12:	4680      	mov	r8, r0
 8008c14:	f7f7 fc3e 	bl	8000494 <__aeabi_i2d>
 8008c18:	4b96      	ldr	r3, [pc, #600]	; (8008e74 <__kernel_rem_pio2+0x694>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f7f7 fca4 	bl	8000568 <__aeabi_dmul>
 8008c20:	460b      	mov	r3, r1
 8008c22:	4602      	mov	r2, r0
 8008c24:	4639      	mov	r1, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7f7 fae6 	bl	80001f8 <__aeabi_dsub>
 8008c2c:	f7f7 ff36 	bl	8000a9c <__aeabi_d2iz>
 8008c30:	1c65      	adds	r5, r4, #1
 8008c32:	ab0c      	add	r3, sp, #48	; 0x30
 8008c34:	f10a 0a18 	add.w	sl, sl, #24
 8008c38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c3c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008c40:	e71f      	b.n	8008a82 <__kernel_rem_pio2+0x2a2>
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 ff29 	bl	8000a9c <__aeabi_d2iz>
 8008c4a:	ab0c      	add	r3, sp, #48	; 0x30
 8008c4c:	4625      	mov	r5, r4
 8008c4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c52:	e716      	b.n	8008a82 <__kernel_rem_pio2+0x2a2>
 8008c54:	ab0c      	add	r3, sp, #48	; 0x30
 8008c56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008c5a:	f7f7 fc1b 	bl	8000494 <__aeabi_i2d>
 8008c5e:	4632      	mov	r2, r6
 8008c60:	463b      	mov	r3, r7
 8008c62:	f7f7 fc81 	bl	8000568 <__aeabi_dmul>
 8008c66:	4642      	mov	r2, r8
 8008c68:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fc79 	bl	8000568 <__aeabi_dmul>
 8008c76:	3c01      	subs	r4, #1
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	e713      	b.n	8008aa6 <__kernel_rem_pio2+0x2c6>
 8008c7e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008c82:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008c86:	f7f7 fc6f 	bl	8000568 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4648      	mov	r0, r9
 8008c90:	4651      	mov	r1, sl
 8008c92:	f7f7 fab3 	bl	80001fc <__adddf3>
 8008c96:	3701      	adds	r7, #1
 8008c98:	4681      	mov	r9, r0
 8008c9a:	468a      	mov	sl, r1
 8008c9c:	9b00      	ldr	r3, [sp, #0]
 8008c9e:	429f      	cmp	r7, r3
 8008ca0:	dc02      	bgt.n	8008ca8 <__kernel_rem_pio2+0x4c8>
 8008ca2:	9b06      	ldr	r3, [sp, #24]
 8008ca4:	429f      	cmp	r7, r3
 8008ca6:	ddea      	ble.n	8008c7e <__kernel_rem_pio2+0x49e>
 8008ca8:	9a06      	ldr	r2, [sp, #24]
 8008caa:	ab48      	add	r3, sp, #288	; 0x120
 8008cac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008cb0:	e9c6 9a00 	strd	r9, sl, [r6]
 8008cb4:	3c01      	subs	r4, #1
 8008cb6:	e6fa      	b.n	8008aae <__kernel_rem_pio2+0x2ce>
 8008cb8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	dc0b      	bgt.n	8008cd6 <__kernel_rem_pio2+0x4f6>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dc39      	bgt.n	8008d36 <__kernel_rem_pio2+0x556>
 8008cc2:	d05d      	beq.n	8008d80 <__kernel_rem_pio2+0x5a0>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	f003 0007 	and.w	r0, r3, #7
 8008cca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008cce:	ecbd 8b02 	vpop	{d8}
 8008cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d1f3      	bne.n	8008cc4 <__kernel_rem_pio2+0x4e4>
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	9500      	str	r5, [sp, #0]
 8008ce0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008ce4:	eb0d 0403 	add.w	r4, sp, r3
 8008ce8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008cec:	46a2      	mov	sl, r4
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f1aa 0a08 	sub.w	sl, sl, #8
 8008cf6:	dc69      	bgt.n	8008dcc <__kernel_rem_pio2+0x5ec>
 8008cf8:	46aa      	mov	sl, r5
 8008cfa:	f1ba 0f01 	cmp.w	sl, #1
 8008cfe:	f1a4 0408 	sub.w	r4, r4, #8
 8008d02:	f300 8083 	bgt.w	8008e0c <__kernel_rem_pio2+0x62c>
 8008d06:	9c05      	ldr	r4, [sp, #20]
 8008d08:	ab48      	add	r3, sp, #288	; 0x120
 8008d0a:	441c      	add	r4, r3
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	2100      	movs	r1, #0
 8008d10:	2d01      	cmp	r5, #1
 8008d12:	f300 809a 	bgt.w	8008e4a <__kernel_rem_pio2+0x66a>
 8008d16:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008d1a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008d1e:	f1bb 0f00 	cmp.w	fp, #0
 8008d22:	f040 8098 	bne.w	8008e56 <__kernel_rem_pio2+0x676>
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	e9c3 7800 	strd	r7, r8, [r3]
 8008d2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008d30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008d34:	e7c6      	b.n	8008cc4 <__kernel_rem_pio2+0x4e4>
 8008d36:	9e05      	ldr	r6, [sp, #20]
 8008d38:	ab48      	add	r3, sp, #288	; 0x120
 8008d3a:	441e      	add	r6, r3
 8008d3c:	462c      	mov	r4, r5
 8008d3e:	2000      	movs	r0, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	da33      	bge.n	8008dae <__kernel_rem_pio2+0x5ce>
 8008d46:	f1bb 0f00 	cmp.w	fp, #0
 8008d4a:	d036      	beq.n	8008dba <__kernel_rem_pio2+0x5da>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d52:	9c04      	ldr	r4, [sp, #16]
 8008d54:	e9c4 2300 	strd	r2, r3, [r4]
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008d60:	f7f7 fa4a 	bl	80001f8 <__aeabi_dsub>
 8008d64:	ae4a      	add	r6, sp, #296	; 0x128
 8008d66:	2401      	movs	r4, #1
 8008d68:	42a5      	cmp	r5, r4
 8008d6a:	da29      	bge.n	8008dc0 <__kernel_rem_pio2+0x5e0>
 8008d6c:	f1bb 0f00 	cmp.w	fp, #0
 8008d70:	d002      	beq.n	8008d78 <__kernel_rem_pio2+0x598>
 8008d72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d76:	4619      	mov	r1, r3
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008d7e:	e7a1      	b.n	8008cc4 <__kernel_rem_pio2+0x4e4>
 8008d80:	9c05      	ldr	r4, [sp, #20]
 8008d82:	ab48      	add	r3, sp, #288	; 0x120
 8008d84:	441c      	add	r4, r3
 8008d86:	2000      	movs	r0, #0
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	da09      	bge.n	8008da2 <__kernel_rem_pio2+0x5c2>
 8008d8e:	f1bb 0f00 	cmp.w	fp, #0
 8008d92:	d002      	beq.n	8008d9a <__kernel_rem_pio2+0x5ba>
 8008d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d98:	4619      	mov	r1, r3
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	e9c3 0100 	strd	r0, r1, [r3]
 8008da0:	e790      	b.n	8008cc4 <__kernel_rem_pio2+0x4e4>
 8008da2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008da6:	f7f7 fa29 	bl	80001fc <__adddf3>
 8008daa:	3d01      	subs	r5, #1
 8008dac:	e7ed      	b.n	8008d8a <__kernel_rem_pio2+0x5aa>
 8008dae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008db2:	f7f7 fa23 	bl	80001fc <__adddf3>
 8008db6:	3c01      	subs	r4, #1
 8008db8:	e7c3      	b.n	8008d42 <__kernel_rem_pio2+0x562>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	e7c8      	b.n	8008d52 <__kernel_rem_pio2+0x572>
 8008dc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008dc4:	f7f7 fa1a 	bl	80001fc <__adddf3>
 8008dc8:	3401      	adds	r4, #1
 8008dca:	e7cd      	b.n	8008d68 <__kernel_rem_pio2+0x588>
 8008dcc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008dd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4632      	mov	r2, r6
 8008ddc:	463b      	mov	r3, r7
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fa0b 	bl	80001fc <__adddf3>
 8008de6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	f7f7 fa01 	bl	80001f8 <__aeabi_dsub>
 8008df6:	4632      	mov	r2, r6
 8008df8:	463b      	mov	r3, r7
 8008dfa:	f7f7 f9ff 	bl	80001fc <__adddf3>
 8008dfe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e06:	ed8a 7b00 	vstr	d7, [sl]
 8008e0a:	e770      	b.n	8008cee <__kernel_rem_pio2+0x50e>
 8008e0c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e10:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008e14:	4640      	mov	r0, r8
 8008e16:	4632      	mov	r2, r6
 8008e18:	463b      	mov	r3, r7
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 f9ee 	bl	80001fc <__adddf3>
 8008e20:	e9cd 0100 	strd	r0, r1, [sp]
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 f9e4 	bl	80001f8 <__aeabi_dsub>
 8008e30:	4632      	mov	r2, r6
 8008e32:	463b      	mov	r3, r7
 8008e34:	f7f7 f9e2 	bl	80001fc <__adddf3>
 8008e38:	ed9d 7b00 	vldr	d7, [sp]
 8008e3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e40:	ed84 7b00 	vstr	d7, [r4]
 8008e44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e48:	e757      	b.n	8008cfa <__kernel_rem_pio2+0x51a>
 8008e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e4e:	f7f7 f9d5 	bl	80001fc <__adddf3>
 8008e52:	3d01      	subs	r5, #1
 8008e54:	e75c      	b.n	8008d10 <__kernel_rem_pio2+0x530>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	9a04      	ldr	r2, [sp, #16]
 8008e5a:	601f      	str	r7, [r3, #0]
 8008e5c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008e60:	605c      	str	r4, [r3, #4]
 8008e62:	609d      	str	r5, [r3, #8]
 8008e64:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e68:	60d3      	str	r3, [r2, #12]
 8008e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e6e:	6110      	str	r0, [r2, #16]
 8008e70:	6153      	str	r3, [r2, #20]
 8008e72:	e727      	b.n	8008cc4 <__kernel_rem_pio2+0x4e4>
 8008e74:	41700000 	.word	0x41700000
 8008e78:	3e700000 	.word	0x3e700000
 8008e7c:	00000000 	.word	0x00000000

08008e80 <scalbn>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	ec55 4b10 	vmov	r4, r5, d0
 8008e86:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	b999      	cbnz	r1, 8008eb8 <scalbn+0x38>
 8008e90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e94:	4323      	orrs	r3, r4
 8008e96:	d03f      	beq.n	8008f18 <scalbn+0x98>
 8008e98:	4b35      	ldr	r3, [pc, #212]	; (8008f70 <scalbn+0xf0>)
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	ee10 0a10 	vmov	r0, s0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 fb61 	bl	8000568 <__aeabi_dmul>
 8008ea6:	4b33      	ldr	r3, [pc, #204]	; (8008f74 <scalbn+0xf4>)
 8008ea8:	429e      	cmp	r6, r3
 8008eaa:	4604      	mov	r4, r0
 8008eac:	460d      	mov	r5, r1
 8008eae:	da10      	bge.n	8008ed2 <scalbn+0x52>
 8008eb0:	a327      	add	r3, pc, #156	; (adr r3, 8008f50 <scalbn+0xd0>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	e01f      	b.n	8008ef8 <scalbn+0x78>
 8008eb8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008ebc:	4291      	cmp	r1, r2
 8008ebe:	d10c      	bne.n	8008eda <scalbn+0x5a>
 8008ec0:	ee10 2a10 	vmov	r2, s0
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 f998 	bl	80001fc <__adddf3>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	e022      	b.n	8008f18 <scalbn+0x98>
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008ed8:	3936      	subs	r1, #54	; 0x36
 8008eda:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008ede:	4296      	cmp	r6, r2
 8008ee0:	dd0d      	ble.n	8008efe <scalbn+0x7e>
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	a11c      	add	r1, pc, #112	; (adr r1, 8008f58 <scalbn+0xd8>)
 8008ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eea:	da02      	bge.n	8008ef2 <scalbn+0x72>
 8008eec:	a11c      	add	r1, pc, #112	; (adr r1, 8008f60 <scalbn+0xe0>)
 8008eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef2:	a319      	add	r3, pc, #100	; (adr r3, 8008f58 <scalbn+0xd8>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 fb36 	bl	8000568 <__aeabi_dmul>
 8008efc:	e7e6      	b.n	8008ecc <scalbn+0x4c>
 8008efe:	1872      	adds	r2, r6, r1
 8008f00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f04:	428a      	cmp	r2, r1
 8008f06:	dcec      	bgt.n	8008ee2 <scalbn+0x62>
 8008f08:	2a00      	cmp	r2, #0
 8008f0a:	dd08      	ble.n	8008f1e <scalbn+0x9e>
 8008f0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f18:	ec45 4b10 	vmov	d0, r4, r5
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f22:	da08      	bge.n	8008f36 <scalbn+0xb6>
 8008f24:	2d00      	cmp	r5, #0
 8008f26:	a10a      	add	r1, pc, #40	; (adr r1, 8008f50 <scalbn+0xd0>)
 8008f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2c:	dac0      	bge.n	8008eb0 <scalbn+0x30>
 8008f2e:	a10e      	add	r1, pc, #56	; (adr r1, 8008f68 <scalbn+0xe8>)
 8008f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f34:	e7bc      	b.n	8008eb0 <scalbn+0x30>
 8008f36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f3a:	3236      	adds	r2, #54	; 0x36
 8008f3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008f44:	4620      	mov	r0, r4
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <scalbn+0xf8>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	e7d5      	b.n	8008ef8 <scalbn+0x78>
 8008f4c:	f3af 8000 	nop.w
 8008f50:	c2f8f359 	.word	0xc2f8f359
 8008f54:	01a56e1f 	.word	0x01a56e1f
 8008f58:	8800759c 	.word	0x8800759c
 8008f5c:	7e37e43c 	.word	0x7e37e43c
 8008f60:	8800759c 	.word	0x8800759c
 8008f64:	fe37e43c 	.word	0xfe37e43c
 8008f68:	c2f8f359 	.word	0xc2f8f359
 8008f6c:	81a56e1f 	.word	0x81a56e1f
 8008f70:	43500000 	.word	0x43500000
 8008f74:	ffff3cb0 	.word	0xffff3cb0
 8008f78:	3c900000 	.word	0x3c900000
 8008f7c:	00000000 	.word	0x00000000

08008f80 <floor>:
 8008f80:	ec51 0b10 	vmov	r0, r1, d0
 8008f84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008f90:	2e13      	cmp	r6, #19
 8008f92:	ee10 5a10 	vmov	r5, s0
 8008f96:	ee10 8a10 	vmov	r8, s0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	dc31      	bgt.n	8009002 <floor+0x82>
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	da14      	bge.n	8008fcc <floor+0x4c>
 8008fa2:	a333      	add	r3, pc, #204	; (adr r3, 8009070 <floor+0xf0>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 f928 	bl	80001fc <__adddf3>
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f7f7 fd6a 	bl	8000a88 <__aeabi_dcmpgt>
 8008fb4:	b138      	cbz	r0, 8008fc6 <floor+0x46>
 8008fb6:	2c00      	cmp	r4, #0
 8008fb8:	da53      	bge.n	8009062 <floor+0xe2>
 8008fba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008fbe:	4325      	orrs	r5, r4
 8008fc0:	d052      	beq.n	8009068 <floor+0xe8>
 8008fc2:	4c2d      	ldr	r4, [pc, #180]	; (8009078 <floor+0xf8>)
 8008fc4:	2500      	movs	r5, #0
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	e024      	b.n	8009016 <floor+0x96>
 8008fcc:	4f2b      	ldr	r7, [pc, #172]	; (800907c <floor+0xfc>)
 8008fce:	4137      	asrs	r7, r6
 8008fd0:	ea01 0307 	and.w	r3, r1, r7
 8008fd4:	4303      	orrs	r3, r0
 8008fd6:	d01e      	beq.n	8009016 <floor+0x96>
 8008fd8:	a325      	add	r3, pc, #148	; (adr r3, 8009070 <floor+0xf0>)
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	f7f7 f90d 	bl	80001fc <__adddf3>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f7f7 fd4f 	bl	8000a88 <__aeabi_dcmpgt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d0eb      	beq.n	8008fc6 <floor+0x46>
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	bfbe      	ittt	lt
 8008ff2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008ff6:	4133      	asrlt	r3, r6
 8008ff8:	18e4      	addlt	r4, r4, r3
 8008ffa:	ea24 0407 	bic.w	r4, r4, r7
 8008ffe:	2500      	movs	r5, #0
 8009000:	e7e1      	b.n	8008fc6 <floor+0x46>
 8009002:	2e33      	cmp	r6, #51	; 0x33
 8009004:	dd0b      	ble.n	800901e <floor+0x9e>
 8009006:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800900a:	d104      	bne.n	8009016 <floor+0x96>
 800900c:	ee10 2a10 	vmov	r2, s0
 8009010:	460b      	mov	r3, r1
 8009012:	f7f7 f8f3 	bl	80001fc <__adddf3>
 8009016:	ec41 0b10 	vmov	d0, r0, r1
 800901a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009022:	f04f 37ff 	mov.w	r7, #4294967295
 8009026:	40df      	lsrs	r7, r3
 8009028:	4238      	tst	r0, r7
 800902a:	d0f4      	beq.n	8009016 <floor+0x96>
 800902c:	a310      	add	r3, pc, #64	; (adr r3, 8009070 <floor+0xf0>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f8e3 	bl	80001fc <__adddf3>
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	f7f7 fd25 	bl	8000a88 <__aeabi_dcmpgt>
 800903e:	2800      	cmp	r0, #0
 8009040:	d0c1      	beq.n	8008fc6 <floor+0x46>
 8009042:	2c00      	cmp	r4, #0
 8009044:	da0a      	bge.n	800905c <floor+0xdc>
 8009046:	2e14      	cmp	r6, #20
 8009048:	d101      	bne.n	800904e <floor+0xce>
 800904a:	3401      	adds	r4, #1
 800904c:	e006      	b.n	800905c <floor+0xdc>
 800904e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009052:	2301      	movs	r3, #1
 8009054:	40b3      	lsls	r3, r6
 8009056:	441d      	add	r5, r3
 8009058:	45a8      	cmp	r8, r5
 800905a:	d8f6      	bhi.n	800904a <floor+0xca>
 800905c:	ea25 0507 	bic.w	r5, r5, r7
 8009060:	e7b1      	b.n	8008fc6 <floor+0x46>
 8009062:	2500      	movs	r5, #0
 8009064:	462c      	mov	r4, r5
 8009066:	e7ae      	b.n	8008fc6 <floor+0x46>
 8009068:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800906c:	e7ab      	b.n	8008fc6 <floor+0x46>
 800906e:	bf00      	nop
 8009070:	8800759c 	.word	0x8800759c
 8009074:	7e37e43c 	.word	0x7e37e43c
 8009078:	bff00000 	.word	0xbff00000
 800907c:	000fffff 	.word	0x000fffff

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
